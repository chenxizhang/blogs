<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>博客园-陈希章@中国</title><link>http://www.cnblogs.com/chenxizhang/</link><description /><language>zh-cn</language><lastBuildDate>Tue, 16 Nov 2021 10:02:28 GMT</lastBuildDate><pubDate>Tue, 16 Nov 2021 10:02:28 GMT</pubDate><ttl>60</ttl><item><title>新书上市——Microsoft Teams 平台完全手册</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/05/19/14786267.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 19 May 2021 10:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/05/19/14786267.html</guid><description><![CDATA[今年四月份左右开始写的这本书——《Microsoft Teams 平台完全手册》，经过多少个夜晚和周末的奋战，五一期间更是一刻都没有休息，键盘写坏一个，到今天也差不多可以完整地面世了。这本书完整地介绍了Microsoft Teams作为一个平台来说，给客户、用户、管理部门、开发团队带来的机遇，并且通过大量详实的例子进行讲解。全书大约9万字，300页左右。自一开始就免费开放给所有人在线访问，宇宙永久唯一地址：https://teamsplatform.code365.xyz  ，本书暂时不提供纸质版本。]]></description></item><item><title>为博客园文章添加 “分享到Teams”按钮</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/05/03/14726962.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 03 May 2021 00:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/05/03/14726962.html</guid><description><![CDATA[<p> 本文是《Microsoft Teams平台完全手册》的一部分，有兴趣请参考 <a href="https://teamsplatform.code365.xyz">https://teamsplatform.code365.xyz</a> </p>

<div data-editioncontainer="true" class="reset-3c756112--container-960c7c26"><div data-slate-editor="true" data-key="0001b0bad5aa4ec791e18c7671693466" autocorrect="on" spellcheck="true" data-gramm="false" style="outline: currentcolor none medium; white-space: pre-wrap; overflow-wrap: break-word;"><p class="blockParagraph-544a408c" data-key="fef68adfbfbb455b8dd0404f4db63282"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="d89d0b7cc4394d7ca5a4509f6de7da9c"><span data-offset-key="d89d0b7cc4394d7ca5a4509f6de7da9c:0">Microsoft Teams是一个围绕沟通协作的平台，信息分享是很重要的。那么，如果你有一个网站，如何让你的用户很容易地将网站内容分享到Teams呢？</span></span></span></p><p class="blockParagraph-544a408c" data-key="376e8543d6fb4224809fb52d215a5826"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="1957ed0f66274c3eab2361fc8522f955"><span data-offset-key="1957ed0f66274c3eab2361fc8522f955:0">下面通过实例讲解如何实现这个目的。熟悉我的朋友可能知道，我长期撰写技术博客，而博客园也是我认为中国做的很不错的博客平台，默认情况，目前博客园提供的模板中已经包含了一些分享的能力，包括分享到微博、微信等。下面我尝试为它添加分享到Teams的功能。</span></span></span></p><div data-slate-void="true" data-key="d00bcfe94ccc47cab0fd5814c5da49b1"><div><figure data-key="d00bcfe94ccc47cab0fd5814c5da49b1" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZjUwmC06EovnO1sABs%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=74499e1d-323e-40a1-8972-7f77287abee0" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><h1 id="wei-wang-zhan-tian-jia-fen-xiang-dao-teams-an-niu" class="blockHeading-442b4f12--blockHeading1WithMargin-b69d755e" data-key="7f9e2116bbde403db099155623d96be1"><div class="blockHeadingContent-756c9114"><span class="text-4505230f--HeadingH700-04e1a2a3--textContentFamily-49a318e1"><span data-key="855d291e0c1942bd9df95870466c6b06"><span data-offset-key="855d291e0c1942bd9df95870466c6b06:0">为网站添加“分享到Teams”按钮</span></span></span><a href="#wei-wang-zhan-tian-jia-fen-xiang-dao-teams-an-niu" class="blockHeadingAnchor-34f75d78--blockHeadingAnchorHidden-d69b5eda" contenteditable="false"><span class="blockHeadingAnchorIcon-1c2bf3cb"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></g></svg></span></a></div><div role="button" tabindex="0" style="color: rgb(56, 132, 255);" class="reset-3c756112--blockHeadingUp-c32402b2" contenteditable="false"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></g></svg></div></h1><p class="blockParagraph-544a408c" data-key="c5f4b57521704d119b278addd816eb77"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="beadd821259a4e57bf9a985001232585"><span data-offset-key="beadd821259a4e57bf9a985001232585:0">Microsoft Teams提供了一个专门的库，可以很容易地生成分享按钮。下面的完整代码，请大家参考一下，其实逻辑很简单，我在现有分享工具栏的前面插入了一个按钮，并且按照规定定义了有关的属性。</span></span></span></p><div class="reset-3c756112--codeBlockWrapper-56f27afc"><div class="reset-3c756112--copyButtonWrapper-ca591f6e" contenteditable="false"><div aria-label="Copy" role="button" tabindex="0" class="reset-3c756112--touchableView-a079aa82--copyButton-4f9a9412--tooltipped-57ae51fe"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></g></svg></div></div><pre data-key="6f35379160e9436082f303c26b01e2b4" spellcheck="false" class="reset-3c756112--codeBlock-36378b66"><div class="codeLine-a3169fbc" data-key="11e34fe0d97a455c868055ef61e1c05c"><span data-key="16fc02c3276947e39fa42e395b8765ba"><span data-offset-key="16fc02c3276947e39fa42e395b8765ba:0"><span class="prism-token token  comment ">&lt;!--</span></span></span></div><div class="codeLine-a3169fbc" data-key="746ea75c46134ad58711d48abdd81e5b"><span data-key="7abb40c81f054f4f8dd4ded9ae7b1214"><span data-offset-key="7abb40c81f054f4f8dd4ded9ae7b1214:0"><span class="prism-token token  comment ">    概要：在博客园的博客页面底部增加“分享到Teams”的按钮</span></span></span></div><div class="codeLine-a3169fbc" data-key="40ec16a35d6f47e99801832c532f5d77"><span data-key="01c1a571796e43cf8d3b0cb88094a39e"><span data-offset-key="01c1a571796e43cf8d3b0cb88094a39e:0"><span class="prism-token token  comment ">    作者：陈希章</span></span></span></div><div class="codeLine-a3169fbc" data-key="5cc740a970074c44a8505deb3825a54e"><span data-key="53aba7fb1f714bf9af4b382de082dda0"><span data-offset-key="53aba7fb1f714bf9af4b382de082dda0:0"><span class="prism-token token  comment ">    来源：《Microsoft Teams 平台完全手册》</span></span></span></div><div class="codeLine-a3169fbc" data-key="62ce74f666d74a22adab69dcef700f8d"><span data-key="f69498fd506546eeb23b6a559b3dcf83"><span data-offset-key="f69498fd506546eeb23b6a559b3dcf83:0"><span class="prism-token token  comment ">    网址：https://teamsplatform.code365.xyz</span></span></span></div><div class="codeLine-a3169fbc" data-key="df02ff02df324a98b33ba50a05a9f870"><span data-key="dc984f7ecb1a4a3da26e4050d0df1fa9"><span data-offset-key="dc984f7ecb1a4a3da26e4050d0df1fa9:0"><span class="prism-token token  comment ">--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="cc559f003d9d4f73b4d65b4d7b0e7bc1"><span data-key="1244a3abd6ed4bd6aca6ab6ba18a637e"><span data-offset-key="1244a3abd6ed4bd6aca6ab6ba18a637e:0"><span data-slate-zero-width="n">​</span></span></span></div><div class="codeLine-a3169fbc" data-key="0d173152b28c4f80ab4d6c682c7dc0f4"><span data-key="34029f1a12154342b370482e99977f0a"><span data-offset-key="34029f1a12154342b370482e99977f0a:0"><span class="prism-token token 2 comment ">&lt;!--引入Teams的分享脚本库--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="1d91759c16964910acc4b5532e446a8b"><span data-key="b204f2e8bcc545acbaa33a8e157b6ea7"><span data-offset-key="b204f2e8bcc545acbaa33a8e157b6ea7:0"><span class="prism-token token 4 tag  tag  punctuation ">&lt;</span></span><span data-offset-key="b204f2e8bcc545acbaa33a8e157b6ea7:1"><span class="prism-token token 4 tag  tag ">script</span></span></span></div><div class="codeLine-a3169fbc" data-key="917bf954cecf45fba24ea111ad68f78c"><span data-key="b5b367f556cb4a1c9608ee9ee97228c6"><span data-offset-key="b5b367f556cb4a1c9608ee9ee97228c6:0"><span class="prism-token token 4 tag ">  </span></span><span data-offset-key="b5b367f556cb4a1c9608ee9ee97228c6:1"><span class="prism-token token 4 tag  attr-name ">async</span></span></span></div><div class="codeLine-a3169fbc" data-key="8c5f18a7df4c4b83a54cb613b0f7677f"><span data-key="ebe1d10a707a48ebac31f515ccfb8127"><span data-offset-key="ebe1d10a707a48ebac31f515ccfb8127:0"><span class="prism-token token 4 tag ">  </span></span><span data-offset-key="ebe1d10a707a48ebac31f515ccfb8127:1"><span class="prism-token token 4 tag  attr-name ">defer</span></span></span></div><div class="codeLine-a3169fbc" data-key="bc405c4bfa1742fbb4265d326adf4e48"><span data-key="6ef6f45ce5c04f55bb4623259457d399"><span data-offset-key="6ef6f45ce5c04f55bb4623259457d399:0"><span class="prism-token token 4 tag ">  </span></span><span data-offset-key="6ef6f45ce5c04f55bb4623259457d399:1"><span class="prism-token token 4 tag  attr-name ">src</span></span><span data-offset-key="6ef6f45ce5c04f55bb4623259457d399:2"><span class="prism-token token 4 tag  attr-value  punctuation ">="</span></span><span data-offset-key="6ef6f45ce5c04f55bb4623259457d399:3"><span class="prism-token token 4 tag  attr-value ">https://teams.microsoft.com/share/launcher.js</span></span><span data-offset-key="6ef6f45ce5c04f55bb4623259457d399:4"><span class="prism-token token 4 tag  attr-value  punctuation ">"</span></span></span></div><div class="codeLine-a3169fbc" data-key="5d2d9870487c4613a39e0587c36f1a42"><span data-key="5898394031274871986c2163aab13730"><span data-offset-key="5898394031274871986c2163aab13730:0"><span class="prism-token token 4 tag  punctuation ">&gt;</span></span><span data-offset-key="5898394031274871986c2163aab13730:1"><span class="prism-token token 6 tag  tag  punctuation ">&lt;/</span></span><span data-offset-key="5898394031274871986c2163aab13730:2"><span class="prism-token token 6 tag  tag ">script</span></span><span data-offset-key="5898394031274871986c2163aab13730:3"><span class="prism-token token 6 tag  punctuation ">&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="5edc546314d7497f876a14a79478dbfd"><span data-key="8cb249fc5be548cc9d1c95b80ae82ce3"><span data-offset-key="8cb249fc5be548cc9d1c95b80ae82ce3:0"><span class="prism-token token 8 comment ">&lt;!--定义合适的样式--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="d64e8382cf5c4e13bd5216ec6b57ec1f"><span data-key="7a86b0096abf42989e560aa536960ae9"><span data-offset-key="7a86b0096abf42989e560aa536960ae9:0"><span class="prism-token token 10 tag  tag  punctuation ">&lt;</span></span><span data-offset-key="7a86b0096abf42989e560aa536960ae9:1"><span class="prism-token token 10 tag  tag ">style</span></span><span data-offset-key="7a86b0096abf42989e560aa536960ae9:2"><span class="prism-token token 10 tag  punctuation ">&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="ee96efe3eaf2430b983602279fc4da5b"><span data-key="346203b17b274863b1756c38b12ec80d"><span data-offset-key="346203b17b274863b1756c38b12ec80d:0"><span class="prism-token token 11 style language-css">  </span></span><span data-offset-key="346203b17b274863b1756c38b12ec80d:1"><span class="prism-token token 11 style language-css selector ">.divblock</span></span><span data-offset-key="346203b17b274863b1756c38b12ec80d:2"><span class="prism-token token 11 style language-css"> </span></span><span data-offset-key="346203b17b274863b1756c38b12ec80d:3"><span class="prism-token token 11 style language-css punctuation ">{</span></span></span></div><div class="codeLine-a3169fbc" data-key="3c3de44192e84d6bbf46f07775b1b28a"><span data-key="4b2beb9dfe884abea14eacb7b80b3c07"><span data-offset-key="4b2beb9dfe884abea14eacb7b80b3c07:0"><span class="prism-token token 11 style language-css">    </span></span><span data-offset-key="4b2beb9dfe884abea14eacb7b80b3c07:1"><span class="prism-token token 11 style language-css property ">padding</span></span><span data-offset-key="4b2beb9dfe884abea14eacb7b80b3c07:2"><span class="prism-token token 11 style language-css punctuation ">:</span></span><span data-offset-key="4b2beb9dfe884abea14eacb7b80b3c07:3"><span class="prism-token token 11 style language-css"> 10px</span></span><span data-offset-key="4b2beb9dfe884abea14eacb7b80b3c07:4"><span class="prism-token token 11 style language-css punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="42c6003932d145a4b844b6c78b2c72e0"><span data-key="ff5a802947ba41adaa7cda5691e8ad44"><span data-offset-key="ff5a802947ba41adaa7cda5691e8ad44:0"><span class="prism-token token 11 style language-css">    </span></span><span data-offset-key="ff5a802947ba41adaa7cda5691e8ad44:1"><span class="prism-token token 11 style language-css property ">border</span></span><span data-offset-key="ff5a802947ba41adaa7cda5691e8ad44:2"><span class="prism-token token 11 style language-css punctuation ">:</span></span><span data-offset-key="ff5a802947ba41adaa7cda5691e8ad44:3"><span class="prism-token token 11 style language-css"> #c0c0c0 1px dashed</span></span><span data-offset-key="ff5a802947ba41adaa7cda5691e8ad44:4"><span class="prism-token token 11 style language-css punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="65edf2c889694078941b1b87b999b5be"><span data-key="9f40eddb99794a79a63f6ec93c1f4a49"><span data-offset-key="9f40eddb99794a79a63f6ec93c1f4a49:0"><span class="prism-token token 11 style language-css">    </span></span><span data-offset-key="9f40eddb99794a79a63f6ec93c1f4a49:1"><span class="prism-token token 11 style language-css property ">display</span></span><span data-offset-key="9f40eddb99794a79a63f6ec93c1f4a49:2"><span class="prism-token token 11 style language-css punctuation ">:</span></span><span data-offset-key="9f40eddb99794a79a63f6ec93c1f4a49:3"><span class="prism-token token 11 style language-css"> table-cell</span></span><span data-offset-key="9f40eddb99794a79a63f6ec93c1f4a49:4"><span class="prism-token token 11 style language-css punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="a9025235d8304364822df0eba9f6ce9b"><span data-key="e4e70dfc9ba741b79dab263431939bd6"><span data-offset-key="e4e70dfc9ba741b79dab263431939bd6:0"><span class="prism-token token 11 style language-css">    </span></span><span data-offset-key="e4e70dfc9ba741b79dab263431939bd6:1"><span class="prism-token token 11 style language-css property ">vertical-align</span></span><span data-offset-key="e4e70dfc9ba741b79dab263431939bd6:2"><span class="prism-token token 11 style language-css punctuation ">:</span></span><span data-offset-key="e4e70dfc9ba741b79dab263431939bd6:3"><span class="prism-token token 11 style language-css"> middle</span></span><span data-offset-key="e4e70dfc9ba741b79dab263431939bd6:4"><span class="prism-token token 11 style language-css punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="215e576bb5ae4e60afa1e5df106f4bf0"><span data-key="d85e930156c743f5b19ff21efd57abdc"><span data-offset-key="d85e930156c743f5b19ff21efd57abdc:0"><span class="prism-token token 11 style language-css">  </span></span><span data-offset-key="d85e930156c743f5b19ff21efd57abdc:1"><span class="prism-token token 11 style language-css punctuation ">}</span></span></span></div><div class="codeLine-a3169fbc" data-key="47cfd9610d1745bab8352ab618d97440"><span data-key="dcefcd45f1e64d42a289ffa616e055a9"><span data-offset-key="dcefcd45f1e64d42a289ffa616e055a9:0"><span class="prism-token token 12 tag  tag  punctuation ">&lt;/</span></span><span data-offset-key="dcefcd45f1e64d42a289ffa616e055a9:1"><span class="prism-token token 12 tag  tag ">style</span></span><span data-offset-key="dcefcd45f1e64d42a289ffa616e055a9:2"><span class="prism-token token 12 tag  punctuation ">&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="0f9b31afdcff4b82a0d3b4561cadf8bc"><span data-key="784758dd0ac94ce3bebd3fd047653de5"><span data-offset-key="784758dd0ac94ce3bebd3fd047653de5:0"><span class="prism-token token 14 comment ">&lt;!--在页面的合适位置放置这个按钮--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="9f24f4f97fb6464098d25657dfa275ab"><span data-key="4e87f4e385b64686a3a50c894220c426"><span data-offset-key="4e87f4e385b64686a3a50c894220c426:0"><span class="prism-token token 16 tag  tag  punctuation ">&lt;</span></span><span data-offset-key="4e87f4e385b64686a3a50c894220c426:1"><span class="prism-token token 16 tag  tag ">script</span></span><span data-offset-key="4e87f4e385b64686a3a50c894220c426:2"><span class="prism-token token 16 tag  punctuation ">&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="83708de4170a4f94852ee1e6552056c5"><span data-key="c7dfd11c849443d685f9fbf005f784c7"><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:0"><span class="prism-token token 17 script language-javascript">  document</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:2"><span class="prism-token token 17 script language-javascript function ">getElementById</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:4"><span class="prism-token token 17 script language-javascript string ">"green_channel"</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:5"><span class="prism-token token 17 script language-javascript punctuation ">).</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:6"><span class="prism-token token 17 script language-javascript function ">setAttribute</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:7"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:8"><span class="prism-token token 17 script language-javascript string ">"class"</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:9"><span class="prism-token token 17 script language-javascript punctuation ">,</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:10"><span class="prism-token token 17 script language-javascript"> </span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:11"><span class="prism-token token 17 script language-javascript string ">"divblock"</span></span><span data-offset-key="c7dfd11c849443d685f9fbf005f784c7:12"><span class="prism-token token 17 script language-javascript punctuation ">);</span></span></span></div><div class="codeLine-a3169fbc" data-key="86d2ca02c47b426abc73cd6456eda5de"><span data-key="32f2b1c221244d42a9e2f272b36cb9e2"><span data-offset-key="32f2b1c221244d42a9e2f272b36cb9e2:0"><span data-slate-zero-width="n">​</span></span></span></div><div class="codeLine-a3169fbc" data-key="968077a1f031451eb6db63483722ea0f"><span data-key="e93c42af21df45f7b6028943ecd0f932"><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:0"><span class="prism-token token 17 script language-javascript">  </span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:1"><span class="prism-token token 17 script language-javascript keyword ">let</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:2"><span class="prism-token token 17 script language-javascript"> sharebutton </span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:3"><span class="prism-token token 17 script language-javascript operator ">=</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:4"><span class="prism-token token 17 script language-javascript"> document</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:5"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:6"><span class="prism-token token 17 script language-javascript function ">createElement</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:7"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:8"><span class="prism-token token 17 script language-javascript string ">"div"</span></span><span data-offset-key="e93c42af21df45f7b6028943ecd0f932:9"><span class="prism-token token 17 script language-javascript punctuation ">);</span></span></span></div><div class="codeLine-a3169fbc" data-key="1666cb75205d44028adc0c4e3a6ee2d7"><span data-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5"><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:0"><span class="prism-token token 17 script language-javascript">  sharebutton</span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:2"><span class="prism-token token 17 script language-javascript">id </span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:3"><span class="prism-token token 17 script language-javascript operator ">=</span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:4"><span class="prism-token token 17 script language-javascript"> </span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:5"><span class="prism-token token 17 script language-javascript string ">"green_channel_teams"</span></span><span data-offset-key="6e8ae6f4812e4fe4b2edc94a83b6a7b5:6"><span class="prism-token token 17 script language-javascript punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="dc3de847021f47a6a706fd7f7b7dedce"><span data-key="6fe7c95039244b029ba733a72a31e61c"><span data-offset-key="6fe7c95039244b029ba733a72a31e61c:0"><span class="prism-token token 17 script language-javascript">  </span></span><span data-offset-key="6fe7c95039244b029ba733a72a31e61c:1"><span class="prism-token token 17 script language-javascript operator ">&lt;!--</span></span><span data-offset-key="6fe7c95039244b029ba733a72a31e61c:2"><span class="prism-token token 17 script language-javascript">这个属性很重要，决定了分享时提供给Teams的网页链接</span></span><span data-offset-key="6fe7c95039244b029ba733a72a31e61c:3"><span class="prism-token token 17 script language-javascript operator ">--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="ba3832be90e24f50bbd31ea75b27a994"><span data-key="e9fbb506813042eaa0752dd868729c1d"><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:0"><span class="prism-token token 17 script language-javascript">  sharebutton</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:2"><span class="prism-token token 17 script language-javascript function ">setAttribute</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:4"><span class="prism-token token 17 script language-javascript string ">"data-href"</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:5"><span class="prism-token token 17 script language-javascript punctuation ">,</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:6"><span class="prism-token token 17 script language-javascript"> window</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:7"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:8"><span class="prism-token token 17 script language-javascript">location</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:9"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:10"><span class="prism-token token 17 script language-javascript">href</span></span><span data-offset-key="e9fbb506813042eaa0752dd868729c1d:11"><span class="prism-token token 17 script language-javascript punctuation ">);</span></span></span></div><div class="codeLine-a3169fbc" data-key="aeb562eb643a47359ab462c5a8d3ac12"><span data-key="e11504863e5e493fbad3c3115ca5933d"><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:0"><span class="prism-token token 17 script language-javascript">  </span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:1"><span class="prism-token token 17 script language-javascript operator ">&lt;!--</span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:2"><span class="prism-token token 17 script language-javascript">这个按钮必须至少有teams</span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:3"><span class="prism-token token 17 script language-javascript operator ">-</span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:4"><span class="prism-token token 17 script language-javascript">share</span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:5"><span class="prism-token token 17 script language-javascript operator ">-</span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:6"><span class="prism-token token 17 script language-javascript">button 这个样式 </span></span><span data-offset-key="e11504863e5e493fbad3c3115ca5933d:7"><span class="prism-token token 17 script language-javascript operator ">--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="02e5638c862449d9a08df5b193f34683"><span data-key="2ca8b85bbb294ffe8987ecbee59b4186"><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:0"><span class="prism-token token 17 script language-javascript">  sharebutton</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:2"><span class="prism-token token 17 script language-javascript function ">setAttribute</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:4"><span class="prism-token token 17 script language-javascript string ">"class"</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:5"><span class="prism-token token 17 script language-javascript punctuation ">,</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:6"><span class="prism-token token 17 script language-javascript"> </span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:7"><span class="prism-token token 17 script language-javascript string ">"divblock teams-share-button"</span></span><span data-offset-key="2ca8b85bbb294ffe8987ecbee59b4186:8"><span class="prism-token token 17 script language-javascript punctuation ">);</span></span></span></div><div class="codeLine-a3169fbc" data-key="6ea78ce0a90642bcbb53b89132bd2837"><span data-key="ae79605f7a604e97a6bd54be4b93b0a7"><span data-offset-key="ae79605f7a604e97a6bd54be4b93b0a7:0"><span class="prism-token token 17 script language-javascript">  </span></span><span data-offset-key="ae79605f7a604e97a6bd54be4b93b0a7:1"><span class="prism-token token 17 script language-javascript operator ">&lt;!--</span></span><span data-offset-key="ae79605f7a604e97a6bd54be4b93b0a7:2"><span class="prism-token token 17 script language-javascript">你可以通过属性设置分享的一些辅助文字说明</span></span><span data-offset-key="ae79605f7a604e97a6bd54be4b93b0a7:3"><span class="prism-token token 17 script language-javascript operator ">--&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="929da4c5f0e747858d59957ec28f0713"><span data-key="623beebd061d41d39cba8f4f9886d2b0"><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:0"><span class="prism-token token 17 script language-javascript">  sharebutton</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:2"><span class="prism-token token 17 script language-javascript function ">setAttribute</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:4"><span class="prism-token token 17 script language-javascript string ">"data-msg-text"</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:5"><span class="prism-token token 17 script language-javascript punctuation ">,</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:6"><span class="prism-token token 17 script language-javascript"> </span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:7"><span class="prism-token token 17 script language-javascript string ">"分享好文章："</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:8"><span class="prism-token token 17 script language-javascript operator ">+</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:9"><span class="prism-token token 17 script language-javascript"> document</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:10"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:11"><span class="prism-token token 17 script language-javascript">title </span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:12"><span class="prism-token token 17 script language-javascript operator ">+</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:13"><span class="prism-token token 17 script language-javascript string ">" &lt;br /&gt;  "</span></span><span data-offset-key="623beebd061d41d39cba8f4f9886d2b0:14"><span class="prism-token token 17 script language-javascript punctuation ">);</span></span></span></div><div class="codeLine-a3169fbc" data-key="f747106d54684705a7c0ec5bd32c0b5f"><span data-key="d94c549d020b48fca6c6cd86cdae84ac"><span data-offset-key="d94c549d020b48fca6c6cd86cdae84ac:0"><span class="prism-token token 17 script language-javascript">  document</span></span></span></div><div class="codeLine-a3169fbc" data-key="0aee4d76cea2475eb02dbd6880a32570"><span data-key="12d9363f1ed347c8863650b447b6501a"><span data-offset-key="12d9363f1ed347c8863650b447b6501a:0"><span class="prism-token token 17 script language-javascript">    </span></span><span data-offset-key="12d9363f1ed347c8863650b447b6501a:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="12d9363f1ed347c8863650b447b6501a:2"><span class="prism-token token 17 script language-javascript function ">getElementById</span></span><span data-offset-key="12d9363f1ed347c8863650b447b6501a:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="12d9363f1ed347c8863650b447b6501a:4"><span class="prism-token token 17 script language-javascript string ">"blog_post_info"</span></span><span data-offset-key="12d9363f1ed347c8863650b447b6501a:5"><span class="prism-token token 17 script language-javascript punctuation ">)</span></span></span></div><div class="codeLine-a3169fbc" data-key="ef2bb3a817114b57b69bba9390d28bf7"><span data-key="4300d328e77f4b9888f952b7fce2570a"><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:0"><span class="prism-token token 17 script language-javascript">    </span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:2"><span class="prism-token token 17 script language-javascript function ">insertBefore</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:4"><span class="prism-token token 17 script language-javascript">sharebutton</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:5"><span class="prism-token token 17 script language-javascript punctuation ">,</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:6"><span class="prism-token token 17 script language-javascript"> document</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:7"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:8"><span class="prism-token token 17 script language-javascript function ">getElementById</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:9"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:10"><span class="prism-token token 17 script language-javascript string ">"green_channel"</span></span><span data-offset-key="4300d328e77f4b9888f952b7fce2570a:11"><span class="prism-token token 17 script language-javascript punctuation ">));</span></span></span></div><div class="codeLine-a3169fbc" data-key="f3a5c90b6a274485a791b3f90d2d0a97"><span data-key="15cda90a546a435e9d04076a16d42bac"><span data-offset-key="15cda90a546a435e9d04076a16d42bac:0"><span class="prism-token token 17 script language-javascript">  shareToMicrosoftTeams</span></span><span data-offset-key="15cda90a546a435e9d04076a16d42bac:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="15cda90a546a435e9d04076a16d42bac:2"><span class="prism-token token 17 script language-javascript function ">renderButtons</span></span><span data-offset-key="15cda90a546a435e9d04076a16d42bac:3"><span class="prism-token token 17 script language-javascript punctuation ">();</span></span></span></div><div class="codeLine-a3169fbc" data-key="74963ee1029d4a5ba76d074d172fa14f"><span data-key="c6d60b44804846758cb34f783b32d89c"><span data-offset-key="c6d60b44804846758cb34f783b32d89c:0"><span class="prism-token token 17 script language-javascript">  document</span></span></span></div><div class="codeLine-a3169fbc" data-key="736fb9128d214b869bad4253713f1c95"><span data-key="0b9312ef116d4565b08792d7ee700294"><span data-offset-key="0b9312ef116d4565b08792d7ee700294:0"><span class="prism-token token 17 script language-javascript">    </span></span><span data-offset-key="0b9312ef116d4565b08792d7ee700294:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="0b9312ef116d4565b08792d7ee700294:2"><span class="prism-token token 17 script language-javascript function ">getElementById</span></span><span data-offset-key="0b9312ef116d4565b08792d7ee700294:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="0b9312ef116d4565b08792d7ee700294:4"><span class="prism-token token 17 script language-javascript string ">"green_channel_teams"</span></span><span data-offset-key="0b9312ef116d4565b08792d7ee700294:5"><span class="prism-token token 17 script language-javascript punctuation ">)</span></span></span></div><div class="codeLine-a3169fbc" data-key="ed86964a52214f45bc33e90033b9be37"><span data-key="b64219ae0ee34ab2b5cb5f6e9229e9e7"><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:0"><span class="prism-token token 17 script language-javascript">    </span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:1"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:2"><span class="prism-token token 17 script language-javascript function ">getElementsByTagName</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:3"><span class="prism-token token 17 script language-javascript punctuation ">(</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:4"><span class="prism-token token 17 script language-javascript string ">"img"</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:5"><span class="prism-token token 17 script language-javascript punctuation ">)[</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:6"><span class="prism-token token 17 script language-javascript number ">0</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:7"><span class="prism-token token 17 script language-javascript punctuation ">].</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:8"><span class="prism-token token 17 script language-javascript">style</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:9"><span class="prism-token token 17 script language-javascript punctuation ">.</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:10"><span class="prism-token token 17 script language-javascript">marginTop </span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:11"><span class="prism-token token 17 script language-javascript operator ">=</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:12"><span class="prism-token token 17 script language-javascript"> </span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:13"><span class="prism-token token 17 script language-javascript string ">"10px"</span></span><span data-offset-key="b64219ae0ee34ab2b5cb5f6e9229e9e7:14"><span class="prism-token token 17 script language-javascript punctuation ">;</span></span></span></div><div class="codeLine-a3169fbc" data-key="66fa65ca41ae439fbc39b3030a3074ef"><span data-key="351ee50c071b48fba32f0282206c9cc6"><span data-offset-key="351ee50c071b48fba32f0282206c9cc6:0"><span class="prism-token token 18 tag  tag  punctuation ">&lt;/</span></span><span data-offset-key="351ee50c071b48fba32f0282206c9cc6:1"><span class="prism-token token 18 tag  tag ">script</span></span><span data-offset-key="351ee50c071b48fba32f0282206c9cc6:2"><span class="prism-token token 18 tag  punctuation ">&gt;</span></span></span></div><div class="codeLine-a3169fbc" data-key="0819960a6bec4e6bbb0aeebd522f6862"><span data-key="68178fbe79c04ba9b1767120939d40ac"><span data-offset-key="68178fbe79c04ba9b1767120939d40ac:0"><span data-slate-zero-width="n">​</span></span></span></div></pre></div><p class="blockParagraph-544a408c" data-key="7a26d19d635f40b482fe37bb5309ed83"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="d2d90999962442818796699359cae8e2"><span data-offset-key="d2d90999962442818796699359cae8e2:0">现在可以把这段代码添加到我的博客后台设置中，请注意要添加到 “博客侧边栏公告” 这个区域，只有这里是允许JS代码的。</span></span></span></p><div data-slate-void="true" data-key="21699d99aee74dbeb5566aa408c6d140"><div><figure data-key="21699d99aee74dbeb5566aa408c6d140" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZjWLuhyurA0zbBIVCd%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=ebadfc75-c643-4644-87dc-c363b119c70f" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><p class="blockParagraph-544a408c" data-key="517bd0fcd27840cd8ea1b6ef5b82b774"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="8e4b6f3cac72486e81041badd14fe790"><span data-offset-key="8e4b6f3cac72486e81041badd14fe790:0">保存后，打开某个文章，就可以看到下方分享栏会多出来一个Teams的按钮。</span></span></span></p><div data-slate-void="true" data-key="eff8b4ed94454fa2a93cebfa3410366c"><div><figure data-key="eff8b4ed94454fa2a93cebfa3410366c" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZjWmUODVyfz1kfh9nj%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=e94dccec-15c6-4a62-a8fe-ad256d3858fc" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><p class="blockParagraph-544a408c" data-key="2bd9194ce20b4ae1ae171f6284b575a0"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="d0ff8391123342369e6e5584f82e5e29"><span data-offset-key="d0ff8391123342369e6e5584f82e5e29:0">点击此按钮，会自动弹出一个对话框，并且把相关文字和链接都按照规定组合好，你只需要在“共享到”这个框中搜索团队或频道，然后点击 “共享”按钮即可。</span></span></span></p><div data-slate-void="true" data-key="ae73de13d5cb42208ae8da2db81dc24f"><div><figure data-key="ae73de13d5cb42208ae8da2db81dc24f" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZjXR6PnKQHw1Bn7gwZ%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=204b9e7e-de5b-42bd-be9f-a6af1ca26004" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><div style="border-color: rgb(56, 132, 255);" data-key="a2081c21c0e54b86b8d9f3f6d0063300" class="reset-3c756112--blockHint-a7403a60"><div class="reset-3c756112--hintIcon-7c7981dd--paragraph-ae3112d0"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" style="color: rgb(56, 132, 255);" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg></div><p class="blockParagraph-544a408c" data-key="a06c306629294d5e9a3e5e177e9ec329"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="e46edfe488634c0188e32707a3652cc6"><span data-offset-key="e46edfe488634c0188e32707a3652cc6:0">如果当前没有登录Teams，则在显示分享对话框前会提示用户登录。</span></span></span></p></div><h1 id="wang-ye-yuan-shu-ju-ding-yi" class="blockHeading-442b4f12--blockHeading1WithMargin-b69d755e" data-key="5038daabd020470585bb16e3a568bcdb"><div class="blockHeadingContent-756c9114"><span class="text-4505230f--HeadingH700-04e1a2a3--textContentFamily-49a318e1"><span data-key="689f73970f434e43855fecf567311ca1"><span data-offset-key="689f73970f434e43855fecf567311ca1:0">网页元数据定义</span></span></span><a href="#wang-ye-yuan-shu-ju-ding-yi" class="blockHeadingAnchor-34f75d78--blockHeadingAnchorHidden-d69b5eda" contenteditable="false"><span class="blockHeadingAnchorIcon-1c2bf3cb"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></g></svg></span></a></div><div role="button" tabindex="0" style="color: rgb(56, 132, 255);" class="reset-3c756112--blockHeadingUp-c32402b2" contenteditable="false"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></g></svg></div></h1><p class="blockParagraph-544a408c" data-key="45bad31bf61e457faaea9f409de0a340"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="cadde641ca374411b7e9c872e3141725"><span data-offset-key="cadde641ca374411b7e9c872e3141725:0">在分享到Teams时，会尝试进行网页的预览（如上图所示，通过链接可以解析得到标题和内容简介），以便给用户更加好的体验。那么这个是怎么实现的呢？</span></span></span></p><p class="blockParagraph-544a408c" data-key="815b01d32eee4066a0882e10301df159"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="acba6caf9bc64c21975e2348c4f35863"><span data-offset-key="acba6caf9bc64c21975e2348c4f35863:0">其实这个很简单的，你的网页只要按照下面的约定在Head中定义元数据即可。</span></span></span></p><div data-slate-void="true" data-key="e9d827bab32d473ba5784b963d3ace0b"><div><figure data-key="e9d827bab32d473ba5784b963d3ace0b" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZjZR0ra0TCIFOWtJkm%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=47accf84-abac-4c31-aca0-8c0d99ebba0f" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><div style="border-color: rgb(56, 132, 255);" data-key="c1e52c0e0753494f8faef31ddc8b2cff" class="reset-3c756112--blockHint-a7403a60"><div class="reset-3c756112--hintIcon-7c7981dd--paragraph-ae3112d0"><svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" style="color: rgb(56, 132, 255);" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg></div><p class="blockParagraph-544a408c" data-key="c6d18194a0b74e56b1fc6e0d839a6a50"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="93486f003f5c436da96b2d2f2e4b88a5"><span data-offset-key="93486f003f5c436da96b2d2f2e4b88a5:0">考虑到对搜索引擎和不同平台的兼容性，我的建议是两个版本都定义。如果两者都定义了，Teams会以Open Graph定义的为准。</span></span></span></p></div><p class="blockParagraph-544a408c" data-key="51f2759a3feb4c48a3435076c661e15c"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="cb2ab7c305674b30a7e057b9e502f893"><span data-offset-key="cb2ab7c305674b30a7e057b9e502f893:0">我们回过头去看刚才分享的博客园文章源代码</span></span></span></p><div data-slate-void="true" data-key="07047c2fea6f48cba36552fb2165dcad"><div><figure data-key="07047c2fea6f48cba36552fb2165dcad" class="reset-3c756112--figure-c0d4b308" contenteditable="false"><div class="reset-3c756112--figureAlignCenter-2d9bf702"><div class="reset-3c756112--figureLayer-b6ab7c94"><img tabindex="0" src="https://gblobscdn.gitbook.com/assets%2F-MY8lLgYy4a5_AIGOVZf%2F-MZjTPYAa27mamjZENUC%2F-MZj_-fDkg2g0ZCs8oEg%2F%E5%9B%BE%E7%89%87.png?alt=media&amp;token=ee8bb052-2280-443c-90dc-37cd11cccac8" loading="lazy" class="image-52799b3c" style="cursor: zoom-in;"></div></div><div class="reset-3c756112--figureAlignCenter-2d9bf702"></div></figure></div></div><p class="blockParagraph-544a408c" data-key="ba9a63bbb0a64c018d4125239544fce6"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="9ddf04ce281c4a0685e5aa2580ce761e"><span data-offset-key="9ddf04ce281c4a0685e5aa2580ce761e:0">可以看出当前网页定义了title, description,og:description, 所以在分享时能解析出标题和描述，但没有定义缩略图，而且定义标题和内容摘要也不是特别规范。</span></span></span></p><p class="blockParagraph-544a408c" data-key="6c71468576e940dc9c08df6135583a85"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="3fa225d7c9f847128ed7b7ea458247de"><span data-offset-key="3fa225d7c9f847128ed7b7ea458247de:0">感谢博客园提供的平台，以及允许自定义页面的能力。如果默认能把“分享到Teams”的按钮加上，并且在网页元数据这个部分能够规范一点就更好了。</span></span></span></p><p class="blockParagraph-544a408c" data-key="177c95ffd83c474cb6d4d2bf8d0d11b3"><span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"><span data-key="59d1a0a6376840678f4754f347e2a8a4"><span data-offset-key="59d1a0a6376840678f4754f347e2a8a4:0"><span data-slate-zero-width="n">​</span></span></span></span></p></div></div>]]></description></item><item><title>《Microsoft Teams 平台完全手册》第三章出炉</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/05/02/14725387.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 02 May 2021 02:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/05/02/14725387.html</guid><description><![CDATA[《Microsoft Teams 平台完全手册》第三章出炉，站在IT管理运营的角度谈Microsoft Teams平台，有大量的脚本和案例经验，请有兴趣的朋友通过 https://teamsplatform.code365.xyz/it-prespective-of-the-platform 试读，欢迎反馈意见。]]></description></item><item><title>Microsoft Teams平台手册公开邀请试读</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/04/29/14718244.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 29 Apr 2021 07:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/04/29/14718244.html</guid><description><![CDATA[<p style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">这本书的全名为《Microsoft Teams平台完全手册》，可以简称为 《Teams平台手册》，我准备从几个不同的维度，给读者展现完整的Microsoft Teams平台，包括但不仅限于
</span></p><ol><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">Microsoft Teams 平台的起源，架构和能力
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">平台给最终用户带来的价值
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">平台给企业IT部门带来的机遇
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">合作伙伴如何充分利用平台能力开展业务
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">全民开发的时代，结合Power Platform实现更大价值
</span></div></li></ol><p style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">时隔几年写作本书，跟上一次写《Office 365开发入门指南》有明显的不同
</span></p><ol><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">从一开始就以书（而不是博客）的目标来写，在规划内容体系方面早下了一些功夫
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">本书将附带有一些更加具体的实例，包括应用开发中的一些细节和最佳实践经验
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">请教了写作方面的专业人士，学习了一些好的写作经验和规范
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">选择在线平台（Gitbook+Github）进行现代化的编写和版本管理
</span></div></li><li><div style="background: white"><span style="color:#121212; font-family:微软雅黑; font-size:13pt">读者可以随时通过 <a href="https://teamsplatform.code365.xyz" target="_blank"><span style="color:blue; text-decoration:underline">https://teamsplatform.code365.xyz</span></a> 跟踪本书进展，在手机上也能很方便阅读
</span></div></li></ol><p style="background: white"><span style="color:#121212"><span style="font-family:微软雅黑; font-size:13pt">日前，第二章已经完工，有兴趣的朋友可以访问 <a href="https%3A/teamsplatform.code365.xyz/users-prespective-of-the-platform" target="_blank"/></span><span style="color:blue"><span style="font-family:Times New Roman; font-size:1pt">https://</span><span style="font-family:微软雅黑; font-size:13pt">teamsplatform.code365.xyz</span><span style="font-family:Times New Roman; font-size:1pt">/users-prespective-of-the-platform</span><span style="color:#121212; font-family:微软雅黑; font-size:13pt">， 这一章是站在最终用户的角度，讲解了非常多的实用场景，尤其是最后一节，通过一个完整的故事讲解Power Platform 如何跟Teams平台结合，希望对大家有帮助。
</span></span></span></p>]]></description></item><item><title>《Microsoft Teams平台完全手册》开工</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/04/08/14634960.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 08 Apr 2021 13:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/04/08/14634960.html</guid><description><![CDATA[<p><span style="font-family:宋体">上个月，因为一些意外情况，博客园曾经一度无法发布文章，博客园团队日夜奋战解决问题。他们的努力，和坚持，不见得每个人都理解，我是深表敬意的。
</span></p><p><span style="font-family:宋体">最近，我又开始写一本书稿，是关于Microsoft Teams 平台开发完全手册，希望能够在几个月内完成吧，为国内的开发者提供更加易于学习的材料。不用扬鞭自奋蹄，但行好事，莫问前程。与诸公共勉之。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202104/9072-20210408212829118-1297971733.png" alt=""/></p>]]></description></item><item><title>Teams 开发平台月报（2021-03）</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/17/14552354.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 17 Mar 2021 14:26:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/17/14552354.html</guid><description><![CDATA[<h1>摘要
</h1><p>
 </p><p><span style="font-family:宋体">这个月的Teams 开发平台月报如期而至，这个月报会在每月中旬左右根据官方文档整理发布，并适当加上一些我的观察和见解，给大中华地区的合作伙伴或开发者朋友们参考。
</span></p><p><span style="font-family:宋体">本月到目前未知有如下的更新，共四项。下面将逐一展开。<strong>对于开发者来说，最重要的一个更新是："支持对选项卡自定义顺序（Reorder personal app tabs）"
</strong></span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222514180-1031560120.png" alt=""/>
	</p><h1>一、在自适应卡片上支持掩码控件 【开发者预览】
</h1><p>
 </p><p><span style="font-family:宋体">自适应卡片是一种新的媒介形式，它不是简单的文字消息，也不是静止的图片消息，而是具有交互性、图文并茂、且能够在不同的设备（包括移动设备）上面自动适应的卡片，它不仅展示信息，更加有利于用户快速地完成更多工作。
</span></p><p><span style="font-family:宋体">在Teams平台的多个场合，都能使用自适应卡片，例如机器人的交互消息，应用弹出界面，外部信息推送等。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222514944-2083580775.png" alt=""/>
	</p><p><span style="font-family:宋体">自适应卡片的交互性不仅仅体现为可以定义按钮，还可以让用户输入内容，并且根据这个内容与后台交互，反过来又可以更新卡片。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222515841-1739303077.png" alt=""/>
	</p><p><span style="font-family:宋体">上图是让用户输入密码的文本框，在最新的开发者预览版（用户通过Teams客户端开启这个选项），支持对于某些输入框（尤其是密码框）提供掩码。
</span></p><p><span style="font-family:宋体">那么，是如何定义这种格式的卡片呢？很简单，你可以在定义这个控件时，指定isMasked属性为true即可。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222516197-1242800648.png" alt=""/><strong>
		</strong></p><p>
 </p><p><span style="font-family:宋体">更多详情，请参考 <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/cards/cards-format#information-masking-in-adaptive-cards">https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/cards/cards-format#information-masking-in-adaptive-cards</a>
		</span></p><p>
 </p><h1><span style="font-family:宋体">二、个人应用选项卡顺序允许自定义
</span></h1><p>
 </p><p><span style="font-family:宋体">这个问题由来已久。所谓个人应用，是指我们在定义应用时选择scope时，选择了"personal"这个类别的应用。机器人和选项卡应用都可以定义是否为个人应用。问题就出在这里，如果一个应用，既包含了机器人，又包含了选项卡应用，那么默认情况下，机器人也会用一个选项卡呈现，而且这个选项卡会排在第一位。如下图所示
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222518118-2134006444.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">在很多时候，这可能也没有什么问题，有时候可能就很不友好。这取决于你这个应用中，机器人和选项卡应用谁为主次的关系。现在好了，你可以自由决定这些所有的选项卡的顺序了。机器人的那个"Chat"的选项卡，以及最后的"About"选项卡，都是可以调整顺序的。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222522085-1794623758.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">如图所示，你可以在AppStudio中，通过可视化界面对选项卡进行顺序调整（Move up 或者 Move down)，你也可以通过直接编辑Manifest的方式来调整。如下
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222526923-1772585291.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">这个功能目前已经全球可用，请确保你的manifest版本号是1.7以上即可。
</span></p><p><span style="font-family:宋体">更多详情，请参考 <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/create-tab-pages/content-page#reorder-static-personal-tabs">https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/create-tab-pages/content-page#reorder-static-personal-tabs</a>
		</span></p><p>
 </p><h1>三、指定安装应用的默认范围【开发者预览】
</h1><p>
 </p><p><span style="font-family:宋体">这个最新添加的属性，允许我们在manifest中指定当前应用默认安装的范围：个人，团队，群聊，会议等。这样也是为了提供更好的用户安装体验。</span>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222530377-1850286488.png" alt=""/>
	</p><p><span style="font-family:宋体">下图所示是设置了默认添加到团队。这个属性支持的值是：personal, team, groupchat, or meetings.</span>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222531173-1134650715.png" alt=""/>
	</p><p><span style="font-family:宋体">更多详情，请参考 <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/deploy-and-publish/apps-upload#add-a-default-install-scope-and-group-capability">https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/deploy-and-publish/apps-upload#add-a-default-install-scope-and-group-capability</a><strong>
			</strong></span></p><p>
 </p><h1>四、移除了选项卡默认的边距（margin）
</h1><p>
 </p><p><span style="font-family:宋体">这是一个很小的改进，从开发者角度无需特别做什么。简单地说，原先Teams 客户端在展示一个选项卡时，会有一个边距（margin），如下图所示
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222534833-1583576766.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">这样一来呢选项卡页面的尺寸就小了一点，另外就是这样显得跟外面的Teams客户端主界面有些不协调。改进后的显示效果如下
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210317222539653-2062136126.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">那么看起来是不是更加舒服一点呢？
</span></p><p>
 </p><p><span style="font-family:宋体">
		</span> </p>]]></description></item><item><title>一文看懂Power Platform 和 Teams的整合</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/11/14519781.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 11 Mar 2021 10:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/11/14519781.html</guid><description><![CDATA[<p>
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">大家知道，Microsoft Teams 正在飞速增长，目前每天的活跃商业用户大约在1.5亿左右，各地用户通过Teams开会的时间，每天超过50亿分钟；另外一方面，全球财富500强的客户中，超过97%的客户都在使用Microsoft Power Platform，那么这两个平台强强联手起来是一个什么效果呢？能够给客户和用户带来什么样的收益呢？本文将简要地列出他们整合的场景。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182755336-1216186924.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">了解Microsoft Teams，请访问：https://www.microsoft.com/zh-cn/microsoft-teams/group-chat-software, 请注意，目前Teams还没有国内专门的版本，您可以使用国际版，或者永久免费版。
</span></p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182757546-1216092512.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: center; background: white">
 </p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如想了解Microsoft Power Platform，请访问 https://powerplatform.microsoft.com/zh-cn/，值得一提的是，Power Platform中，Power Virtual Agents之外其他三个组件，除了国际版，我们在国内有专门的版本可供选择。【但要注意，下面提到的整合，由于Teams目前只有国际版，所以对应的Power Platform也需要是国际版】
</span></p><p style="background: white">
 </p><p style="text-align: center; background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182758747-1835834118.png" alt=""/><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182759077-635796535.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">言归正传，我们来看看Power Platform四大组件，分别可以在Microsoft Teams中如何进行整合吧。
</span></p><p style="background: white">
 </p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:18pt"><strong>Power Apps + Teams</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">您可以将现有的Power Apps 应用（Canvas应用和Model-Driven应用都可以），作为Teams中的一个频道选项卡应用添加进来，给团队成员使用。这个适合有协作的场景，例如提交团队工作日记，或者任务管理等。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182800051-1736026633.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p><p style="text-align: center; background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">您可以将现有的Power Apps 应用（主要指Canvas应用），作为Teams的个人应用安装，给用户单独使用。这个适合一些自我管理的场景，例如培训学习，知识管理等。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182800637-1565313832.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">直接在Teams中设计和开发PowerApps应用。安装PowerApps这个Teams应用，你可以在不离开Teams的情况下，为你的团队开发和设计新的应用，并且可以一键部署到频道。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182801393-1494116350.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white">
 </p><p style="text-align: center; background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Teams会为PowerApps的开发提供上下文支持，以及性能优化（通过预加载等技术实现），以便使PowerApps运行更加流畅。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182802008-870930573.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p><p style="background: white">
 </p></li></ol><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:18pt"><strong>Power Automate + Teams</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">基于Teams的聊天消息触发 Power Automate的流程。这是一个新功能，我在此前的文章中有介绍，非常强大，有兴趣可以参考。【<a href="http://mp.weixin.qq.com/s?__biz=MzU0Njk2MjYxNw==&amp;mid=2247483878&amp;idx=1&amp;sn=b6fe43f6062f39abebc7d054e9b0ea84&amp;chksm=fb54ec30cc23652617576360353f6d63611f6d4a19eeb01e333b5cfc41f8c882ca8ba81f0ffe&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">Microsoft Teams最新功能发布 – 平台篇</span></a>】，原本这是要通过编写"消息扩展"的方式来实现的场景，现在用PowerAutomate来对接，实现无限可能。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182802763-1165903476.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">通过Power Automate 给 Teams发送卡片消息。这个场景特别适合于跟外部系统对接，例如某个后台系统有一个通知要发送，或者要收集用户的反馈，通过这个来实现，真的是很方便，很松耦合。这已经应用非常广泛了，而且也是我看待低代码平台和现有系统的一个角度，他们是共存的，未来是混搭的。我可以有很多案例分享这样的例子，现在要开发一个新的功能，我一般都会先想一下，哪些环节可以用低代码来实现，哪些不能？让低代码做它擅长的东西，而开发人员可以专注在一些必须写代码实现的环节。关于如何看待低代码趋势和开发人员的未来，我昨天也发了一篇文章，分享了一些自己的浅见，有兴趣可以在访问【<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455456590&amp;idx=1&amp;sn=bc150046d6d63cd26d534e4f6861c4bc&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">谈谈低代码趋势和开发人员的未来</span></a>】
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182803324-1645978246.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在Power Automate中有大量跟Teams相关的模板和组件可以直接用，例如
</span></p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182804268-1961579055.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182804917-279499683.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">直接在Teams中设计、开发、管理 Power Automate的流程。跟上面提到的PowerApps应用一样，你现在也可以在不离开Teams的情况下，进行Power Automate的完整生命周期开发管理了。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182805539-1423856743.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p></li></ol><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:18pt"><strong>Power BI + Teams</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">把现有的Power BI的报表，在Teams的频道选项卡上面使用。这用来分享给团队报表链接，以便快速访问，很方便实现。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182805981-2012675590.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182806430-638666309.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在Teams中自动识别 PowerBI 报表的链接，并且在消息中展示预览。这样可以让用户的沟通更加有效率，相比较一个文本链接而言，显然有下面这样的丰富信息提示，以及相关操作的按钮，会更加直观传递信息，也帮助用户更快地采取行动。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182807164-1760799293.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">随时从PowerBI 的报表发起Teams对话，自动打开分享对话框，把当前的链接和相关的上下文信息带到对话中来，如丝般顺滑的体验。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182807557-1529493021.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182808526-947812359.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在 Teams 中直接管理Power BI 设计、开发、管理 Power BI 资源。
</span></div><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182809860-1590066191.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li></ol><p style="background: white">
 </p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:18pt"><strong>Power Virtual Agents + Teams</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在 Teams 中创建 、调试、发布、管理PVA 机器人。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182810570-1455380503.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li></ol><p style="text-align: center; background: white">
 </p><p style="text-align: center; background: white">
 </p><p style="text-align: center; background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">将现有PVA 机器人添加到 Teams。
</span></div><p style="background: white">
 </p><p style="background: white"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210311182811486-280775727.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p></li></ol><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span> </p>]]></description></item><item><title>Microsoft Teams最新功能发布 – 平台篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/08/14500515.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 08 Mar 2021 08:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/08/14500515.html</guid><description><![CDATA[<p>2021年的Microsoft Ignite大会，发布了一系列跟Microsoft Teams相关的新功能，英文介绍请参考 https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226 ，我这里用中文给大家做一个简单地解读，并加上我的一些批注。
</p><p>这是最后一篇，针对Teams作为一个平台，给广大的用户、开发者、合作伙伴提供的更新。
</p><p>
 </p><h2>现已支持Teams和 Azure Communication Service打通
</h2><p>
 </p><p>可能有些朋友对Azure Communication Service还不太熟悉，这个服务是去年发布的。相传是把Teams中用于聊天，音视频会议等的核心功能，抽取出来放到了Azure上面，作为一个平台服务提供给广大的开发人员和合作伙伴。利用这个服务，你可以构建跟Teams同样等级的协作和沟通体验，是不是想一想都感到开心呢？关于ACS，有兴趣可以参考 <a href="https://azure.microsoft.com/en-us/services/communication-services/">https://azure.microsoft.com/en-us/services/communication-services/</a> 的介绍。
</p><p>本次Ignite大会宣布的一个重量级功能，就是目前已经支持Teams用户跟使用ACS的用户（一般定位于外部用户，上下游客户），可以愉快地进行沟通了。员工可以直接使用Teams，然后客户可以使用ACS的功能模块，不管是嵌在网页中，还是自定义的app中。代码量真的不错，可以有效保护程序猿的头发。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210308164004065-179929637.png" alt=""/>
	</p><p>
 </p><h2>自定义Teams 应用商店
</h2><p>
 </p><p>现在在Teams admin center, 管理员可以定制自己公司的应用商店外观，包括公司logo，背景图，颜色等。请参考 <a href="https://docs.microsoft.com/en-us/MicrosoftTeams/customize-your-app-store">https://docs.microsoft.com/en-us/MicrosoftTeams/customize-your-app-store</a>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210308164008753-977395304.jpg" alt=""/>
	</p><p>
 </p><p>
 </p><h2>基于消息的自动化
</h2><p>
 </p><p>这个功能确实太赞了。Teams 是一个基于聊天展开的协作沟通平台（chat-based Modern workplace）, 聊天不是工作的目的，有效地完成更多工作则是。那么，如何根据某个消息快速地发起一个任务，甚至流程。现在我们可以在消息的快捷菜单中，直接启动某个在Power Automate中定义的流程，真的是太方便了。
</p><p>备注：在此之前，如果我们需要实现这样的功能，可以通过开发消息扩展。那么今天发布的这个调用Power Automate流程的功能，则是把这个能力大大地进行了提升，毕竟这是可以通过不写代码实现的。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210308164035551-411806723.png" alt=""/>
	</p><p>微软去年发布的Power Platform，正逐渐引起越来越多的客户和用户的关注，使用的场景也越来越多。Power Platform的四个组件（Power BI， Power Apps，Power Automate，Power VirtualAgents）都可以和Teams 深度集成，不管你是专业的开发人员，还是业务用户，总有一款应用适合你。
</p><p>我可能会在后期针对Power Platform 如何跟Microsoft Teams结合的场景，做一点专门的展开讨论，敬请关注。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210308164053529-1410927680.png" alt=""/>
	</p><p>
 </p><p>
 </p><p>
 </p>]]></description></item><item><title>Microsoft Teams最新功能发布 - 安全合规和可管理性</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/07/14496666.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 07 Mar 2021 13:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/07/14496666.html</guid><description><![CDATA[<p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:10pt">正在进行的2021年的Microsoft Ignite大会，发布了一系列跟Microsoft Teams相关的新功能，英文介绍请参考 https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226 ，我这里用中文给大家做一个简单地解读，并加上我的一些批注。</span><span style="font-size:10pt">
			</span></span></p><p style="background: white"><span style="color:black; font-family:微软雅黑; font-size:10pt">我将用三四篇文章来分别解读，这是第四篇，针对安全合规，隐私，以及给管理员提供的功能。
</span></p><p style="background: white">
 </p><h2><span style="font-family:微软雅黑">支持针对通话的端到端加密
</span></h2><p>
 </p><p><span style="font-family:微软雅黑">安全无小事。目前Teams 计划在本年底推出针对1对1 通话的端到端加密（<span style="color:#333333; background-color:white"><strong>end-to-end encryption</strong> (E2EE)) 支持，后期还将把此项技术应用到在线会议。
</span></span></p><p><span style="color:#333333; font-family:微软雅黑; background-color:white">与此同时，为了满足不同公司的合规审查的需求，Teams 管理中心将提供针对此项功能的配置。
</span></p><p>
 </p><h2><span style="font-family:微软雅黑; background-color:white">Teams Multi-Geo 支持
</span></h2><p>
 </p><p><span style="color:#333333; font-family:微软雅黑; background-color:white">差不多在两年前，Office 365的核心模块（Exchange Online, SharePoint Online)开始支持Multi-Geo的功能，简单地说就是在同一个组织里，不同用户可以选择将以上模块的数据存在自己所在的区域，而不需要集中在存在某一个特定的区域。这样就为数据主权和相关的法规提供了支持。
</span></p><p><span style="color:#333333; font-family:微软雅黑; background-color:white">很高兴在接下来的四月份，Teams也将开始支持Multi-Geo。
</span></p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214118659-1036884773.png" alt=""/><span style="color:#333333; font-family:微软雅黑; background-color:white">
		</span></p><p>
 </p><h2><span style="font-family:微软雅黑">禁止与会者开启视频
</span></h2><p>
 </p><p><span style="font-family:微软雅黑">这个需求我曾经听到不止一个客户提出。在一些场合，由于部分参会者不熟悉，有意无意地打开自己的视频，可能会导致会议流程受到影响，或者引起尴尬的情况。此前Teams已经有选项可以控制音频（禁音）功能。
</span></p><p><span style="font-family:微软雅黑">这个功能将在年内发布。会议组织者可以选择禁用某个参会者，或者禁用所有参会者打开视频。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214148678-719777383.png" alt=""/><span style="font-family:微软雅黑">
		</span></p><h2>仅邀请者可以参加的会议
</h2><p>
 </p><p><span style="font-family:微软雅黑">这也是一个改进的功能。默认情况下，Teams的会议会有一个链接地址，只要有这个地址的用户，都可以加入会议。但对于一些重要的会议，你可能不希望不相关的人，有意无意地加入会议。之前Teams提供了选项对外部用户加入会议做出控制，例如外部用户，默认是作为来宾加入会议，会议组织者在选项中可以设置，如何让这些来宾加入会议。但对于内部用户，之前没有选项可以控制。
</span></p><p><span style="font-family:微软雅黑">本月即将发布这项功能，可以让会议组织者设置，只有被邀请者才能加入会议。其他人，不管你是内部用户还是外部用户，都将跟上面提到的来宾体验一样，首先会在大厅等候，组织者决定是否允许他们加入会议。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214214734-1131697948.png" alt=""/><span style="font-family:微软雅黑">
		</span></p><h2>Teams中的安全链接
</h2><p>
 </p><p><span style="font-family:微软雅黑">为了减少客户受到网络钓鱼等的攻击，Microsoft 365在多个应用中，尤其是Outlook邮件中，通过安全链接的技术来避免攻击，其实简单地说，就是在原有链接基础上包装一个新的地址（微软特殊网址），这个链接点击后会在云端进行扫描（如下图所示），只有确定没有安全威胁后，才会重定向到实际的链接地址。这个月底之前，Teams 中也将提供安全链接功能，你再也不需要担心消息中的链接安全隐患了。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214216744-1695173902.png" alt=""/><span style="font-family:微软雅黑">
		</span></p><p>
 </p><h2>在Teams中共同编辑加密文件
</h2><p>
 </p><p><span style="font-family:宋体">共同编辑文档是现代协作和沟通中的一个富有价值的场景，尤其是多人、实时编辑的话，这个也是Office 365的传统强项（不管是从技术先进性，还是成熟度方面），不仅仅是在传统的Office客户端，还是Office Online，以及Teams中都可以可以的。
</span></p><p><span style="font-family:宋体">对于加密文件（通过RMS或者</span><span style="color:#333333; font-family:Helvetica; background-color:white">Microsoft Information Protection</span><span style="font-family:宋体">技术），情况有点不同。原先是需要通过Office 客户端才能进行共同编辑，现在也支持在Teams中直接共同编辑了。
</span></p><p>
 </p><h2>全新的Teams Room Managed Service
</h2><p>
 </p><p><span style="font-family:宋体">这个全新开发的，基于人工智能技术的托管服务，可以帮助企业主动地管理所有的Teams Room及相关设备，不仅仅是定期扫描风险、异常情况、缺失补丁等，并且可以主动地采取行动，让管理员的工作效率能够得到大大的提高。
</span></p><p>
 </p><h2>远程设备部署
</h2><p>
 </p><p><span style="font-family:宋体">这个技术我都有点不敢相信。从功能说明是是这样的：我们将大大简化Teams安装设备的安装和配置，不需要物理机器登录，只需要知道MAC地址的话，管理员就可以在管理中心，对这台设备进行注册，然后分配一个可以用于登录的地址，以及一个验证码。用户在拿到移动设备后，输入以上的信息，后续就会自动地完成所有跟Teams相关的配置。
</span></p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214225488-767863343.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><h2>会议实时数据分析
</h2><p>
 </p><p><span style="font-family:宋体">在今年年中（6月底左右），管理员可以实时地查看某个会议的数据分析，及时地给用户反馈，或者解决相关的问题。以往针对这类问题，管理员需要等到会议结束后，通过专门的诊断工具收集相关数据后才能进行分析。</span>
	</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214245405-1203325959.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><h2>匿名化用户数据
</h2><p>
 </p><p><span style="font-family:宋体">这是进一步保护用户隐私的努力。虽然所有的使用量分析、统计报表都是只能由指定的角色人员才能查看，但是在这个月底之前推出一个新功能，是允许管理员启用匿名化用户数据。也就是说，所有的用户敏感信息（PII） 都会被脱敏，例如用户名，邮箱地址，用户id等。
</span></p><p><span style="font-family:宋体">不得不说，这真的是Teams相比较其他产品而言，极其独特的地方。我们始终把用户的安全、隐私、数据合规等放在第一位。
</span></p><p>
 </p><h2>应用风险评估
</h2><p>
 </p><p><span style="font-family:宋体">在年底之前，管理员可以针对某个Teams App进行全方位，多维度的风险评估。如下图所示</span>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214252325-1349326223.png" alt=""/>
	</p><p>
 </p><h2>来宾访问审查
</h2><p>
 </p><p><span style="font-family:宋体">这个月起，新增加了"自动来宾访问审查"功能，会针对不同的团队或组，定期组织审查活动，以确保在保证来宾访问的便捷性和安全性之间取得平衡。
</span></p><p>
 </p><h2>策略打包和分发
</h2><p>
 </p><p>Teams <span style="font-family:宋体">管理中心可以针对不同的功能指定策略，并且将策略指派给用户或某个群组。现在更进一步，管理员可以将多个策略，打包程一个package，然后将这个package分发给对应的用户或某个群组。</span>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307214255335-556792649.png" alt=""/>
	</p><p>
 </p><p>
 </p><p>
 </p><p>
 </p><p><span style="font-family:宋体">
		</span> </p>]]></description></item><item><title>Microsoft Teams 最新功能发布：通话及周边设备</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/07/14495961.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 07 Mar 2021 11:34:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/07/14495961.html</guid><description><![CDATA[<p style="background: white"><span style="color:black; font-family:微软雅黑; font-size:10pt">正在进行的2021年的Microsoft Ignite大会，发布了一系列跟Microsoft Teams相关的新功能，英文介绍请参考 https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226 ，我这里用中文给大家做一个简单地解读，并加上我的一些批注。
</span></p><p style="background: white"><span style="color:black; font-family:微软雅黑; font-size:10pt">我将用三四篇文章来分别解读，这是第三篇，针对通话及Teams周边设备。这两个部分的更新其实很多，非常强大。
</span></p><p style="background: white">
 </p><h2>支持第三方PSTN 提供商无缝接入
</h2><p>PSTN<span style="color:#666666; font-size:10pt"><span style="font-family:宋体; background-color:white">公用电话交换网（</span><span style="font-family:Arial; background-color:white">PSTN——Public Switch Telephone Network</span><span style="font-family:宋体; background-color:white">），即我们日常生活中常用的电话网。Teams有一个很大的优势，就是可以直接作为软电话。微软自己有一套PSTN的网络，但与此同时，如果客户想要现有的提供商，以前可以通过专门的网关设备和相应的解决方案来实现。现在无需任何硬件，直接通过软件方面的配置就能实现。</span></span>
	</p><p><span style="font-family:宋体">详情请见 <a href="https://techcommunity.microsoft.com/t5/microsoft-teams-blog/introducing-operator-connect-and-more-teams-calling-updates/ba-p/2176398">https://techcommunity.microsoft.com/t5/microsoft-teams-blog/introducing-operator-connect-and-more-teams-calling-updates/ba-p/2176398</a>目前这个服务还在Preview的阶段，有望在年底前逐步公开使用。</span>
	</p><p><span style="font-family:宋体">另外，依靠微软自己的PSTN网络，Teams 还支持用电话拨入音频会议（Audio Conference)，例如一个会议，某些人员用Teams的VoIP，但另外一些人直接用电话线路拨进来，毫无违和感。目前这项功能，也可以直接跟第三方PSTN整合，有望在下个季度公开使用。
</span></p><p>
 </p><h2>微软的呼叫计划（Calling Plan）进一步扩展
</h2><p>
 </p><p><span style="font-family:宋体">上面多次提到的微软PSTN，可以理解为微软自己在全球建设的一套基础的通话网络。在今年6月份之前，微软将完成新增8个区域建设，包括新西兰，新加坡，罗马尼亚，捷克，匈牙利，芬兰，挪威，斯洛伐克。届时全球将有一共26个市场的客户可以直接使用微软的Call Plan, 无需额外的基础建设。
</span></p><p>
 </p><h2>客服中心和合规录制解决方案认证
</h2><p>
 </p><p><span style="font-family:宋体">基于Microsoft Teams,企业可以实现自己的客户中心，目前已经有多家合作伙伴的"客户中心"方案得到了认证。另外，Teams的通话或会议录制，也可以通过第三方的解决方案来实现定制化的合规保障，目前这块也已经有多个认证过的解决方案。分别请参考
</span></p><p><a href="https://cloudpartners.transform.microsoft.com/contact-center-solutions">https://cloudpartners.transform.microsoft.com/contact-center-solutions</a>
	</p><p><a href="https://cloudpartners.transform.microsoft.com/compliance-recording-solutions">https://cloudpartners.transform.microsoft.com/compliance-recording-solutions</a>
	</p><p>
 </p><h2>在不同设备之间无缝切换通话
</h2><p>
 </p><p><span style="font-family:宋体">这是我非常期待的一个功能，我们都知道Teams既可以在电脑上接听通话，也可以在手机或者其他设备上。现在甚至支持，你在通话过程中，一键无感切换。这个功能将在近一两个月内可用。
</span></p><p>
 </p><h2>低数据量模式
</h2><p>
 </p><p><span style="font-family:宋体">如果你的设备一直在WIFI的模式下，或者你已经属于先富起来的一部分5G的用户，你可能不会有这个需求。但Teams 现在支持低数据量模式，以便给某些网络条件不佳的用户更好的体验。用户可以根据自己的具体情况，设置 "一直使用（Always）"还是"仅在数据模式下（only while on cellular networks.）"
</span></p><p>
 </p><h2>Teams Room设备上支持更多视图
</h2><p>
 </p><p><span style="font-family:宋体">现在Teams Room设备上支持Together mode 和Large Gallery 视图。如下图所示。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307193344778-911468904.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><h2>智能区别讲话者
</h2><p>
 </p><p><span style="font-family:宋体">通过一些第三方设备（如下面两款），结合"</span><span style="color:#333333; font-family:Helvetica; background-color:white">Microsoft Teams Intelligent speaker</span><span style="font-family:宋体">"的技术，即便远程开会，会议室中有多个与会者，远程的同事也可以清晰地知道具体是谁在讲话。目前支持最多识别10个人的声音。这个功能在自动字幕，以及会议摘要等场景还特别有用。我还没有用过，但挺期待的。</span>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307193345309-786937290.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><h2>Teams 面板（Teams Panes）
</h2><p>
 </p><p><span style="font-family:宋体">这是一块简单的面板，可以显示某个会议室的忙闲状态，会议信息，一般是安装在会议室的门口墙上。用户甚至可以直接通过这个面板预定某个临时会议。目前有两个合作伙伴提供这种面板，他们分别是 </span><span style="color:#333333"><span style="font-family:Helvetica; background-color:white">Crestron </span><span style="font-family:宋体; background-color:white">和</span><span style="font-family:Helvetica; background-color:white"> Yealink.</span></span><span style="font-family:宋体">
		</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307193345684-1281802584.png" alt=""/><span style="font-family:宋体"><strong>
			</strong></span></p><h2>Teams 显示设备功能增强（Teams Display)
</h2><p>
 </p><p><span style="font-family:宋体">这种设备，特别适合放在桌上（最好有独立办公室），可以完成完整的Teams 呼叫和会议体验。增强功能包括：修改背景图片，会议互动，消息回复，以及可以通过Cortana 进行智能操作。目前支持的设备有联想的ThinkSmart view.
</span></p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210307193346249-235146845.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><p>
 </p><p>
 </p><p>
 </p><p>
 </p><p>
 </p>]]></description></item><item><title>Microsoft Teams 最新功能发布：协作篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/05/14485626.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 05 Mar 2021 05:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/05/14485626.html</guid><description><![CDATA[<p>正在进行的2021年的Microsoft Ignite大会，发布了一系列跟Microsoft Teams相关的新功能，英文介绍请参考 https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226 ，我这里用中文给大家做一个简单地解读，并加上我的一些批注。
</p><p>我将用三四篇文章来分别解读，这是第二篇，针对聊天和协作相关的场景。
</p><ol><li><div><strong>Microsoft Teams Connect 显著加强内外部协作
</strong></div><p>
 </p><p>我们现在处于一个高度社交化的社会。Microsoft Teams发布以来，在内部沟通和协作这块表现非常好，但与此同时，我们也一直听到很多客户的反馈，希望能降低内外部协作的门槛。
</p><p>
 </p><p>试想一下，你是一个项目经理，你可能同时负责不同的客户的多个项目，每个项目呢，又需要邀请内部部门的同事，以及外部的客户、供应商一起交流。那么以前的做法是怎样呢？可能每个客户建一个团队，然后每个项目，建一个频道，对吧？相信我，如果项目一多起来，你很快就要崩溃了，而且这里面还涉及到一些更细粒度的权限控制的需求，例如A同事，你只需要他参与甲项目，而不需要知道乙项目的信息。那么怎么做呢？虽然Teams后来推出了私有频道（Private Channel）, 但要做好控制，是没有那么方便的，而且要加入某个Private Channel, 你必须要先加入团队，而在一个团队里面，大家是相互能知道的。
</p><p>
 </p><p>还有一个场景，你有一些团队资料，希望更加灵活地共享给其他部门的同事，以及基于这些资料随时进行沟通，但你又不想邀请这些同事加入你们私有的这个团队。那么该怎么办呢？
</p><p>
 </p><p>我们现在提供了一个新的频道类别：<strong>共享频道</strong>。这个频道可以很容易地分享给其他部门，或者外部的用户。这些用户不需要加入你的团队，外部用户也不需要作为Guest加入你的公司，也不需要在Teams中切换组织就能直接聊天，一切都是更加私密，又更加简单的体验。我可以肯定，这将让Teams 的沟通协作上到一个新的台阶。
</p><p>
 </p><p>未来，这个功能，甚至会作为和团队同样级别。也就是说，你甚至都不要建立一个团队，就可以创建这样的内外部协作的方式。并且，以后这个功能，可以跟Teams 个人版（Teams for life，支持用个人邮箱登录，手机号登录等）直接对接，完全打通内外部协作。
</p><p>
 </p><p><strong>该功能预计将在本年晚些时候发布</strong>。我已经使用过这个功能，确实挺方便的。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210305132243195-1810867140.png" alt=""/>
			</p><p>
 </p></li><li><div><strong>Dynamics 365 在Teams 中的深度集成
</strong></div><p>
 </p><p>作为微软在商业运营方面的一款重要产品，Dynamics 365为财务、销售、市场、服务等提供全访问的支撑，可以涵盖到CRM 和 ERP 的完整流程。自动Microsoft Teams推出后，Dynamics 365也立即提供了官方应用，我记得是包含了一个机器人和一个简单的门户。现在这一版更新，功能更全，而且是免费的，如果贵公司已经有Dynamics 365的授权，可以立即开启权益了。
</p><p>
 </p><p>该功能预计四月份跟大家见面。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210305132247047-558110571.png" alt=""/>
			</p><p>
 </p></li><li><div><strong>加强版的Tasks 应用，可以更好地发布和管理任务
</strong></div><p>
 </p><p>我们每天的工作其实就是一个一个任务组成的。在Microsoft 365的家族中，一直也有多个工具可以帮助用户进行任务的管理。例如Outlook, Planner, To-Do等。Teams发布一段时间后，产品组计划推出一个统一的应用，叫做Tasks，它可以用来聚合所有上面提到的多个来源定义的任务，并且提供跟团队（Team）结合起来进行任务管理。这次提供的加强版，主要体现在任务发布（Task Publish）的功能。这个特别适合由上而下分配的任务，并且可以很方便地对任务完成情况进行跟踪。
</p><p>
 </p><p>这个功能的设置，需要用到一些脚本，详情请参考 <a href="https://docs.microsoft.com/en-us/microsoftteams/manage-tasks-app#task-publishing">https://docs.microsoft.com/en-us/microsoftteams/manage-tasks-app#task-publishing</a> 和 <a href="https://docs.microsoft.com/en-us/microsoftteams/set-up-your-team-hierarchy">https://docs.microsoft.com/en-us/microsoftteams/set-up-your-team-hierarchy</a> ，不得不说，门槛还是有点高的。但是对于一个企业级的应用这个角度，如果你的公司确实需要用到这种分级的任务发布和跟踪，那么做这一点投入也是很值得的。
</p><p>
 </p><p><strong>这个功能预计在三月底之前跟大家见面</strong>。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210305132252746-949688335.png" alt=""/>
			</p><p>
 </p><p>
 </p></li><li><div><strong>携最新模板功能发布的审批（Approvals）应用
</strong></div><p>除了基于任务的协作，在企业的日常工作中，我们还会有很多的流程，不管是复杂的，还是简单的。Approvals将成为在Teams 中的官方审批应用，在几个月前投向早期客户群体验时，收获到了非常好的反馈，那个版本很简单，带有一些内置的表单。这一次重磅发布的可供用户自主定制模板的功能，使用了很多优化的技术，来自中国研发团队，期待这一款应用能帮助各种类型的企业客户，轻松地完成各种审批流程。
</p></li></ol><p>    这个功能将在四月份跟大家见面。
</p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210305132256041-1029361013.gif" alt=""/>
	</p><ol><li><div><strong>移动版本功能增强
</strong></div><p>
 </p><p>平胸而论，我认为Teams在移动版本上面还有不少提升的空间，但值得高兴的是，我们一直在改进。这次带来了更多一些社交化的元素，更好的搜索体验，离线访问文件等等。希望还要加油啊。
</p><p>
 </p><p>我之前写过一篇文章介绍移动端支持扫码功能的，有机会可以参考  <a href="https://www.cnblogs.com/chenxizhang/p/14417399.html">https://www.cnblogs.com/chenxizhang/p/14417399.html</a>
			</p><p>
 </p><p>备注：Teams移动版本安卓版本，在中国市场上因为一些众所周知的原因，可能在版本更新、消息通知等方面存在一定的问题。这些问题，我知道我们也有专人一直在努力解决。
</p><p>
 </p><p>
 </p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210305132300943-802069570.png" alt=""/></p></li></ol>]]></description></item><item><title>Microsoft Teams 2021最新功能发布解读 – 会议篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/03/04/14479625.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 04 Mar 2021 04:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/03/04/14479625.html</guid><description><![CDATA[<p>正在进行的2021年的Microsoft Ignite大会，发布了一系列跟Microsoft Teams相关的新功能，英文介绍请参考 <a href="https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226">https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-microsoft-ignite-2021/ba-p/2118226</a> ，我这里用中文给大家做一个简单地解读，并加上我的一些批注。
</p><p>我将用三四篇文章来分别解读，这一篇先讲会议功能（包括新的，和改进的功能）
</p><ol><li><div><strong>动态视图</strong>
			</div><p>
 </p><p>根据当前参与者人数，有没有打开视频，有没有分享桌面等信息，动态调整与会者看到的视图。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125051925-1243342972.gif" alt=""/>
			</p><p>
 </p></li><li><div><strong>视图切换
</strong></div><p>
 </p><p>提供了多个视图切换的选项，包括Gallery ，Large Gallery, Together mode, 搭配Focus, Full Screen总有一款适合你。
</p><p>不得不说，这个会议视图的功能，设计也是一改再改，众口难调，包括有一阵把Full screen拿掉了，广大的用户抱怨很多，现在又加回来了。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125058249-721341567.png" alt=""/>
			</p><p>
 </p><p>
 </p></li><li><div><strong>演讲者模式</strong>
			</div><p>这个功能太需要了。就是可以在你做演讲时，可以把你的视频跟演示内容一起显示（有三种模式：Standout, Reporter, Side-by-side），我觉得都不错。
</p><p>【备注】在我的版本中，还没有看到这个功能，文章里面说是很快可用了。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125101285-78757451.gif" alt=""/>
			</p><p>
 </p></li><li><div><strong>PowerPoint Live 功能
</strong></div><p>
 </p><p>我们很多人在做演讲时，都习惯在PowerPoint 演示文稿中添加备注信息，以便自己更好地展开解说。以前在投影时，我们可以启用演示者模式，这样演讲者可以看到备注，而观众看到的是全屏的效果，两全其美。现在这个功能，在你用Teams 开会时也可以同样拥有了。
</p><p>
 </p><p>【备注】在我的版本中，还没有看到这个功能，文章里面说是很快可用了。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125105588-1346476912.gif" alt=""/>
			</p><p>
 </p></li><li><div><strong>会议中的气氛功能
</strong></div><p>
 </p><p>这个功能特别适合在开大型会议时，可以用更加醒目的方式显示用户的点赞、鼓掌、爱心发送等。下图中有点像浪潮一样的效果，看起来不错啊。照这样的思路发展下去，如果哪一天，在Teams 会议中出现弹幕，我是不会惊讶的。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125108029-1081445749.gif" alt=""/>
			</p><p>
 </p></li><li><div><strong>大型市场活动：会议注册和调查功能，直播功能增强
</strong></div><p>如果你要搞一场市场活动，可能涉及到会议注册和问卷调查的功能。以后你可以直接创建 Webinar 类型的会议。如下图所示。这个功能还是比较接地气的，也解决了很多实际的问题，以前要分散在几个系统去做的，现在一站式完成。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125110305-993239198.gif" alt=""/>
			</p><p>目前这种Webinar 的人数规模支持1000人，而且可以进行更加丰富的权限控制。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125119779-1746275588.png" alt=""/>
			</p><p>而之前就支持的在线直播的人数为10000人，现在扩容到20000人，并且进一步增强了参与者报表等功能。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125121921-309231729.png" alt=""/>
			</p><p>
 </p></li><li><div>和Dynamics 365整合
</div><p>
 </p><p>把市场活动会议的后续跟进，整合起来，这当然也是一个很好的应用场景。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202103/9072-20210304125123125-1125822216.gif" alt=""/>
			</p></li></ol>]]></description></item><item><title>2021-02：Teams开发平台更新概述</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/19/14417399.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 19 Feb 2021 09:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/19/14417399.html</guid><description><![CDATA[<p><span style="font-family:宋体">作为2021年工作计划的一部分，我会在每月的第三个星期五发布Teams开发平台的更新报告，给大家整理和讲解最新的平台功能，以及特色场景。这是第一篇文章，我会挑选截至到2月份一些重要的更新，以后每月的更新，将针对当月的更新进行说明。
</span></p><h2>本期亮点
</h2><ol><li><span style="font-family:宋体">移动端支持录音，录像，选择文件，以及二维码扫码识别了。</span>
		</li><li><span style="font-family:宋体">会议工作区支持定制开发了。</span>
		</li><li><span style="font-family:宋体">Incoming webhook支持自适应卡片消息了。</span>
		</li></ol><p>
 </p><h2>2/9/2021 新增了对移动设备Native能力的更多支持。
</h2><p>
 </p><p style="margin-left: 36pt"><span style="font-family:宋体">这次一股脑地推出了多项服务，包括支持录音，录像，拍照，选择文件，以及最重要的，终于<span style="color:red">支持扫码了</span>。注意，这些能力仅对移动设备有效。
</span></p><p style="margin-left: 36pt"><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/device-capabilities/device-capabilities-overview">https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/device-capabilities/device-capabilities-overview</a><strong>
		</strong></p><p style="margin-left: 36pt">要使用这些功能，需要在manifest文件中申请media这个权限。如下所示
</p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175824511-1032317791.png" alt=""/>
	</p><p style="margin-left: 36pt">
 </p><p style="margin-left: 36pt">如果要实现扫码功能，可以使用Teams SDK提供的scanBarcode方法。
</p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175825329-940803387.png" alt=""/>
	</p><p style="margin-left: 36pt">其他媒体功能如下：<a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/device-capabilities/mobile-camera-image-permissions#media-capability-apis">https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/device-capabilities/mobile-camera-image-permissions#media-capability-apis</a>
	</p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175826448-962247193.png" alt=""/>
	</p><p>
 </p><h2>11/30/2020 单点登录支持
</h2><p>
 </p><p>    <span style="font-family:宋体">单点登录的开发，一直也是Teams Tab应用开发的难点。后台团队一直在努力，想通过自动生成代码的方式来简化。其根本的原因是因为Teams的应用开发，需要依赖AAD的身份认证，而真正搞明白AAD的人可能并不多，而且很多人也没有那么多耐心去学习。
</span></p><p><span style="font-family:宋体">我个人认为，这仍然是治标不治本的做法。也许以后可以有更好的做法吧。目前有这个，也算聊胜于无。
</span></p><p><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/toolkit/visual-studio-code-tab-sso">https://docs.microsoft.com/en-us/microsoftteams/platform/toolkit/visual-studio-code-tab-sso</a><strong>
		</strong></p><p>
 </p><p><span style="font-family:宋体">这个更新提到的Microsoft Teams Toolkit, 是指在Visual Studio Code中的一个插件。你通过它可以生成项目，然后如果你需要实现SSO，你只需要勾选一个选项，它会自动帮你生成一堆代码。Again，我并不喜欢这些代码。
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175827583-69054897.png" alt=""/>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175829215-1889351838.png" alt=""/>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175832588-1436027089.png" alt=""/>
	</p><p>
 </p><h2><span style="font-family:宋体">11/10/2020</span> Teams<span style="font-family:宋体">机器人设计规范
</span></h2><p>
 </p><p style="margin-left: 36pt"><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/design/bots">https://docs.microsoft.com/en-us/microsoftteams/platform/bots/design/bots</a>
	</p><p style="margin-left: 36pt"><span style="font-family:宋体">这里有很多不错的实践经验，可以让你在规划和设计机器人时事半功倍。</span>
	</p><p style="margin-left: 36pt"><span style="font-family:宋体">为了帮助开发者可以更好地设计UI/UX， 产品组提供了一套公开的UI 库，和范例，请通过下面的地址取用
</span></p><p style="margin-left: 36pt"><a href="https://www.figma.com/community/file/916836509871353159">https://www.figma.com/community/file/916836509871353159</a>
	</p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175835454-1367822066.png" alt=""/>
	</p><h2><span style="font-family:宋体">9/18/2020 会议工作区扩展 【预览】
</span></h2><p>
 </p><p style="margin-left: 36pt"><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/apps-in-teams-meetings/create-apps-for-teams-meetings?tabs=dotnet">https://docs.microsoft.com/en-us/microsoftteams/platform/apps-in-teams-meetings/create-apps-for-teams-meetings?tabs=dotnet</a>
	</p><p style="margin-left: 36pt"><span style="font-family:宋体">众所周知，会议是Teams的一个核心功能，用户的活跃度很高。所以，如果能对会议这个工作区进行扩展，无疑将带来很多很有意思的场景（不管是会前，会中，还是会后）。这次的更新中，我们看到如下的能力。
</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175836668-194912268.png" alt=""/><span style="font-family:宋体">
		</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175845217-1699197015.png" alt=""/><span style="font-family:宋体">
		</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175849602-387766961.png" alt=""/><span style="font-family:宋体">
		</span></p><p style="margin-left: 36pt"><span style="font-family:宋体">在你的应用中，可以通过下面的API进行交互设计
</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175850390-1350713561.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><h2>8/12/2020 在Incoming webhook中支持自适应卡片
</h2><p>
 </p><p style="margin-left: 36pt"><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using#send-adaptive-cards-using-an-incoming-webhook">https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using#send-adaptive-cards-using-an-incoming-webhook</a>
	</p><p style="margin-left: 36pt"><span style="font-family:宋体">这是我很喜欢的一个更新。现在终于可以像下面这样发送自适应卡片消息了。以前也能发卡片消息，但那个消息格式是老的，跟新的自适应卡片不同。
</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175851022-707724405.png" alt=""/><span style="font-family:宋体">
		</span></p><p style="margin-left: 36pt"><span style="font-family:宋体">现在发送的语法如下
</span></p><p style="margin-left: 36pt"><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175851565-2020823484.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">    上图中红色区域就是填入你需要发送的卡片定义即可。不要担心，你只需要在<a href="https://adaptivecards.io/designer/">https://adaptivecards.io/designer/</a> 设计好卡片，并且复制出来json，然后粘贴过来就可以了。
</span></p><p><span style="font-family:宋体">    <img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210219175855380-1842239005.png" alt=""/>
		</span></p><p style="margin-left: 36pt">
 </p><p style="margin-left: 36pt">
 </p><p style="margin-left: 36pt">
 </p><p style="margin-left: 36pt">
 </p><p style="margin-left: 36pt">
 </p>]]></description></item><item><title>开发Microsoft Teams选项卡应用安全注意事项</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/18/14412866.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 18 Feb 2021 09:48:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/18/14412866.html</guid><description><![CDATA[<p><span style="font-family:宋体">我们都知道，为了方便广大的开发人员快速开发Microsoft Teams选项卡应用，微软提供了一个JS SDK，你可以通过这里 <a href="https://docs.microsoft.com/en-us/javascript/api/overview/msteams-client?view=msteams-client-js-latest">https://docs.microsoft.com/en-us/javascript/api/overview/msteams-client?view=msteams-client-js-latest#:~:text=Microsoft%20Teams%20JavaScript%20client%20SDK%201%20Finding%20the,can%20use%20import%20syntax%20to%20import%20specific%20modules</a>. 了解更多详情。
</span></p><p><span style="font-family:宋体">在这个SDK中，我们经常会用Context对象去获取当前的上下文信息，例如用户信息啦，所在的团队或频道信息等等。
</span></p><p><a href="https://docs.microsoft.com/en-us/javascript/api/@microsoft/teams-js/context?view=msteams-client-js-latest"><span style="font-family:宋体">https://docs.microsoft.com/en-us/javascript/api/@microsoft/teams-js/context?view=msteams-client-js-latest</span></a><span style="font-family:宋体">
		</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210218180337671-2090285310.png" alt=""/><span style="font-family:宋体">
		</span></p><p><span style="font-family:宋体">但是这里其实有一个潜在的安全问题：如果这个网页不是在Teams中运行，而是被别有用心的人员在外部套了一个iframe，并且模拟了一个类似的Context对象的话，有可能进行安全方面的攻击。
</span></p><p><span style="font-family:宋体">那么，如果设计一个更加安全的机制，不允许我们的网页被其他系统随意地用iframe嵌入，只允许在Teams中进行嵌入呢？
</span></p><p><span style="font-family:宋体">可以通过X-Frame-options这个服务器选项来控制。请参考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</a>
		</span></p><p><span style="font-family:宋体">但这个选项目前要么设置所有域都不能访问（DENY)，要么设置只有当前网站能嵌入（SAMEORIGIN)
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210218180338288-1494903324.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><p><span style="font-family:宋体">第三个选项现在是不推荐使用的，取而代之的是一个新的HTTP Header，叫做CSP， Content-Security-Policy
</span></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors"><span style="font-family:宋体">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors</span></a><span style="font-family:宋体">
		</span></p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210218180340863-2110731227.png" alt=""/><span style="font-family:宋体">
		</span></p><p>
 </p><p><span style="font-family:宋体">你需要将如下几个域名加入进去
</span></p><p>teams.microsoft.com
</p><p>*.teams.microsoft.com
</p><p>*.skype.com *.sharepoint.com
</p><p>outlook.office.com
</p><p>and the current host
</p><p>
 </p><p>
 </p><p><span style="font-family:宋体">如果你是用nodejs来开发，现在也有一个简单的做法来实现这样的需求
</span></p><p><a href="https://www.npmjs.com/package/express-msteams-host">https://www.npmjs.com/package/express-msteams-host</a>
	</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210218180341303-1504059664.png" alt=""/>
	</p><p>
 </p><p><span style="font-family:宋体">在具体的代码中，还可以很容易地检测当前是不是在Teams中运行，如下范例代码
</span></p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210218180343485-107950317.png" alt=""/></p>]]></description></item><item><title>自定义Visual Studio Code任务命令</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/11/14398022.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 11 Feb 2021 10:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/11/14398022.html</guid><description><![CDATA[<p>在这一篇文章（<a href="https://www.cnblogs.com/chenxizhang/p/14397983.html">.NET Core项目自动化测试和代码覆盖率审查</a>）中，我提到了在项目中运行测试的命令。大致是这样的：
</p><p>dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./lcov.info
</p><p>
 </p><p>但这里有一个小问题，就是是不是每个项目中，或者每次要运行测试时都需要去写这么一段呢。当然可以通过想办法来解决。
</p><p>你可以通过找到 .vscode这个目录中的tasks.json文件，添加如图所示这一小段来定义一个任务
</p><p>    {
</p><p>      "label": "test",
</p><p>      "command": "dotnet",
</p><p>      "type": "process",
</p><p>      "args": [
</p><p>        "test",
</p><p>        "/p:CollectCoverage=true",
</p><p>        "/p:CoverletOutputFormat=lcov",
</p><p>        "/p:CoverletOutput=./lcov.info"
</p><p>      ],
</p><p>    },
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211185500398-1541022841.png" alt=""/>
	</p><p>要运行这个任务，可以按下CTRL+SHIFT+P 调出命令窗口，然后输入Run task，然后回车，可以看到它解析得到的任务列表
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211185500901-481006218.png" alt=""/>
	</p><p>选择test，回车再回车，就可以看到这个命令在terminal中开始运行了
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211185501250-81960635.png" alt=""/>
	</p><p>你甚至还可以通过定义快捷键的方式来减少步骤，例如我其实是定义了快捷键到Run Task这个命令。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211185501489-1351230656.png" alt=""/>
	</p><p>
 </p><p>
 </p><p>
 </p>]]></description></item><item><title>.NET Core项目自动化测试和代码覆盖率审查</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/11/14397983.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 11 Feb 2021 10:05:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/11/14397983.html</guid><description><![CDATA[<p>这篇文章给大家分享一下，如何配置.NET Core项目自动化测试和代码覆盖率审查。
</p><p>基本知识，请参考这里： <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test">https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test</a>
	</p><h2>环境准备：
</h2><p>演示项目基于Visual Studio Code，并且安装如下插件
</p><ol><li>Coverage Gutters
</li><li>Coverlet
</li></ol><p>我有如下的项目结构
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180428234-1714744034.png" alt=""/>
	</p><h2>本地开发环境运行测试并查看代码覆盖率
</h2><p>运行 dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./lcov.info
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180429269-886145710.png" alt=""/>
	</p><p>点击状态栏中的Watch 按钮
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180429638-1006797314.png" alt=""/>
	</p><p>这样就能快速进入源代码中查看哪些代码覆盖，哪些代码没有覆盖。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180432449-389690191.png" alt=""/>
	</p><p>下图红色标出的代码是没有覆盖到的。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180434204-1286395821.png" alt=""/>
	</p><p>
 </p><h2>配置CI 系统自动测试和计算覆盖率
</h2><p>我这里用 的是Azure DevOps，希望每次pipeline运行时能了解测试成功率和代码覆盖率。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180434989-1957488221.png" alt=""/>
	</p><p>你可以像下面这样定义Pipeline
</p><p>
 </p><p># ASP.NET
</p><p># Build and test ASP.NET projects.
</p><p># Add steps that publish symbols, save build artifacts, deploy, and more:
</p><p># https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
</p><p>
 </p><p>trigger:
</p><p>- main
</p><p>
 </p><p>pool:
</p><p>  vmImage: 'windows-latest'
</p><p>
 </p><p>variables:
</p><p>  solution: '**/*.sln'
</p><p>  buildPlatform: 'Any CPU'
</p><p>  buildConfiguration: 'Release'
</p><p>
 </p><p>steps:
</p><p>- task: NuGetToolInstaller@1
</p><p>
 </p><p>- task: NuGetCommand@2
</p><p>  inputs:
</p><p>    restoreSolution: '$(solution)'
</p><p>
 </p><p>- task: VSBuild@1
</p><p>  inputs:
</p><p>    solution: '$(solution)'
</p><p>    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
</p><p>    platform: '$(buildPlatform)'
</p><p>    configuration: '$(buildConfiguration)'
</p><p>
 </p><p>- task: DotNetCoreCLI@2
</p><p>  inputs:
</p><p>    command: 'test'
</p><p>    arguments: '--collect "XPlat Code Coverage"'
</p><p>
 </p><p>- task: PublishCodeCoverageResults@1
</p><p>  inputs:
</p><p>    codeCoverageTool: 'Cobertura'
</p><p>summaryFileLocation: '$(Agent.TempDirectory)\*\coverage.cobertura.xml'
</p><p>
 </p><p>成功运行后，会看到下面这样的详细测试报告
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180435837-1945651470.png" alt=""/>
	</p><p>
 </p><p>还有代码覆盖率审查报告
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180436730-831138055.png" alt=""/>
	</p><p>
 </p><p>通过在Azure DevOps安装一个插件（"Build Quality Checks"），可以根据代码覆盖率的数值进行代码质量审查。例如下图所示，就是我们规定必须代码覆盖率到达60%以上才能编译通过。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180438013-2015801405.png" alt=""/>
	</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210211180439024-2502567.png" alt=""/>
	</p><p>
 </p>]]></description></item><item><title>以最小代价将React添加到现有网站</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/06/14382907.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 06 Feb 2021 12:48:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/06/14382907.html</guid><description><![CDATA[<p>React很流行，并且已经有各种各样的框架可以用。但如果你之前已经有一个网站，你想以最小代价，为它添加React的功能（尤其是组件化编程，动态构建界面等）。请参考下面的做法。
</p><p>我同时还很喜欢Typescript，请参考此前的文章：https://www.cnblogs.com/chenxizhang/p/14382837.html
</p><p>第一步：添加jsx的支持。这是可以让我们用javascript定义html元素。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206204756416-1916476775.png" alt=""/>
	</p><p>
 </p><p>第二步：安装react, react-dom这两个库。以及 @types/react, @types/react-dom 这两个定义库。全部用-D参数安装。
</p><p>第三步：修改类型定义应用文件。Index.d.ts文件如下
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206204757397-907128589.png" alt=""/>
	</p><p>第四步：创建你的tsx文件，用来定义前端代码逻辑
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206204757870-2088544522.png" alt=""/>
	</p><p>第五步：在你的html文件中，引用对应的js文件。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206204759483-1721531639.png" alt=""/>
	</p><p>第六步：编译tsx文件，生成js文件。如下所示
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206204801238-243888233.png" alt=""/></p>]]></description></item><item><title>前端结合Typescript进行快速开发</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/02/06/14382837.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 06 Feb 2021 12:26:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/02/06/14382837.html</guid><description><![CDATA[<p>这里介绍的是不使用任何的前端框架，保持初心，最简单的做法。以下总结，使用工具Visual Studio Code。
</p><p>
 </p><p>第一步：创建一个package.json文件。这个可以通过 npm init命令来完成。
</p><p>第二步：创建一个tsconfig.json文件。这个用来定义typescript的编译选项。关键的一个设置如下，就是typeRoots这个设置。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206202533872-2029329988.png" alt=""/>
	</p><p>第三步：在根目录下创建一个typings目录，并创建一个index.d.ts文件。在这个文件中，引用其他的d.ts文件。例如
</p><p style="background: #1e1e1e"><span style="color:#6a9955; font-family:Consolas; font-size:10pt">/// <span style="color:gray">&lt;<span style="color:#569cd6">reference<span style="color:#6a9955"> <span style="color:#9cdcfe">path<span style="color:#d4d4d4">=<span style="color:#ce9178">"../node_modules/@microsoft/teams-js/dist/MicrosoftTeams.d.ts"<span style="color:#6a9955"> <span style="color:gray">/&gt;<span style="color:#d4d4d4">
											</span></span></span></span></span></span></span></span></span></span></p><p>
 </p><p>这些d.ts文件，可以通过 npm install 命令来安装标准的npm包得到。例如，如果我安装了microsoftTeams的客户端JS SDK（npm install @microsoft/teams-js ）,就会有如下的文件。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206202534326-345335774.png" alt=""/><br/>
	</p><p>第四步：编写你的业务应用的前端代码逻辑，使用ts文件。例如
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206202534556-297021118.png" alt=""/>
	</p><p>在这里写代码时有完整的智能提示。非常舒服。
</p><p>
 </p><p>第五步：运行 tsc 命令生成 js文件，并且在html文件中直接应用这些js文件，例如
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202102/9072-20210206202534897-1028062610.png" alt=""/></p>]]></description></item><item><title>对微信小程序的生命周期进行扩展 – Typescript 篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/01/15/14281655.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 15 Jan 2021 05:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/01/15/14281655.html</guid><description><![CDATA[<p>最近利用业余时间倒腾了一个微信小程序，主要目的是横向比较一些业界小程序平台的架构和做法。因为有在其他平台长期的开发经验，对于小程序的一些机制做了一些辩证的思考。例如，小程序的页面，其实不是一个页面，而只是一个方法构造器，甚至整个应用也都只是一个方法而已。这样的情况下，我们以前学到的很多面向对象的经验，例如继承之类的，在这里通通就没有用武之地了。不可否认这样对于一些新手来说，可能是一个不错的设计。但对于我们这种老炮来说，总是有一种要去改造它的冲动。
</p><p>于是，我也就开始思考，看看能否对所有的页面做一个通用的功能，而不是每次在每个页面中都去写一遍。例如，很显然几乎所有的小程序，都会有用户个性化的数据。这个数据其实需要到所有的页面，那么到底怎么加载这个数据呢？我们可以在App.OnLaunch中尝试去加载，但一般加载数据的过程都是异步的，又怎么通知到所有页面说数据加载成功了呢？
</p><p>带着这样的问题，本着能用前人经验就不自己折腾的原则，我在网上搜了一下。下面这一篇文章真是跟我英雄所见略同啊。
</p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000a42cdb744b0c00b99eaaba56813">https://developers.weixin.qq.com/community/develop/article/doc/000a42cdb744b0c00b99eaaba56813</a>
	</p><p>利用上述文章提到的思路，基本上能实现我的目的。本文是写了一个Typescript的版本，但荣誉属于上面的这位Stephen同学。
</p><p>我喜欢Typescript, 这不用多说了，至于如何用Typescript 进行微信小程序开发，请参考我的文章 <a href="https://www.cnblogs.com/chenxizhang/p/14265729.html">https://www.cnblogs.com/chenxizhang/p/14265729.html</a>
	</p><p>下面上代码，并交待一些用Typescript时特殊的地方。
</p><p>
 </p><ol style="margin-left: 54pt"><li><div>默认情况下，Typescript版本中Page 构造器是不允许修改的，因为它定义时用的是const，你需要手工修改下面这个文件，将其修改为let
</div><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210115134928864-1179412735.png" alt=""/>
			</p></li><li><div>创建一个pagex.ts 文件，当然你可以起任何你想要的名字
</div><p>
 </p><p>const pagex = (Page: WechatMiniprogram.Page.Constructor): WechatMiniprogram.Page.Constructor =&gt; {
</p><p>    return (object: any) =&gt; {
</p><p>        const { onLoaded } = object
</p><p>        //由于我们需要重写onLoad这个默认方法，为了让具体页面还可以定义具体的Load逻辑，我们假定页面需要实现一个onLoaded方法
</p><p>        object.onLoad = function (_options: any) {
</p><p>            //读取用户数据
</p><p>            wx.getUserInfo({
</p><p>                success: res =&gt; {
</p><p>                    if (typeof onLoaded === "function")
</p><p>                        //如果用户定义了这个函数的话，就调用它
</p><p>                        onLoaded.call(this, res.userInfo)
</p><p>                }
</p><p>            })
</p><p>        }
</p><p>        //重写所有页面的分享逻辑，这样不需要在页面中定义了
</p><p>        object.onShareAppMessage = () =&gt; {
</p><p>            return {
</p><p>                title: "转发标题"
</p><p>            }
</p><p>        }
</p><p>
 </p><p>        return Page(object)
</p><p>    }
</p><p>}
</p><p>
 </p><p>const original = Page
</p><p>Page = pagex(original)
</p><p>
 </p><p>
 </p></li><li><div>将这个扩展代码导入到应用中。这个很简单，只需要在App.ts中导入即可。
</div><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210115134929486-9828773.png" alt=""/>
			</p><p>
 </p></li><li><div>定义一个页面生命周期的扩展接口，以便提示页面，可以实现onLoaded这个函数
</div><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210115134930193-565969315.png" alt=""/>
			</p><p>
 </p><p>
 </p></li><li><div>在具体页面代码中，用如下的方式实现一个自定义的页面构造器
</div><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210115134931231-2117010961.png" alt=""/>
			</p></li></ol><p>
 </p><p>    很多事情都是因为你想去做它，然后你就做到了。不要停止思考和尝试。</p>]]></description></item><item><title>在微信小程序开发中使用Typescript</title><link>http://www.cnblogs.com/chenxizhang/archive/2021/01/12/14265729.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 12 Jan 2021 02:30:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2021/01/12/14265729.html</guid><description><![CDATA[<p>Typescript的优势咱不需要赘述太多，有兴趣可以参考（https://www.typescriptlang.org/）。今天给大家分享一下如何在微信小程序（或者其他同类小程序）开发中使用Typescript。
</p><p>这个分两种情况，最简单的做法就是在创建项目时，选择Typescript这个选项，如下图所示。但要注意，这个选项只有在选择"Use no cloud service"才有，而另外一种Mini Program Cloud Base则不支持。这个可能是开发工具还没有跟上吧，希望以后默认也能选择。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210112103346127-55928705.png" alt=""/>
	</p><p>那么问题就来了，如果我选择了第一种Mini Program Cloud Base，亦或是我之前有一个项目，现在也想用Typescript，怎么办呢？其实也不难，请参考下面我总结的步骤。
</p><p>第一步：确保你的项目有一个package.json文件，并且确保增加如下两行，其他的可以不一样。如果该文件不存在，请用npm init命令生成。该文件修改完后，请运行npm install命令生成本地的依赖。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210112103346717-1509821331.png" alt=""/>
	</p><p>第二步，为你的项目增加一个tsconfig.json文件，内容如下
</p><p>{
</p><p>    "compilerOptions": {
</p><p>        "strictNullChecks": true,
</p><p>        "noImplicitAny": true,
</p><p>        "module": "CommonJS",
</p><p>        "target": "ES5",
</p><p>        "allowJs": false,
</p><p>        "experimentalDecorators": true,
</p><p>        "noImplicitThis": true,
</p><p>        "noImplicitReturns": true,
</p><p>        "alwaysStrict": true,
</p><p>        "inlineSourceMap": true,
</p><p>        "inlineSources": true,
</p><p>        "noFallthroughCasesInSwitch": true,
</p><p>        "noUnusedLocals": true,
</p><p>        "noUnusedParameters": true,
</p><p>        "strict": true,
</p><p>        "removeComments": true,
</p><p>        "pretty": true,
</p><p>        "strictPropertyInitialization": true,
</p><p>        "lib": [
</p><p>            "es5"
</p><p>        ],
</p><p>        "typeRoots": [
</p><p>            "./typings"
</p><p>        ]
</p><p>    },
</p><p>    "include": [
</p><p>        "./**/*.ts"
</p><p>    ],
</p><p>    "exclude": [
</p><p>        "node_modules"
</p><p>    ]
</p><p>}
</p><p>
 </p><p>第三步，下载下面这个压缩包，解压缩，放在项目的根目录下
</p><p><a href="https://files.cnblogs.com/files/chenxizhang/typings.zip">https://files.cnblogs.com/files/chenxizhang/typings.zip</a>
	</p><p>这里的文件是腾讯官方提供的类型定义文件d.ts
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210112103347205-757278507.png" alt=""/>
	</p><p>
 </p><p>第四步，修改project.config.json 文件，添加预处理命令
</p><p>  "scripts": {
</p><p>    "beforeCompile": "npm run tsc",
</p><p>    "beforePreview": "npm run tsc",
</p><p>    "beforeUpload": "npm run tsc"
</p><p>  },
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210112103347715-771531055.png" alt=""/>
	</p><p>第五步，确保在"微信开发者工具"中启用了预处理命令。
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202101/9072-20210112103348294-1620919218.png" alt=""/>
	</p><p>
 </p><p>搞定，这样就可以愉快地使用Typescript进行微信小程序的开发了，而且我还更加推荐用VS Code直接进行开发，"微信开发者工具"仅用来做编译和发布，这个开发体验真的很流畅，如丝般顺滑。下一篇有时间我再分享这个内容吧。
</p><p>
 </p><p>
 </p>]]></description></item><item><title>多屏切换神器</title><link>http://www.cnblogs.com/chenxizhang/archive/2020/11/30/14062673.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 30 Nov 2020 09:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2020/11/30/14062673.html</guid><description><![CDATA[<p><a href="https://www.nirsoft.net/utils/multi_monitor_tool.html">https://www.nirsoft.net/utils/multi_monitor_tool.html</a>
	</p><p>寻寻觅觅，终于找到这个小工具，可以很方便在多个显示器中随意切换。
</p><p>使用方法很简单，运行这个exe，然后选择你想要的显示器，ctrl+f9， 然后还有很厉害的一个设计，就是把所有原先的窗口全部移动到新的显示器。按下CTRL+SHIFT+F1即可。
</p><p>太赞了。
</p>]]></description></item><item><title>邀请推广：Office 365 开发入门指南教程</title><link>http://www.cnblogs.com/chenxizhang/archive/2020/11/26/14041825.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 26 Nov 2020 05:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2020/11/26/14041825.html</guid><description><![CDATA[<p>2019年春节期间录制的这个视频教程（可以直接通过 https://aka.ms/office365devlesson 访问），搭配在2018年上市的图书 （https://item.jd.com/12445328.html），有415位同学参与学习。技术虽然一直在变化，有些内容可能跟现在的实现已经略有不同，但核心的框架和原理是没有变的，目前仍然是国内唯一仅有的专门讲解Office 365开发入门的中文资源。
</p><p>邀请你参与这个课程学习，访问地址 <a href="https://aka.ms/office365devlesson">https://aka.ms/office365devlesson</a> 即可。如果你愿意，你还可以用手机打开这个地址，并且点击下图的"赚￥7.3"的字样，生成你的专属推广链接和二维码，分享到朋友圈或技术群。这个按照课程价格的20%提供的返佣。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201126133802565-920879898.jpg" alt=""/></p>]]></description></item><item><title>完整案例——配置前端和后端API应用的安全认证——基于Azure实现</title><link>http://www.cnblogs.com/chenxizhang/archive/2020/11/25/14036291.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 25 Nov 2020 07:17:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2020/11/25/14036291.html</guid><description><![CDATA[<p>这篇文章记录了我的一些实践。官方文档是 <a href="https://docs.microsoft.com/en-us/azure/app-service/tutorial-auth-aad?pivots=platform-linux">https://docs.microsoft.com/en-us/azure/app-service/tutorial-auth-aad?pivots=platform-linux</a>
	</p><h2>案例场景
</h2><ol><li>我有一个API 服务，用dotnet core 编写的
</li><li>我有一个前端网站，用React 编写的
</li><li>我希望这个前端网站，可以安全地访问到API服务
</li><li>我不希望其他人在没有经过登录的情况下，直接访问到这个API服务
</li></ol><h2>关键技术
</h2><ol><li>两个应用都是需要启用身份认证的。这个官方文档采用的方案是利用最新的Azure的功能，叫做Easy Auth , 官方文档在这里 <a href="https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization">https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization</a>。 我们采用Azure Active Directory来做认证，所以会创建对应的两个Azure AD application。
</li><li><div>配置前端应用对应的Azure AD application, 让他可以访问后端API应用。
</div><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125151640537-1873960553.png" alt=""/>
			</p></li></ol><p>
 </p><ol><li><div>配置API 应用对应的Azure AD application, 让他自动授权，信任前端应用对应的Azure AD application。（这一步是官方文档中没有的，但这样添加了更加方便，因为不会弹出一个让用户额外授权的提示框）。这里比较有意思的还有，就是可以添加一个或多个scope，这个可以在后续的代码中验证，实现类似于Microsoft Graph的效果。
</div><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125151641828-1846087236.png" alt=""/>
			</p><p>
 </p><p>
 </p></li><li><div>配置前端应用在做身份认证时，顺带就把访问后端API服务的id_token取过来。这一步很关键。需要访问 <a href="https://resources.azure.com">https://resources.azure.com</a> 这个网站进行修改authSettings.
</div><p>
 </p><p>"additionalLoginParams": [
</p><p>      "response_type=code id_token",
</p><p>      "resource=ee8a72b8-81f1-4a2f-b98c-aa394559f487"
</p><p>],
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125151643245-1577915385.png" alt=""/>
			</p></li><li><div>为了让前端应用（React）可以访问到这个后端API 服务，还需要设置后端API服务的CORS
</div><p>
 </p><p>请注意，如果不想做CORS的控制，则可以取消 "Enable Access-Control-Allow-Credentials" 这个复选框，然后在Allowed Origins 中删除所有的地址，输入一个 * 就可以了。
</p><p>
 </p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125151644035-1650206339.png" alt=""/>
			</p></li><li><div>这样配置完后，当用户尝试去打开前端这个React 应用时，会自动弹出Azure AD 的身份认证的窗口，并且自动完成认证。那么如何在React中得到对应的ID_TOKEN呢？有意思的是，这里只要访问 /.auth/me 这个地址即可获得。然后就可以用这个access_token去继续访问后端的API服务了
</div><p>
 </p><p>    fetch("/.auth/me")
</p><p>      .then(res =&gt; {
</p><p>        return res.json()
</p><p>      })
</p><p>      .then(data =&gt; {
</p><p>        const token = data[0].access_token;
</p><p>        /* 读取天气数据 */
</p><p>        let remote_url = "https://weatherservice-ares.azurewebsites.net/WeatherForecast";
</p><p>
 </p><p>        fetch(remote_url, {
</p><p>          headers: {
</p><p>            'Authorization': 'bearer ' + token
</p><p>          }
</p><p>        })
</p><p>          .then(res =&gt; {
</p><p>            return res.json();
</p><p>          })
</p><p>          .then(items =&gt; {
</p><p>            setLoaded(true);
</p><p>            setItems(items)
</p><p>          });
</p><p>      })
</p><p>
 </p><p>
 </p><p>题外话：如果前端这个应用，不是用React写的静态网页，而也是一个服务器技术开发的网页，例如ASP.NET Core，可以使用下面的方式进行access_token的传递。也就是说，Azure 提供的Easy Auth 会自动地把用户登录后得到的token，在每个请求的header中，通过 X-MS-TOKEN-AAD-ACCESS-TOKEN 这个传递过来。
</p><p>
 </p><p>public override void OnActionExecuting(ActionExecutingContext context)
</p><p>{
</p><p>    base.OnActionExecuting(context);
</p><p>
 </p><p>    _client.DefaultRequestHeaders.Accept.Clear();
</p><p>    _client.DefaultRequestHeaders.Authorization =
</p><p>        new AuthenticationHeaderValue("Bearer", Request.Headers["X-MS-TOKEN-AAD-ACCESS-TOKEN"]);
</p><p>}
</p><p>
 </p></li><li>如何在API服务端判断用户的身份，包括租户信息，账号信息呢。下面几行几行代码即可
</li></ol><p>
 </p><p>            var user = HttpContext.User.Identity.Name;
</p><p>            var provider = HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/identityprovider")?.Value;
</p><p>            var tid = HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid")?.Value;
</p><p>            var oid = HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
</p><p>            var scp = HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/scope")?.Value;
</p><p>
 </p><p>    但是这里会有一个问题，默认情况下，你上面获取到的信息都是空白的。这是一个已知的问题，需要通过一个第三方库来解决。 <a href="https://github.com/MaximRouiller/MaximeRouiller.Azure.AppService.EasyAuth">https://github.com/MaximRouiller/MaximeRouiller.Azure.AppService.EasyAuth</a>
	</p><p>
 </p><p>    具体的做法就是，添加这个package ： MaximeRouiller.Azure.AppService.EasyAuth，然后注入服务
</p><p>    services.AddAuthentication().AddEasyAuthAuthentication((o) =&gt; { });
</p><p>
 </p><p>    然后在具体的Controller或者Action上面添加
</p><p>    [Authorize(AuthenticationSchemes = "EasyAuth")]
</p><p>
 </p><ol><li><div>如何判断当前的token是否具有指定的scope，以确定哪些用户能访问什么服务。
</div><p>
 </p><p>这个我们可以通过封装一个类来检测
</p><p>
 </p><p>using Microsoft.AspNetCore.Http;
</p><p>using Microsoft.AspNetCore.Mvc;
</p><p>using Microsoft.AspNetCore.Mvc.Filters;
</p><p>using System;
</p><p>using System.Collections.Generic;
</p><p>using System.Linq;
</p><p>using System.Threading.Tasks;
</p><p>
 </p><p>namespace webapisample
</p><p>{
</p><p>    public static class HttpContextExtension
</p><p>    {
</p><p>        public static bool VerifyUserHasAnyAcceptedScope(this HttpContext ctx, string[] scopes)
</p><p>        {
</p><p>            var scp = ctx.User.FindFirst("http://schemas.microsoft.com/identity/claims/scope")?.Value;
</p><p>            if (string.IsNullOrEmpty(scp))
</p><p>                return false;
</p><p>
 </p><p>            return scp.Split(' ').Intersect(scopes).Count() == scopes.Count();
</p><p>        }
</p><p>    }
</p><p>    public class ScopeFilterAttribute : Attribute, IActionFilter
</p><p>    {
</p><p>        public string[] Scopes { get; set; }
</p><p>
 </p><p>        public void OnActionExecuted(ActionExecutedContext context)
</p><p>        {
</p><p>
 </p><p>        }
</p><p>
 </p><p>        public void OnActionExecuting(ActionExecutingContext context)
</p><p>        {
</p><p>            if (!context.HttpContext.VerifyUserHasAnyAcceptedScope(Scopes))
</p><p>                context.Result = new UnauthorizedResult();
</p><p>        }
</p><p>    }
</p><p>}
</p><p>
 </p><p>这个ScopeFilter使用起来也很简单，如下所示
</p><p>
 </p><p>[ScopeFilter(Scopes = new string[] { "Files.Read" })]</p></li></ol>]]></description></item><item><title>Typescript支持新版本React的一个设置  react-jsx</title><link>http://www.cnblogs.com/chenxizhang/archive/2020/11/25/14035749.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 25 Nov 2020 06:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2020/11/25/14035749.html</guid><description><![CDATA[<p>如果你用npx create-react-app --template typescript 创建一个新的项目，由于react的版本已经更新到了17.0.1 之后了，但是有一些特性（尤其是对tsx文件的解析）是需要Typescript 4.1 之后的版本才支持，而Visual Studio Code中的Typescript版本可能还不是最新的，所以会遇到一个问题
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125140134130-591654994.png" alt=""/>
	</p><p>请注意看右下方的版本 4.0.3
</p><p>解决方案是，点击4.0.3 这个地方，选择新的版本
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125140134908-1544908841.png" alt=""/>
	</p><p>选择4.1.2 ，保存即可，整个世界都清净了
</p><p><img src="https://img2020.cnblogs.com/blog/9072/202011/9072-20201125140135546-3690520.png" alt=""/>
	</p>]]></description></item><item><title>如何撰写较受欢迎的技术文章</title><link>http://www.cnblogs.com/chenxizhang/archive/2019/03/03/10466691.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 03 Mar 2019 10:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2019/03/03/10466691.html</guid><description><![CDATA[<p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><br/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180426879-1066369873.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180427332-1097110068.png" alt=""/>
		</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本来我这篇文章的标题是 "如何撰写受欢迎的技术文章"，但反复斟酌之下，还是加了一个"较"字，这主要是考虑我不是什么知名作者，写的文章大多也谈不上很受欢迎，贸然地谈"受欢迎" 是有点忐忑的，而改成现在这样，虽然只是一字之差，但就多了一份进退的空间，自信心也就油然而生了。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我写技术文章的时间，算起来有超过13年了，我一直在国内比较早期的技术博客平台——博客园发表文章，至今已经有 1347篇随笔，累计阅读量约 96万，拥有"推荐博客"的荣誉。根据博客园的规则，我目前排名第40位（以前可能还略微靠前一些），跟很多大家耳熟能详的大牛相比，我还有很大的差距。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我的技术博客地址是 https://chenxizhang.cnblogs.com
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180427954-262276739.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我写的文章在数量上有一定的优势，这可能跟我写的内容和方式有关系。熟悉我的朋友大抵知道，我有相当长一段时间做咨询顾问和培训讲师，那段青葱岁月，相对单纯的日子，每天的日常就是吃饭、睡觉、写文章（或做案例）。做培训讲师需要不断地学习，而且通过把一些技术经验写出来，也是一种提高自我的方式。逐渐地，我的博客拥有固定的一批读者，他们给了我很多反馈、以及鼓励，和温暖。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180428496-154892877.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">那么，回到今天文章的主题 —— 如何撰写较受欢迎的技术文章？我想先用一篇目前为止在我的博客中最受欢迎的一篇文章作为例子讲解一下。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180429127-1771201370.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">该文章的访问地址是https://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html ，你也可以在本文的底部，通过"阅读原文"链接访问。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这篇文章 《你得学会并且学得会的Socket编程基础知识》发表于2011年，算起来也有快8年的时间了，累计阅读量为75441，评论数为110，点赞数为 73，这三个指标都是各自领域的第一名。更加让我印象深刻的是，直到现在还仍然经常会有读者给我留言，有的还是专门为了留言注册了一个博客园账号，感动之余，我也在想其中的原因。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180429489-1906709773.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我们先来看看题材。写作有一个作用是帮助自己梳理思路沉淀经验，但文章主要还是写给别人看的，尤其你要公开发表的话。那么，"决定写什么" 是一个很重要的问题。你至少需要考虑
</span></p><p style="text-align: justify; background: white">
 </p><ol><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><strong>我的目标受众是哪些人群？这个人群有多大？</strong>
				</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><strong>他们需要什么哪方面的内容？</strong>
				</span></div><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">思考这两个问题，看起来有点像做市场分析，大家可能会觉得不是技术人员的专长，但越来越多的经验证明这是很有必要的，其实这两个问题的背后还有一个深层次的问题：<strong>你是成为怎样的一个作者？你的目标是什么？</strong>
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">其实写别的文章，做别的事情也有类似的原则
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180429748-523040967.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180429960-469004502.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这个题材 ——"Socket编程的基础知识" ，老实说我在写作的开始并不太知道会有这么大的需求。我记得当时已经有多种技术可以做客户端和服务器端的通讯，尤其是要有状态的通讯。用现在的眼光来看，是不是因为这种偏后端的技术相对来说稳定（不像前端技术那样日新月异），有固定的用户群体，Socket是其中一种比较基础的技术，所以在这么多年还有人在不断关注呢？
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180430214-10870245.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我感觉，正如文章标题《你得学会并且学得会的Socket编程基础知识》所提出的那样，这篇文章胜在"<strong>情境引导</strong>"，有情境，所以言之有物，不是说空话套话，而引导式的目的是为了让读者能真正学会。该文章是通过一个完整的案例，并且是层层推进的方式给读者呈现他需要掌握的知识，而且连什么情况下会出现什么错误提示，都考虑到了。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">同样的例子，还有常年霸占博客园推荐排行榜第一名的蒋老师的文章，例如这一篇 《<strong>200行代码，7个对象——让你了解ASP.NET Core框架的本质</strong>》https://www.cnblogs.com/artech/p/inside-asp-net-core-framework.html， 机缘巧合我还有幸听过他针对这个话题的现场演讲，这种抽丝剥茧，层层深入的方式，能时刻抓住观众（或读者）的注意力，而背后的原理和知识点，也是通过一个一个例子，润物细无声地传递给了他们。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180430495-1476165278.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">另外一种写作形式，是<strong>系列文章</strong>。早些年博客园的鼎盛时期，真的是百花齐放，各路大神都有各自的系列，我印象深刻的有赵劫，Terry，蒋金楠，张善友等。写作系列文章需要足够的功力，这些能写系列文章的牛人，也大多成为了后面的畅销书作者。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">还有一种我认为比较好的写作方式或者风格，就是有独立的见解，这是可遇不可求的。这方面，我一直很喜欢阮一峰的技术文章，如果我没有记错的话，他应该曾经做过大学老师，现在供职于阿里支付宝（Alipay.com），作为Node/Javascript的工程师。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180431183-644639489.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">同样讲一个技术话题，他的文章可以让你有不一样的收获。这主要取决于他对于这个话题的深入研究，旁征博引，并且有自己的一套独立的见解，而不是人云亦云。例如 《找回密码的功能设计》 http://www.ruanyifeng.com/blog/2019/02/password.html
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180431761-486191005.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">阮一峰是70后，他的文章如此好，可能跟他的文化功底和社会阅历有直接关系，事实上他不光写技术文章，还写了几本文集呢。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180432113-2111956035.jpg" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">工欲善其事必先利其器，在信息过载的时代，平台和工具的重要性还是不言而喻的。在选择平台到时候，你需要考虑平台用户群体是不是跟你的目标受众匹配，还要看这个平台未来的发展规划。这里特别要提到，如果你的目标受众是年轻一代，需要特别注意他们的学习方式、关注的平台是跟以往不一样的。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">搞清楚了上面这个问题，对于作者来说，你选择的平台还要满足几个条件：
</span></p><p style="background: white">
 </p></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">是否方便你的写作？是用客户端还是在线的？
</span></div></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">搜索引擎友好性怎么样？这方面博客园做得非常好。
</span></div></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">移动化阅读体验如何？
</span></div><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我在这篇文章中 （<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455454626&amp;idx=1&amp;sn=2aaa71319ab5b85ae5138757c35dade1&amp;chksm=b16094bb86171dad5a8b5e39a0af03740a1e5ee4797bbf35abfd23891bf6f30d0a2f7868828e&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">我分享给大家的个人写作经验</span></a>） 有对写作平台的详细说明，有兴趣请仔细阅读参考。
</span></p><p style="background: white">
 </p><p style="text-align: center; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180432360-762453224.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180432619-723991054.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">说了这么多，也讲了很多技法，但其实写作是一种自我修行，你永远不知道你写的东西是不是受欢迎，对此你也不必过分期待—— 尽管去写，去尽量写好，然后你自然会有所收获，尤其是内心的喜悦，这是千金不换的馈赠。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180432892-1251441422.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303180433217-501304015.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">针对写作，尤其是技术文章的写作，我此前有几篇心得，有兴趣可以参考
</span></p></li><li><div style="background: white"><a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455455106&amp;idx=1&amp;sn=ec42e1e08270180cb69b5225da1555fb&amp;chksm=b160929b86171b8d7a72d44e4e01ba952832a0610a48d98114e5c04566f30e4f8ec44c7d8181&amp;scene=21" target="_blank"><span style="color:#576b95; font-family:Microsoft YaHei UI; font-size:13pt; text-decoration:underline">三十分钟写作法</span></a><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></div></li><li><div style="background: white"><a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455454651&amp;idx=1&amp;sn=56c195927d3470c814d9931359eb1538&amp;chksm=b16094a286171db4647313097976e379c01343ab3e3c78d9c2e8b7dc1976afe42c81e4e19f01&amp;scene=21" target="_blank"><span style="color:#576b95; font-family:Microsoft YaHei UI; font-size:13pt; text-decoration:underline">写作技术文章或图书的一些经验</span></a><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></div></li><li><div style="background: white"><a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455454626&amp;idx=1&amp;sn=2aaa71319ab5b85ae5138757c35dade1&amp;chksm=b16094bb86171dad5a8b5e39a0af03740a1e5ee4797bbf35abfd23891bf6f30d0a2f7868828e&amp;scene=21" target="_blank"><span style="color:#576b95; font-family:Microsoft YaHei UI; font-size:13pt; text-decoration:underline">我分享给大家的个人写作经验</span></a><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></div></li></ol>]]></description></item><item><title>dotnetcore-officeaddin-toolbox : Office 365 Add-in开发人员的工具箱</title><link>http://www.cnblogs.com/chenxizhang/archive/2019/03/03/10463910.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 02 Mar 2019 23:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2019/03/03/10463910.html</guid><description><![CDATA[<p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在上一篇文章（<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455455757&amp;idx=1&amp;sn=b2f1a167c54f14bc01ccfe9042e54183&amp;chksm=b1609f1486171602a05df8ec5475ea04426e522e13a7a3765b4f3cdf6312f967bb56fc545608&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">.NET Core开源行动：一键创建Excel Add-in</span></a>） 中我给大家展示了一套为Office 365 Add-in开发人员准备的模板库，你可以通过 dotnet new excel &amp; dotnet run 命令即可完成一个新的Add-in的创建和运行。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303074600818-1650666407.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">关于如何加载这个Add-in，上文中提到你需要将manifest.xml文件放在一个共享目录，然后在Excel中进行设置，实现所谓的sideload（旁加载）。但是有没有什么方式可以更加简单方便地实现这个加载的行为呢？<strong>当然，有办法。</strong>
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我开发了一个基于dotnet core的工具，你可以通过下面的命令安装
</span></p><p style="background: white"><span style="color:red; font-family:Microsoft YaHei UI; font-size:13pt">dotnet tool install --global dotnetcore-officeaddin-toolbox<span style="color:#333333">
			</span></span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303074601226-423683503.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">接下来就可以像下面这样的方式来运行这个工具啦
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:red; font-family:Microsoft YaHei UI; font-size:13pt">office-toolbox sideload manifest.xml excel<span style="color:#333333">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">运行这个工具，会自动产生一个测试用的文档，而且会把你的add-in挂接上去，而且会自动打开Excel哦。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303074601482-1210015082.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303074602310-181062898.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201903/9072-20190303074602647-1486595240.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请注意几点
</span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">目前该工具仅在Windows平台可用
</span></div></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">该工具目前要求有三个参数，第一个参数是相关的命令，目前仅支持sideload，第二个参数是manifest文件的位置，第三个参数是应用程序的名称，例如excel，word，powerpoint
</span></div><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">该工具还会不断开发，增加其他命令，并且在 https://github.com/chenxizhang/dotnetcore-office365dev-templates-officeaddin  这里开源。
</span></p></li></ol>]]></description></item><item><title>《Office 365开发入门指南教程》正式上线，限时优惠和邀请分享推广</title><link>http://www.cnblogs.com/chenxizhang/archive/2019/02/23/10421729.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 23 Feb 2019 02:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2019/02/23/10421729.html</guid><description><![CDATA[<p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我很高兴地通知大家，《Office 365 开发入门指南教程》已经正式在网易云课堂上线，你可以通过直接访问  https://aka.ms/office365devlesson 这个短地址进入课程主页。
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190223100049280-1883445273.png" alt=""/>
	</p><p>
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这门课程取材自我所编写、北京大学出版社于2018年9月发行的《Office 365开发入门指南》一书，并且在原书基础上修订了大纲，增加了很多最新的内容，课程主要面向的观众是：Office 365管理员、项目经理、平台集成开发商、有一定经验的Office Add-in开发人员和有Web经验的开发人员。但其实任何对Office 365感兴趣的朋友们都能听得懂这门课程，而且可以极大地开拓你的视野，对Office 365平台有一个整体的认识。
</span></p><p style="background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><strong>限时优惠</strong>
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">为了答谢大家对拙作以及该视频课程的支持，我为前2000位订阅用户提供了一定的优惠，请在2月28日之前尽快在网易云课堂中完成兑换。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请注意，为了帮助大家尽快完成学习，治疗拖延症，本次课程必须在你购买之日起365天内完成学习，如果超过时限，你当然还可以继续学习，但需要另外再付费购买，而且不能再享受优惠。对，就是这么任性。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><strong>邀请分享推广</strong>
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果你觉得本教程还不错，愿意分享给其他有需要的朋友，我诚意邀请你通过分享来推广这个课程，我将拿出课程费用的5%作为答谢。请关注公众号"希章分享"，并且回复 "<strong>课程推广</strong>" 四个字了解详情，获取你的专属链接。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt"><strong>课程服务</strong>
		</span></p><p style="background: white">
 </p><ol><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本次课程的资源（包括每个章节对应的学习资源，范例源代码），请访问：https://github.com/chenxizhang/office365dev，这是我的统一服务界面，你可以在提出问题，或者给我留言。
</span></div></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">课程建议，你可以通过 office365devguide@xizhang.com 和取得联系。
</span></div></li><li><div style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">关注公众号 "希章分享" 你可以不定时收到我的很多其他文章，尤其是针对Office 365开发方面的深度解析。
</span></div><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">再次感谢大家，希望大家在2019年都有新进步！
</span></p></li></ol>]]></description></item><item><title>Office 365平台及其价值主张</title><link>http://www.cnblogs.com/chenxizhang/archive/2019/02/12/10367451.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 12 Feb 2019 14:51:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2019/02/12/10367451.html</guid><description><![CDATA[<p><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt; background-color:white">重要提示：<strong>《Office 365开发入门指南》视频教程还没有上架，目前会先公开几个小节的文字版本，让大家先睹为快，请大家转发给感兴趣的朋友，敬请留意课程的正式上架和优惠券发放通知。</strong></span>
	</p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225041016-1896837920.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">从今天开始我会给大家带来一个《Office 365开发入门指南》的视频教程。在2018年9月，我出版了这本迄今为止唯一的专门讲解Office 365开发的中文图书，这本书除了较为系统地给大家介绍了Office 365提供给开发人员的全新机遇，并且有大量实例代码外，还有一个比较独特的价值是对比了国际版和国内版的一些差异，这也弥补了官方文档在这方面的空白。该书推出以来，感谢大家的支持，也给了很多反馈，其中有些朋友就提到，希望有一套视频教程便于在移动设备上利用平时碎片化的时间进行学习。于是，在刚刚过去的2019年春节假期，我重新梳理了一下思路，这套课程的录制工作也就提上了日程。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="text-align: justify; background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">作为整个课程的第一个模块，我希望给大家来分享一下我理解的Office 365，帮助大家有一个大局观，不管是对于使用好Office 365，还是说从系统的角度更好地理解Office 365是怎么开发出来的，因为你站在一定的高度来看它，所以你看到的东西也就不一样。第一节我们就来聊聊Office 365平台和它背后的价值主张吧。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225041308-1069428036.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">我曾经看过Linux的发明者Linus 的一本书，书名叫《Just for fun》，这本有点像他自传的书，披露了他很多不为人知的故事，以及Linux如何诞生的细节，但我印象最深刻的却是他提到的一个软件发展的理论，他说软件的进化跟很多事情一样，是分为三个阶段的，首先最早期是解决"生存"的需要，即为了某一些非常具体的问题而设计的，在那个时候工具化是最重要的诉求；再后来，随着越来越多的人使用软件，以及使用软件的程度越来越高，软件就会演变为一种"社会秩序"的载体，其实只要你稍微想一下，就会发现，现在很多的软件，其背后的逻辑就是现实生活及相关秩序的映射，所谓社会秩序，就是人们需要协作和沟通，人们会有各种各样的需求，这需要一定的规则（换言之，就是秩序）来保障。最后，Linus同学认为软件的最高境界是Fun，就是好玩。这个好玩是有深层次的意义的，一方面它给使用者带来精神上的愉悦，同时给软件开发者也带来充实和满足。Linus 认为Linux本身已经达到了这个最高境界，而他所声称的Fun就是指的Linux这个体系，全世界的人都可以使用Linux，也可以为Linux做贡献，这是多么好玩的事情啊。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">我自认还不能和Linus相提并论，但我有一个极大的优势，就是我比他懂Office 365，而当我有时候静下心来想一想这套软件几十年的发展，也能总结出类似的三个阶段。在上个世纪八十年代，微软单独发布的Word，Excel，PowerPoint等软件，可以算得上都是各领风骚的，后面随之推出的Office套装更是笑傲江湖的杰作，据不完全统计，全世界使用Office的用户约为12亿，但无论如何，这个阶段还是解决用户个体的问题；然后在世纪之交的时候，因应社会的发展需求，微软推出了一系列的服务器产品，包括邮箱服务器，文件和协同平台，音视频会议服务器等等，逐渐将协作和沟通理念引入进来，这也是很多公司逐渐走向规范化和现代化的一个重要基础，毫无疑问，作为信息化支撑的这些软件建立了一定的社会秩序。在2011年前后，微软做出重大的决策，整合了这些客户端和服务器产品，推出了全新Office 365云平台，并且经过8年左右的运营，目前Office 365的每月活跃用户超过1.5亿，而且这些年大力投资，Office 365已经朝微服务化、平台化、智能化的方向不断演进。这可能跟Linus所提到的Just for Fun有异曲同工之妙吧。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225041497-226954078.jpg" alt=""/>
	</p><p><span style="color:black; font-family:等线; background-color:white">大家看到的这个视频，是由国内知名的PowerPoint动画高手ACE纯手工打造的作品，是不是觉得很震撼呢？说实话，我之前都不知道PowerPoint可以这么玩，有兴趣学习动画的可以关注"动画老A"这个公众号啊。</span>
	</p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225041815-639355005.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">我做Office 365产品相关的工作有三年左右了，经常被大家问到的一个问题就是：Office 365到底是什么？它跟我以前用的Office有什么不同？首先，Office 365是一个SaaS平台，SaaS就是我们常说的"软件即服务"的意思。最开始的时候，微软是把Office进行了延申，例如提供了在线的Office Online，以及移动端的Office Mobile，并且把在企业级市场已经很成功的三个服务器产品（Exchange Server，SharePointServer，Lync Server）搬到了云上面，分别变成了Exchange Online，SharePointOnline，Skype for Business这三个云服务。这就是Office 365最开始的样子。所以说呢，Office 365是包含了Office的，但是它的内涵和价值远远大于传统的Office，我下面会一一展开。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">产品从单纯的、分散的软件，变成了一套集中的、统一的服务后，相应的也就带来了一些变化。第一是使用方式的变化，作为一个云服务，Office 365打破了以往微软产品的一些局限，为用户提供了跨平台、跨设备，并且移动化优先的用户体验，毫无疑问，这将极大地提高工作的效率，而且更带来了前所未有的安全感，我经常举例子说，我再也不担心电脑坏掉，或者忘记带我常用的电脑了，因为我随时可以用一台新的电脑（不管是Windows的，还是Mac的），甚至就直接用我的手机，只要登陆进去我的账号，就可以立即获得所有的文档，我的使用习惯和历史记录也如影随形。第二，从公司的角度来看，Office 365是一种全新的服务租用的付费模式，你不需要一次性买断，而是按照员工具体需要的数量，用多少买多少，想用多久就买多久，员工离职了，账号还可以回收利用给其他人。这种灵活的方式可以减轻公司的资金压力，有一天Office 365就会像水和电这种基础服务一样，成为每个公司和每个人必不可少的一部分，而它的成本想比较所给用户带来的回报而言，可以说是微乎其微的。最后，我还要谈一谈管理方式的变化，Office 365可以进一步给公司的IT运营带来收益，降低成本和风险。Office 365提供至少99.9%的高可用性（国际版是99.99%），不断地有新组件增加进来，大多都不需要额外付费，而所有这些组件都是时刻保持最新的，在安全合规性方面，微软更是做了大量的投资。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225042103-586762119.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">作为一个SaaS平台，目前Office 365每月的活跃商业用户超过了1.5亿，因为Office 365承载的是用户平时最密切相关的办公和协作，所以毫无疑问会产生大量的数据和行为，这样一个平台蕴含了极大的价值。庞大的用户以及活跃的使用场景，开放的平台架构给软件开发商也带来了全新的机遇。我这里将其称为Office 365平台即服务（PaaS）。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">Office365的核心是用户，以及由用户延申出来的文件、邮件、人际关系、聊天等等。实际上这是一张大的网络，或者图谱。所以在Office 365 的平台服务这个层面，我们的一个核心就叫做Microsoft Graph，然后采用业界标准的技术，支持在Microsoft Graph基础上进行各种开发和集成。本次课程后续有一个专门的模块专门讲解Microsoft Graph，敬请关注。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p>
 </p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225042327-2041042201.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">Office365一直不断地进化，围绕Office 365，微软还推出了各种各样的硬件、软件和服务，力图为客户打造一个现代办公空间（Modern Workplace）。那么到底现代化在哪里呢？我所了解的一些信息是分为四个方面的</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">第一，释放创造力：大量支持手写，语音等新的形式进行人机交互，有越来越多的智能化组件简化工作</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">第二，强化协作圈：从以往分散的基于邮件或文件的协作，进一步强化，延申出来基于聊天的协作，并且通过活动流的形式，可以在不同设备之间无缝地切换</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">第三，简化可管理：功能强大的同时，Office 365一直致力于简化的管理体验，提供了非常多的报表，对于以前很头疼的监控任务，都有智能化的工具</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p style="background: white"><span style="color:black"><span style="font-family:等线; font-size:12pt">第四，智能安全性：安全是一个永恒的话题，客户尤其关注用户及数据的安全。Office 365通过了业界最严格的安全认证，并且有几千位专职的安全工程师为平台保驾护航。</span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
			</span></span></p><p>
 </p><p>
 </p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212225042546-1686060600.jpg" alt=""/>
	</p><p>
 </p><p><span style="color:black; font-family:等线; background-color:white">本课程所有的演示和资源分享，都可以通过这里提到的GitHub库获得，如果你有兴趣购买配套收集，也可以在各大电商网站找到。我有一个微信公众号用来做后期的交流，欢迎关注。而如果你发现我有讲得不对的地方，或者有什么具体的疑问或者建议，也可以通过邮件跟我取得联系，谢谢大家！</span></p>]]></description></item><item><title>所有人都可以是开发人员——《Office 365开发入门指南》视频教程即将上市</title><link>http://www.cnblogs.com/chenxizhang/archive/2019/02/12/10363812.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 12 Feb 2019 00:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2019/02/12/10363812.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080100703-570197462.jpg" alt=""/>
	</p><p>
 </p><p><span style="font-family:微软雅黑; font-size:12pt"><span style="color:#333333; background-color:white">今天是春节假期的最后一天，在这里给全国的朋友们拜个晚年，祝大家身体健康，晚年幸福啊。这个春节大家过的怎么样啊，我自己是在老家过的年，家乡的年味还是比较浓的，也再次感谢朋友圈的大家给我看了各地的风光和不同的过年方式。在这个春节假期里呢，我还做了一件特殊的事情，就是准备了这套《Office 365开发入门指南》的视频教程。大家知道，2018年9月份我的这本书正式上市发行了，这是我的第一本书，自己觉得写的水平一般，还有很多可以改进的地方。承蒙大家抬爱，我今年很可能会出第二版。这一方面是因为Office 365本身在不断进化，书中有些内容需要更新，另外我自己在这一年左右时间又有不少进步，总是按捺不住想要分享给大家的。与此同时，有不少热心朋友也跟我反馈，希望有一套视频教程，便于在移动设备上面，利用碎片化时间进行学习，为此我利用这个假期先准备了这一套视频教程，并且将以此为蓝本筹划书籍的第二版。</span>
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080100997-1446477982.jpg" alt=""/>
	</p><p><span style="font-family:微软雅黑; font-size:12pt">我们都不能否认，现在的社会已经跟以往有了较大的不同，我们生活在一个数字化的社会中，不管是工作上面还是生活当中，其实都已经完全离不开各种各样的软件了。而软件开发，这个在以往看起来很高大上的职业，其实也并不是那么高冷。我自己从事软件开发及相关工作有十多年了，截止到今天，我仍然为当初的选择感到幸运。学习软件的开发，不仅仅是掌握一门技能，更重要的是能以此来理解社会的运转方式和规则。对于我们这一代人来说，最早接触的软件很可能也就是Office吧，它是那么实用，而且也并不难学。我自己从学习Office的基本使用，做些简单的电子表格，到逐渐了解它的二次开发，及现在微软的Office产品研发团队任职——有机会了解这样一个服务于全世界数以十亿计用户的软件平台是怎么开发和运营的——我由衷地感到幸运，并且希望将一些心得体会分享给更多的朋友们。
</span></p><p><span style="font-family:微软雅黑; font-size:12pt">任何公司都是一个软件公司。你不能假装看不到这种变化，即便你之前没有软件开发的经验，但尝试去用开发的角度去看看你周边影响你工作和生活的软件世界，我相信会对你有很大的帮助。所以从这个意义上说，我觉得所有人都可以是开发人员，而我的这个视频教程和书籍，也是为所有这些对软件开发充满好奇的人们准备的。
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080101255-339067142.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:12pt">我曾经看过Linux的发明者Linus 的一本书，书名叫《Just for fun》，这本有点像他自传的书，披露了他很多不为人知的故事，以及Linux如何诞生的细节，但我印象最深刻的却是他提到的一个软件发展的理论，他说软件的进化跟很多事情一样，是分为三个阶段的，首先最早期是解决"生存"的需要，即为了某一些非常具体的问题而设计的，在那个时候工具化是最重要的诉求；再后来，随着越来越多的人使用软件，以及使用软件的程度越来越高，软件就会演变为一种"社会秩序"的载体，其实只要你稍微想一下，就会发现，现在很多的软件，其背后的逻辑就是现实生活及相关秩序的映射，所谓社会秩序，就是人们需要协作和沟通，人们会有各种各样的需求，这需要一定的规则（换言之，就是秩序）来保障。最后，Linus同学认为软件的最高境界是Fun，就是好玩。这个好玩是有深层次的意义的，一方面它给使用者带来精神上的愉悦，同时给软件开发者也带来充实和满足。Linus 认为Linux本身已经达到了这个最高境界，而他所声称的Fun就是指的Linux这个体系，全世界的人都可以使用Linux，也可以为Linux做贡献，这是多么好玩的事情啊。</span><span style="color:#333333; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:12pt">我自认还不能和Linus相提并论，但我有一个极大的优势，就是我比他懂Office 365，而当我有时候静下心来想一想这套软件几十年的发展，也能总结出类似的三个阶段。在上个世界八十年代，微软单独发布的Word，Excel，PowerPoint等软件，可以算得上都是各领风骚，后面随之推出的Office套装更是笑傲江湖的杰作，据不完全统计，全世界使用Office的用户约为12亿，但无论如何，这个阶段还是解决用户个体层面的问题；然后在世纪之交的时候，因应社会的发展需求，微软在Office的基础上推出了一系列的服务器产品，包括邮箱服务器，文件和协同平台，音视频会议服务器等等，逐渐将协作和沟通理念引入进来，这也是很多公司逐渐走向规划化和现代化的一个重要基础，毫无疑问，作为信息化支撑的这些软件建立了一定的社会秩序。在2011年前后，微软做出重大的决策，整合了这些客户端和服务器产品，推出了全新Office 365云平台，并且经过8年左右的运营，目前Office 365的每月活跃用户超过1.5亿，而且这些年大力投资，Office 365已经朝微服务化、平台化、智能化的方向不断演进。这可能跟Linus所提到的Just for Fun有异曲同工之妙吧。</span><span style="color:#333333; font-size:13pt">
			</span></span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080101511-1130848887.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:12pt">我利用几天时间梳理了一下新的教程大纲，在与原书尽量保存一致的基础上，也做出了一些大胆的调整。例如我专门增加了Office 365平台的大局观这个模块，是希望给大家从high level介绍一下Office365的体系、应用和开发平台框架，并且列出了大量可用的链接。这个模块可以免费试听。另外，我还调整了原书内容，把Office 365的部署和管理单独整理成一个模块，这个部分将给大家介绍Office 365与Azure的关系、用户和应用程序管理的知识，这不管是对于大家用好Office 365，还是要基于Office365进行开发都是很有帮助的。此外，本次教程删除了SharePoint的章节，我希望下次有机会单独来讲那个部分，因为知识点真的很多。其他的章节，基本上保持跟原书一致，但内容有很大的修订。</span><span style="color:#333333; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:12pt">准备这套教程，对我而言也是一个再次回顾和学习的好机会，也尽量避免第一次写书时的一些问题，例如语言版本、截图问题等等。整个教程共7个模块，21个PPT，都是我一个字一张图地做出来的，然后准备演示代码，录制脚本，最后才真正录制。虽然大家最终听到每个课时的视频大约30分钟到45分钟左右，但为此要花费的准备时间，可能超过一天，甚至更久。另外，我感到欣慰的是，除了写代码用到了Visual Studio，所有其他工作，包括录制视频，都是通过Office 365来完成的，这也算是一个最佳实践吧。</span><span style="color:#333333; font-size:13pt">
			</span></span></p><p>
 </p><p><span style="font-family:微软雅黑">课程大纲的清晰版本，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/v2/readme.md">https://github.com/chenxizhang/office365dev/blob/master/v2/readme.md</a>
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080101765-1498605681.jpg" alt=""/>
	</p><p style="background: white"><span style="color:black; font-family:微软雅黑"><span style="font-size:12pt">本次课程主要适用的人群有Office365管理员，项目经理，业务平台集成产品经理，和已经有一定经验的Office Add-in开发人员（例如VBA和VSTO开发者），还有就是广大的有Web经验的开发人员。但正如我之前所提到的，如今所有人都可以是开发人员，或者至少可以学习用开发人员的思维去理解周边的软件世界，希望你也有好奇心听听这门课程。</span><span style="color:#333333; font-size:13pt">
			</span></span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080101992-704305551.jpg" alt=""/>
	</p><p><span style="color:black; font-family:微软雅黑; background-color:white">这个视频课程的部分章节还在加紧录制中，明天就又要正式上班了，我将利用业余时间抓紧完成所有视频的录制，争取在2月下旬正式上架和大家见面。本次教程配套的演示代码和资源分享，你都可以通过上面的这个Github库找到，另外如果你有兴趣买一本教材，可以在各大电商平台找到。最后提醒大家一下，因为这也是我的第一套视频教程，我为前2000位用户准备了一定的优惠，如果你希望在课程面世第一时间收到通知，以及领取优惠券，敬请关注我的微信公众号。
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201902/9072-20190212080102270-663366497.jpg" alt=""/></p>]]></description></item><item><title>收官之作：利用Microsoft Teams构建中大型社区的技术架构与运营经验</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/12/30/10200588.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 30 Dec 2018 12:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/12/30/10200588.html</guid><description><![CDATA[<p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这是我在 <a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455455491&amp;idx=1&amp;sn=9470d22a17f871f57a570772b46d20e8&amp;chksm=b160901a8617190c4138fcc59777a3e4a2e7e59ca75b6de9a68850c58fb5e090ea29d69cfe64&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">精彩又一年：Microsoft Teams技术社区2018年度回顾和展望</span></a> 活动上面的主题分享，我用Microsoft Teams技术社区的实践经验，给大家整理和分享了技术架构和一些运营经验。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Microsoft Teams 设计用来作为团队协作的中枢，它不仅能很好地在组织内部工作，也能打破边界，实现与外部用户的无缝协作，而且这一切都是安全可控的。基于这种特性，它可以用来作为协会、技术社区、上下游合作联盟之类的承载。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202729226-520920848.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">作为一个社区的创建者和管理者，你需要至少考虑如下几件事情
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202729666-1570125271.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">为了支持外部用户加入，管理员需要启用"来宾访问"，然后在创建团队（Team）的时候，要选择"公共"这个级别，同时作为团队的所有者，你还可以控制来宾的一些权限。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">关于在Teams里面启用来宾访问，请参考 https://docs.microsoft.com/zh-cn/MicrosoftTeams/guest-access  的说明
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202729958-84707714.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">创建好社区后，你就需要考虑如何让用户报名以及如何将其加入到社区中来了。你可以使用Forms来收集用户信息，内部用户也可以自己直接加入，外部用户则需要所有者（Owner）添加。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请注意，添加外部用户，其实是比较复杂的一个过程，该账号必须先被添加到当前团队所属组织的Azure Active Directory中，作为一个合法用户账号，然后再将该账号添加到团队（Team）对应的Modern Group中。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202730257-409514300.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果用户报名比较多，以上手工操作可能需要占用很多的时间。所以，我之前给大家分享过使用PowerShell脚本来完成。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">详细脚本，请参考 https://github.com/chenxizhang/microsoftteams-scripts/blob/master/AddUsersToTeams.ps1 
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202730668-1924885554.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">上述脚本从某种程度上可以实现半自动化，但如果你希望有更好的方案，请参考下面这个设计。完整的范例和说明，请参考 https://github.com/chenxizhang/microsoftteams-scripts/blob/master/README.md 
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202730955-1321184281.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">解决了如何添加和管理用户的问题，相信社区就逐渐会进入正轨，只要有比较好的内容和话题，也一定会有活跃的讨论和输出。那么接下来的问题就是，如何对社区成员的活动进行统计分析，例如
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202731299-415704834.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">关于这个需求，目前可以通过Microsoft Graph 接口来实现。该接口目前是在Beta阶段，而且需要管理员授权。
</span></p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202731568-2063170036.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下面是一个范例，可以读取出来消息的数据，以及有多少点赞等等信息
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202731856-68727213.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">欢迎加入Microsoft Teams技术社区，如果对演讲材料和脚本有兴趣，可以访问 https://github.com/chenxizhang/microsoftteams-scripts/blob/master/README.md 
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181230202732189-2108513213.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span> </p>]]></description></item><item><title>人工智能第四课：机器学习的数学基础</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10083601.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 07 Dec 2018 08:24:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10083601.html</guid><description><![CDATA[<p style="background: white"><span style="color:#333333"><span style="font-family:Microsoft YaHei UI; font-size:13pt">我断断续续利用在家休假的时间，完成了这门课程《</span><span style="color:#313131"><span style="font-family:Open Sans; font-size:12pt"><strong>Essential Math for Machine Learning: Python Edition</strong></span><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">》的学习，并且得到了总分91分。
</span></span></span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162326242-984495724.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这门课程的主要内容如下，虽然我们以前都学过数学，但大部分真的都还给老师了。学习这门课程中，总是隐隐约约有一种压力感，一方面总是觉得这些知识我应该知道啊，但另外一方面，看着那些题目却有一种无助的感觉。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162329174-892927075.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">学习数学很可能是有趣的，因为我在学习这门课程时，到处找资料，发现真的有一个网站叫 Math is Fun，而且有中文的版本（数学乐）。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">英文网站是 https://www.mathsisfun.com/ ，中文网站是 https://www.shuxuele.com/index.html 
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162333206-1334210492.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">但无论如何有趣，前提是你能掌握它的一些基本原理。谢天谢地谢Python，因为有了numpy和pandas这些package，在理解和掌握上面提到的几方面数学知识过程中，我感觉到了前所未有的能力。我印象最深刻的是，在计算向量和矩阵运算的时候，使用numpy提供的array以及matrix类型，简直易如反掌。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162337243-586060460.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">课程附带了25个练习，是Jupyter格式的notebook。每个材料都丰富详实，可谓业界良心，真心为这些讲师点赞。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162340266-1273912493.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果对Jupyter 还不太熟悉，建议访问 http://jupyter.org/ 
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我另外还发现一个不错的中文网站 https://zh.wikihow.com 里面有不少数学方程求解的讲解。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162343117-1483529985.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">最后，还给大家分享一个Python的统计分析库——statsmodels ，请参考https://www.statsmodels.org/stable/index.html
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162346175-854621952.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">以及与numpy齐名的Scipy，在本课程中用到了它的stats模块中的binom类型来计算概率，非常实用。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162349132-1405097007.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">要了解Scipy，请参考  https://www.scipy.org/
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162352252-1940377428.png" alt=""/>
	</p><p>
 </p><p style="text-align: justify; background: white"><span style="color:#333333"><span style="font-family:Microsoft YaHei UI; font-size:13pt">请通过 https://aka.ms/learningAI 或者扫描下面的二维码关注本系列文章《人工智能学习笔记》</span><span style="color:black; font-family:Verdana; font-size:10pt">
			</span></span></p><p style="text-align: justify; background: white"> 
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207162354275-1000195878.png" alt=""/><span style="color:black; font-family:Verdana; font-size:10pt">
		</span></p>]]></description></item><item><title>人工智能第三课：数据科学中的Python</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10080918.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 06 Dec 2018 23:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10080918.html</guid><description><![CDATA[<p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我用了两天左右的时间完成了这一门课《Introduction to Python for Data Science》的学习，之前对Python有一些基础，所以在语言层面还是比较顺利的，这门课程的最大收获是让我看到了在数据科学中Python的真正威力（也理解了为什么Python这么流行），同时本次课程的交互式练习体验（Datacamp）非常棒。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074442882-65677115.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这门课程主要包括了6个单元的内容，一开始介绍了Python的基本概念（常见数据类型和变量），从第二节开始讲解列表在Python中的使用，并且逐步演进，我们还学习了使用真正为Data Science准备的几个package的应用。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074443955-1207664762.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">从数据科学的角度来看，Python可能真的是很适合的一个编程语言和环境。这不光是因为他本身的语法比较简单，而且目前已经有几个非常强大的包（Package）对其进行支持。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074444871-353399926.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Python中的list用来表示一系列的数据，它非常灵活，甚至可以在一个列表中包含不同类型的数据，当然这样也就带来了一定的负面作用，例如性能。而numpy的array则是对list的一种改进，它进行规划化（一个array的轴上只支持同一种数据类型），并提供了更多的一些与数据科学的运算（函数）。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074446612-752490397.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">它自身的运算规则也跟列表有极大的区别，例如
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074447447-1877949908.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">numpy库内置支持很多科学运算的函数，不需要依赖其他库
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074448244-1555100156.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">数据科学不光是对数据的处理，而且还需要对数据进行展示。目前全世界最流行的用来做数据可视化的库是matplotlib。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074449375-987679414.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下图是一个最简单的例子
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074450664-1658744912.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请注意，图形的数据来源既可以是List，也可以是Array，当然还可以是下面的终极解决方案DataFrame，来自pandas这个库。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">numpy和matplotlib，可以很好地处理数据科学的场景。但如果数据量真的很大，则可能需要用到pandas了。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074452365-1517845339.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">pandas提供了一个全新的dataframe的对象，它是完全为科学运算和统计而设计的，而且它自带了可视化组件库，不需要额外依赖matplotlib。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074453377-655493968.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">从技术上说，DataFrame很像是一个Excel表格或者数据库，它具有行和列的概念，也有索引的技术。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">DataFrame还支持从外部文件（例如csv）或者网络地址加载数据，这将使得它真正具有实用的价值。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">最后，我之前提到过了，本次课程给我最惊喜的一个体验是交互式练习。这是一个第三方学习平台（DataCamp）提供的，非常酷。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074454348-2017319716.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">最后，基于Jupyter构建的notebooks.azure.com ，让我们可以在线编辑python，并且运行，形成笔记——不需要azure订阅即可使用。如果你愿意，你还可以在本地安装Jupyter。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本地安装Jupyter，请参考 https://jupyter.org/install.html
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074455306-153405888.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请通过 https://aka.ms/learningAI 或者扫描下面的二维码关注本系列文章《人工智能学习笔记》
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074456558-248741080.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074502946-1625793062.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207074503399-906967501.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p>]]></description></item><item><title>人工智能第二课：认知服务和机器人框架探秘</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10080911.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 06 Dec 2018 23:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/12/07/10080911.html</guid><description><![CDATA[<p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这是《人工智能系列笔记》的第二篇，我利用周六下午完成课程学习。这一方面是因为内容属于入门级，并且之前我已经对认知服务和机器人框架比较熟悉。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如有兴趣，请关注该系列 https://aka.ms/learningAI 
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070824998-2138102145.png" alt=""/><br/>
	</p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">但是学习这门课程还是很有收获，这篇笔记时特别加了"探秘"两个字，这是因为他不仅仅是介绍了微软的认知服务和机器人框架及其如何快速开始工作，更重要的是也做了很多铺垫，例如在讲文本分析服务（Text Analytics）之前，课程用了相当长的篇幅介绍了文本处理的一些技术原理，毕竟无论是微软的认知服务，还是其他厂商的服务，或者你自己尝试去实现，其内部的原理都是类似的。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070825480-2636924.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我将给大家分享三个部分的内容
</span></p><ol><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">文本理解和沟通
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">计算机视觉
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">对话机器人
</span></div></li></ol><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt">第一部分：文本理解和沟通</span><span style="font-size:13pt">
			</span></span></p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">现在人工智能很火，花样也很多，可能大家不会想到，很早之前人类对于机器智能的研究，最主要就是在文本理解和处理这个部分，科学家们想要实现的场景主要如下
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070825935-606450360.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这跟人类本身的学习及成长是类似的，一旦机器掌握这些能力，其实就相当于具备了"听说读写"的能力。我据说微软二十年前创立研究院之处，主要的研究范围也是在这个领域，二十年过去了还在继续投资，不断优化这方面的能力，可见其作为人工智能的重要性。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070826537-280171960.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">其实这里提到的大部分过程，可以理解为通常意义上的自然语言处理（Natual Language Processing——NLP）的研究范畴。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070826960-2109924507.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本次课程中使用python进行讲解，提到了一个关键的package：NLTK（Natual Language Toolkit），以及它的几个更加具体的库：freqdist 用来做字（词）频分析，stem用来做词干提取等等。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070827484-939398024.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下面是一些基本的用法
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070828030-1634434311.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">也就是说，其实你用NLTK能做出绝大部分文本理解和处理的场景，当然如果你用微软的认知服务（Cognitive Service），则可以省去很多基础性的工作，而是直接专注在业务问题上。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070828470-2138549616.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">前面三种服务都相对简单，通常你只需要开通，并且调用相关的API 即可，例如 Text Analytics 可用来检测文本语言，识别其中的实体，关键信息，以及情感分析。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070828900-1922376260.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">而Language understanding 则相对更加复杂一点，它的全称是Language understanding intelligence service （Luis），是有一套完整的定义、训练、发布的流程。换言之，Luis允许你自定义模型，而前面三者则是利用微软已经训练好的模型立即开始工作。申请Luis服务是在Azure的门户中完成的，而要进行模型定义和训练，则需要通过 https://luis.ai 这个网站来完成。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070829286-109099769.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下面是我用来测试的一个模型的其中一个Intent （Luis能同时支持多种语言，甚至也能做到中英文混合文本的理解）
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070829629-981728203.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Luis最大的一个使用场合可能是结合本文最后面提到的对话机器人来实现智能问答。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt">第二部分：计算机视觉</span><span style="font-size:13pt">
			</span></span></p><p style="text-align: center; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果说文本智能是尝试学习人类的"听说读写"的能力，那么计算机视觉则是尝试模拟人类的眼睛，来实现"看"的能力。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070829989-66288289.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">图像分析其实就是好比人类看到一个物体（或者其影像），脑电波反射过来信号，使得你意识到你看到的是什么。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070830516-1573327161.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这个能力用到了预先训练好的模型。这个可以通过认知服务中的Computer Vision这个组件实现。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">但是，即便是上面的模型已经包含了数以百万计的照片，但相对而言还是很小的一个集合。所以，如果你想实现自己的图像识别，可以使用认知服务中提供的Custom vision这个能力来实现。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Custom vision拥有一个同样很酷的主页：https://customvision.ai/ ，通过这个网站，你可以上传你预先收集好的照片，并且为其进行标记，通常情况下，每个标记至少需要5张照片，然后通过训练即可发布你的服务，并且用于后续的图像识别检测（例如某个图像是不是汽车，或者香蕉之类的）。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070831076-2124652655.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">人脸识别，则是特定领域的图像识别，这个应用也是目前在人工智能领域最火的一个，而也因为脸是如此重要，所以在认知服务中，有一个专门的API，叫Face API。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070831732-365505274.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">使用这套API，可以做出来很有意思的应用，例如
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070832282-1294763939.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">从技术上说，图像（Image）是由一个一个有颜色的数据点构成的，这些数据点通常用RGB值表示。而视频（Video）则是由一幅一幅的图像（Image，此时称为帧）构成的。所以，计算机视觉既然能做到图像的识别和理解（虽然可能会有偏差），那么从技术上说，它也就具备了对视频进行识别和理解的能力，如果再加上之前提到的文本智能，它就能至少实现如下的场景：
</span></p><p style="text-align: justify; background: white">
 </p><ol><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">识别视频中出现的人脸，以及他们出现的时间轴。如果是名人，也会自动识别出来，如果不是，支持标记，下次也能识别出来。
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">识别视频中的情感，例如从人脸看出来的高兴还是悲伤，以及欢呼声等环境音。
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">文本识别（OCR）——根据图像生成文字。
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">自动生成字幕，并支持翻译成其他语言。
</span></div></li></ol><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070832904-1726036074.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: center; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt">第三部分：对话机器人</span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我记得是在2016年的Build大会上，微软CEO Sayta 提出了一个新的概念：Conversation as a Platform, 简称CaaP，其具体的表现形式就是聊天机器人（chatbot）。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">当时的报道，请参考 https://www.businessinsider.sg/microsoft-ceo-satya-nadella-on-conversations-as-a-platform-and-chatbots-2016-3/?r=US&amp;IR=T 
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070833385-2018926049.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">对话机器人这个单元，讲的就是这块内容。与人脸识别技术类似，机器人这个技术在这几年得到了长足的发展和广泛的应用，甚至到了妇孺皆知的地步。这里谈到的机器人，特指通过对话形式与用户进行交互，并且提供服务的一类机器人，广泛地应用于智能客服、聊天与陪伴、常见问题解答等场合。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">创建一个对话机器人真的很简单，如果你有一个Azure订阅的话。微软在早些时候已经将机器人框架（Bot Framework）完全地整合到了Azure平台。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070833869-373246909.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">做一个机器人（Bot）其实真的不难，但要真的实现比较智能的体验，还真的要下一番功夫。目前比较常见的做法是，前端用Bot Framework定义和开发Bot（用来与用户交互），后台会连接Luis服务或QnA maker服务来实现智能体验，如下图所示。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我在11月份的Microsoft 365 DevDays（开发者大会）上面专门讲解了机器人开发，有兴趣可以参考 https://github.com/chenxizhang/devdays2018-beijing 的资料。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070834335-892393625.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">机器人框架 （Bot Framework）的一个强大之处在于，你可以实现编写一次，处处运行，它通过频道（Channel）来分发服务。目前支持的频道至少有16种。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070834717-1568447477.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我自己之前用过Web Chat，Microsoft Teams，以及Direct Line和Skype for Business等四种。一直对Cortana这个场景比较感兴趣，这次通过学习，终于把这个做成功了，还是挺有意思的。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这项功能，还有一个名称：Cortana Skills，目前需要用Microsoft Account注册这个Bot）。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070835021-670018817.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">请通过 https://aka.ms/learningAI 或者扫描下面的二维码关注本系列文章《人工智能学习笔记》
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070835323-1141098397.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070836321-1262413269.png" alt=""/><img src="https://img2018.cnblogs.com/blog/9072/201812/9072-20181207070836558-1999641964.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span> </p>]]></description></item><item><title>人工智能第一课：使用分类算法预测糖尿病</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/11/26/10018388.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 25 Nov 2018 22:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/11/26/10018388.html</guid><description><![CDATA[<p>原文链接：<a href="https://mp.weixin.qq.com/s/nXFVTorYOm5LjRV5Cic2_w">https://mp.weixin.qq.com/s/nXFVTorYOm5LjRV5Cic2_w</a>
	</p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果你不能用数据表示你所知，那么说明你对它所知不多；如果你对它所知不多，那么你就无法控制它；如果你无法控制它，那么就只能靠运气了。
</span></p><p style="text-align: right; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">—— 陈希章
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">不久前，我开始正儿八经地系统地学习人工智能，并且发起了一个结对学习的活动，目前已经有将近20位同学一起结对，详情请参考下面文章的说明—— <a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455455186&amp;idx=1&amp;sn=2ec54a0dff45ce90f699dc21a02c6bfd&amp;chksm=b16092cb86171bdd13410385bf4fadf2da66106ea19afcf6c4a95e75bd694e6f537f9276f392&amp;scene=21" target="_blank"><span style="color:#576b95">约你六个月时间一起学习实践人工智能</span></a> 。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">目前仍接受报名，但我会对人数总量做一定的控制，并且各位在加入之前必须想清楚自己能否真的花时间坚持下去，一定时间没有学习进度的会被请出群。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我之前承诺大家，会将在学习过程中的笔记分享出来。这是第一篇，也是我完成第一门课《Introduction to Artificial Intelligence》第一单元《Machine Learning》的一些心得。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我写的笔记，只是学习过程中的一些记录，或者一些思考，很有可能会有很多地方有错误，欢迎大家指出，帮助我提高。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065650831-456172073.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这门课是人工智能入门，它的内容分为四个部分：机器学习概述，语音和通信，计算机视觉，对话平台。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065651895-1897152778.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本节介绍了机器学习的基本概念，主要应用场景，并着重通过以Azure Machine Learning Studio为载体，讲解了导入数据、建立和训练、验证模型，发布成Web Service的全过程，通过完成本节学习，你可以对Machine Learning有些基本概念，而课后的练习是一个完整的范例，你可以了解如何通过分类算法建立模型来实现糖尿病的预测。（它分别使用了逻辑回归和决策树算法做比较，并最终选择了决策树作为最优解）。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">机器学习的定义，有兴趣可以参考维基百科的说明：https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以"推理"为重点，到以"知识"为重点，再到以"学习"为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动"学习"的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">看了这么一大段的介绍，其实还是会比较晕。其实最简单理解的话，<strong>机器学习最重要的研究目标就是从大量的数据中找出来一些规律，并且能利用该规律进行预测。</strong>
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">经过这么多年的发展，解决绝大部分问题的算法都已经存在了，我们现在很多时候要做的是收集和准备数据（包括清洗和整理），然后根据业务领域经验建模，并且选择不同的算法去训练模型、验证模型，发现和逼近最好的预测模型。下图是目前Azure Machine Learning 中支持的算法列表。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065652634-2010119420.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">机器学习根据其原理分为
</span></p><p style="text-align: justify; background: white">
 </p><ol><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">监督学习
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">无监督学习
</span></div></li><li><div style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">半监督学习
</span></div><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">监督学习与非监督学习的根本区别在于训练集数据是否需要人为地进行标记。典型的监督学习算法包括回归和分类，而典型的无监督学习算法是聚类。半监督学习是介于两者之间的。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">而关于回归（Regression）和分类（Classification），又有一些明显的区别，我倾向于采纳下面知乎网友的回答。
</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065653172-1772459817.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">那么，回到我们这堂课的命题：通过机器学习来预测某个病人是否为糖尿病（及其概率），这是一个定性问题，它的预测是离散的，而不是连续的，所以这是一个分类的任务。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">假设我们手工有15000个病例样本，分别记录了他们的血糖，血压，年龄等信息，以及他们是否确诊为糖尿病的数据。（这个Diabetic字段非常重要，而这其实也就是需要人工标记的关键信息）
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065653937-996085458.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">另外，还有一份数据是病人和医生的对照表，在本课程学习和作业中，虽然并不是必须的，但这符合真实场景的需要。
</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065654570-397202733.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">对于人工智能和机器学习而言，相比较看起来很酷炫的建模、训练、验证，其实很重要的工作都是在收集数据，有好的数据才会有真正有价值的人工智能。而收集数据中最关键的一个工作是定义哪些数据需要收集，例如上述例子，为什么我们去分析糖尿病时需要选择这些数据，而不是其他的。这里面其实已经有一个建模的过程，而这部分是计算机科学无法实现的，它所依赖的是自然科学和专家经验。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果只是做这种预测，那么我要说，其实我在十几年前就已经能做出来了，那时候我记得"人工智能（Artificial Intelligence）"或"机器学习（Machine Learning）"并没有现在这么流行，人们更热衷于讨论"商业智能（Business Intelligence）"和"数据挖掘（Data Mining）"，我对SQL Server 的BI 和Data Mining还算有一些研究，所以做这种预测还是比较轻松的。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">今时不同往日，SQL Server仍然还有这些能力。但真正的大数据时代，我们可能还需要云端的解决方案。微软的Azure Machine Learning 解决方案就是其中之一，而Azure Machine Learning Studio会提供你需要的一切。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065655113-1488143579.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下图是我创建好的Training experiment （用来做训练的实验）
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065655610-1758096179.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">作为一个强大的Machine Learning的工具，它预设了上百个组件，并且可以随时对数据进行可视化分析。
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065656054-2142766264.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">对于回归和分类算法，通常我们会在进行数据连接，规范化处理后，对数据集进行拆分，一部分（通常70%）用于训练模型，另一部分（通常30%）用于验证模型。如下图所示：
</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065656547-1357992727.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">在最后一步是验证模型，通常我们会选择多个算法比对其输出结果。如下图所知这种输出，Accuracy 越高，则表示准确性越高，可信度也就越高。
</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065656961-1819389451.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">模型训练好之后，接下来就是怎么用于预测了。你可以通过创建一个Predictive experiment来实现这个需求。请注意，它其实跟之前的Training experiment看起来很像，只不过你仔细看的话，会发现input处不一样，而且中间的一些组件，它是引用到了Training experiment中的。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065657443-1341882613.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">你可以一键将其发布为一个Web Service，以便支持客户端调用。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065657929-1904672598.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下图是在Excel中通过一个Add-in进行预测分析的效果（支持批量对数据集进行预测）
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065658424-831888448.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: center; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">下图是我通过Python调用REST API进行预测的范例
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065658910-1769954585.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
				</span></p><p style="text-align: justify; background: white">
 </p><p style="text-align: justify; background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">欢迎大家关注我的《人工智能学习笔记》，请关注本公众号，并扫描下面二维码收藏本系列文章。 
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181126065659292-1823752287.png" alt=""/></p></li></ol>]]></description></item><item><title>如何加入Microsoft Teams 技术社区</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/11/19/9985744.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 19 Nov 2018 13:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/11/19/9985744.html</guid><description><![CDATA[<p><span style="font-family:Microsoft YaHei UI">作者：陈希章
</span></p><p><span style="font-family:Microsoft YaHei UI">时间：2018-11-19
</span></p><p>
 </p><h2><span style="font-family:Microsoft YaHei UI">概述
</span></h2><p><span style="font-family:Microsoft YaHei UI">这个手册适合没有Office 365 账号的用户，你可以使用免费版立即开始使用Microsoft Teams，并且与微软的产品组专家，以及来自两岸三地的社区成员互动交流。如果你是现有Office 365用户，你可以跳过绝大部分步骤，提交申请后，按照第八页的提示切换到Microsoft (Guest) 这个组织即可。
</span></p><p>
 </p><h2><span style="font-family:Microsoft YaHei UI">第一步，通过<a href="https://aka.ms/jointeamsdevcommunity"><span style="color:#0563c1; text-decoration:underline">https://aka.ms/jointeamsdevcommunity</span></a> 提交申请
</span></h2><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211100206-985804524.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211100727-342288497.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">正常情况下，你会收到后台自动发出的邮件（立即），一般会在几个小时内开通你的账号。
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211101114-1386625009.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">后台在处理时，你将收到下面的邮件内容
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211101536-51312156.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><h2><span style="font-family:Microsoft YaHei UI">第二步，使用下面的地址登录使用免费版Teams
</span></h2><p>
 </p><p><a href="https://products.office.com/en-us/microsoft-teams/free"><span style="font-family:Microsoft YaHei UI">https://products.office.com/en-us/microsoft-teams/free</span></a><span style="font-family:Microsoft YaHei UI">
		</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211101934-2079196191.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211102414-130614206.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">请点击"Setup account" ，这个过程是需要为你的账号创建一个对应的Microsoft Account
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211102786-236068222.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">这个密码不是你的邮箱密码，你可以另外设置一个用来作为Microsoft Account的密码
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211103169-1539765081.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211103625-954580835.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211104084-259228575.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">如果你看到这个界面，恭喜你，你已经拥有了免费的Teams应用了。
</span></p><p>
 </p><p>
 </p><h2>第三步，登陆Teams
</h2><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211104479-1771937636.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">完成登陆后，你会看到为你分配的一个空间，这个代表你的公司用的Teams。如果有其他同事（跟你的邮箱后缀一样的）加入进来，你们是可以进行相互的沟通和协作的。
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211104914-1457855020.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">与此同时，你还可以加入其他公司创建的Team。例如我们这个技术社区，就是我在微软的环境中创建的，所以你要进入技术社区的话，需要点击一下你的头像左侧的下拉框，你会看到一个"Microsoft(Guest)" 的选项，如下图所示。
</span></p><p><span style="font-family:Microsoft YaHei UI">惊不惊喜！！！意不意外！！！
</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211105330-837904579.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">不要激动，你还需要提供一些信息才能正式加入组织…
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211105737-969464594.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">验证身份
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211106234-413635997.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">授予权限（对，没错，你必须Accept)
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211107747-602725740.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">谢天谢地，终于等到你了
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211108395-1752581780.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211108743-827103034.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p><span style="font-family:Microsoft YaHei UI">现在，你就可以愉快地在社区中进行技术讨论了。
</span></p><p><img src="https://img2018.cnblogs.com/blog/9072/201811/9072-20181119211109157-564004571.png" alt=""/><span style="font-family:Microsoft YaHei UI">
		</span></p><p>
 </p><p><span style="font-family:Microsoft YaHei UI">如果你要回到你自己的公司那个Teams 界面，你可以直接访问
</span></p><p><a href="https://teams.microsoft.com"><span style="font-family:Microsoft YaHei UI">https://teams.microsoft.com</span></a><span style="font-family:Microsoft YaHei UI">
		</span></p>]]></description></item><item><title>Python在Office 365 开发中的应用</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/10/02/9738018.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 02 Oct 2018 12:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/10/02/9738018.html</guid><description><![CDATA[<p style="background: white"><span style="color:black; font-family:Microsoft YaHei UI"><span style="font-size:12pt">我在昨天发布的文章 —— <a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455455046&amp;idx=1&amp;sn=e9f334674b6deacdeb0d5483dced218b&amp;chksm=b160925f86171b494e0b7f432e766af677353e1aa03d1fe018ba0cad3486af33b39f24fa5adc&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">简明 Python 教程：人生苦短，快用Python</span></a> —— 中提到了Python已经在Office 365开发中全面受支持，有不同朋友留言或私信说想了解更加详细的说明，所以特意整理这一篇给大家参考。</span><span style="font-size:15pt"><strong><br/></strong></span><span style="color:#333333; font-size:13pt">
			</span></span></p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204018279-324329694.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">我之前写的《Office 365 开发入门指南》一书，对Office 365开发进行了比较详细的阐述，有兴趣可以参考 <a href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=2455454926&amp;idx=1&amp;sn=a069bd8162987b9bc3866a69fb1ed9ce&amp;chksm=b16093d786171ac150a69f1b83ab26c8ff8a306d74cdb4440457d4602023efacd5803875f6a9&amp;scene=21" target="_blank"><span style="color:#576b95; text-decoration:underline">《Office 365开发入门指南》上市说明和读者服务</span></a>
		</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204018945-473137444.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:black; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Microsoft Graph SDK for Python</strong></span><span style="color:#333333; font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204019812-1069711286.png" alt=""/><span style="color:black; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong><br/></strong></span><span style="color:#333333; font-size:13pt">
			</span></span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">如果你用Python开发了一个应用程序，希望调用Microsoft Graph来访问Office 365的数据，例如联系人列表，邮件处理，文件分享等。你可以通过下面的地址得到Microsoft Graph SDK，以及代码范例。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">http://aka.ms/pythongraphsamples
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204020674-243838836.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Office 365 Add-ins with Python</strong></span><span style="font-size:13pt">
			</span></span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">Office 365 Add-ins包括Office Add-ins和SharePoint Add-ins，在新的Web Add-ins的这种框架下，Python可以很自然地开发以上两种组件，因为他们其实都是用一个manifest文件进行定义，然后核心内容都是用一个网站来提供。Python可以很方便地开发网站，所以非常简单。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">这里有一个Office Add-in 范例 https://github.com/OfficeDev/Groups-API-Office-Add-in-Python-Sample 
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204021478-1825876835.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">你可以用任意你喜欢的方式来开发Python 网站，例如在Visual Studio中提供了Python工具套件。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204022329-921405381.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">除了上面的这种新型的Web Add-in，Python也可以通过传统方式与Office 应用程序交互，例如操作Excel，PowerPoint，Word等。请参考下面的介绍。
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Python with Excel</strong></span><span style="font-size:13pt">
			</span></span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">有几个很好的Python模块能够方便地操作Excel的数据，包括读与写，<span style="color:red"><strong>不要求本地安装Excel</strong><span style="color:#333333">。例如pandas, openpyxl, xlrd, xlutils 和 pyexcel. 详情可以参考下面的介绍：
</span></span></span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">https://www.datacamp.com/community/tutorials/python-excel-tutorial 
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204023261-625642233.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Python for Excel</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">利用xlwings模块，你可以很方便地Python应用程序中操作Excel文件（同时支持xls和xlsx），也可以在Excel中直接调用Python的脚本（通过RunPython函数），还可以使用Python为Excel自定义函数，<span style="color:red"><strong>需要本地安装Excel</strong><span style="color:#333333">。请参考 https://www.xlwings.org/ 
</span></span></span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204023946-1383147631.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Python for Word</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">使用python-docx这个模块，可以很方便地创建和修改Word文档（不需要本地安装Word）
</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">https://pypi.org/project/python-docx/
</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204024996-483515910.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI"><span style="font-size:15pt"><strong>Python for PowerPoint</strong></span><span style="font-size:13pt">
			</span></span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">使用python-pptx这个模块，可以很容易地创建或修改PowerPoint 文档（不需要本地安装PowerPoint）。请参考
</span></p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">https://python-pptx.readthedocs.io/en/latest/ 
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204025701-1080650432.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p><p style="text-align: justify; background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">其实还有很多，Python的模块都是开源的，由全世界的程序员贡献并分享，如果遇到什么需求，可以先用<strong> pip search </strong>命令搜索一下，也许已经有了现成的模块呢。
</span></p><p style="background: white">
 </p><p style="background: white"><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">本文转载自微信公众号"希章分享"，有兴趣可扫描关注。
</span></p><p style="background: white">
 </p><p style="background: white"><img src="https://img2018.cnblogs.com/blog/9072/201810/9072-20181002204026380-1639034768.png" alt=""/><span style="color:#333333; font-family:Microsoft YaHei UI; font-size:13pt">
		</span></p>]]></description></item><item><title>《Office 365开发入门指南》上市说明和读者服务</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/09/23/9693103.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 23 Sep 2018 08:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/09/23/9693103.html</guid><description><![CDATA[<p><span style="font-size:24pt"><span style="font-family:微软雅黑">写在最开始的话</span>
		</span></p><p><span style="font-family:微软雅黑">拙作《</span>Office 365<span style="font-family:微软雅黑">开发入门指南》上周开始已经正式在各大书店、在线商城上市，欢迎对</span>Office 365<span style="font-family:微软雅黑">的开发、生态感兴趣的开发者、项目经理、产品经理参考本书，全面了解</span>Office 365<span style="font-family:微软雅黑">带来的全新机遇以及在具体业务应用开发中的场景。</span>
	</p><p><span style="font-family:微软雅黑">写作本书差不多花了我一年的业余时间，这其实是源于我从美国回来后，跟国内的开发者朋友们交流时许下的一个承诺。我最开始是将一些文章发表在博客上面，后来越写越多，目录也一再调整，到</span>2017<span style="font-family:微软雅黑">年底的时候，发现篇幅已经不小，而且累计的阅读量也有了一定的规模。</span>
	</p><p><a href="C:\Users\arechen\AppData\Local\Temp\OpenLiveWriter1455378038\supfiles15DFBDA1\image3.png"><img src="https://img2018.cnblogs.com/blog/9072/201809/9072-20180923164725426-142191770.png" alt="" border="0"/></a>
	</p><p><span style="font-family:微软雅黑">在跟公司领导沟通汇报了这个情况，也听取了技术社区朋友们的意见后，大家建议可以将这些文章集结成书。整理本书的过程又花了半年左右的时间，个中曲折和辛苦我已不愿过多提起，在此衷心感谢为本书的最终面世提供支持和付出努力的领导、同事，以及北京大学出版社的编辑（魏老师和孙宜编辑）。</span>
	</p><p><span style="font-family:微软雅黑">虽然我竭尽了全力，想确保该书的内容和质量，但由于水平所限，可能其中仍然有不少可以改进的地方，敬请大家批评指正。另外，由于</span>Office 365<span style="font-family:微软雅黑">一直在不断改进，可能少数功能的界面或者用法与我写作之时已经有出入，敬请谅解，并且通过读者服务渠道跟我取得联系，谢谢大家支持。</span>
	</p><p>
 </p><p><span style="font-size:24pt"><span style="font-family:微软雅黑">读者服务渠道和安排</span>
		</span></p><ol style="margin-left: 39pt"><li><span style="font-family:微软雅黑"><strong>购买渠道</strong>。目前该书已经在全国各大书店以及京东、当当等网站可以购买，据说线上购买有一定的折扣。</span>
		</li><li><span style="font-family:微软雅黑"><strong>反馈渠道</strong>。通过我的公众号（需要先关注</span>"<span style="font-family:微软雅黑">希章分享</span>"<span style="font-family:微软雅黑">）可以直接提交本书的任何反馈。另外，您也可以通过</span>  office365devguide@xizhang.com <span style="font-family:微软雅黑">和我取得联系。</span>
		</li><li><span style="font-family:微软雅黑"><strong>专属服务</strong>。为了帮助大家更好地使用本书，我接下来会为每一章录制一个有声课程，给大家讲一讲重点，并且提示一些最新的功能。这一批有声课程将于国庆节之前通过</span>"<span style="font-family:微软雅黑">希章分享</span>"<span style="font-family:微软雅黑">这个公众号推送，请大家留意。</span>
		</li><li><span style="font-family:微软雅黑"><strong>其他提示</strong>。在微软和合作伙伴举办的</span>Office 365<span style="font-family:微软雅黑">相关活动</span>——<span style="font-family:微软雅黑">包括每年由微软组织</span>Tech Summit<span style="font-family:微软雅黑">、</span>Microsoft 365 DevDays<span style="font-family:微软雅黑">，以及由合伙伙伴和</span>MVP<span style="font-family:微软雅黑">技术社区组织的</span>Office 365<span style="font-family:微软雅黑">活动，本书很可能会作为奖品或者礼品送给到场的参会（赛）者，部分场合会有签名版本，欢迎大家多多参与。</span>
		</li></ol><p>
 </p><p><a href="C:\Users\arechen\AppData\Local\Temp\OpenLiveWriter1455378038\supfiles15DFBDA1\WeChat-Image_201809231609163.jpg"><img src="https://img2018.cnblogs.com/blog/9072/201809/9072-20180923164726042-1645385738.jpg" alt="" border="0"/></a>
	</p><p>
 </p><p><span style="font-size:24pt"><span style="font-family:微软雅黑">内容摘要和阅读指南</span>
		</span></p><p><span style="font-family:微软雅黑">微软的</span>Office365<span style="font-family:微软雅黑">是业界知名的生产力平台，从</span>2011<span style="font-family:微软雅黑">年</span>6<span style="font-family:微软雅黑">月</span>28<span style="font-family:微软雅黑">日正式推出以来，现在全世界拥有数以亿计的活跃用户，实现现代化办公；不仅如此，</span>Office365<span style="font-family:微软雅黑">对于广大的开发者来说，更提供了广阔的发展机遇，你可以利用这个平台所提供的能力，快速构建</span>"<span style="font-family:微软雅黑">云优先、移动优先</span>"<span style="font-family:微软雅黑">的应用，以全新的方式分发给全世界的用户。</span>
	</p><p><span style="font-family:微软雅黑">这是第一本围绕</span>Office365<span style="font-family:微软雅黑">开发的中文图书，出自微软高级产品经理之手，不仅全面介绍了</span>Office365<span style="font-family:微软雅黑">开发的架构，也有丰富详实的案例，同时还有国内版和国际版的比较，相信对于开发者是一个实用性指南。</span>
	</p><p><span style="font-family:微软雅黑">本书共分为六个章节，首先第一章会为读者回顾一下</span>Office<span style="font-family:微软雅黑">平台开发的技术和场景，并且引出</span>Office 365<span style="font-family:微软雅黑">开发的四个核心方向，第二章着重展开了基于</span>Microsoft Graph<span style="font-family:微软雅黑">的开发流程和案例，第三章详细介绍了全新的</span>Office Web Add-in<span style="font-family:微软雅黑">的架构和开发生命周期，第四章围绕</span>SharePoint Online<span style="font-family:微软雅黑">的开发技术进行探讨。第五章展示了</span>Office365<span style="font-family:微软雅黑">开发的另外一个新的领域和快速开发面向主题的商业应用程序实践，最后的第六章揭示了</span>Office 365<span style="font-family:微软雅黑">现有的人工智能技术，以及详细讲解了如何基于</span>Office 365<span style="font-family:微软雅黑">开发智能服务机器人的过程。</span>
	</p><p><span style="font-family:微软雅黑">本书的定位首先是帮助广大的</span>Office <span style="font-family:微软雅黑">开发人员实现从传统的、分散的客户端开发体验向</span>Office 365<span style="font-family:微软雅黑">提供的一致的、跨平台、跨设备的体验过渡，如果你已经有</span>Office<span style="font-family:微软雅黑">开发的经验（包括</span>VBA<span style="font-family:微软雅黑">和</span>VSTO<span style="font-family:微软雅黑">），这本书将带领你了解新的平台（</span>Office365<span style="font-family:微软雅黑">）及其带来的新的机遇，</span>Web Add-in<span style="font-family:微软雅黑">采用主流的</span>Web<span style="font-family:微软雅黑">技术实现，一方面可以让你的应用更加易于分发和更新，另外一方面也可以让你的开发技能进一步扩展，建议你先着重阅读第一章和第三章。如果是你已经有</span>SharePoint<span style="font-family:微软雅黑">开发的经验，通过本书你将了解到</span>SharePoint Online<span style="font-family:微软雅黑">与本地版本的</span>SharePoint Server<span style="font-family:微软雅黑">在开发模式上面的差异，通过阅读第一章和第四章你还将深入学习</span>SharePoint Add-in<span style="font-family:微软雅黑">和</span>SharePoint Framework<span style="font-family:微软雅黑">在设计上面的考虑和具体应用场景。</span>
	</p><p><span style="font-family:微软雅黑">与此同时，独立开发商（</span>ISV<span style="font-family:微软雅黑">）的开发团队、项目经理、产品经理也可以从本书获得明显的收益，这是因为</span>Office365<span style="font-family:微软雅黑">提供了一套强大的接口（</span>Microsoft Graph<span style="font-family:微软雅黑">），你可以通过这种新的技术，将</span>Office365<span style="font-family:微软雅黑">的能力集成到你的解决方案中去，为你的客户提供更多独特的价值。这些能力既包含了</span>Office 365<span style="font-family:微软雅黑">标准的功能，例如邮件，个人网盘，文档协作，联系人管理，会议室和日程管理等等，也包括基于</span>Office 365<span style="font-family:微软雅黑">的大量数据来实现人工智能的能力。本书第一章、第二章以及第五章、第六章特别适合于此类读者。</span>
	</p><p>
 </p><p><a href="C:\Users\arechen\AppData\Local\Temp\OpenLiveWriter1455378038\supfiles15DFBDA1\99999990003446055_1_o-14.jpg"><img src="https://img2018.cnblogs.com/blog/9072/201809/9072-20180923164726606-2124132133.jpg" alt="" border="0"/></a>
	</p>]]></description></item><item><title>基于Microsoft Graph打造自己的Timeline应用</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/05/13/9033990.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 13 May 2018 15:30:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/05/13/9033990.html</guid><description><![CDATA[<h4>原文链接：<a title="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md" href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md">https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/timeline.md</a>&nbsp;</h4><h1>前言</h1><p>前不久微软正式放出了Windows 10 春季更新（1803），其中有一个非常有特色的应用，就是Windows 10 新增了一个Timeline（时间线）的应用，这个应用可以让用户一目了然地看到最近一段时间所有在Windows中的活动，包括浏览过什么网页，打开过什么文档，设置过什么选项等。下图是一个示范的效果图：<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-16-10.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-16-10.png"></a><p>请注意，这里看到的信息不是一个静态的图片，每一个卡片都是可以点击的，而且点击之后会通过调用对应的应用程序自动打开这些活动（恢复到之前的状态），就好像时光倒流了一样。<p>看起来很酷，不是吗？那么，这样一个应用到底是怎么实现的呢？我们如果也想实现类似的场景，有什么样的思路呢？答案在上周的Microsoft Build 大会上做了揭晓：其实Timeline是一个基于Microsoft Graph实现的应用，只不过他读取的数据，不仅限于Office 365的文档历史，还包括了Windows 10 上面的活动，这也是近年来一个重大的变化：微软已经把Office 365、Windows 10、EMS这三个产品合并为一个——Microsoft 365，将为最终用户提供最佳的体验，他们的能力也将统一通过Microsoft Graph向开发者提供服务。<h1>原理解析</h1><p>首先，从技术上说，要实现这个Timeline应用，用户需要允许相关的活动源将有关信息发送给Microsoft Graph。这里所谓的<code>活动源</code>，可以是Office客户端，也可以是Windows 10的应用程序。微软一直致力于保护用户的隐私，所以这个Timeline的功能，默认是不开启的，只有用户在被明确告知上述行为并且选择接受的情况下，才会开始收集数据并进行展现。<p>其次，除了Windows 10自带的Timeline应用，其实只要几行代码，就能实现一个类似的时间线应用。那么问题就来了，这些<strong>应用之间的数据是不是隔离的</strong>呢？答案是肯定的，也就是说Windows 10这个Timeline应用只能读取到它在经用户同意的前提下收集的那部分活动数据，而我们自定义的应用也是如此。<p>最后，这里面还有一个有意思的概念。一个活动（Activity）可以对应一个或者多个历史记录（History Items）。历史纪录相当于是活动在某个时间点的快照。<blockquote><p>据说这个技术，最早在内部有一个代码叫做“Project Rome”，现在合并到了Microsoft Graph中，并且已经在V1.0中提供。相关官方文档请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/concepts/activity-feed-concept-overview">https://developer.microsoft.com/en-us/graph/docs/concepts/activity-feed-concept-overview</a> .</p></blockquote><h1>创建Timeline应用</h1><p>有了如上概念，我们就闲话少说，撸起袖子加油干吧。因为要访问Microsoft Graph，所以你就必须要注册一个AAD的应用程序。注册这样一个应用程序没有什么特别的，唯一要了解的是，要支持用户活动的读写，需要申请一个UserActivity.ReadWrite.CreatedByApp的委派权限（Delegated Permission），如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-47-02.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-47-02.png"></a><p>大家可以看到，这个权限并不需要管理员认可就能工作。<blockquote><p>请注意，目前UserActivity.ReadWrite.CreatedByApp这个权限，仅在国际版的环境中可以用，而且必须在AAD 1.0的环境中实现。AAD 2.0还不支持,国内版（Gallatin）也暂时不支持。</p></blockquote><h1>如何发布Activity</h1><p>Windows 10自带的Timeline其实是一个UWP应用，不过你可以用你最熟悉的方式来实现自定义的Timeline应用。但抛开这些具体的界面，我们可以快速了解一下如何创建和更新用户活动（Activity）。<p>创建或更新Activity的API，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_put_activity">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_put_activity</a>, 大体上说，这里的关键是用PUT方法操作，同时我们既可以单独创建Activity，也可以在创建Activity的时候同时创建History Item，后者也称为“Deep Insert”。<p>为了给大家直观演示效果，我这里简化一下步骤。我将采用官方的Microsoft Graph Explorer来模拟一个客户端，并且直接用REST API来进行操作。如果你对Microsoft Graph Explorer不太熟悉，你可能需要先阅读一下<a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/graphexplorer.md">这篇文章</a>。<p>正如上一节提到的，你需要确保授予了UserActivity.ReadWrite.CreatedByApp这个权限，请参考下图<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-54-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-22-54-13.png"></a><p>我直接用官方给的例子，为当前用户新增一个网络文章浏览的活动，请注意下面的<code>appActivityId</code>、<code>activitySourceHost</code>、<code>activationUrl</code>、<code>visualElements</code> 是必须的。这个例子的意思是指定义了用户这个活动是浏览了 <code>http://www.contoso.com/article?id=12345</code> 这个Url所指向的一篇文章。<pre>{
    "appActivityId": "/article?12345",
    "activitySourceHost": "https://www.contoso.com",
    "userTimezone": "Africa/Casablanca",
    "appDisplayName": "Contoso, Ltd.",
    "activationUrl": "http://www.contoso.com/article?id=12345",
    "contentUrl": "http://www.contoso.com/article?id=12345",
    "fallbackUrl": "http://www.contoso.com/article?id=12345",
    "contentInfo": {
        "@context": "http://schema.org",
        "@type": "Article",
        "author": "Jennifer Booth",
        "name": "How to Tie a Reef Knot"
    },
    "visualElements": {
        "attribution": {
            "iconUrl": "http://www.contoso.com/icon",
            "alternateText": "Contoso, Ltd.",
            "addImageQuery": "false",
        },
        "description": "How to Tie a Reef Knot. A step-by-step visual guide to the art of nautical knot-tying.",
        "backgroundColor": "#ff0000",
        "displayText": "Contoso How-To: How to Tie a Reef Knot",
        "content": {
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "body":
            [{
                "type": "TextBlock",
                "text": "Contoso MainPage"
            }]
        }
    }
}
</pre><p>在Microsoft Graph Explorer 中用PUT方法，将上述数据，发送到<code>https://graph.microsoft.com/v1.0/me/activities/%2Farticle%3F12345</code>, 同时记得设置Content-Type为application/json<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-01-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-01-36.png"></a><p>如果一切正常的话，你将收到一个回复，里面包含了在Microsoft Graph中创建的Activity的信息，这里会返回全局唯一的<code>id</code>属性。<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-03-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-03-20.png"></a><p>请注意，如果要更新，也是使用同样的一个命令。而如果要进行删除，则需要用 DELETE 方法，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_delete_activity">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_delete_activity</a>。<h1>如何查询Activity</h1><p>有两个接口用来查询用户活动（Activity），分别是<ol><li>获取用户活动（可以获取全部，也可以获取指定筛选条件的活动），如果需要同时包含历史信息，则需要添加查询参数 $expand=historyitems。 详细的API说明，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_activities">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_activities</a> 。
<li>获取用户最近的活动。可以理解为上一种的简化版本，Microsoft Graph会查询最近的一个History Items，然后找到它们对应的活动条目。详细的API说明，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_recent_activities">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/projectrome_get_recent_activities</a>。</li></ol><p>下面是一个简单的查询例子<p><a href="https://github.com/chenxizhang/office365dev/blob/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-15-40.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/e9b5a59cb827841d36692cc4ec52c11d43062e04/docs/images/2018-05-13-23-15-40.png"></a><h1>结语</h1><p>这一篇文章带领大家了解了Windows 10最新版本中Timeline这个功能的实现原理，并且用实例演示了如何使用Microsoft Graph来实现自定义的类似应用，我用Microsoft Graph Explorer做了演示，大家可以一目了然地看到接口的调用和返回值。<p>因为这个功能比较新，Microsoft Graph的SDK中，还没有完全包含这个功能，我还发现.NET SDK中存在一点小问题，已经跟产品团队反馈了。所以，如果你现在开始做实践，建议还使用REST API的方式。]]></description></item><item><title>Office 365 应用开发的 .NET Core 模板库</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/04/22/8907796.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 22 Apr 2018 08:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/04/22/8907796.html</guid><description><![CDATA[<p><br></p><h1>概述</h1><p>前不久我写过一篇文章<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365opensource.md">拥抱开源，Office 365开发迎来新时代</a>，给大家介绍了Office 365开发的典型场景是如何支持开源平台的：Office 365通过Microsoft Graph，以REST API的方式提供服务，任何开发平台都可以很方便地与其进行集成；Office Add-ins，SharePoint Add-ins和Microsoft Teams Apps开发，都可以基于标准的Web开发技术栈来实现，而且官方提供了对NodeJS，React，TypeScript等主流平台和框架的默认支持（工具和模板层面都有）。<p>文章发表之后，我收到不少反馈，其实我内心深处牵挂的还有广大的.NET开发人员啊。大家知道，.NET从头到脚都是已经完全开源了的，针对Office 365的这些开发场景，是否有开箱即用的模板可供大家使用呢？利用周末的时间，我开始了这个新的项目，就是为大家整理出来一套标准的.NET Core模板库，欢迎用你最熟悉的姿势关注 <a href="https://github.com/chenxizhang/dotnetcore-office365dev-templates">https://github.com/chenxizhang/dotnetcore-office365dev-templates</a>，你可以简单粗暴地直接给我 <code>star</code>,也可以 <code>fork</code> 这个项目通过 <code>pull request</code> 提交你的模板，你还可以通过<code>issue</code>通道给我反馈问题。<p>这一套模板库，不仅仅可以降低广大的.NET 开发人员（准确地说是.NET Core开发人员）学习和使用Office 365开发平台的门槛（尤其是如何在不同的场景下完成OAuth认证以及快速通过实例学习Graph的典型功能），还有一个独特的价值是可以让你在国际版和国内版这两个平台的选择和切换过程中少走一些弯路，我相信真正做过这方面开发的朋友们现在一定是热泪盈眶的表情。<p>希望大家喜欢！<p><br><h1>计划支持的模板</h1><p><br><p><a href="https://images2018.cnblogs.com/blog/9072/201804/9072-20180422160936575-1852600632.png"><img width="896" height="665" title="image" style="display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201804/9072-20180422160937121-1196658666.png" border="0"></a><h1>先决条件</h1><p>要使用这些模板，你只需要在开发机器上面安装了 .NET Core SDK 版本2.0 及以上即可。请通过官方网站提示到的方式进行下载和安装(<a href="https://www.microsoft.com/net/download/">https://www.microsoft.com/net/download/</a>)。请注意，我们现在是跨平台的哦，无论Windows，还是Mac，或是Linux都支持进行.NET Core开发。<p>另外，你可能至少需要一款代码编辑器，你可以安装Visual Studio，也可以使用Visual Studio Code，甚至是任何一个文本编辑器。我是使用 <a href="http://code.visualstudio.com/">Visual Studio Code</a>.<p><br><h1>如何安装模板</h1><p>安装这些模板非常简单，你只需要一行命令即可，<code>dotnet new -i 模板标识</code>，例如使用<code>dotnet new -i chenxizhang.dotnetcore.msgraph.console.CSharp</code> 来安装可以快速实现Microsoft Graph的控制台应用程序模板。<p><br><h1>如何使用模板</h1><p>模板安装成功后，你可以在模板列表中看到这些新的模板，每个模板都有一个短名称（Short Name），你可以通过 <code>dotnet new 模板短名称</code>来使用这些模板，例如 <code>dotnet new graphconsole</code> 这句命令就可以快速基于模板创建一个可以快速实现Microsoft Graph的控制台应用程序。<p>每个模板都带有一些参数以便支持不同的场景，最典型的参数是 <code>--instance</code>，这个参数将告诉模板引擎，你使用的Office 365环境是国际版还是国内版的，它是一个必填项，有两个选项，分别是<code>global</code>代表国际版，<code>gallatin</code>代表国内版，但默认会设置为国际版。<p>你不需要记住所有这些参数，而是可以通过 <code>dotnet new 模板短名称 -h</code>这样的命令来查看该模板的介绍和参数说明。<p>每个模板都带有一个详细的说明文档，你可以点击上表中模板短名称跳转，同时在生成的代码文件的顶部也有链接，我非常欢迎大家给我反馈。<p><br><h1>如何卸载模板</h1><p>在如下两种情况下，你可能需要卸载模板<ol><li>你不再喜欢这些模板（我希望这种情况不会发生）
<li>你需要安装模板的更新版本</li></ol><p>无论是哪一种原因，你都可以随时简单地通过 <code>dotnet new -u 模板标识</code> 进行卸载，例如<code>dotnet new -u chenxizhang.dotnetcore.msgraph.console.CSharp</code>可以卸载控制台应用程序模板。请放心，我不会带走一片云彩。<p><br><h1>常见问题解答（将持续更新）</h1><ol><li>这些模板支持哪些开发语言？
<blockquote><p>目前仅支持C#。限于能力和精力，其他的语言暂时没有支持计划，欢迎有其他语言特长（例如F#,VB.NET等）的朋友参与该项目。</p></blockquote></li></ol>]]></description></item><item><title>拥抱开源，Office 365开发迎来新时代</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/04/17/8870829.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 17 Apr 2018 15:29:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/04/17/8870829.html</guid><description><![CDATA[<h1>前言</h1><p>作为全球最大的开放源代码托管平台，Github在上周迎来了它的十岁生日。自从2008年正式上线以来，Github上面汇聚了数以千万计的开发人员和各种项目，它几乎成为了开源的代名词和风向标，各大软件巨头都纷纷支持，在广大程序员心目中，也更是精神图腾一般的存在，坊间戏言它是最大的同性交友平台。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-21-22-05.png"><img alt="github 十周年" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-21-22-05.png"></a><p>我自己对开源了解不多，并且能力也有限，一直没有在这方面有所贡献，但我肯定和大家一样都是Github的受益者。今天这篇文章一方面是希望借此为Github庆生（本来是上周想写，但一直没有时间），另外也是因为最近有开源社区的朋友邀请我有机会谈一谈这些年Office 开发（尤其指Office 365开发）中对开源平台的支持，这方面我多多少少知道一点，就斗胆写出来，也算是向“开源”精神致敬吧，请大家参考。<blockquote><p>本文以及这个系列文章都是托管在<code>Github</code>上面，用<code>markdown</code>这种自由奔放的轻量级标记语言写成，使用的工具<code>Visual Studio Code</code>也是开源的，欢迎到<a href="https://github.com/chenxizhang/office365dev">https://github.com/chenxizhang/office365dev</a> 上面来提<code>issue</code>，欢迎给我<code>star</code>以鼓励，欢迎<code>fork</code>这个<code>repo</code>并且通过<code>pull request</code>提交你的见解。</p></blockquote><h1>微软的开源行动</h1><p>微软这几年内部进行了深刻的转型，为外界所熟知的除了有业务方向的变化、组织的调整、股价的飞涨之外，时不时会有一些让业界“看不懂”的新动作，过去的不多说，今天最新的一个劲爆新闻是微软也要推出自己定制版本的Linux，不禁让人感慨这世界到底怎么了。<p>但要论起微软在开源方面的努力，其实在多年前就开始了。2006年前后，微软发布了Codeplex网站，当时也是规模不小的开源代码托管平台，微软自己有很多著名的项目，都是在这个平台上面开放源代码，包括ASP.NET等，但后来的故事大家也差不多知道，随着Github的崛起并且成为事实上的标准，微软将几乎所有项目迁移到了Github，并且于2017年12月份正式封存了Codeplex（目前继续提供只读查询，和下载服务）。<p>2014年4月，微软宣布成立.NET基金会，同时宣布释出.NET编译器平台Roslyn，作为开放源代码软件。11月释出在服务器上运行的.NET Core源代码，交由.NET基金会管理，鼓励自由软件社群参与将.NET软件平台移植到Linux与Mac OS上。基金会由开源社区的大神Miguel领衔，管理着55个正式的项目，不少业界的知名公司也是基金会的重要成员，包括Google，三星等。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-21-56-32.png"><img alt=".net 基金会" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-21-56-32.png"></a><blockquote><p>值得一提的是，.NET基金会的源代码也是托管在Github上面的，地址是 <a href="https://github.com/dotnet">https://github.com/dotnet</a>。</p></blockquote><p>回到Github上面来，据不完全统计，目前微软员工参与Github的人数是全世界最多的，所有项目获得Star总数组织排名全世界第三。下面我有一个不完全的统计，可以看出近四年来，微软在Github上面的贡献稳步攀升的表现，目前的Repository数量至少有 2054 个。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-01-16.png"><img alt="microsoft at github" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-01-16.png"></a><p>目前在Github上面，微软最受欢迎的40个项目如下<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-03-11.png"><img alt="top 40" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-03-11.png"></a><h1>Office 365开发拥抱开源</h1><p>那么，我们来看看Office 365的开发，到底跟开源有什么关系呢？在Github上面，微软除了有一个最大的组织（<a href="https://github.com/microsoft">https://github.com/microsoft</a>）外, 还有两个跟Office 365开发直接相关的组织，他们分别是<ol><li>SharePoint 开发 ：<a href="https://github.com/sharepoint">https://github.com/sharepoint</a><li>Office 365 开发 ：<a href="https://github.com/officedev">https://github.com/officedev</a></li></ol><p>SharePoint开发十大最受欢迎项目如下所示<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-08-59.png"><img alt="sharepoint project" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-08-59.png"></a><p>Office 365开发中star数量超过100个16个项目如下<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-10-04.png"><img alt="office project" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-10-04.png"></a><p>以上是微软产品组不断贡献出来的一些项目。接下来，我还要谈一下在Office 365开发的不同层面是如何支持开源平台的。目前来说，我们一般将Office 365的开发分为如下几个领域<ol><li>使用Microsoft Graph将你的业务应用与Office 365无缝整合。
<li>通过Office Add-in的技术扩展你熟悉的Office应用程序。
<li>通过SharePoint Add-in的技术打造基于SharePoint的业务应用。
<li>基于Microsoft Teams开发智能机器人或者业务选项卡、连接器应用。</li></ol><h2>Microsoft Graph对于开源平台的支持</h2><p>使用 Microsoft Graph API 轻松连接到可加快工作效率的数据 – 邮件、日历、联系人、文档、目录、设备以及在这些数据中发现有价值的信息 —— 不夸张地说，如果说员工和知识是企业的两大无形资产的话，那么Microsoft Graph就是一个宝藏，它不仅代表着现在，也意味着未来极大的可能。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-25-14.png"><img alt="graph" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-25-14.png"></a><p>为了让Microsoft Graph能够极大地方便开发者调用，从一开始的设计理念，就是要支持所有的开发平台 —— 不管是开源的，还是不开源的。这一点是由Microsoft Graph的工作机制来保证的 —— 它就是一套标准的REST API。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-30-53.png"><img alt="list Messages" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-30-53.png"></a><p>这些API都是返回Json数据格式，而且完全基于OData的规范设计，支持标准的查询参数。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-32-13.png"><img alt="odata query" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-32-13.png"></a><p>除了REST API ，微软也有针对主流的平台提供了SDK，可以加快开发的速度。<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-33-22.png"><img alt="sdk" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-33-22.png"></a><h2>使用Visual Studio Code快速开发Office Add-in</h2><p>我此前有过一篇<a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/vscodetoofficeadd.md">文章</a>专门介绍这个主题，这里简单地整理几个要点。<p>要开发Office Add-in，你现在有多个选择<ol><li>如果你是Visual Studio的资深用户，你的经验可以很好地复用，Visual Studio 2017提供了开箱即用的Office Add-in模板，几次点击就可以创建一个项目，并且可以一键进行调试。
<li>与此同时，你可以使用Visual Studio Code这个开源的编辑器，结合 NodeJS、 Typescript、React、JQuery 等开源平台和框架来构建你的Office Add-in，在设计你的UI时，你还开源直接使用微软开源的Office Fabric UI呢。</li></ol><p>下面我演示一个基本的步骤<ol><li><p>安装环境（NodeJS，Visual Studio Code）</p><li><p>安装Office Add-in项目生成器 <code>npm install -g yo generator-office</code></p><li><p>创建项目 <code>yo office</code><p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-43-21.png"><img alt="create office project" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-43-21.png"></a></p><li><p>在Visual Studio Code中编辑和调试项目<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-45-13.png"><img alt="visual studio code" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-45-13.png"></a></p></li></ol><p>Visual Studio Code的话题也许三天三夜都讲不完，但通过上述的介绍，大家可以看到现在开发Office Add-in是一种全新的体验，你可以使用你最熟悉的编辑器，搭配你最喜欢的框架来工作。<h2>全新的SharePoint Framework，全新的组件式开发体验</h2><p>与Office Add-in一样，我此前也已经有专门的<a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/sharepointframework.md">文章</a>介绍和演示了SharePoint Framework的开发体验，这里也仅仅是将与开源相关的内容重点整理给大家参考，SharePoint Framework开发的最便捷步骤如下：<ol><li><p>安装环境（NodeJS，Visual Studio Code）</p><li><p>安装模块 <code>npm install -g yo gulp</code></p><li><p>安装SharePoint Framework 项目模板 <code>npm install -g @microsoft/generator-sharepoint</code></p><li><p>创建项目 <code>yo @microsoft/sharepoint</code> 推荐使用React<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-52-43.png"><img alt="sharepoint project" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-52-43.png"></a></p><li><p>运行和调试项目 <code>gulp serve</code><p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-53-34.png"><img alt="sharepoint workbench" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-22-53-34.png"></a></p><li><p>在Visual Studio Code中编辑项目(图略)</p><li><p>部署项目 <code>gulp bundle</code>，<code>gulp package-solution</code></p></li></ol><h2>Microsoft Teams的扩展开发体验</h2><p>Microsoft Teams是Office 365中一个重要的创新，它可以将团队协作提升到一个新的层次。从另一方面，开发人员也可以在这个平台上面拥有全所未有的能力，例如：<ol><li>为Teams定制智能会话机器人 (Bot)，以全新的交互方式为用户提供服务
<li>将业务应用，以选项卡（Tab）的方式集成到Teams的频道中来
<li>定制消息扩展（Message Extension）及连接器（Connector，Webhook），与外部系统进行松耦合式的对接</li></ol><p>听起来有点复杂，但其实做起来真的不难，请参考下面的步骤<ol><li><p>安装环境（NodeJS，Visual Studio Code）</p><li><p>安装Teams项目模板 <code>npm install yo generator-teams -g</code></p><li><p>创建Teams项目 <code>yo teams</code><p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-23-07-28.png"><img alt="yo teams" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-23-07-28.png"></a></p><li><p>在Visual Studio Code中编辑项目<p><a href="https://github.com/chenxizhang/office365dev/blob/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-23-10-27.png"><img alt="vscode teams" src="https://github.com/chenxizhang/office365dev/raw/4b0c8decb80ca27952254f6db32cc3f0fdb39353/docs/images/2018-04-17-23-10-27.png"></a></p></li></ol><p>你可以通过上面的步骤快速创建一个Microsoft Teams应用，但是要做出来一个真正可用的App，你毫无疑问还需要更多的时间，请参考官方的文档 <a href="https://docs.microsoft.com/zh-cn/microsoftteams/platform/">https://docs.microsoft.com/zh-cn/microsoftteams/platform/</a><p>上面提到的Office Add-ins、SharePoint Add-ins、Teams App开发，你可以看到针对NodeJS都提供了第一优先的支持，这是实实在在地爱开源啊。但我也必须说明的是，<code>Office Add-ins</code>、<code>SharePoint Add-ins</code>、<code>Teams App</code> 的开发支持任何的开发平台，因为他们说到底就是一个标准的Web应用，只不过还没有像NodeJS这样上升到工具和模板层面（这个可以通过开源社区大家努力来实现），所以你可以使用<code>ASP.NET Core</code>、<code>Python</code>、<code>Php</code>等进行开发，并且可以很方便地通过 <code>docker</code> 等一系列技术来实现devops。对，你没有听错，Office 365的开发当然也可以实现<code>devops</code>。<blockquote><p>关于如何在docker中运行ASP.NET Core跨平台应用程序，我此前有一个文档可以参考 <a href="http://www.cnblogs.com/chenxizhang/p/7148657.html">http://www.cnblogs.com/chenxizhang/p/7148657.html</a>, 本书的范例是用ASP.NET Core编写，并且部署到了Azure的docker环境中。</p></blockquote><h1>结语</h1><p>本文带领大家回顾了一下开源及社区的发展、微软在开源方面的努力，以及具体在Office 365开发的四个领域如何张开双手拥抱开源。一千个人的心目中有一千个哈姆雷特，但开源的精神应该只有一个，它不仅仅是开放源代码，它是一种开放的心态；同时开源需要更多的人参与、去贡献，只有这样，我们的“源”头活水才会生机勃发，越来越"开"阔。笔者今年的小目标是除了维护之前的一个小的开源项目外，争取参与到微软官方的几个大的Office 365开源项目中去做一点贡献，也希望看到更多的开发人员参与进来。]]></description></item><item><title>Excel as a Service —— Excel 开发居然可以这么玩</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/04/10/8783774.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 10 Apr 2018 14:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/04/10/8783774.html</guid><description><![CDATA[<h2>前言</h2><p><br></p><p>据不完全统计，全世界使用Excel作为电子表格和数据处理的用户数以十亿计，这不仅得益于它的使用简便，同时还因为它内置了很多强大的函数，结合你的想象力可以编写出各种公式，并可快速根据数据生成图表和透视分析等。另一方面，Excel在整个Office家族中也是拥有开发者最多的一个组件，不管是在客户端的VBA宏和VSTO插件开发，以及在早些年出现在SharePoint Server中的Excel Service（包括用来呈现Excel文件的Web Part，以及一套XML Web Service可供远程调用Excel的功能，包括自定义Excel函数等。<p>在Office 365的时代，SharePoint Online中已经将Excel Service的功能删除掉了，取而代之的是2016年7月份左右揭开神秘面纱的Microsoft Graph Excel API，融入Microsoft Graph大家族的Excel Service快速迭代，目前它的功能也趋向稳定了。今天我将用一个实例来介绍一下它的奇妙设计和应用场景。<p><br><h2>范例介绍</h2><p><br></p><p>设想一下，你用Excel做了一份非常强大的“抵押贷款测算表”，这里面可以通过输入几个参数，使用Excel自带的PMT函数计算每月还款额，据此快速生成一个还款计划，如下图所示：<blockquote><p>PMT 是一个财务函数，用于根据固定付款额和固定利率计算贷款的付款额。有兴趣可以参考 <a href="https://support.office.com/zh-cn/article/PMT-%E5%87%BD%E6%95%B0-0214DA64-9A63-4996-BC20-214433FA6441">https://support.office.com/zh-cn/article/PMT-%E5%87%BD%E6%95%B0-0214DA64-9A63-4996-BC20-214433FA6441</a> 的帮助。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-21-48-48.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-21-48-48.png"></a><p>与此同时，你还可以很轻松地生成一个数据列表，和对应的图表，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-21-49-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-21-49-25.png"></a><p>通过改变“购买价格”、“利率”、“贷款期”、“贷款金额”等单元格的数值，Excel会自动计算其他单元格的数值，包括自动刷新图表。这一切对广大的“表哥表姐”来说都是非常熟悉的体验。<p>那么问题来了：如果你的一个网页中也要实现“抵押贷款测算”的功能，你是不是应该自己去实现一次PMT这种函数的功能呢？我不知道，但我觉得你读了本文后会改变一些想法—— 我们完全可以将这些计算交给Excel Service去做，前端应用直接调用即可。<p>使用Microsoft Graph中的Excel API，你不仅可以访问工作簿，工作表和单元格、表格和图表等，修改他们的属性和数值，甚至还可以将图表用图片的形式读取过来，一切都在你的掌握之中。接下去用一个范例代码演示这些奇妙的场景。<blockquote><p>Microsoft Graph Excel API的官方文档，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/excel">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/excel</a></p></blockquote><h4><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/excelgraph.md#%E4%BD%BF%E7%94%A8microsoft-graph-%E8%8E%B7%E5%8F%96%E5%B7%A5%E4%BD%9C%E7%B0%BF%E5%92%8C%E5%8D%95%E5%85%83%E6%A0%BC"><br></a></h4><h2>使用Microsoft Graph 获取工作簿和单元格</h2><p><br></p><p>要使用Micrsosoft Graph Excel API,你只需要将Excel文件放到OneDrive for Business或者SharePoint Online的文档库中即可。例如，我将演示用的文件放在了一个目录中：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-21-58-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-21-58-45.png"></a><p>你需要了解一些Microsoft Graph的背景知识，如果你对Microsoft Graph比较陌生，建议你参考我之前的两篇文章<ul><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftgraphoverview.md">Microsoft Graph 概述</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/graphexplorer.md">通过Graph Explorer体验Microsoft Graph</a></li></ul><p>本文所采用的方式就是用Graph Explorer这种方式来操作Microsoft Graph Excel API。我的这个文件是在OneDrive for Business 的个人云盘的根目录下面的testgraph目录中，文件名为 demofile.xlsx，所以我可以使用<code>GET https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook</code>获取到这个工作簿<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-03-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-03-30.png"></a><p>通过 <code>GET https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets</code> 可以获取工作簿中所有的工作表信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-04-12.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-04-12.png"></a><p>通过 <code>GET https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets/抵押计算器/range(address='c4')</code> 可以获取名称为“抵押计算器“的工作表中的C4单元格对象<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-05-14.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-05-14.png"></a><p>当然，也可以通过名称访问单元格对象，语法是 <code>GET https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/names/每月还贷数额</code> 这样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-07-58.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-07-58.png"></a><p>你还可以返回多个单元格的数值，例如下面这样的查询 <code>GET <a href="https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets/">https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets/</a>抵押计算器/range(address='c4:c6')/values</code><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-10-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-10-13.png"></a><h4><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/excelgraph.md#%E6%9B%B4%E6%96%B0%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E5%AE%B9"><br></a></h4><h2>更新单元格内容</h2><p><br></p><p>上一节我用几种不同的语法展示了如何获取工作簿、工作表和单元格（包括直接查询它的数值），那么如果我们希望能修改某个单元格的数值，应该怎么做呢？下面的例子演示了如何将名称为“抵押计算器“的工作表中的C4的数值修改为一个新的值，例如400000.<p>需要注意的是，查询数据我们一般用的API请求方法是GET，而修改数据则需要用到的请求方法是PATCH。为了实现上面所提到的单元格修改需求，我们要执行的查询是 <code>PATCH https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets/抵押计算器/range(address='c4')</code>,与此同时，还需要提供新的数值。<pre><code>{
     values:[[400000]]
}

</code></pre><blockquote><p>PATCH方法可以对目标对象执行局部更新。上面的代码我们只提供了Values这个属性集合，但其实还可以增加其他的属性，来达到一次修改多个属性的目的。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-18-05.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-18-05.png"></a><p>执行成功后，你可以发现C4的数值已经变成了400000。<blockquote><p>这里我埋了一个伏笔，如果你在程序中用如上的方式修改了某个单元格(A)的数值，然后去获取另外一个单元格（B）的值，假设B跟A是有公式的关系，你可能期望的是B的值也会立即刷新。但事实上，它不会。这里涉及到一些相对复杂的概念，就是Excel API有两种访问的模式，我们现在用的这种，是所谓的“非持久化会话模式”，一般用来查询数据，或者修改后不保存，所以在下一次查询的时候，其实你获取的还是旧值。 关于如何创建持久会话，并且在多个查询中共用它，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/workbook_createsession">https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/workbook_createsession</a> 的详细说明。</p></blockquote><h4><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/excelgraph.md#%E8%8E%B7%E5%8F%96%E5%B7%A5%E4%BD%9C%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E8%A1%A8"><br></a></h4><h2>获取工作表中的图表</h2><p><br></p><p>我们已经知道了如何访问工作簿的单元格，以及如何更新它们的数值，这已经可以让我们轻松实现很多业务场景了：你可以在Excel中做好很多复杂的公式，设计数据之间的关系，然后通过API修改某些单元格的值，然后去获取其他单元格的值，看起来你的应用具有了类似Excel那样神奇的功能，但其实所有的事情都还是Excel在默默地为你服务，你所做的只是调用一两次接口而已。<p>接下来还要演示一个有意思的场景是将工作表中的图表用图片的形式提取出来，这个场景特别适合于我们已经经过了数据的处理，然后希望将图表展现在前端的应用中。Excel API可以将一个图表以一个Base64字符串的形式返回，客户端可以利用这个进行图片展现。<p>听起来很玄的事情，其实也只是一个GET请求而已 <code>GET https://graph.microsoft.com/v1.0/me/drive/root:/testgraph/demofile.xlsx:/workbook/worksheets/分期还款表格/charts/图表 1/image</code><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-27-06.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-27-06.png"></a><p>接口返回的结果是一串很长很长的字符串，你肯定是看不懂的。你要做的是将这个字符串复制出来，然后随便用一个文本编辑器，新建一个文件，然后填入如下的内容<pre><code>&lt;img src="data:image/png;base64,这里填写你查询得到的字符串"&gt;&lt;/img&gt;

</code></pre><p>接下来将这个保存为一个html文件，然后在浏览器中打开它。你是不是觉得下面这个图表似曾相识呢，恭喜你答对了，其实这个图表就是之前Excel文件中的那一个呀。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-10-22-30-05.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-10-22-30-05.png"></a><h2>结语</h2><p><br></p><p>我在很多场合都分享过Office 365 平台化的能力和开发场景，Microsoft Graph在其中起到了关键作用，而今天给大家展示的Excel API则将这一点表现的淋漓尽致，而且毫无疑问，我这里演示的只是一些皮毛，更多有意思的场景，还等待着你的发现呢。]]></description></item><item><title>扩展Microsoft Graph数据结构 - 架构扩展</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/04/07/8735354.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 07 Apr 2018 14:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/04/07/8735354.html</guid><description><![CDATA[<h2>前言</h2><p>此前我有一篇 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/graphextensions.md">文章</a> 讲解了Microsoft Graph的一种数据扩展技术—— 开发扩展(Open Extensions)，它可以实现在支持的对象（例如用户，组等）上面附加任意的数据。但开放扩展的问题在于，它是基于某个具体对象的，你无法确定两个对象是否具有同样的扩展（即便属性名一样，但也可能其包含的数据完全不同）。如果我们需要对一类对象进行统一的扩展，例如给组（Group）这个类型添加几个特殊的属性，此时就可以用到<code>架构扩展</code>这个非常强大的技术。<p>关于架构扩展，官方的文档请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/concepts/extensibility_schema_groups">https://developer.microsoft.com/en-us/graph/docs/concepts/extensibility_schema_groups</a>。<h2>支持的类型</h2><p>目前支持进行架构扩展的Microsoft Graph类型有如下几个<ol><li>contact
<li>device
<li>event on a user or Office 365 group calendar
<li>post of an Office 365 group
<li>group
<li>message
<li>organization
<li>user</li></ol><h2>权限要求</h2><p>要注册架构扩展，必须使用Office 365的企业或学校账号管理员身份，而且必须申请 Directory.AccessAsUser.All 这个权限（仅支持委派权限）。目前不支持在Microsoft Graph Explorer中进行操作，所以本文为了演示方便，已经注册了一个Azure AD 应用程序，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-21-48-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-21-48-59.png"></a><p>同时，由于Directory.AccessAsUser.All 这个权限是管理员权限，所以还必须执行“管理员确认（admin consent）”的过程，这个倒也不难，你可以在浏览器中访问如下的地址即可<p><a href="https://login.microsoftonline.com/common/adminconsent?client_id=%6087b53490-05d4-4bed-8335-b50ed8b56130%60&amp;state=%6012345%60&amp;redirect_uri=%60http://localhost%60">https://login.microsoftonline.com/common/adminconsent?client_id=`87b53490-05d4-4bed-8335-b50ed8b56130`&amp;state=`12345`&amp;redirect_uri=`http://localhost`</a><h2>注册架构扩展</h2><p>注册架构扩展的命令其实很简单，如果你用REST API的话，参考下面的范例执行即可<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-21-54-38.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-21-54-38.png"></a><p>这里的关键属性是id。目前支持两种定义id的方式，如果你的Office 365 租户中注册了自定义域名（例如 contoso.com），那么你可以用 <code>域名_扩展名</code> 这样的格式来定义id（上图的例子就是这样的），如果你没有自定义域名，你可以直接用 <code>扩展名</code> 这样的格式，例如 <code>myextension</code>。但为了进行区分，在你保存的时候，系统会自动地加上一个随机的前缀，它的格式是<code>ext+八位随机字符_扩展名</code>，例如<code>extsjar451r_myextension</code>。所以，前者要求略高一些，但对于后期使用更加方便一些；而后者因为id是随机产生的，所以在使用过程会复杂一些。你可以根据自己的实际情况选择。<p>下图是我在Postman中注册一个新的架构扩展的效果<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-20-55.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-20-55.png"></a><h2>使用架构扩展数据</h2><p>我们已经拥有了一个新的架构扩展，接下来如何使用它呢？我同样用Postman来演示创建一个新的Group对象，请注意，我除了提供标准的属性外，还按照架构扩展的属性定义提供了额外的信息。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-26-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-26-30.png"></a><p>你可能会发现，返回的结果中并没有显示出来我们添加的扩展属性。如果需要查询这些额外的属性，你需要使用select关键字来指定返回值，如下图所示。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-04-07-22-29-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-04-07-22-29-31.png"></a><h2>结语</h2><p>这一篇文章通过一个实例演示了使用<code>架构扩展</code>的技术为Microsoft Graph 的数据结构进行扩展，它跟<code>开放扩展</code>不同的地方在于，它可以为一类对象统一进行扩展，而不是针对单个对象，灵活地搭配使用这两种技术，可以让你充分利用Microsoft Graph，并且为其注入更多的数据，为后续的集成提供更多的可能性。]]></description></item><item><title>解码 id_token</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/03/22/8623255.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 22 Mar 2018 05:54:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/03/22/8623255.html</guid><description><![CDATA[<h1>简介</h1><p>id_token是一个特殊的token，在Microsoft Graph的认证和授权过程中颁发，它包含了已认证用户的一些信息。本文将介绍如何通过实例理解id_token，并且演示了如何解码。<h1>准备环境</h1><p>本文假设你已经知道如何在Azure AD中创建应用程序注册，并且在本地创建一个最简单的网站应用程序，下面这个是用asp.net core 创建的一个例子<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Diagnostics;
using System.Text;
using System.IO;

namespace webconsole
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.Run(async (context) =&gt;
            {
                
                var sb = new StringBuilder();

                foreach (var item in context.Request.Query)
                {
                    sb.AppendLine($"{item.Key}={item.Value}");
                }

                var reader = new StreamReader(context.Request.Body);
                sb.AppendLine(reader.ReadToEnd());
                

                await context.Response.WriteAsync(sb.ToString());
            });
        }
    }
}

</code></pre><p>通过<code>dotnet run</code>命令可以将这个应用程序运行起来。<h1>如何获取id_token</h1><p>id_token是一个特殊的token，在Microsoft Graph的认证和授权过程中颁发，它包含了已认证用户的一些信息。认证的协议，我们可以统一使用OpenId Connect（实际上，这是基于OAuth 的一个简单版本），授权的协议，则是采用OAuth。<p>如果只是需要进行身份认证，使用OpenId Connect，但需要注意的是，这种方式主要适合在Web应用中，有用户交互的情况下，你可以通过在浏览器中输入下面的地址请求用户身份认证<blockquote><p><a href="https://login.microsoftonline.com/common/oauth2/authorize?client_id=%60611993e2-bf37-4895-841d-9737076cdb45%60&amp;response_type=%60id_token%60&amp;redirect_uri=%60http://localhost:5000%60&amp;response_mode=%60form_post%60&amp;scope=%60openid%60*&amp;state=%6012345%60&amp;nonce=%607362CAEA-9CA5-4B43-9BA3-34D7C303EBA7%60">https://login.microsoftonline.com/common/oauth2/authorize?client_id=`611993e2-bf37-4895-841d-9737076cdb45`&amp;response_type=`id_token`&amp;redirect_uri=`http://localhost:5000`&amp;response_mode=`form_post`&amp;scope=`openid`*&amp;state=`12345`&amp;nonce=`7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7`</a></p></blockquote><p>完成身份认证后，正常情况下在浏览器中可以看到如下的结果<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-22-13-07-14.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-22-13-07-14.png"></a><p>页面上已经可以看到id_token的信息。这是一串Base64编码的文本，如下所示<p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyIsImtpZCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyJ9.eyJhdWQiOiI2MTE5OTNlMi1iZjM3LTQ4OTUtODQxZC05NzM3MDc2Y2RiNDUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC81OTcyM2Y2Yi0yZDE0LTQ5ZmUtODI3YS04ZDA0ZjlmZTdhNjgvIiwiaWF0IjoxNTIxNjk0ODg5LCJuYmYiOjE1MjE2OTQ4ODksImV4cCI6MTUyMTY5ODc4OSwiYWlvIjoiWTJOZ1lMQzlKLzYzek9JNFQzekFGYyt6ejkvRnZVMElpWjNYb1pEaXREbjQ4ZmJyRElJQSIsImFtciI6WyJwd2QiXSwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTY3LjIyMC4yNTUuNTIiLCJuYW1lIjoi6ZmIIOW4jOeroCIsIm5vbmNlIjoiNzM2MkNBRUEtOUNBNS00QjQzLTlCQTMtMzREN0MzMDNFQkE3Iiwib2lkIjoiMmM4ZGQxMTQtZDVjYS00Nzc0LWJmMmMtNGI1NWVmMjdkNTYwIiwic3ViIjoiMmh0QlREcEZYeHh6OTBZUHRjNzRWUkktQUoydFB6bEVwU0lSY2U3RVRUTSIsInRpZCI6IjU5NzIzZjZiLTJkMTQtNDlmZS04MjdhLThkMDRmOWZlN2E2OCIsInVuaXF1ZV9uYW1lIjoiYXJlc0BvZmZpY2UzNjVkZXZsYWJzLm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImFyZXNAb2ZmaWNlMzY1ZGV2bGFicy5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJRYXJBaDNKdV9rMlp2Vko3X0o4QkFBIiwidmVyIjoiMS4wIn0.AH1PI9pUMuI9J0DNOp6LVHW3yibf-b8hD3v6dSs2Pn-eGU2fi3HOY4ZU_fGSltTiVfDL-MRRispinNuhUTh3Aa9Gw936lbVs7N6zpN_SsCxIzdzq3quYxRtHoB84eXqzs7FDy53TDXtmtr89hI9wKtV2QI2pw7rBTlhuuQOxdl0638RB-eGMCtDWVj0SvK63FafazZBWdW8YSeJjf5x2XgZoNWwArGn-U5GcyTjMSywyOXJ6Ff5HssqjzuLQCtqXTL1Ouscx-M1DUyfYN-mlwHwRd3UQgUCkPgbaDebsXaz0lGXCOC61cwfkRWGjbtVLqn6DQNDlXwvggB3MTiT1TQ</code><h1>解码 id_token</h1><p>你可能会说，这个id_token怎么完全看不懂呢？其实这是一个JSON的字符串，但是用Base64编码过的，而且分为三个部分（头部，声明，签名），用句点（.)分开的。<p>有一个最快的方法可以解码 id_token，就是通过jwt.ms 这个网站来查看用户信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-22-13-10-55.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-22-13-10-55.png"></a><p>那么，如果要在我们的应用程序中进行解码，应该怎么做呢？其实正常情况下，使用下面的方式就可以实现<pre><code>var id_token= "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyIsImtpZCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyJ9.eyJhdWQiOiI2MTE5OTNlMi1iZjM3LTQ4OTUtODQxZC05NzM3MDc2Y2RiNDUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC81OTcyM2Y2Yi0yZDE0LTQ5ZmUtODI3YS04ZDA0ZjlmZTdhNjgvIiwiaWF0IjoxNTIxNjk0ODg5LCJuYmYiOjE1MjE2OTQ4ODksImV4cCI6MTUyMTY5ODc4OSwiYWlvIjoiWTJOZ1lMQzlKLzYzek9JNFQzekFGYyt6ejkvRnZVMElpWjNYb1pEaXREbjQ4ZmJyRElJQSIsImFtciI6WyJwd2QiXSwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTY3LjIyMC4yNTUuNTIiLCJuYW1lIjoi6ZmIIOW4jOeroCIsIm5vbmNlIjoiNzM2MkNBRUEtOUNBNS00QjQzLTlCQTMtMzREN0MzMDNFQkE3Iiwib2lkIjoiMmM4ZGQxMTQtZDVjYS00Nzc0LWJmMmMtNGI1NWVmMjdkNTYwIiwic3ViIjoiMmh0QlREcEZYeHh6OTBZUHRjNzRWUkktQUoydFB6bEVwU0lSY2U3RVRUTSIsInRpZCI6IjU5NzIzZjZiLTJkMTQtNDlmZS04MjdhLThkMDRmOWZlN2E2OCIsInVuaXF1ZV9uYW1lIjoiYXJlc0BvZmZpY2UzNjVkZXZsYWJzLm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImFyZXNAb2ZmaWNlMzY1ZGV2bGFicy5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJRYXJBaDNKdV9rMlp2Vko3X0o4QkFBIiwidmVyIjoiMS4wIn0.AH1PI9pUMuI9J0DNOp6LVHW3yibf-b8hD3v6dSs2Pn-eGU2fi3HOY4ZU_fGSltTiVfDL-MRRispinNuhUTh3Aa9Gw936lbVs7N6zpN_SsCxIzdzq3quYxRtHoB84eXqzs7FDy53TDXtmtr89hI9wKtV2QI2pw7rBTlhuuQOxdl0638RB-eGMCtDWVj0SvK63FafazZBWdW8YSeJjf5x2XgZoNWwArGn-U5GcyTjMSywyOXJ6Ff5HssqjzuLQCtqXTL1Ouscx-M1DUyfYN-mlwHwRd3UQgUCkPgbaDebsXaz0lGXCOC61cwfkRWGjbtVLqn6DQNDlXwvggB3MTiT1TQ";


var token_parts = id_token.Split('.');

var header = Encoding.UTF8.GetString(Convert.FromBase64String(token_parts[0]));
var claims = Encoding.UTF8.GetString(Convert.FromBase64String(token_parts[1]));

Console.WriteLine(header);
Console.WriteLine(claims);
</code></pre><p>但是上述代码，有时候会报错，我发现可能是用户信息中包含了中文的原因。但是可以通过一些第三方的库来实现完美的解码，例如<code>Atom.Module.Base64Url</code>这个package。下面是一个完整的例子：<pre><code>using System;
using System.Text;
using Atom.Toolbox;

namespace ConsoleApp4
{
    class Program
    {
        static void Main(string[] args)
        {
            var id_token= "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyIsImtpZCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyJ9.eyJhdWQiOiI2MTE5OTNlMi1iZjM3LTQ4OTUtODQxZC05NzM3MDc2Y2RiNDUiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC81OTcyM2Y2Yi0yZDE0LTQ5ZmUtODI3YS04ZDA0ZjlmZTdhNjgvIiwiaWF0IjoxNTIxNjk0ODg5LCJuYmYiOjE1MjE2OTQ4ODksImV4cCI6MTUyMTY5ODc4OSwiYWlvIjoiWTJOZ1lMQzlKLzYzek9JNFQzekFGYyt6ejkvRnZVMElpWjNYb1pEaXREbjQ4ZmJyRElJQSIsImFtciI6WyJwd2QiXSwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTY3LjIyMC4yNTUuNTIiLCJuYW1lIjoi6ZmIIOW4jOeroCIsIm5vbmNlIjoiNzM2MkNBRUEtOUNBNS00QjQzLTlCQTMtMzREN0MzMDNFQkE3Iiwib2lkIjoiMmM4ZGQxMTQtZDVjYS00Nzc0LWJmMmMtNGI1NWVmMjdkNTYwIiwic3ViIjoiMmh0QlREcEZYeHh6OTBZUHRjNzRWUkktQUoydFB6bEVwU0lSY2U3RVRUTSIsInRpZCI6IjU5NzIzZjZiLTJkMTQtNDlmZS04MjdhLThkMDRmOWZlN2E2OCIsInVuaXF1ZV9uYW1lIjoiYXJlc0BvZmZpY2UzNjVkZXZsYWJzLm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6ImFyZXNAb2ZmaWNlMzY1ZGV2bGFicy5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiJRYXJBaDNKdV9rMlp2Vko3X0o4QkFBIiwidmVyIjoiMS4wIn0.AH1PI9pUMuI9J0DNOp6LVHW3yibf-b8hD3v6dSs2Pn-eGU2fi3HOY4ZU_fGSltTiVfDL-MRRispinNuhUTh3Aa9Gw936lbVs7N6zpN_SsCxIzdzq3quYxRtHoB84eXqzs7FDy53TDXtmtr89hI9wKtV2QI2pw7rBTlhuuQOxdl0638RB-eGMCtDWVj0SvK63FafazZBWdW8YSeJjf5x2XgZoNWwArGn-U5GcyTjMSywyOXJ6Ff5HssqjzuLQCtqXTL1Ouscx-M1DUyfYN-mlwHwRd3UQgUCkPgbaDebsXaz0lGXCOC61cwfkRWGjbtVLqn6DQNDlXwvggB3MTiT1TQ";


            var token_parts = id_token.Split('.');

            var header = Encoding.UTF8.GetString(Base64Url.Decode(token_parts[0]));
            var claims = Encoding.UTF8.GetString(Base64Url.Decode(token_parts[1]));

            Console.WriteLine(header);
            Console.WriteLine(claims);



            Console.Read();

            
        }
    }
}


</code></pre><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-22-13-51-10.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-22-13-51-10.png"></a>]]></description></item><item><title>Office 365 Connectors 的使用与自定义开发</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/03/12/8552249.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 12 Mar 2018 13:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/03/12/8552249.html</guid><description><![CDATA[<h3><br></h3><h1>前言</h1><p>我相信很多人都看过《三国演义》，里面有很多引人入胜的故事和栩栩如生的人物，对我而言，曹操手下的一员猛将典韦实在让我印象深刻。例如，书中有一段描写典韦的作战经历：<blockquote><p>时西面又急，韦进当之，贼弓弩乱发，矢至如雨，韦不视，谓等人曰：“虏来十步，乃白之。”等人曰：“十步矣。”又曰：“五步乃白。”等人惧，疾言“虏至矣”！韦手持十余戟，大呼起，所抵无不应手倒者。布众退。</p></blockquote><p>箭如雨下喊声四起，典韦以寡敌众，“贼至五步乃呼我”，如狼似虎，连吕布都要避其锋芒。我今天在写这篇文章时，又不由得联想起来这个让人血脉喷张的画面。Office 365 Connector正是一个有意思的类似场景，而且它也属于Office 365 开发四场场景之一，如下图所示：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-06-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-06-31.png"></a><p>它通常是在Office 365应用程序内部（目前支持Office 365 Group，Yammer和Microsoft Teams）中需要接收外部系统的一些通知消息时，能够以一种灵活的方式来连接起来。所以，它的中文名称就是“连接器”，换言之，当用户关注的某些业务系统（或者任何消息源)有一些新的状态，他可以自动地得到通知。<p>本文将包括如下的内容<ol><li>在Office 365 Group中使用Office 365 Connectors
<li>在Yammer中使用Office 365 Connectors
<li>在Microsoft Teams中使用Office 365 Connectors
<li>自定义Office 365 Connectors</li></ol><h1>在Office 365 Group中使用Office 365 Connectors</h1><p>这是Office 365 Connectors最早的使用场景，用户可以自己在Outlook客户端，或者OWA中进行配置，并且通过邮件的方式得到通知。<blockquote><p>关于Office 365 Group的详细信息，请参考 <a href="https://support.office.com/zh-cn/article/%E4%BA%86%E8%A7%A3%E6%9C%89%E5%85%B3-office-365-%E7%BB%84-b565caa1-5c40-40ef-9915-60fdb2d97fa2?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN">https://support.office.com/zh-cn/article/%E4%BA%86%E8%A7%A3%E6%9C%89%E5%85%B3-office-365-%E7%BB%84-b565caa1-5c40-40ef-9915-60fdb2d97fa2?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN</a></p></blockquote><p>下图展示了在Outlook中添加连接器的界面：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-18-34.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-18-34.png"></a><blockquote><p>图中的“连接线”翻译不准确，应该为“连接器”</p></blockquote><p>下图展示了在OWA中添加连接器的界面：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-24-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-24-20.png"></a><p>目前内置提供了超过100个连接器，包括很多企业级应用平台，也包括了很多互联网应用。下面演示一个从Github上面获取通知的连接器配置和使用效果。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-31-18.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-31-18.png"></a><p>点击第一个“添加”按钮，然后在下图中配置你的Github账号（通常会弹出一个登陆框，请你输入用户名和密码）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-32-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-32-21.png"></a><p>在这个界面中选择你要关联的代码库（repositories），并且勾选想要用来接收通知的事件，然后点击“保存”即可。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-34-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-34-13.png"></a><p>你会在“连接测试组”中收到一个配置成功的邮件：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-37-27.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-37-27.png"></a><p>下面我可以尝试往这个代码库提交一次更新，我们可以很快在连接器测试组中看到一个推送的通知。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-37-48.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-37-48.png"></a><h1>在Yammer中使用Office 365 Connectors</h1><p>Yammer是Office 365中的一个企业级社交网络，你可以根据需要创建各种各样的群组（Yammer Group），讨论不同的话题。在Yammer群组中，你也可以通过在“组操作”中选择“添加或删除应用”这个操作，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-36-56.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-36-56.png"></a><p>这里显示的连接器列表其实跟在Outlook里面看到的是一样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-28-39.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-28-39.png"></a><p>本例演示添加“RSS”这个连接器，例如我关注Office 产品组的更新博客，就可以通过下面的方式订阅他们的RSS feed<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-10-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-10-59.png"></a><p>点击“保存”后，会在Yammer群组中看到一个通知<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-11-29.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-11-29.png"></a><p>在设定的时间，RSS引擎会把博客链接发送到Yammer群组中来<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-13-15.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-13-15.png"></a><h1>在Microsoft Teams中使用Office 365 Connectors</h1><p>Microsoft Teams是Office 365 Connectors另外一个使用场景，它的用法略有不同：它是在频道中添加连接器的，一个团队可以有多个频道，一个频道有可以添加多个连接器，这样就带来了更加灵活的可能性。<p>选择某个团队的某个频道，在它右侧的“...”菜单中选择“连接器”，你可以看到跟之前很类似的一个界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-55-16.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-55-16.png"></a><p>在本例中，我演示的是如何配置Yammer这个连接器以便在Teams中能收到Yammer讨论组的消息。<p>和Github类似，添加Yammer这个连接器后，要进行详细的配置，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-56-53.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-56-53.png"></a><p>你可以设置要关注的组，事件类型，关注的用户和关键字，以及通知的频率等等，保存后，当Yammer组有状态更新时，在频道里面就可以收到通知：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-17-59-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-17-59-47.png"></a><p>在这里可以直接点赞，或者回复，不过似乎这些还不能双向地同步到Yammer里面来。<h1>自定义Office 365 Connectors</h1><p>上面演示了使用Office 365 Connectors的场景（Outlook，Yammer，Microsoft Teams），我们都是使用目前内置的Connectors，那么如果我们自己有一个应用系统，也想通过这种方式进行连接（在必要的时候推送消息和更新动态），应该怎么来做呢？这方面，目前Office 365平台提供了三种机制。<p>首先，对于一些简单的场景，你可以直接使用“Incoming Webhook”这个内置的连接器来定义，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-47-53.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-47-53.png"></a><p>通常你只需要提供一个名称即可完成连接器的定义<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-49-33.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-49-33.png"></a><p>点击“创建”，会产生一个Url，这就是可以用来推送消息的地址了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-50-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-50-47.png"></a><p>那么，如何使用这个自定义的连接器呢？很简单，我们只要在应用程序内部，通过Post的方法，给这个地址发送消息即可。通常的代码如下：<pre><code>using System;
using System.Net.Http;

namespace connectorconsole
{
    class Program
    {
        static void Main(string[] args)
        {

            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post,"https://outlook.office.com/webhook/f2bde2a5-8459-4acd-b92c-c55947422146@72f988bf-86f1-41af-91ab-2d7cd011db47/IncomingWebhook/9bc2989885fe475fa3d5578796f7dd05/f3b94dd3-20cc-49a3-98ce-b1287658e8cf");
            request.Content = new StringContent("{\"text\":\"通过程序推送的消息\"}");
            client.SendAsync(request);

            Console.Read();
        }
    }
}
</code></pre><p>运行这个小程序，就可以在目标应用中收到一个通知的消息，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-20-58-40.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-20-58-40.png"></a><blockquote><p>如果只是作为测试，你甚至都无需写代码，而是使用一些工具来发起请求，例如Fiddler,Postman,curl等，这里就不演示了。</p></blockquote><p>以上这种场景特别适合于简单的环境，并不适合于大规模分发使用，因为这个地址是要用户来生成的，然后再告诉开发人员，而且这个地址每次生成都是不一样的。如果想要更好地解决这个问题，例如你可以做一个自己的连接器，让尽可能多的用户去使用它，那么是时候考虑真正地自定义一个连接器。<p>你需要使用Office 365账号登录 <a href="https://outlook.office.com/connectors/publish">https://outlook.office.com/connectors/publish</a> 来创建一个自定义的连接器，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-23-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-23-59.png"></a><p>这个页面中的关键信息是Redirect Urls这个地址，然后你可以看到目前它仅支持Outlook和Microsoft Teams，暂时不支持Yammer。<p>点击“保存”后，接下来就可以进行测试了。值得说明的是，你需要准备一个用来响应用户请求的网站，例如本例我会用本地运行的一个站点做演示（<a href="http://localhost:5000/">http://localhost:5000</a>)<p>我用了dotnet core创建了一个最简单的网站，用来响应用户的关联请求，并且将用户相关信息打印出来（真实场景下会将这些信息保存起来，用来推送消息）<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using System.Text;
using System.Net.Http;

namespace connectorhost
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.Run(async (context) =&gt;
            {
                //打印出来用户关联信息
                var sb = new StringBuilder();
                foreach (var item in context.Request.Query)
                {
                    sb.AppendLine($"{item.Key}={item.Value}");
                }
                await context.Response.WriteAsync(sb.ToString());

                //推送一个欢迎消息
                var url = context.Request.Query["webhook_url"];
                var client = new HttpClient();
                var request = new HttpRequestMessage(HttpMethod.Post,url);
                request.Content = new StringContent("{\"text\":\"欢迎关联我的连接器，你将会收到很多消息推送\"}");
                await client.SendAsync(request);

            });
        }
    }
}


</code></pre><p>为了让用户可以关联我们开发的自定义连接器，你可以在注册连接器的页面上，点击"Copy code"，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-39-19.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-39-19.png"></a><p>然后将复制得到的代码，保存为一个html文件，在浏览器中打开它的效果如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-41-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-41-04.png"></a><blockquote><p>你可以将这段代码嵌入到任意网站中去</p></blockquote><p>用户点击页面上这个“Connect to Office 365”的按钮后，会被要求登录Office 365，然后可以选择Outlook中的收件箱或者组来进行关联<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-42-41.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-42-41.png"></a><p>点击“Allow”后，Office 365后台做好必要的处理后，页面会被重定向到注册时提供的Redirect Urls（我演示的例子是 <a href="http://localhost:5000%EF%BC%89/">http://localhost:5000）</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-43-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-43-42.png"></a><p>与此同时，在对应的组中，也立即收到了一个欢迎消息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-45-00.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-45-00.png"></a><p>这样就完成了一个开发人员自定义连接器，用户自行关联连接器的流程。连接器的宿主应用程序，可以把用户的信息保存起来，然后再在必要的时候给用户推送消息。<p>最后，如果你希望将你的自定义连接器发布给全世界所有的Office 365用户去使用，则需要发布到微软的Office 365 Connectors商店中去，你可以在注册页面中点击“Publish to store”按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-47-56.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-47-56.png"></a><p>你按照需要填写信息，然后“submit”即可<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-03-12-21-48-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-03-12-21-48-49.png"></a>]]></description></item><item><title>在Windows 10中使用内置的SSH Client连接远程的Linux虚拟机</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/02/25/8468585.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 25 Feb 2018 01:07:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/02/25/8468585.html</guid><description><![CDATA[<p>无意中发现这个功能。一直以来，在Windows平台上面要通过SSH连接Linux都需要借助第三方工具，而且往往还不是很方便。但其实在去年12月份的更新中，已经包含了一个beta版本的SSH Client，请参考下面的官方文章</p><p><a title="https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/" href="https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/">https://blogs.msdn.microsoft.com/powershell/2017/12/15/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/</a></p><p><br></p><p>要安装这个功能，请在开始菜单输入 optional feature，然后在可选功能中选择OpenSSH Client（Beta），安装完成后需要重启计算机。</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090642595-1992822028.png"><img width="244" height="209" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090645751-1396848229.png" border="0"></a></p><p><br></p><p>你的Linux 服务器可以在任何地方，只要能通过域名或者ip地址访问到。例如我在Azure里面有一台虚拟机。</p><p><br></p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090645970-1555139031.png"><img width="244" height="148" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090646158-739272132.png" border="0"></a></p><p><br></p><p>然后，在cmd中就直接可以使用ssh来访问这个服务器了</p><p><br></p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090646330-480470502.png"><img width="244" height="129" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180225090646470-519941199.png" border="0"></a></p>]]></description></item><item><title>推荐写作平台gitbook——让我们换一种形式写作</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/02/20/8455505.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 20 Feb 2018 10:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/02/20/8455505.html</guid><description><![CDATA[<p><a title="https://www.gitbook.com/" href="https://www.gitbook.com/">https://www.gitbook.com/</a></p><p><font face="Microsoft YaHei UI">我一直用这个平台进行写作。目前有两本电子书可以供大家阅读，分别如下</font></p><p><font face="Microsoft YaHei UI"><br></font></p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181400220-1636060208.png"><img width="244" height="158" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181401955-1176685801.png" border="0"></a></p><h4><a href="https://www.gitbook.com/book/chenxizhang/office365devguide">Office 365 开发入门指南</a></h4><p><a title="https://www.gitbook.com/book/chenxizhang/office365devguide" href="https://www.gitbook.com/book/chenxizhang/office365devguide">https://www.gitbook.com/book/chenxizhang/office365devguide</a></p><p><br></p><h4><a href="https://www.gitbook.com/book/chenxizhang/speedwebsite">优化网站设计的35条原则和实践</a></h4><p><a title="https://www.gitbook.com/book/chenxizhang/speedwebsite/details" href="https://www.gitbook.com/book/chenxizhang/speedwebsite/details">https://www.gitbook.com/book/chenxizhang/speedwebsite/details</a>&nbsp;</p><p><br></p><p>它的最大特点就是，可以跟Github天然集成，从名字上面也可以看出这一点。</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402142-841547520.png"><img width="244" height="158" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402298-1837379163.png" border="0"></a></p><p><br></p><p>另外，它还支持直接导出电子书，并且在线版本还提供了与读者互动的功能。</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402455-891316854.png"><img width="244" height="102" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402580-609275141.png" border="0"></a></p><p><br></p><p>你可以用Markdown这种精简的标记语言进行编写，你也可以通过它提供的Gitbook Editor（提供了更加简单的Markdown编写体验），离线地编辑文档。</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402814-342780715.png"><img width="244" height="134" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181402986-749454536.png" border="0"></a></p><p>我更喜欢直接用Visual Studio Code来编写，搭配markdown paste这个插件，可以实现图片的粘贴，简直太酷了。</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181403345-1568052247.png"><img width="244" height="212" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181403548-243328101.png" border="0"></a></p><p><br></p><p>最后，如果你想将书籍托管在你自己的网站，则可以利用gitbook的客户端工具来生成网页，甚至直接启动一个网络服务器。</p><p>通过npm install –g gitbook-cli 来安装</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181403751-751172.png"><img width="244" height="129" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181403876-1922445768.png" border="0"></a></p><p>通过gitbook init来初始化一本书，会自动建立一个readme.md和summary.md文件</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181404158-323671440.png"><img width="215" height="244" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181404345-242494632.png" border="0"></a></p><p>Summary文件是必须的，相当于是目录文件</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181404548-33265153.png"><img width="244" height="185" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181404689-194495490.png" border="0"></a></p><p>通过gitbook build命令可以对当前书籍进行编辑，也就是生成对应的HTML文件，会放在_book目录下面</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181404892-406399068.png"><img width="215" height="244" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405064-607128182.png" border="0"></a></p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405298-42087039.png"><img width="244" height="134" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405455-945797732.png" border="0"></a></p><p>如果在浏览器中打开index.html，你将看到如下的界面</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405611-1183021942.png"><img width="244" height="158" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405736-2092086438.png" border="0"></a></p><p>还有gitbook serve命令可以启动一个网络服务器，直接供用户访问</p><p><a href="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181405892-976788856.png"><img width="244" height="115" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201802/9072-20180220181406033-1854546127.png" border="0"></a></p><p>如果要生成pdf版本，则运行gitbook pdf即可，同理，如果是导出epub格式，则gitbook epub，如果是mobi格式，则gitbook mobi即可。</p><p><br></p><p><font color="#ff0000">如果是要导出PDF，ePub或者mobi格式的电子书时，需要安装</font><a href="http://calibre-ebook.com/"><font color="#ff0000">Calibre</font></a><font color="#ff0000">电子书阅读/管理器和命令行工具，不然可能会报错“EbookError: Error during ebook generation: 'ebook-convert'”。</font></p><p><br></p><p>园子内还有其他一篇不错的文章，可参考</p><p><a title="http://www.cnblogs.com/powercto/p/6917106.html" href="http://www.cnblogs.com/powercto/p/6917106.html">http://www.cnblogs.com/powercto/p/6917106.html</a></p><p>还有一本用gitbook写成的gitbook操作指南</p><p><a title="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html" href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html">https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html</a></p>]]></description></item><item><title>介绍一款文档神器：pandoc</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/02/20/8454761.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 19 Feb 2018 23:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/02/20/8454761.html</guid><description><![CDATA[<p><a href="http://pandoc.org/">http://pandoc.org/</a></p><p><br></p><p>因为工作需要，将一批markdown的文档转换成word文档，找来找去，这个pandoc真是神器 啊，推荐给大家</p><p><br></p><p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert documents in (several dialects of) <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, <a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</a>, <a href="http://redcloth.org/textile">textile</a>, <a href="http://www.w3.org/TR/html40/">HTML</a>, <a href="http://www.docbook.org/">DocBook</a>, <a href="http://www.latex-project.org/">LaTeX</a>, <a href="http://www.mediawiki.org/wiki/Help:Formatting">MediaWiki markup</a>, <a href="http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules">TWiki markup</a>, <a href="https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax">TikiWiki markup</a>, <a href="http://www.wikicreole.org/wiki/Creole1.0">Creole 1.0</a>, <a href="https://vimwiki.github.io/">Vimwiki markup</a>, <a href="http://dev.opml.org/spec2.html">OPML</a>, Emacs <a href="http://orgmode.org/">Org-Mode</a>, Emacs <a href="https://www.gnu.org/software/emacs-muse/manual/">Muse</a>, <a href="http://txt2tags.org/">txt2tags</a>, Microsoft Word <a href="http://www.microsoft.com/interop/openup/openxml/default.aspx">docx</a>, LibreOffice <a href="http://en.wikipedia.org/wiki/OpenDocument">ODT</a>, <a href="http://en.wikipedia.org/wiki/EPUB">EPUB</a>, or <a href="http://www.haskell.org/haddock/doc/html/ch03s08.html">Haddock markup</a> to<dl> <dt>HTML formats
<dd><p>XHTML, HTML5, and HTML slide shows using <a href="http://www.w3.org/Talks/Tools/Slidy">Slidy</a>, <a href="http://lab.hakim.se/reveal-js/">reveal.js</a>, <a href="http://goessner.net/articles/slideous/">Slideous</a>, <a href="http://meyerweb.com/eric/tools/s5/">S5</a>, or <a href="http://paulrouget.com/dzslides/">DZSlides</a><dt>Word processor formats
<dd><p>Microsoft Word <a href="http://www.microsoft.com/interop/openup/openxml/default.aspx">docx</a>, OpenOffice/LibreOffice <a href="http://en.wikipedia.org/wiki/OpenDocument">ODT</a>, <a href="http://opendocument.xml.org/">OpenDocument XML</a>, Microsoft <a href="https://en.wikipedia.org/wiki/Microsoft_PowerPoint">PowerPoint</a>.<dt>Ebooks
<dd><p><a href="http://en.wikipedia.org/wiki/EPUB">EPUB</a> version 2 or 3, <a href="http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1">FictionBook2</a><dt>Documentation formats
<dd><p><a href="http://www.docbook.org/">DocBook</a> version 4 or 5, <a href="https://github.com/TEIC/TEI-Simple">TEI Simple</a>, <a href="http://www.gnu.org/software/texinfo/">GNU TexInfo</a>, <a href="http://www.gnu.org/software/groff/groff.html">Groff man</a>, <a href="http://www.gnu.org/software/groff/groff.html">Groff ms</a>, <a href="http://www.haskell.org/haddock/doc/html/ch03s08.html">Haddock markup</a><dt>Archival formats
<dd><p><a href="https://jats.nlm.nih.gov/publishing/">JATS</a><dt>Page layout formats
<dd><p><a href="https://www.adobe.com/content/dam/Adobe/en/devnet/indesign/cs55-docs/IDML/idml-specification.pdf">InDesign ICML</a><dt>Outline formats
<dd><p><a href="http://dev.opml.org/spec2.html">OPML</a><dt>TeX formats
<dd><p><a href="http://www.latex-project.org/">LaTeX</a>, <a href="http://www.pragma-ade.nl/">ConTeXt</a>, LaTeX Beamer slides<dt>PDF
<dd><p>via <code>pdflatex</code>, <code>xelatex</code>, <code>lualatex</code>, <code>pdfroff</code>, <code>wkhtml2pdf</code>, <code>prince</code>, or <code>weasyprint</code>.<dt>Lightweight markup formats
<dd><p><a href="http://daringfireball.net/projects/markdown/">Markdown</a> (including <a href="http://commonmark.org/">CommonMark</a> and <a href="https://github.github.com/gfm/">GitHub-flavored Markdown</a>), <a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html">reStructuredText</a>, <a href="http://www.methods.co.nz/asciidoc/">AsciiDoc</a>, Emacs <a href="http://orgmode.org/">Org-Mode</a>, Emacs <a href="https://www.gnu.org/software/emacs-muse/manual/">Muse</a>, <a href="http://redcloth.org/textile">Textile</a>, <a href="http://txt2tags.org/">txt2tags</a>, <a href="http://www.mediawiki.org/wiki/Help:Formatting">MediaWiki markup</a>, <a href="https://www.dokuwiki.org/wiki:syntax">DokuWiki markup</a>, <a href="https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax">TikiWiki markup</a>, <a href="http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules">TWiki markup</a>, <a href="https://vimwiki.github.io/">Vimwiki markup</a>, and <a href="http://zim-wiki.org/manual/Help/Wiki_Syntax.html">ZimWiki markup</a>.<dt>Custom formats
<dd><p>custom writers can be written in <a href="http://www.lua.org/">lua</a>.</p></dd></dl>]]></description></item><item><title>Office 365 机器人（Bot）开发入门指南 (新篇)</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/02/19/8453915.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 19 Feb 2018 08:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/02/19/8453915.html</guid><description><![CDATA[<p>最近在整理书稿时，发现我在2017年7月份写的这篇 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/botframeworkquickstart.md">Office 365 机器人（Bot）开发入门</a> 的内容，因为相关平台的升级，已经完全不能体现当前的开发过程，所以我再专门写一篇新的开发入门指南给有兴趣的大家参考。<p>这次平台升级的具体开始时间我不得而知，但是如果你现在继续访问 <a href="https://dev.botframework.com/">https://dev.botframework.com/</a> ，你将会看到一个明确的提示，要求将早先创建好的Bot在2018年3月31日之前迁移到新的Azure Bot Service：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-13-39-09.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-13-39-09.png"></a><p>如果你此时点击了“Create a bot”按钮的话，你也将被要求通过Azure Portal来操作：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-13-40-58.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-13-40-58.png"></a><p>这将意味着，现在要进行机器人的开发，你必须首先拥有一个Azure的订阅，不管是试用版的，还是正式版的。本文将假定你已经拥有这些条件。<blockquote><p>值得注意的是，目前Azure的国内版还没有Bot Service的功能。</p></blockquote><h1>三种不同类型的Bot</h1><p>你可以在Azure Portal中搜索Bot Service，或者快速通过 <a href="https://portal.azure.com/?l=zh-hans.zh-cn#blade/Microsoft_Azure_Marketplace/GalleryResultsListBlade/selectedSubMenuItemId/%7B%22menuItemId%22%3A%22gallery%2FCognitiveServices_MP%2FBotService%22%2C%22resourceGroupId%22%3A%22%22%2C%22resourceGroupLocation%22%3A%22%22%2C%22dontDiscardJourney%22%3Afalse%2C%22launchingContext%22%3A%7B%22source%22%3A%5B%22GalleryFeaturedMenuItemPart%22%5D%2C%22menuItemId%22%3A%22CognitiveServices_MP%22%2C%22subMenuItemId%22%3A%22BotService%22%7D%7D">这个地址</a> 定位到目前支持的三种Bot Service类型，如下图所示：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-13-48-58.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-13-48-58.png"></a><p>它们分别的使用场景如下<ol><li>Web App Bot。这种类型将在Azure中创建一个App Service来运行你的Bot，并且通过模板和自动化的配置极大地简化你的开发过程。
<li>Function Bot。这种类型将在Azure中创建一个Azure Function App来运行你的Bot，同样也是会有模板和自动化配置来简化开发，它与Web App Bot的区别在于，它的计费是按照具体的使用次数，而不是虚拟机的启用时间——事实上，这也正是Azure Function App和web App的本质区别。我个人觉得，这种形式应该是更加符合机器人的特点的——它是按需调用的，并不见得要一直运行在后台。
<li>Bot Channels Registration。这种类型是支持你将Bot应用部署到你自己选择的其他位置（可能是你的数据中心，也可以是其他的云平台），然后通过Azure来做Channel的注册和对接。如果你看过我上一篇文章，你应该会对Bot，Bot Framework，Channel有一些概念，如果还不太明白，我下面会继续做一些解释。</li></ol><blockquote><p>在开发阶段，不管是上述哪一种类型的Bot，我们都可以选择“免费”的价格进行开发和调试（普通信道无限量消息，高级信道每月10000次消息调用）。"免费”的服务是没有SLA保障的，但对于开发阶段来说已经足够了。</p></blockquote><h1>三种常见的Azure 机器人服务方案</h1><p>虽然我们知道创建Bot并不难，本文后半部分也将再次以一个实例来介绍如何开发和测试基于Azure Bot Service的机器人。但在此之前，我还是摘录三种常见的Azure机器人服务方案给大家参考，了解这些业界流行的做法和流程，可能会对你后续开发有借鉴意义。<h2>商务聊天机器人</h2><p>Azure 机器人服务和语言理解服务结合可使开发人员能够创建针对各种场景的对话接口，如银行、旅游和娱乐。例如，酒店礼宾员可以使用机器人增强传统的电子邮件和电话呼叫交互，方法是通过 Azure Active Directory 验证客户，并使用认知服务更好地根据实际情景利用文字和语音处理客户请求。可以添加语音识别服务来支持语音命令。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-07-23.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-07-23.png"></a><h2>信息聊天机器人</h2><p>此信息机器人可回答知识集中定义的问题或使用认知服务 QnA Maker 回答常见问题，以及使用 Azure 搜索回答更加开放的问题。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-08-00.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-08-00.png"></a><h2>企业效率聊天机器人</h2><p>Azure 机器人服务可轻松与语言理解结合以生成强大的企业效率机器人，让组织可以通过集成外部系统（如 Office 365 日历、Dynamics CRM 中存储的客户事例等）来简化常见工作活动。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-08-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-08-30.png"></a><h1>Function Bot 开发和调试</h1><p>下面我将以一个实例来演示如何开发和调试Function Bot。在下图的向导中，你需要指定一个唯一的名称，并且选择存储位置，定价层（我选择F0，是指免费的定价），宿主计划我选择的是“消耗计划”指的是按调用次数付费，Application insights选择“打开”以便后期可以通过一个仪表盘来看到机器人被调用的统计数据。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-23-44.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-23-44.png"></a><p>你已经看到了，Azure Bot Service默认提供了两种语言（C#和Node.js）的五种模板。我先以Basic为例创建一个应用。创建成功后，请在下面的界面中点击“Test in Web Chat”来进行测试。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-40-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-40-31.png"></a><h2>在线修改代码并且进行测试</h2><p>这就是Basic模板默认提供的功能，它就像是一个回声筒一样，将你发送过去的话再返回过来。如果你觉得这样太无聊了，你当然可以修改代码让它变得有趣一些。请点击“机器人管理”中的“内部版本”这个菜单。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-42-10.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-42-10.png"></a><p>点击“在Azure Functions中打开此机器人”链接，在接下来的界面中，找到EchoDialog.csx这个文件，按照下面红色框示意修改代码<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-45-09.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-45-09.png"></a><p>点击“保存”按钮，然后回到此前的"Test in Web Chat”页面，再次输入你的消息，观察其返回的内容，现在在回复消息中多了一个时间戳了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-47-51.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-47-51.png"></a><h2>本地修改机器人代码并实现持续整合</h2><p>以上演示了如何在线修改代码并进行测试的方法。只要你愿意，你随时可以将代码下载到本地，然后使用你喜欢的编辑器进行本地开发，最后提交给Azure Bot Service。请在下图中点击“下载zip文件”链接。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-51-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-51-45.png"></a><p>你需要使用Visual Studio 2017打开这个解决方案文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-14-54-39.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-14-54-39.png"></a><p>将上面这一行代码稍作修改，例如：<code>await context.PostAsync($"{this.count++}: You said {message.Text} at {DateTime.Now},Modify by Visual Studio");</code>。<p>接下来，我们要将本地这个目录进行git配置，以便后续可以跟Azure Bot Service 进行持续整合（通过git的代码提交，自动替换Azure Bot Serivce代码并触发编译，更新Bot应用）。请确保你的本地计算机上面安装了git工具。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-07-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-07-20.png"></a><p>以上通过<code>git init</code>命令初始化当前目录的git仓库。然后通过<code>git add .</code>命令和<code>git commit -m</code>命令提交本地更新。接下来我们配置Bot Service以便它能使用本地git仓库进行持续整合。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-10-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-10-21.png"></a><p>请点击上图的“所有应用服务设置”菜单，并且接下来的“部署选项”中选择“本地Git存储库”选项<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-13-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-13-43.png"></a><p>点击“保存”按钮后，设置“部署凭据”。请牢记这个用户名和密码，并且不要泄露给其他人。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-15-16.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-15-16.png"></a><p>在“概述”页面中，此时会多出来一个Git的克隆Url，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-17-08.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-17-08.png"></a><p>请将这个地址复制下来，接下来回到git bash的窗口。通过<code>git remote add origin 你的url</code> 命令添加远程存储库绑定，并且通过<code>git push origin master</code>命令来完成代码推送。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-19-32.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-19-32.png"></a><p>推送成功后稍等片刻，再次回到Azure Bot Service的“Test in Web Chat”菜单，你会发现刚才我们在Visual Studio中进行的代码修改已经起了作用，如下图所示。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-21-12.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-21-12.png"></a><h2>使用Bot Framework Emulator进行调试</h2><p>如果你想进行更加细节的调试，我推荐你下载和安装 <a href="https://aka.ms/bf-emulator">Bot Framework Emulator</a>。通过它来进行调试的好处是可以清晰地看到消息发送和接收的细节，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-30-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-30-42.png"></a><h2>在你的业务应用中整合这个机器人</h2><p>上面我们演示了如何开发、测试和调试机器人，默认情况下，Azure Bot Service会将这个机器人连接到一个Web Chat的信道（Channel），这样的话，我们既可以通过之前多次演示的“Test in web chat”界面进行使用，但也可以将这个界面整合到自己的业务应用中来，为此我们需要获取机器人嵌入代码，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-37-09.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-37-09.png"></a><p>你可以配置多个站点，并且为每个站点都生成一个单独的密钥以进行区分，然后点击“复制”按钮，实际上你会得到一串HTML代码，里面是一个iframe。请注意用你的密钥替换掉代码中的“使用此处的密钥”，请将代码保存为一个HTML文件，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-42-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-42-47.png"></a><p>请注意，我这里添加了一个Style的设置，这是为了让它在浏览器中看起来更加美观一些。接下来你可以在任意浏览器中打开这个本地网页，输入消息后你会得到跟此前一致的使用体验。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-43-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-43-43.png"></a><h2>将机器人连接到Microsoft Teams</h2><p>既然这篇文章讲的是“Office 365 机器人（Bot）开发入门”，自然要提到如何跟Office 365的结合。这个话题有两层含义，首先在Bot Service中可以通过Microsoft Graph调用Office 365的服务来完成一些工作，其次是我们可以将机器人连接到Office 365的组件中来，目前支持Microsoft Teams和Skype for Business两个信道，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-49-00.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-49-00.png"></a><p>添加到Microsoft Teams相对容易一些，你只需要点击上图中的Microsoft Teams图标，并且接受协议，在下图中点击“完成”即可。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-50-23.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-50-23.png"></a><p>回到信道主界面，点击“Microsoft Teams”的链接，即可为自己的Microsoft Teams客户端添加当前这个机器人。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-15-51-17.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-15-51-17.png"></a><p>如果不出意外的话，你的联系人中会出现一个机器人，你可以像跟同事聊天一样与它进行互动了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-01-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-01-13.png"></a><p>如果你的同事也需要使用这个机器人，在你没有将这个应用提交给微软官方的市场之前，他们需要通过机器人的编号进行搜索，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-06-40.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-06-40.png"></a><p>添加联系人后，后续的聊天形式是一样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-07-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-07-54.png"></a><p>关于如何将你开发的这个机器人提交到微软的官方市场，请参考 <a href="https://docs.microsoft.com/zh-cn/microsoftteams/platform/publishing/apps-publish">https://docs.microsoft.com/zh-cn/microsoftteams/platform/publishing/apps-publish</a> 的说明。<h2>将机器人连接到Skype for Business</h2><p>与Microsoft Teams相比，将机器人连接到Skype for Business的体验正好相反——它的安装配置过程比较复杂（需要Office 365管理员权限），但一旦配置完成，则整个公司的用户都能直接搜索到这个机器人，而无需发布到微软的应用市场。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-11-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-11-43.png"></a><p>添加Skype for Business这个信道只是第一步，接下来要根据一个文档的说明，使用Office 365管理员身份以及几个PowerShell的命令来完成这个机器人的注册和配置。通常的指令形式如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-13-18.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-13-18.png"></a><p>在我的Office 365测试环境中，我执行的命令如下图所示（请注意，第二个命令的执行可能需要几分钟时间）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-26-16.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-26-16.png"></a><p>完成上面的配置后，任何一个用户，都可以直接在Skype for Business中搜索中这个机器人并且跟它聊天了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-30-15.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-30-15.png"></a><p>请注意，我前面已经提到了，因为当前这个机器人是托管在免费的模式下，所以可能你在测试过程中偶尔会遇到一些错误。<h1>结语</h1><p>新年新气象，这篇文章给大家完整地介绍了全新的Azure Bot Service提供的服务。我们可以利用它快速地完成机器人的开发、测试，根据自己的需要将其连接到包括Microsoft Teams和Skype for Business在内的多个信道中去，真正实现“一次编写、处处运行”，我相信这种平台级别的创新，结合Office 365的庞大用户群体，以及海量的有价值的信息，使得机器人(Bot)不再是一个实验室中的花骨朵，而是我们现实工作和生活中可以触手可及的应用。<p>顺便预告一下，第三届Office 365开发者大会将于3月17-18日在北京将隆重举办，我将做关于机器人开发的主题演讲。这一届大会规模比之前两届大，精彩内容除了Office 365, 还有Windows 10的最新开发场景。欢迎踊跃报名，希望现场可以看到你。活动详情和报名请访问 <a href="https://aka.ms/M365DevDays">https://aka.ms/M365DevDays</a>, 你也可以通过扫描以下二维码进行访问<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-02-19-16-36-15.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-02-19-16-36-15.png"></a>]]></description></item><item><title>通过tokenPlease()函数获取accessToken</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/01/08/8242440.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 08 Jan 2018 06:16:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/01/08/8242440.html</guid><description><![CDATA[<blockquote>
<p>作者：陈希章 发表于 2018年1月5日</p>
</blockquote>
<p>这是一个很小的技巧，而且用几句话就能讲明白。事情是这样的，我最近在回顾之前写过的文章：<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/graph-tools.md">通过其他第三方工具体验Microsoft Graph</a> 的时候，发现最近的PostMan这个工具无法正常地获取到accesstoken，具体原因不明，一阵找原因后，碰巧后来遇到了总部做Graph的产品组的同事，了解到他们正考虑在Graph Explorer中增加一个功能，可以直接根据在界面上当前用户登录的身份以及选择的权限集合，获取一个accesstoken，可以直接用于类似于PostMan这类第三方工具中。</p>
<p>话不多说，下面通过一个实例演示一下这个有用的功能。下图显示的是Graph Explorer ( https://developer.microsoft.com/zh-cn/graph/graph-explorer)，屏幕右侧显示的浏览器自带的开发工具（一般通过F12唤出）。我使用某个账号登录后，确保选择了必要的权限，然后在开发工具的Console窗口中输入tokenPlease()然后回车即可得到一串很长的内容，这就是accesstoken了。</p>
<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-08-13-58-19.png"><img src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-08-13-58-19.png" alt="" /></a></p>
<p>有了这个accesstoken，我们可以直接使用到Postman这类工具中。</p>
<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-08-14-04-36.png"><img src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-08-14-04-36.png" alt="" /></a></p>
<p>请注意，这里选择的Authorization类型是Bearer，然后将刚才得到的那个accesstoken粘贴过来即可。为了让这个accesstoken在多个请求中能够共用，你还可以将其添加为一个global的环境变量，如下图所示：</p>
<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-08-14-06-00.png"><img src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-08-14-06-00.png" alt="" /></a></p>
<p>因为有了环境变量，所以在请求中可以通过下面的方式调用：</p>
<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-08-14-08-00.png"><img src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-08-14-08-00.png" alt="" /></a></p>
<p>有了这个accesstoken，可以极大地方便开发人员在不同的工具中进行Graph的测试，除了PostMan，还有我们用到比较多的Fiddler，它也可以轻松地发起Graph的调用了。</p>
<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-08-14-10-54.png"><img src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-08-14-10-54.png" alt="" /></a></p>
<p>大家可能会有一点担心，这样的话会不会有安全问题呢？只要你自己没有将这个accesstoken分发出去，就没有安全问题，而且这个accesstoken的有效期是只有2个小时的。</p>]]></description></item><item><title>扩展Microsoft Graph数据结构（开放扩展）</title><link>http://www.cnblogs.com/chenxizhang/archive/2018/01/02/8177646.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 02 Jan 2018 08:03:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2018/01/02/8177646.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2018年1月2日</p></blockquote><h1>前言</h1><p>Microsoft Graph是一张拥有巨大价值的网络，它定义了包括Office 365在内的资源的实体及其关系，它的价值体现在，随着用户积累的数据越来越多，经过授权的应用程序可以在这些数据的基础上得到很多有价值的信息，并且帮助用户更好地完成工作。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-08-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-08-47.png"></a><p>Microsoft Graph也是Office 365从单纯的SaaS平台向PaaS平台（Office 365 as a Platform）发展的一个非常重要的基石。既然是一个平台，那么就自然会带来另外一个问题，如果我们有大量的应用是基于Microsoft Graph构建的，而这些应用或多或少是希望保存一些自定义数据的（例如用户的个性化信息），那么这些信息是保存在哪里比较合适？进一步来说，有没有可能在不同的应用之间共享数据呢？<p>Microsoft Graph通过两种方式来实现这个需求：应用程序可以将自定义数据存放在Graph里面（当然你无需知道具体怎么存)，这些数据会一直跟随着目标的对象（例如用户，组等）。这从一方面降低了应用开发的复杂性，也无需承担自行维护这些数据的风险和成本，同时又为在Graph中为不同应用实现数据共享提供了支持。<p>这两种方式是“开放扩展”和“架构扩展”，前者更加简单，后者则更加强大。下面我分别来展开说明。<h1>开放扩展</h1><p>关于开放扩展的官方文档，请参考 <a href="https://developer.microsoft.com/zh-cn/graph/docs/api-reference/v1.0/resources/opentypeextension">https://developer.microsoft.com/zh-cn/graph/docs/api-reference/v1.0/resources/opentypeextension</a>，本文带领大家入门，如果想要详细了解各种对象如何自定义扩展，则请参考官方文档。目前下面的对象支持开放扩展。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-18-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-18-46.png"></a><p>如果需要调用这个接口，则需要确保授予如下的权限：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-19-50.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-19-50.png"></a><p>下面我用实例介绍一下，如何为“用户对象”定义一个开放扩展，以便保存用户的“社交网络账号信息”。<p>首先，我们可以通过Post方法，为当前用户创建一个开放扩展（socialaccount），并且添加微信和微博的账号，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-23-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-23-25.png"></a><p>然后就可以通过Get方法来读取这些属性了，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-25-34.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-25-34.png"></a><p>如果要对属性进行修改，则试用PATCH方法，值得注意的是此时可以针对单个属性修改，例如<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-26-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-26-46.png"></a><p>或者<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-27-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-27-25.png"></a><p>最后，如果要删除这个开放式扩展，则试用DELETE方法即可。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-28-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-28-25.png"></a><p>看起来很方便吧，但需要注意的是，开放扩展是针对单个对象的，就好比上面的例子，我虽然给自己这个用户对象，扩展了一个socialaccount的属性集（里面有两个属性），但是其他用户并不会自动拥有这个扩展。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-33-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-33-57.png"></a><p>而且有意思的是，你可以给其他用户也定义开放扩展，但不要求数据格式一样。如下图，虽然我也是给 <code>zhang@office365devlabs.onmicrosoft.com</code> 这个用户定义了一个socialaccount的属性集，但我并没有为其提供微信和微博的账号信息，而是提供了twitter信息。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2018-01-02-14-34-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2018-01-02-14-34-46.png"></a><p>这种架构是允许的，究其根本原因，是因为开放扩展是针对单个对象的。这种设计带来了灵活性，但也会有一些潜在的问题，例如如果我不知道 <code>zhang@office365devlabs.onmicrosoft.com</code> 并没有定义微信的属性，然后去读取的话就可以会报错。<p>如果我们希望为某一类对象定义一个统一的扩展，就是让所有的对象实例都拥有一套统一的扩展属性集，则需要使用架构扩展。<h1>结语</h1><p>本文介绍了使用开放扩展的机制，在Microsoft Graph的资源上面进行数据扩展，以实现应用程序自身的数据保存。<p>我将在下一篇介绍另外一种扩展方式：架构扩展。]]></description></item><item><title>《Office 365 开发入门指南》公开邀请试读，欢迎反馈</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/28/8137924.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 28 Dec 2017 13:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/28/8137924.html</guid><description><![CDATA[<p>终于等来了这一天，可以为我的这本新书画上一个句号。我记得是在今年的2月份从西雅图回来之后，就萌发了要为中国的Office 365开发人员写一些东西并最终能帮到更多中国用户的想法，而从2月26日正式写下了<a href="https://www.linkedin.com/pulse/office-365-%E5%BC%80%E5%8F%91%E6%A6%82%E8%A7%88%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%92%8C%E6%95%99%E7%A8%8B-%E5%B8%8C%E7%AB%A0-%E9%99%88/">第一篇</a>，到今天正好是整整十个月了。<p>十个月的时间，赶一赶的话孩子都可以生一个了。多少个夜晚和周末的时间，如果不是怀着对客户的热爱、对公司的认可、对领导的眷恋和对技术的追求，我都不知道要怎么坚持下来。饶是如此，12月份中旬的时候一看Quota，还有将近五分之一的缺口，于是跺脚咬牙赌气发狠一口气写出来，基本达到了让自己满意的程度。此时此刻，一方面因为终于在设定的时间内完成了年初定下的小目标而高兴，另一方面又有丑媳妇到时候也该见公婆的忐忑心情。但无论如何，我是决意要以这篇结束语给自己一个交代，至于写得好与不好，完全是读者说了算，我也顾不了这么多了。<h1>书籍概要</h1><p>这本书的写作过程也挺有意思的，我其实是在github上面创建了一个<a href="https://github.com/chenxizhang/office365dev">代码库</a>，然后用markdown这种新式的标记语言编写的。使用github来托管源文件，因为它可以帮我做版本控制，随时可以比对和修改，甚至恢复到一个特定的版本。下图有不少数据，例如大家最终看到的是39篇文章，每篇平均2500字左右，与此同时前后一共有300多次的提交（commit）。使用github还有一个好处，是它直接可以连接到一个电子书的平台（gitbook），它可以自动生成目录和所有页面，并且支持电子版本的导出。<blockquote>我此前有一篇文章，分享了一些写作经验，请参考 <a href="https://www.linkedin.com/pulse/%E6%88%91%E5%88%86%E4%BA%AB%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%86%99%E4%BD%9C%E7%BB%8F%E9%AA%8C-%E5%B8%8C%E7%AB%A0-%E9%99%88/">我分享给大家的个人写作经验</a></blockquote><p><img src="https://media.licdn.com/mpr/mpr/AAMAAwDGAAgAAQAAAAAAAAufAAAAJDQyYTE0NWVjLTU3YjYtNDU3OS05ZjAxLTI4ZTAxNDFjYjlhOA.jpg"><p>本书的内容不仅基本完整覆盖了Office 365开发的四大方向（Microsoft Graph，Office Add-in, SharePoint Add-in，Office 365 Connector），而且还包括了其他一些有意义的话题，例如有针对人工智能的话题，有商业应用平台的话题（Power Apps，Microsoft Flow，Power BI等）。对我来说，写作本书的过程也是一个非常好的学习过程，不断地思考和推敲，大纲有几次大的调整，尤其是Office Add-in这部分。<p><img src="https://media.licdn.com/mpr/mpr/AAMAAwDGAAgAAQAAAAAAAA1SAAAAJGRmYzg2MjNjLTA4OTctNDA5Mi05Mjc0LTk4ZjA2YWRmOThjOA.png"><h1>在线阅读</h1><p>本书的在线地址有两个，欢迎大家阅读并提供宝贵的反馈意见。这两个平台都支持给我留言，我会及时回复，并且在必要的时候还会对内容进行修订。<ol><li><a href="https://aka.ms/office365devguide">https://aka.ms/office365devguide</a> 这个地址目前指向了博客园上面我的专栏地址。我是2005年开始在博客园开始写技术文章，至今已经坚持超过12年，截至今天随笔已经达到1321篇。博客园的访问速度非常快，搜索引擎友好性也很高，如果大家有意写博客文章，我强烈推荐使用博客园（<a href="http://www.cnblogs.com/">http://www.cnblogs.com/</a>）。
<li><a href="https://chenxizhang.gitbooks.io/office365devguide/content/">https://chenxizhang.gitbooks.io/office365devguide/content/</a> 这是我开始写这个系列时发表的位置，对于这种有目录结构的书来说，它的阅读体验会好于博客园。这是一个国外的在线写书平台。它支持使用 markdown 进行编写，而且与github能天然集成，与此同时它能自动生成电子书（pdf，mobi，epub等三种格式）。除了访问速度容易受到一些不可描述的原因影响，这个平台堪称完美。所以，在本书写作的后期，我手工地将每一篇文章复制一份到了博客园，以便于国内用户的访问。</li></ol><h1>离线阅读</h1><p>本书的电子版本可以通过下面三个地址下载 （这是实时更新的）<ol><li><a href="https://www.gitbook.com/download/pdf/book/chenxizhang/office365devguide">https://www.gitbook.com/download/pdf/book/chenxizhang/office365devguide</a> (PDF版本，可以在PC或Mac等设备上面使用，有最佳的阅读体验）
<li><a href="https://www.gitbook.com/download/mobi/book/chenxizhang/office365devguide">https://www.gitbook.com/download/mobi/book/chenxizhang/office365devguide</a> （MOBI版本，可以直接在Kindle中阅读）
<li><a href="https://www.gitbook.com/download/epub/book/chenxizhang/office365devguide">https://www.gitbook.com/download/epub/book/chenxizhang/office365devguide</a>（EPUB版本，可以在其他电子阅读器上面使用）</li></ol><p>请注意，离线版本的体积将近90MB，所以请在有无线网络的情况下下载。<p>【请注意】收到不少朋友反馈说下载速度慢，一方面是因为体积较大，一方面是因为上面的网址是在国外的。大家如果需要电子版，请发邮件给<a href="mailto:office365devguide@xizhang.com">office365devguide@xizhang.com</a>，我将统一发送。谢谢支持。<p>【2017年12月29日更新】 我将文件上传到了OneDrive for Business，PDF版本的下载地址是 <a title="https://aka.ms/office365devbook" href="https://aka.ms/office365devbook">https://aka.ms/office365devbook</a> ，请大家自行下载。<p><br><h1>写在最后</h1><p>要感谢的人其实真的挺多的，包括家人的理解，领导和同事的鼓励，还有四大平台的支持（<strong>微软中国Office 365</strong>官方公众号，<strong>微软中国MSDN</strong>官方公众号，<strong>微软商业视角</strong>官方公众号，<strong>ExcelHome</strong>官方公众号），最后还有技术社区中很多认识和不认识的朋友的肯定，这些都给了我很大的动力，并对这本书的最终面世起到了决定性的作用。<p>关于本书的反馈和交流，你还可以通过邮件和我取得联系：<a href="http://mailto:office365devguide@xizhang.com/">office365devguide@xizhang.com</a>]]></description></item><item><title>在Office Add-in中实现单点登陆（SSO）</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/27/8125113.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 27 Dec 2017 04:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/27/8125113.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月27日</p></blockquote><p>这篇文章经过多次修改，终于在今天晚上写完了，演示用的范例代码也终于跑通了。因为这个SSO的功能目前只是Preview的状态，所以本篇文章严格参考了官方的文档，并且对其中的重点环节做了提示，对最终效果做了说明。<blockquote><p>官方的文档请参考 <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/sso-in-office-add-ins">https://docs.microsoft.com/en-us/office/dev/add-ins/develop/sso-in-office-add-ins</a></p></blockquote><h1>Office Add-in SSO 认证流程和原理</h1><p>实现Office Add-in 的单点登录是要解决一个典型问题：已登陆到Office的用户，能否直接利用他自己的身份去访问到Microsoft Graph的资源，而无需再次登录。<blockquote><p>请注意，目前这个功能是Preview的状态。所以要进行测试的话，你必须是某个Office 365 Tenant的全局管理员。如果不具备这个条件，你将无法完成这个实验，但你可以通过这个文章对单点登录流程和效果有一个基本认识。</p></blockquote><p>下图是Office Add-in中进行SSO认证的标准流程。这里面涉及到几个部分<ol><li>Office 宿主程序。
<li>Office Add-in
<li>Office Add-in Service（通常是一个API服务）
<li>Azure AD V2（请注意，必须是2.0）
<li>Microsoft Graph</li></ol><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-06-55.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-06-55.png"></a><p>基本流程如下<ol><li>Office Add-in发起一个请求，getAccessTokenAsync。
<li>Office 宿主程序会向Azure AD 发起一个请求，去获取当前用户的一个所谓的addin token。
<li>Office Add-in得到这个addin token后，将其发送到Office Add-in Service，并请求Microsoft Graph的资源。请注意，Office Add-in 和 Office Add-in service必须使用同一个域名。
<li>Office Add-in Service 向Azure AD发起请求，利用addin token交换得到真正的access token。
<li>Office Add-in Service 利用得到的access token去访问Microsoft Graph，并将结果返回给Office Add-in。</li></ol><h1>如何运行官方案例，体验Office Add-in SSO的效果</h1><p>我是完全按照 <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/create-sso-office-add-ins-aspnet">这篇文章</a>进行了实验，并且已经做出来效果。下面我将有关的步骤，尤其是一些要注意的步骤介绍一下。（该文档的部分地方存在一些小问题，我已经提报给作者了）。<ol><li><p>实验环境。你需要安装最新的Visual Studio 2017和Office 2016（版本1708或者更新）。</p><li><p>克隆这个代码库 <a href="https://github.com/officedev/office-add-in-aspnet-sso">https://github.com/officedev/office-add-in-aspnet-sso</a>。</p><li><p>在***Completed***目录中找到 <code>Office-Add-in-ASPNET-SSO.sln</code>，双击打开这个解决方案。</p><li><p>此时编译解决方案会报错，请运行 <code>Install-Package Microsoft.Identity.Client -IncludePrerelease</code> 命令安装一个包。再次编译，请确保没有任何错误。</p><li><p>在 <a href="https://apps.dev.microsoft.com/">https://apps.dev.microsoft.com/</a> 注册一个应用程序，这个步骤比较重要，一定要严格按照说明操作。下面是我注册的信息，请一定要确保保持一致。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-30-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-30-45.png"></a></p><li><p>将上图中的Application ID和Application Secret信息记下来，并且将Application ID的信息替换掉这个地址中的占位符：<a href="https://login.microsoftonline.com/common/adminconsent?client_id=%7Bapplication_ID%7D&amp;state=12345">https://login.microsoftonline.com/common/adminconsent?client_id={application_ID}&amp;state=12345</a> 得到 <a href="https://login.microsoftonline.com/common/adminconsent?client_id=f7e0154d-1258-42ef-9e89-9857889f4e01&amp;state=12345%E3%80%82">https://login.microsoftonline.com/common/adminconsent?client_id=f7e0154d-1258-42ef-9e89-9857889f4e01&amp;state=12345。</a></p><li><p>目前来说，要测试这个功能，你必须拥有一个Office 365 Tenant的全局管理员身份。在浏览器中输入上面这个地址，然后提供你的管理员身份，你会收到如下的提示，要你接受授权的请求。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-39-37.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-39-37.png"></a><p>点击“Accept”（有时候可能要两次）后，页面会被重定向到下面的地址。请不要惊慌，因为当前我们的Office Add-in网站没有运行起来，所以确实会报告“无法访问此网站”。在这里，只要将地址栏中的tenant这个查询字符串的信息记下来即可（我的例子是：<code>ca2af238-5e61-4608-8622-797a954c4d65</code>），后面要用到。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-42-23.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-42-23.png"></a></p><li><p>回到Visual Studio 2017里面来，找到 <code>Office-Add-in-ASPNET-SSO-WebAPI</code> 这个项目中的Web.config文件，在appsettings里面修改几个设置信息。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-46-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-46-04.png"></a></p><li><p>在<code>Office-Add-in-ASPNET-SSO</code> 这个项目中，找到 <code>Office-Add-in-ASPNET-SSOManifest</code>这个文件，在最底部，修改WebApplicationInfo这个节的信息如下：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-48-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-48-46.png"></a></p><li><p>选择<code>Office-Add-in-ASPNET-SSO</code> 这个项目，在右键菜单中选择“发布”，然后新建一个配置文件：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-51-03.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-51-03.png"></a><p>然后点击“打包外接程序”按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-52-38.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-52-38.png"></a><p>输入当前本地调试用的网址后点击“完成”，你将得到一个可以用于部署的清单文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-53-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-53-52.png"></a></p><li><p>利用清单文件加载该Add-in。这个Add-in是用于PowerPoint的，它的详细代码我这里就不展开了，它实现了一个简单的功能用来读取当前用户的OneDrive for Business中的文件列表信息。<p>我的实验环境中，当前用户的OneDrive for Business中有如下的文件：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-11-58-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-11-58-01.png"></a><p>请在Visual Studio中将“Office-Add-in-ASPNET-SSO-WebAPI”这个项目运行起来，然后通过PowerPoint Online创建一个演示文档，在菜单中选择“插入”=》“Office 加载项”，然后选择“上载我的加载项”，选择上一步骤中生成的XML文件。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-12-00-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-12-00-54.png"></a><p>然后你可以在工具栏中看到一个新的按钮，点击之后可以显示一个任务面板<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-12-04-19.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-12-04-19.png"></a><p>最后，激动人心的时刻终于要到了。点击任务面板中的“Get My Files From OneDrive”按钮，你将在任务面板的下方看到OneDrive for Business中的文件列表信息。<p>当然，很多时候，我也发现会遇到如下的错误。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-27-12-07-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-27-12-07-21.png"></a></p></li></ol><h1>结语</h1><p>本文对于最新的Office Add-in中实现单点登录（SSO）的方案进行了讲解，并且将配套的实例进行了测试。由于当前这个功能还是非常早期的阶段，所以可能你在做实验的时候，也会遇到这样那样的问题。如果遇到，可以给我留言。我过一阵子会继续关注一下这个功能的进展，给大家更新。]]></description></item><item><title>SharePoint Framework 简介</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/25/8110566.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 25 Dec 2017 10:05:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/25/8110566.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月25日</p></blockquote><h2>前言</h2><p>通过前面几篇文章，我相信大家对于SharePoint Online的开发有了更加全面的认识，<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepointaddin.md">上一篇</a> 介绍的SharePoint Add-in的开发，这种方式最开始是在2013年提出来的，目前仍然是受主流支持，不仅仅可用于SharePoint Server，也可以用于SharePoint Online。<p>与此同时，在2016年，一个新的开发框架浮出水面，它的名字叫做SharePoint Framework，也可以缩写为SPFx。产品组提出这套框架的主要原因，是因为SharePoint本身是在不断发展，另外很重要的一点也是源自客户和开发人员的反馈——我们需要有全新的一套框架来重新定义SharePoint 的开发——具体而言，希望能用更加原生的Web开发技术来实现，并且与SharePoint有更加自然的融合。<p>SharePoint Framework这套框架 (<a href="https://aka.ms/spfx">https://aka.ms/spfx</a>) ，也基本实现了上面的承诺。这篇文章将带领大家管中窥豹，一探究竟。<blockquote><p>目前在Youtube上面有一个入门系列教程，有条件的朋友可以参考: <a href="https://www.youtube.com/watch?v=WX9FL0BjE0I&amp;list=PLR9nK3mnD-OXvSWvS2zglCzz4iplhVrKq">https://www.youtube.com/watch?v=WX9FL0BjE0I&amp;list=PLR9nK3mnD-OXvSWvS2zglCzz4iplhVrKq</a></p></blockquote><h2>SharePoint Framework的主要特性</h2><ol><li>在当前用户的上下文和浏览器的连接中运行。没有像SharePoint Add-in那样使用IFrame，也不是将JavaScript 直接嵌入到页面中（安全风险较高，也可能受制于用户浏览器的设置而失效）。
<li>控件直接在页面 DOM 中呈现。
<li>控件支持响应式呈现，以适应不同尺寸的界面。
<li>允许开发人员更好地访问生命周期 - 其中包括呈现 - 加载、序列化和反序列化、配置更改等等。
<li>它未指定框架。可以使用喜欢的任何 JavaScript 框架：React、Handlebars、Knockout、Angular 等。
<li>工具链基于 npm、ypeScript、Yeoman、webpack 和 gulp 等常见开放源代码客户端开发工具。
<li>提供可靠的性能表现，相比较SharePoint Add-in来说有了极大的提升。
<li>最终用户可以在所有网站上使用租户管理员（或其代理）批准的 SPFx 客户端解决方案，其中包括自助式团队、组或个人网站。
<li>SPFx Web 部件可添加到经典页面和新式页面，同时支持SharePoint Online和SharePoint Server。</li></ol><h2>SharePoint Framework能做什么</h2><p>目前来说，SPFx适合下面两个场景的开发<ol><li>客户端Web部件，你可以用Javascript实现所有的界面，并将其应用到任何的SharePoint页面中去。
<li>扩展程序（Extensions），包括修改页面逻辑的 <code>ApplicationCustomizers</code>，为字段提供定制的 <code>FieldCustomizers</code> ，还有为列表或者文档库添加自定义菜单和命令的 <code>CommandSets</code></li></ol><h4>准备SharePoint Framework的开发环境</h4><p>如果你是Visual Studio的重度用户，你可能会希望直接使用Visual Studio来进行SPFx的开发。目前为止，我们还没有看到内置的模板，但SharePoint PnP提供了一个可供单独下载和安装的版本，请参考 <a href="https://marketplace.visualstudio.com/items?itemName=SharePointPnP.SPFxProjectTemplate">https://marketplace.visualstudio.com/items?itemName=SharePointPnP.SPFxProjectTemplate</a>。<p>另外一个好消息是，你可以使用Visual Studio Code 这一款更加轻量级的、跨平台的工具来进行SPFx开发，而且因为SPFx的框架无关性，你可以使用你最熟悉的Javascript框架（例如React、Handlebars、Knockout、Angular等）开发。如果你对C#很熟悉，你的经验可以得到复用，因为Visual Studio Code内置了对Typescript的支持。<ol><li><p>NodeJS，请一定要下载安装6.x这个版本（<a href="https://nodejs.org/dist/latest-v6.x/">https://nodejs.org/dist/latest-v6.x/</a>）。据产品组的声明，目前SPFx在其他版本的NodeJS中运行可能会遇到一些小问题。请安装好之后对照下图确认一下版本信息：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-12-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-12-46.png"></a></p><li><p>通过命令 <code>npm install -g yo gulp</code> 安装yeoman和gulp这两个模块<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-15-16.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-15-16.png"></a></p><li><p>安装微软提供的一个项目模板 <code>npm install -g @microsoft/generator-sharepoint</code></p></li></ol><h2>开发和调试一个简单的客户端Web Part</h2><p>下面我用一个实例，带领大家来体验一下客户端Web Part的开发和部署。请创建一个 <code>spfx-sample</code> 的文件夹，然后运行下面的命令 <code>yo @microsoft/sharepoint</code>，然后在向导中每一步按照下面的提示进行选择<ol><li>What is your solution name : 回车
<li>Which baseline packages do you want to target for your component(s)?：回车选择默认的“SharePoint Online only (latest)”
<li>Where do you want to place the files?：回车选择默认设置
<li>Do you want to allow the tenant admin the choice of being able to deploy the solution to all sites immediately without running any feature deployment or adding apps in sites? : 回车选择默认的No
<li>Which type of client-side component to create?：回车选择默认的WebPart
<li>What is your Web part name? 输入名称spfxsample，然后回车
<li>What is your Web part description? 留空，回车
<li>Which framework would you like to use? ：回车选择默认的设置 No JavaScript framework</li></ol><p>然后，你可能需要等个几分钟直到项目生成结束，这取决于你所使用的网络。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-39-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-39-43.png"></a><blockquote><p>默认情况下，NodeJS的包是要从国外下载的，因为众所周知的原因，有时候你可能会感觉非常慢。有一个变通的办法是通过修改配置，让它使用国内的镜像。此类的镜像有很多，你可以使用 <code>npm config set registry https://registry.npm.taobao.org</code>，请注意，这样修改后要重新打开命令行窗口才会生效。</p></blockquote><p>其实到这里为止，一个可以运行的WebPart项目已经准备就绪了。SharePoint Framework有一个很神奇的功能，就是支持在本地直接进行调试，不要求你安装SharePoint Server，也不需要你真的拥有SharePoint Online的环境（如果你只是显示内容，不需要涉及到调用SharePoint资源的话），这可是一个非常大的进步了。<p>但要开始本地调试之前，我们需要确保有一个用于测试的数字证书，因为SharePoint Framework要求网站的地址必须是支持SSL的。我们可以通过 <code>gulp trust-dev-cert</code> 这个命令生成一个本地的证书，并且选择信任它。正常情况下，你将会看到一个弹出的窗口，请你确认证书信息，命令正常运行后，会有如下的输出：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-46-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-46-49.png"></a><p>接下来通过 <code>gulp serve</code> 这个命令在本地启动一个Workbench文件，用来调试刚才创建的这个WebPart<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-48-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-48-49.png"></a><p>点击上图中央的加号(+)按钮，并且选择“spfxsample”这个Web Part<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-49-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-49-43.png"></a><p>然后你会在浏览器中看到一个默认的Web Part被添加进来<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-51-22.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-51-22.png"></a><p>点击Web Part左上角的笔形图标，在页面的右侧会出现一个属性面板，然后我可以修改Description的信息，它会立即显示在WebPart的界面上，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-16-52-26.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-16-52-26.png"></a><p>看起来怎么样，是不是挺神奇的？更神奇的事情还在后面呢。假设我已经有了一个SharePoint Online的网站，我想在它里面直接去调试这个WebPart，我可以简单的这样做：<ol><li>打开任何一个SharePoint Online站点，将其地址复制下来，例如 <code>https://microsoftapc.sharepoint.com/teams/Samplesiteforares</code><li>在上面的地址后面追加一段地址 <code>/_layouts/15/workbench.aspx</code>，在浏览器中访问这个地址后，你将看到一个跟刚才那个本地调试界面很类似的页面</li></ol><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-00-19.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-00-19.png"></a><p>这是真实的一个在服务器端的页面，因为它是可以直接访问到SharePoint当前上下文的。（此处略），而且你在添加WebPart的时候，会看到很多在服务器才有的WebPart<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-01-26.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-01-26.png"></a><p>在Other里面有我们刚才开发的“spfxsample”，添加后，你可以像之前本地操作一样设置属性，查看页面的变化<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-02-38.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-02-38.png"></a><h2>部署SPFx WebPart</h2><p>上面的这个调试的功能，真是广大SharePoint 开发人员梦寐以求的吧，反正我是这么想的：本地不需要任何环境，就可以直接调试，甚至能直接在远程站点页面上面调试，多酷啊。<p>如果调试完成后，接下来就是真正部署起来，毕竟我们总不可能要求用户都去通过 <code>/_layouts/15/workbench.aspx</code> 这样的地址来访问吧。<p>首先，我们需要通过 <code>gulp bundle</code> 命令将当前项目进行生成捆绑<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-11-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-11-31.png"></a><p>打包之后，通过<code>gulp package-solution</code>生成解决方案包<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-17-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-17-28.png"></a><p>然后，你可以在项目的如下目录 <code>sharepoint\solution</code> 中找到一个sppkg文件<blockquote><p>你可能会觉得gulp是一个无所不能的神器。事实上，它真的是。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-19-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-19-21.png"></a><p>在我们之前创建好的“应用程序目录网站”上面，可以将这个包上传上去<blockquote><p>如果你对如何创建“应用程序目录网站” 不太清楚，可以参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepointaddin.md">这篇文章</a></p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-28-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-28-04.png"></a><blockquote><p>请注意，这里显示的地址仍然是 <a href="https://localhost:4321/">https://localhost:4321</a></p></blockquote><p>然后你在测试网站中，就可以添加这个应用程序了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-31-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-31-04.png"></a><p>请等待应用程序安装完成<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-32-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-32-42.png"></a><p>在当前站点，新建一个网页，在编辑网页的时候，能找到此前我们创建的WebPart<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-33-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-33-47.png"></a><p>关于具体的使用，跟此前本地调试时是一样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-34-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-34-13.png"></a><p>一切看起来都很完美，但是要注意，上面这种部署方式，其实我们的应用还是在本地运行的，所以你要确保运行了<code>gulp serve</code>，否则会报错。<p>但是，这显然也是不现实的。我们当然需要把这个应用部署在服务器，类似于SharPoint Add-in的那种所谓的Provider-Hosted模式。但是，在SharePoint Framework中，它支持将你的项目成果发布到SharePoint中去，它会用CDN（内容分发网络）帮助你托管，这样就不存在外部网址，以及由此产生的跨域访问等问题了。<p>要确保当前网站是否支持SharePoint CDN，你需要有Office 365全局管理员或者SharePoint 管理员的身份，并且按照下面的提示安装好相关的PowerShell管理工具。<p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=35588">https://www.microsoft.com/en-us/download/details.aspx?id=35588</a><p>打开SharePoint Online Management Shell，运行 <code>Connect-SPOService https://m365x810646-admin.sharepoint.com</code> 连接到你的SharePoint Online管理中心。<p>然后，运行 <code>Get-SPOTenantCdnEnabled -CdnType public</code> 确认当前租户是否支持CDN功能。如果是False，则继续执行 <code>Set-SPOTenantCdnEnabled -CdnType public</code>,然后再提示问题时输入a，执行脚本<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-48-55.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-48-55.png"></a><p>接下来，我们就可以再次打包当前项目了。请注意命令有所改变，首先是 <code>gulp bundle --ship</code>，然后是 <code>gulp package-solution --ship</code>。<p>再次将生成的sppkg文件上传到应用程序目录网站，你会发现内容地址改成了“SharePoint Online”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-25-17-55-56.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-25-17-55-56.png"></a><p>然后在测试网站中添加这个应用程序，现在可以发现即便本地并没有运行<code>gulp serve</code>，那个WebPart也能正常工作。<h2>结语</h2><p>SharePoint Framework（SPFx）是一个很好的创新，它将SharePoint开发提升到了一个全新的高度，开发人员可以使用最常见的Web开发工具、框架、语言，实现WebPart和Extensions，这些自定义组件，可以无缝地和SharePoint的原生内容整合在一起。<blockquote><p>关于SPFx中WebPart开发的更多详细内容，限于篇幅这里就不一一展开了，有兴趣请参考 <a href="https://docs.microsoft.com/en-us/sharepoint/dev/spfx/web-parts/overview-client-side-web-parts">https://docs.microsoft.com/en-us/sharepoint/dev/spfx/web-parts/overview-client-side-web-parts</a>，关于SPFx中Extensions开发，请参考 <a href="https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/overview-extensions">https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/overview-extensions</a></p></blockquote>]]></description></item><item><title>SharePoint Online Add-in 开发简介</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/22/8086816.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 22 Dec 2017 09:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/22/8086816.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月22日</p></blockquote><p>在 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepoint.md">再谈SharePoint大局观</a> 中我提到了SharePoint开发的一些新的变化，这一篇文章我将讲解SharePoint Add-in开发。其实早在2013年我也写过这方面的文章，有兴趣的朋友可以参考<ol><li><a href="http://www.cnblogs.com/chenxizhang/p/3394652.html">SharePoint Server 2013开发之旅（一）：新的开发平台和典型开发场景介绍</a><li><a href="http://www.cnblogs.com/chenxizhang/p/3395046.html">SharePoint Server 2013开发之旅（二）：使用在线的开发人员网站进行SharePoint App开发</a><li><a href="http://www.cnblogs.com/chenxizhang/p/3397543.html">SharePoint Server 2013开发之旅（三）：为SharePoint Server配置App开发、部署、管理环境</a></li></ol><p>今天再回过去看这些文章，绝大部分的知识还是可以利用的。只不过，第二篇中提到的Napa这个在线的工具现在不再提供了。现在的开发工具主要有Visual Studio 和 Visual Studio Code。<blockquote><p>值得一提的是，现在确定下来的SharePoint Add-in对应的是2013年那会儿说的SharePoint App，而现在SharePoint App是另有所指。我知道你已经晕掉了，但我希望大家不用纠结这个名字的问题，或者你可以简单地将他们理解为一样也没有关系。</p></blockquote><h1>SharePoint Add-in开发概述</h1><p>作为SharePoint Add-in的定位来说，它是用来给SharePoint提供扩展性的功能的。例如增加一个WebPart，列表，或者自定义一个工作流等等，你的Add-in也可以是一个完全独立的应用，其中会调用到SharePoint的API去完成某种程度的集成。<p>我知道很多人会觉得SharePoint其实很强大了，难道还有什么需要我们去扩展它的吗？这个嘛，取决于你是否真的有深度使用SharePoint吧。我们可以看一下目前已经发布到Office Store中的SharePoint Add-in有哪一些吧。目前有1207个Add-in<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-13-37-09.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-13-37-09.png"></a><p>关于SharePoint Add-in的详细介绍，有兴趣可以参考 <a href="https://docs.microsoft.com/zh-cn/sharepoint/dev/sp-add-ins/sharepoint-add-ins">https://docs.microsoft.com/zh-cn/sharepoint/dev/sp-add-ins/sharepoint-add-ins</a>，我这里给大家指出的是：SharePoint Add-in分为两类：<ol><li>SharePoint自己托管的，应用的内容（网页，脚本）直接托管在SharePoint里面，无需自己创建网站。
<li>提供商托管的，应用是一个独立的网站，可以通过自己喜欢的方式进行部署。</li></ol><p>他们的区别如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-13-47-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-13-47-13.png"></a><p>本文的最后会通过实例快速地分别创建这两种Add-in。<h1>安装开发环境</h1><p>开发SharePoint Online的Add-in，只需要在客户端机器上安装开发工具即可，无需再安装服务器组件。开发工具我最推荐还是Visual Studio 2017。<p>Visual Studio 2017中内置了Office 365相关的开发工具<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-13-51-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-13-51-36.png"></a><p>完成安装后，你可以创建项目时直接使用相关的模板<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-13-50-00.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-13-50-00.png"></a><h1>创建SharePoint Developer Site（开发者站点）</h1><p>上面提到了本地开发工具的安装，为了便于你的开发和部署测试工作。你还需要在SharePoint Online上面创建一个开发站点。为了进行这个操作，你需要具有Office 365 全局管理员或者SharePoint Online管理员的权限。<blockquote><p>如果你还没有Office 365的环境，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365devenv.md">这篇文章</a> 的说明申请一个为期一年的开发者环境。</p></blockquote><p>你需要登陆到SharePoint 管理中心，创建一个“私人网站集”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-13-57-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-13-57-49.png"></a><p>这个网站创建后大致是下面这样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-19-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-19-52.png"></a><blockquote><p>请注意，开发者网站可以创建多个。</p></blockquote><h1>创建SharePoint App Catalog Site（应用程序目录站点)</h1><p>如果你有了开发者网站，你可以自己进行开发、测试和调试。但如果你真的需要在公司内部让其他同事也能使用你开发的Add-in，则需要将你的成果发布到SharePoint Online。我们可以通过创建应用程序目录站点来实现这个需求。但是，应用程序目录站点的创建不同于一般的站点，而且它在一个Office 365的租户中只能创建一个。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-17-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-17-46.png"></a><p>如果是第一次操作，则可以进入下面的界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-22-08.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-22-08.png"></a><p>点击“确定”后进入详细配置页面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-23-37.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-23-37.png"></a><p>这个网站看起来是下面这样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-34-50.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-34-50.png"></a><h1>创建、测试和部署SharePoint-hosted Add-in</h1><p>万事俱备，现在就可以开始SharePoint Online的Add-in的开发了。<p>第一步，通过Visual Studio创建项目<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-37-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-37-42.png"></a><p>第二步，输入开发站点的路径，并且选择Add-in的类型<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-38-22.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-38-22.png"></a><p>点击“下一步”时需要进行身份认证，请提供有权限登录到开发站点的用户名和密码，然后选择“SharePoint Online”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-40-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-40-35.png"></a><p>点击“完成”，这个向导会生成项目的结构和内容<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-42-22.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-42-22.png"></a><p>这个项目使用了ASP.NET的技术来实现网页(default.aspx)，并且有一个app.js文件动态读取当前SharePoint的用户名，并且显示在页面上。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-44-07.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-44-07.png"></a><p>为了进行部署，项目中定义了一个功能（Feature），并且将其打包在一个包（Package）里面。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-14-45-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-14-45-20.png"></a><p>作为演示目的，我这里不做任何代码修改，选择项目文件夹，在右键菜单中选择“部署”，你可能会被要求再次输入账号和密码。接下来请留意在输出窗口的动态<pre><code>------ 已启动生成: 项目: SharePointAddInSample-SelfHosted, 配置: Debug Any CPU ------
------ 已启动部署: 项目: SharePointAddInSample-SelfHosted, 配置: Debug Any CPU ------
活动部署配置: Deploy SharePoint Add-in
  由于未指定预先部署命令，将跳过部署步骤。
  正在跳过卸载步骤，因为服务器上未安装 SharePoint 外接程序。
  安装 SharePoint 外接程序:
  正在上载 SharePoint 外接程序...
  正在进行安装(00:00:05)
  外接程序已安装在 https://office365devlabs-1be72383c7171f.sharepoint.com/SharePointAddInSample-SelfHosted/ 中。
  已成功安装 SharePoint 外接程序。
  由于未指定后期部署命令，将跳过部署步骤。
========== 生成: 成功或最新 1 个，失败 0 个，跳过 0 个 ==========
========== 部署: 成功 1 个，失败 0 个，跳过 0 个 ==========

</code></pre><p>我们可以直接点击上面提到的一个地址，查看一下这个Add-in运行的效果<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-06-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-06-54.png"></a><p>那么，怎么样在我们的站点中使用这个Add-in呢？首先，你需要先对当前这个项目进行打包。<p>请在项目文件夹上面点击邮件，选择“发布”，然后点击 “打包外接程序”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-08-53.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-08-53.png"></a><p>Visual Studio会在磁盘上面生成一个APP文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-09-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-09-47.png"></a><p>接下来你可以将这个文件上传到开发者网站进行测试<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-21-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-21-01.png"></a><p>上传文件后点击“确定”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-21-41.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-21-41.png"></a><p>点击“信任它”，然后需要等待一两分钟后，在网站的左侧导航区域中会出现刚才这个应用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-27-05.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-27-05.png"></a><p>点击“SharePointAddinSample-SelfHosted”即可运行这个应用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-27-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-27-54.png"></a><p>如果我们希望在其他网站也能使用这个应用，则需要先把这个应用发布到“应用程序目录网站”中去。在左侧选择“适用于SharePoint的应用程序”，然后点击 “上载”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-36-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-36-54.png"></a><p>然后你的网站“添加应用程序”的时候，就能看到这个自定义应用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-43-37.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-43-37.png"></a><p>然后选择“信任它”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-44-26.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-44-26.png"></a><p>稍等片刻后，你也会在左侧导航栏中看到一个新的应用链接（这个链接的文字你还可以点击“编辑链接”进行修改）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-47-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-47-35.png"></a><p>点击链接后运行的效果如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-48-23.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-48-23.png"></a><p>到这里为止，我们就全部完成了一个最简单的“SharePoint托管Add-in”的开发和部署过程。你可能会说，好像看起来界面不太美观嘛，功能也太单一了（只是先试一下当前用户名）等等，确实是这样，但作为一个入门教程我相信这已经够了。<p>要知道，你在这个项目中还可以添加很多东西<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-50-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-50-45.png"></a><p>唯一需要注意的是，这里的编程都是基于HTML和JavaScript的，不能使用服务器代码（例如C#)和服务器对象模型。<h1>创建、测试和部署部署Provider-hosted Add-in</h1><p>下面再给大家快速介绍一下“提供商托管的Add-in”的开发过程吧。首先，你在创建项目的时候选择“提供商托管”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-52-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-52-57.png"></a><p>目标还是选择“SharePoint Online”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-53-39.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-53-39.png"></a><p>然后，选择你要创建的Web应用项目的类型，推荐选择“ASP.NET MVC”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-54-44.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-54-44.png"></a><p>配置身份验证选项，推荐用第一种<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-15-55-32.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-15-55-32.png"></a><p>创建好项目后，请注意这个解决方案中有两个项目了。第一个是SharePoint Add-in项目，第二个是外部那个网站的项目。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-04-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-04-36.png"></a><p>我同样不做任何代码修改直接进行部署的尝试。因为这个网站应用是所谓的提供商托管，所以我需要自己去部署。我这里选择的是Azure提供的PaaS服务来实现。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-00-38.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-00-38.png"></a><p>点击“创建”按钮，Visual Studio会直接帮我部署<pre><code>1&gt;------ 已启动生成: 项目: SharePointAddIn2Web, 配置: Release Any CPU ------
1&gt;  SharePointAddIn2Web -&gt; C:\Users\xxxx\source\repos\SharePointAddIn2\SharePointAddIn2Web\bin\SharePointAddIn2Web.dll
2&gt;------ 发布已启动: 项目: SharePointAddIn2Web, 配置: Release Any CPU ------
2&gt;已使用 C:\Users\xxxx\source\repos\SharePointAddIn2\SharePointAddIn2Web\Web.Release.config 将 Web.config 转换为 obj\Release\TransformWebConfig\transformed\Web.config。
2&gt;已将自动 ConnectionString Views\Web.config 转换为 obj\Release\CSAutoParameterize\transformed\Views\Web.config。
2&gt;已将自动 ConnectionString obj\Release\TransformWebConfig\transformed\Web.config 转换为 obj\Release\CSAutoParameterize\transformed\Web.config。
2&gt;正在将所有文件都复制到以下临时位置以进行打包/发布:
2&gt;obj\Release\Package\PackageTmp。
2&gt;启动 Web Deploy 以将应用程序/包发布到 https://sharepointaddinsample.scm.azurewebsites.net/msdeploy.axd?site=SharePointAddInSample...

2&gt;发布成功。
2&gt;Web 应用已成功发布 http://sharepointaddinsample.azurewebsites.net/
========== 生成: 成功 1 个，失败 0 个，最新 0 个，跳过 0 个 ==========
========== 发布: 成功 1 个，失败 0 个，跳过 0 个 ==========
</code></pre><p>接下来，有一个特殊的部署，因为你的这个网站是一个外部的，为了得到授权，你需要按照下面的说明注册一个客户端ID和密钥。<p><a href="https://docs.microsoft.com/zh-cn/sharepoint/dev/sp-add-ins/register-sharepoint-add-ins">注册 SharePoint 加载项 2013</a><blockquote><p>如果是在Visual Studio中调试，直接按下F5后，会动态生成一个客户端ID和密钥，并且自动修改好所有的信息。如果需要为某个租户创建客户端ID和密码，则需要用SharePoint管理员身份在某个SharePoint网站上面运行 <code>_layouts/15/AppRegNew.aspx</code> 这个页面。而如果你的应用是要发布到Office Store，则还需要专门在“卖家面板”上面去注册。</p></blockquote><p>我已经生成一个信息如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-14-48.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-14-48.png"></a><p>回到Visual Studio中，修改Web.config文件和AppManifest.xml文件，然后选择SharePoint Add-in这个项目文件夹，在右键菜单中选择“发布”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-16-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-16-52.png"></a><p>点击“编辑”，然后输入刚才注册得到的信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-15-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-15-25.png"></a><p>点击“完成”后回到主界面，点击“打包外接程序”，请注意这里将Url改为https开头<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-17-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-17-59.png"></a><p>如果一切顺利的话，我们将得到一个APP文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-22-16-18-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-22-16-18-49.png"></a><p>安装成功后你会在左侧导航栏看到一个新的链接，点击之后会跳转到这个页面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-26-14-33-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-26-14-33-52.png"></a><p>如果我们研究一下此时浏览器的地址，它其实是这样的 <code>https://sharepointaddinsample.azurewebsites.net/?SPHostUrl=https://office365devlabs.sharepoint.com/sites/dev&amp;SPLanguage=zh-CN&amp;SPClientTag=0&amp;SPProductNumber=16.0.7206.1208</code>，所以其实此时打开的是真正的你自己的网站，但是会把一些相关的上下文信息传递过来。<p>但是，即便确实是一个独立的网站，在这个网站里面也还是可以访问到SharePoint的资源的，所有的操作都是通过SharePoint的Client API来实现的。下面是代码范例<pre><code>[SharePointContextFilter]
public ActionResult Index()
{
    User spUser = null;

    var spContext = SharePointContextProvider.Current.GetSharePointContext(HttpContext);

    using (var clientContext = spContext.CreateUserClientContextForSPHost())
    {
        if (clientContext != null)
        {
            spUser = clientContext.Web.CurrentUser;

            clientContext.Load(spUser, user =&gt; user.Title);

            clientContext.ExecuteQuery();

            ViewBag.UserName = spUser.Title;
        }
    }

    return View();
}

</code></pre><h1>结语</h1><p>本文完整地介绍了SharePoint Add-in开发的两种模式，一种是SharePoint托管的，一种是提供商托管的。第一种不需要独立的部署一个网站，它只能包含客户端脚本来实现定制，而且会以一个iframe的形式嵌入在SharePoint的网页中。第二种则可以由开发者自己部署一个网站，通过在SharePoint上面注册一个应用程序，来实现关联。这一种方式可以用更加强大的服务器编程，但也可以通过客户端API访问到SharePoint在资源。]]></description></item><item><title>SharePoint Patterns and Practices 简介</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/22/8084977.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 22 Dec 2017 02:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/22/8084977.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月22日</p></blockquote><p>SharePoint Patterns and Practices，以下简称PnP，是由微软的SharePoint产品组发起并主持的一个有关SharePoint产品生态环境，发展至今，已经在全球拥有很大的规模，核心成员也已经不仅仅限于微软的产品组员工，还有大量的MVP，合作伙伴，开发人员。<p>PnP的主要活动和内容包括<ol><li>开源的框架、插件、范例代码（托管在github上面）
<li>专题演讲、视频（托管在youtube上面）
<li>专属的技术社区（托管在Microsoft Tech Community上面）
<li>每月或每周的定期会议（可通过Skype for business加入）
<li>每月一次月报，大量的文档和合作伙伴加速包
<li>在全球范围内召开的线下活动（SharePoint Conference，SharePoint Saturday等）</li></ol><blockquote><p>SharePoint Saturday 已经在中国举行过两届（由微软苏州研发中心SharePoint产品组组织），最近一次是在上海举行的。我有幸参加了这次活动，现场有将近100位来自全国各地的参与者。一天的活动，干货多多，也看到了不少老朋友，希望接下来还有更多类似的活动。<br><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/20171222105325.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/20171222105325.jpg"></a></p></blockquote><p>PnP的所有资料，你可以通过下图找到。如果你记不住这么多，你只要保存一个地址即可：<a href="http://aka.ms/sppnp">http://aka.ms/sppnp</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/687474703a2f2f692e696d6775722e636f6d2f54744e4d65546e2e706e67.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/687474703a2f2f692e696d6775722e636f6d2f54744e4d65546e2e706e67.png"></a><p>PnP是一个非常活跃的生态环境，从下面的数据可见一斑。这些数据来自于最近一期的月报: <a href="https://dev.office.com/blogs/pnp-december-2017-update">https://dev.office.com/blogs/pnp-december-2017-update</a><ul><li>GitHub repository forks at most popular repositories in SharePoint GitHub organization
<ul><li>PnP - 2596
<li>PnP Sites Core - 432
<li>PnP PowerShell - 396
<li>PnP JS Core - 184
<li>SP Dev Docs - 277
<li>SP Dev FX Web Parts - 396</li></ul><li>Unique visitors during past 2 weeks in SharePoint organization repositories - 34207
<li>Merged pull requests across SharePoint repositories (cumulative) - 4159
<li>Closed issues and enhancements ideas cross SharePoint repositories (cumulative) - 2631
<li>SharePoint Online CSOM NuGet package downloads (cumulative) - 319162
<li>PnP Core component NuGet package downloads (cumulative) - 121692
<li>Page views in SharePoint Dev pages at docs.microsoft.com during November 2017 - 625394
<li>Unique tenants using PnP components during November 2017 - 8108
<li>Http requests towards SharePoint Online from PnP components during November 2017 - 5545920557
<li>SharePoint Dev YouTube channel had 24387 views with 148705 minutes watch time during November 2017</li></ul><p>那么问题来了，什么时候我们中国的产品组，MVP和开发人员能更多地参与到这个生态中去呢？我自己的一个小目标，计划在2018年在PnP中能做出一些力所能及的贡献，立此存照，欢迎大家监督，当然更喜欢大家一起来参与，相互交流和成长。<p>行文至此，不免有些感慨。我知道很多人在关注最近所谓的“中年危机”的话题（网络上面总是不缺少新话题的），从一定程度上，这是全民焦虑的一种表现。我就奇怪了，人类社会少说也有了几千年历史了，也没见谁谁谁到了一个年龄就要死要活，而且全社会还热热闹闹地讨论；而每个人都会经过少年、中年到老年，自然万物都是如此，这又有什么好焦虑的呢。这种新闻或者软文，听一听或者自嘲一下也就算了（我相信很多朋友是属于这一种），如果说找抱怨的理由，那多了去了，但是“每个人对于他所属的社会都负有责任，那个社会的弊病他也有一份”，找到理由好像就可以心安理得地什么都不做，或者继续看热闹，这当然是一种个人的选择，但总是有另外一些拥有自由而无用的灵魂的人们会选择继续前进，一方面不断地提高自己，一方面去真正做一些事情。<ul><li>© 2017 GitHub, Inc.</li></ul>]]></description></item><item><title>再谈 SharePoint 大局观</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/21/8082801.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 21 Dec 2017 14:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/21/8082801.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月21日</p></blockquote><h1>前言</h1><p>我对SharePoint这个产品很有感情，因为曾经有相当长一段时间，在很多个夜深人静、月黑风高的晚上，我都是在和它形影不离，在一个一个项目实践中相爱相杀。今天这个产品早已经不是我最初认识它的模样，但历经这么长时间的发展变迁，我觉得现在是在一个非常好的发展轨道上面。SharePoint平台过去是、现在也仍然是企业级协作和内容管理的领导者，在全球拥有数以亿计的用户。<p>我曾经写过超过140篇与SharePoint及其开发相关的技术文章，如果有兴趣可以参考 <a href="http://www.cnblogs.com/chenxizhang/category/136065.html">SharePoint Server及其开发早期系列文章</a>。这些文章大多基于SharePoint Server 2007和2010这两个版本，现在虽然SharePoint Online已经成为了大势所趋，但是其间的一些基本原理还是相通的。而如果你还在使用本地的SharePoint Server，则大部分知识都还是可以复用的。<p>一千人心中有一千个SharePoint的印象，这一点不奇怪。我在2011年专门写过一篇文章—— <a href="http://www.cnblogs.com/chenxizhang/archive/2011/11/20/2256344.html">我们该用怎么样的系统思维来了解SharePoint及其价值</a>，希望带领大家从四个维度来看待SharePoint：<ol><li>基础技术架构人员的角度
<li>系统运维和管理人员的角度
<li>开发人员的角度
<li>最终用户的角度</li></ol><p>那么，在今天这样一个风起云涌的新的时代，SharePoint的发展具有哪些趋势，有哪些有意思的新的方向，对于以上四个维度的人员有哪些新的机会呢？本文准备从五个方面来展开<ol><li>SharePoint 向云迁移的趋势和规律
<li>SharePoint Server 和 SharePoint Online的分工
<li>SharePoint &amp; OneDrive for Business的分工
<li>SharePoint 在用户体验方面的改进
<li>开发模式的变化</li></ol><h1>SharePoint 向云迁移的趋势和规律</h1><p>2010年10月，微软对外宣布了Office 365这个计划，并在2011年6月正式在全球推出商用。时至今日，Office 365仍然保留了当年那个四大核心组件的架构（Office &amp; Office Online + Exchange Online + SharePoint Online + Lync Online），只不过在一直不断地完善了很多细节（几乎每月都有大量的更新）。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-08-49.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-08-49.png"></a><p>而从去年开始，核心架构也在做出创新性的一些挑战，有一些大家可能已经看到了（例如Teams等新服务的推出），更多的还没有对外公布，但有望在一个新的层次上提升和改进Office 365的能力。据不完全统计的数据，目前全球的Office 365月活用户超过1.2亿。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-38-27.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-38-27.png"></a><p>业界普遍认为，SharePoint Server 2013这个版本是向云而生的一个版本，其中最显著的一个特点是它推出了全新的App开发模型（虽然并不是很成功），以便用来取代掉原先的那种相对较为重型的服务器短扩展开发模型。SharePoint Online 作为一个多租户的平台，它的开发模式与本地有很大的不同，所以它的开发模式就是沿用了SharePoint 2013的这个设计。<p>有大量的客户在做SharePoint向云端迁移的方案与实践，这是一个必然的趋势。拿微软自己来说，我们可能是全球使用SharePoint最为广泛的公司之一了，截止到2012年，全公司在三个主要的数据中心，将近250台服务器上面承载了一百多万个网站（包括团队网站，工具网站，个人网站等），数据量大约有36TB。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-21-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-21-25.png"></a><p>经过差不多五年的时间，微软IT部门分阶段完成了绝大部分网站向云端的迁移<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-23-56.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-23-56.png"></a><p>截至2016年，我们的SharePoint Online规模如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-27-26.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-27-26.png"></a><p>相比较2012年的数据，我们明显发现，网站数量是有所减少的（我们有部分网站还是保留在本地），但内容大小却激增了将近28倍，这说明向云迁移大大提升了员工使用SharePoint进行协作的意愿和能力，这也是云计算的一个重要思考：它不是简单的将本地的东西搬到云上，它其实是一种新的思维模式、工作方式，它当然会带来一些新的挑战，但总体而言，它代表了更多新的可能。<p>从迁移结果来看还是令人满意的，但过程却并非一帆风顺。我们也同样面临巨大的挑战<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-32-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-32-57.png"></a><p>我此前在上海的SharePoint Saturday活动上给与会者分享过我们自己的这个故事，以及一些经验心得，总体而言我们可以得出的结论是：向云迁移是一个必然的趋势，这个过程不仅仅是一个技术上面的决策，还牵涉到信息架构的规划、工作文化的重塑等有意思的命题，如果真能跨出这一步，或能帮助企业在互联网的时代真正实现转型。<p>关于微软自己进行SharePoint 迁移的故事，如果有兴趣，也可以自行通过 <a href="https://www.microsoft.com/itshowcase/Article/Content/691/SharePoint-to-the-cloud-Learn-how-Microsoft-ran-its-own-migration">https://www.microsoft.com/itshowcase/Article/Content/691/SharePoint-to-the-cloud-Learn-how-Microsoft-ran-its-own-migration</a> 进行了解，有多个版本的文档可供下载。<p>为了便于大家访问，我给大家做了一个二维码<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-42-44.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-42-44.png"></a><h1>SharePoint Server 和 SharePoint Online的分工</h1><p>微软自己的迁移经验中，我觉得比较重要的是并非所有的都放在云上，而且也并不是所有的网站都迁移。有很多网站其实已经不用了，所谓的僵尸网站，倒不如趁这个向云迁移的项目集中清理掉。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-02-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-02-25.png"></a><p>实际上，我们现在是一个典型的混合架构<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-20-55-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-20-55-35.png"></a><p>从功能上说，由于SharePoint Server的更新周期一般是三年一个版本，所以虽然SharePoint Online和SharePoint Server其实是一个研发团队（其中有相当一部分就在江苏苏州的研发中心），我们都是先做SharePoint Online上面的改进和创新，然后等一段时候，再视情况整合到SharePoint Server里面去。<p>微软对于客户的承诺是，我们将一直保留有本地SharePoint Server的版本，提供给客户多种选择。经过大量的实践，我们发现尤其对于中大型企业来说，混合的架构可能是更好的选择，而这也正好是微软Office 365平台的一个优势。<p>有关混合部署及其使用场景，详情请参考 <a href="https://technet.microsoft.com/zh-cn/library/mt844709(v=office.16).aspx">https://technet.microsoft.com/zh-cn/library/mt844709(v=office.16).aspx</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-07-08.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-07-08.png"></a><h1>SharePoint &amp; OneDrive for Business的分工</h1><p>OneDrive for Business这个功能，最早出现在SharePoint Server 2013中，它是从MySite这个功能演化过来的，并且借鉴了个人版OneDrive的一些经验。<p>OneDrive for Business 的成功出乎很多人意料，但如果从基于互联网思维的角度来看，这又是必然的。在前不久它被正式认定为企业级文件共享和协作解决方案的领导者。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-14-08.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-14-08.png"></a><blockquote><p>有关这个资格认定，详情请参考 <a href="https://blogs.office.com/en-us/2017/12/06/microsoft-onedrive-recognized-as-a-forrester-wave-leader-in-enterprise-file-sync-and-share/?eu=true">https://blogs.office.com/en-us/2017/12/06/microsoft-onedrive-recognized-as-a-forrester-wave-leader-in-enterprise-file-sync-and-share/?eu=true</a></p></blockquote><p>这绝不是浪得虚名。OneDrive for Business 也不仅仅是一款超大容量的个人网盘，而且具有企业级的安全性（灵活并且强大），基于文档的协作和智能发现，可扩展性等方面的优势。如果换一个角度，围绕OneDrive for Business，其实可以建立一个生态系统。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-41-51.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-41-51.png"></a><p>OneDrive for Business的强大以及由此带来的成功，让它在Office 365中的重要性也与日俱增。在Office 365 国际版，OneDrive for Business是可以单独购买的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-28-19.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-28-19.png"></a><blockquote><p>除了以上单独购买的情况，只要购买了SharePoint Online，默认就包含了OneDrive for Business</p></blockquote><p>国际版最新的管理后台，OneDrive for Business也有了自己独立的管理中心，而不再依赖于SharePoint Online了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-33-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-33-35.png"></a><p>不光是可以单独购买，可以单独管理，现在连OneDrive的开发，也有独立的开发中心了<a href="https://developer.microsoft.com/zh-cn/onedrive">https://developer.microsoft.com/zh-cn/onedrive</a>。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-35-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-35-21.png"></a><p>还有谁不服？！反正我是服了。话说回来，OneDrive for Business其实只是SharePoint的一个功能演化出来，如今能搞出这么大的动静来，这只能说明一个问题：SharePoint是多么有潜力的高价值的应用平台啊。当然，前提是我们要抓住机遇，并且跟上互联网的思维。<p>OneDrive for Business的成功代表着Office 365转型的一个信号，我期待着有更多创新性的服务、更加细粒度的服务能够开发开放出来，这是Office 365用户的福利，也是Office 365要成功的一个有力保障。<h1>SharePoint 在用户体验方面的改进</h1><p>虽然SharePoint平台的功能非常强大（坊间传闻真正被客户用到的功能可能不到10%），但是在相当长一段时间内，因为种种原因，我们听到的更多是客户反馈说SharePoint不太易于使用，这相当一定程度上是因为协作需要在使用习惯上做出适应，另外，SharePoint的网页的技术特点决定了除非进行必要的定制，原生的界面可能跟一般的网络应用相比，在使用体验这个方面确实存在一些差距，包括在移动化支持这个方面。<p>下面这个截图是老版本的SharePoint Online团队网站的界面。很熟悉对吧，这应该也是SharePoint Server 2013的默认模板风格。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-50-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-50-28.png"></a><p>管理员要创建网站是下面这样的体验。我们上图看到的那个网站，其实就是所谓的“经典体验”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-57-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-57-04.png"></a><p>与经典体验相对应的是“现代体验”，我们内部将其称为SharePoint Modern Site。这个功能是从去年开始部署的，现在在世纪互联版本也是提供这个体验的。具体来说，它将SharePoint的网站归类两类，一类是要进行协作的团队网站，所有成员都可以参与内容创作、协作等；另一类是通信网站（或者准备地说是沟通网站，英文是Communication Site），它一般用来在企业内部发布内容，大部分其他用户是查看。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-21-59-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-21-59-43.png"></a><p>全新的团队网站体验如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-22-07-50.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-22-07-50.png"></a><p>编辑页面的体验也有了本质的不同<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-22-12-11.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-22-12-11.png"></a><p>不仅仅是网站页面，文档库和列表的界面也有了很大的变化<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-22-11-03.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-22-11-03.png"></a><p>而一个典型的沟通网站体验如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/screencapture-modtsp-sharepoint-cn-sites-portal-SitePages-Home-aspx-1513865937762.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/screencapture-modtsp-sharepoint-cn-sites-portal-SitePages-Home-aspx-1513865937762.png"></a><blockquote><p>关于沟通网站，更多信息，请参考 <a href="https://blogs.office.com/en-us/2017/06/27/sharepoint-communication-sites-begin-rollout-to-office-365-customers/?eu=true">https://blogs.office.com/en-us/2017/06/27/sharepoint-communication-sites-begin-rollout-to-office-365-customers/?eu=true</a></p></blockquote><h1>开发模式的变化</h1><p>最后，我要谈一下SharePoint所支持的开发模式方面的变化，尤其是在SharePoint Online这个部分。<p>SharePoint Online 不支持服务器场和沙箱解决方案，但是继续支持用户直接在浏览器中定制和“开发”页面（可以写少量的脚本，改样式），以及通过SharePoint Designer进行定制（网页的高级定制，工作流定制等），与此同时，它还支持下面两种开发模式<ol><li>SharePoint Add-in开发，允许开发人员独立开发一个Web应用，然后用iframe的方式嵌入到SharePoint的页面或者网站中去。
<li>SharePoint Framework 开发，允许开发人员使用全新的客户端开发手段，定制Web Part和Extension。这是一个非常大的创新。</li></ol><p>我后续会有专门的文章介绍这两种开发模式，在这里先不做过多的展开。<p>另外，如果需要通过编程访问SharePoint的资源，例如列表，文档库等，除了继续使用SharePoint Online自己提供的<a href="https://msdn.microsoft.com/en-us/library/office/jj860569.aspx">REST API</a>之外，现在也支持在Microsoft Graph中直接访问（有限支持）。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-21-22-32-25.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-21-22-32-25.png"></a><p>有关详情，请参考 <a href="https://developer.microsoft.com/zh-cn/graph/docs/api-reference/v1.0/resources/sharepoint">https://developer.microsoft.com/zh-cn/graph/docs/api-reference/v1.0/resources/sharepoint</a>]]></description></item><item><title>在企业和应用市场发布Office Add-in</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8075164.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 20 Dec 2017 10:08:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8075164.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月20日</p></blockquote><p>我已经写了很多关于Office Add-in的内容，而且我相信你已经尝试过创建一两个Add-in了吧。作为一个开发人员，你有多种方式在自己的机器上使用你的作品，例如<ol><li><p>如果你是用Visual Studio开发，这是最简单的，你直接按F5就可以了</p><li><p>你可以将manifest文件（其实就是一个XML文件）保存到一个共享目录，然后通过在Office客户端中，添加这个共享目录作为信任位置，然后然后将这个目录加入到Office客户端的信任位置中去，然后在插入菜单中能找到这个Add-in。关于这个操作，如果不清楚，可以参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/vscodetoofficeaddin.md">这篇文章</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddincatalogs.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddincatalogs.png"></a><blockquote><p>如你所见，这里还可以设置其他一些catalog的路径，包括SharePoint站点。这个会在后续进行介绍。</p></blockquote><p>完成上述步骤后，你就可以在插入add-in的窗口中看到相关的add-in了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/sharedfolderaddin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/sharedfolderaddin.png"></a></p><li><p>在Office Online里面，直接上传这个manifest文件，也可以实现跟第二种场景的效果。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-43-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-43-54.png"></a></p></li></ol><p>而本文主要讨论的是如何去分发你的开发成果。例如你要给同事去试用，他们该怎么去安装呢？当然，他们可以按照的第二种和第三种的做法，但如果要大面积部署的话，你需要了解如何在企业中部署你的应用。值得高兴的是，现在Office 365的管理中心直接提供了这样的功能，称之为“集中部署”。你需要以全局管理员的身份登陆到Office 365管理中心，然后选择左侧导航中的“设置”=》“服务和加载项”菜单<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-47-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-47-52.png"></a><p>点击“上传加载项”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-49-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-49-35.png"></a><p>在接下来的界面中，管理员将拥有三种选项。本例而言，我们选择第二种方式。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-50-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-50-36.png"></a><p>点击“下一步”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-51-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-51-36.png"></a><p>接下来可以设定这个Add-in的可见范围<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-52-15.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-52-15.png"></a><p>完成这样的操作后，你可以在“管理员托管”这个分类中找到这些集中部署的Add-in，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-17-53-34.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-17-53-34.png"></a><blockquote><p>我这里给大家准备了一个范例的Add-in的清单文件，你可以直接用它来做练习。该文件可以通过这里下载 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/assets/ExcelWebAddInSampleManifest.xml">ExcelWebAddinSample</a></p></blockquote><p>当然，你还可以将应用发布到Office Store（应用商店）中，这样全球的Office 365 用户都可以通过一个统一的位置安装和使用你的应用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-18-01-10.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-18-01-10.png"></a><p>发布到Office应用商店的细节，我不准备在这个文章中展开细节，请参考官方文档 <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/publish/publish">https://docs.microsoft.com/en-us/office/dev/add-ins/publish/publish</a>，大体上，有如下的几个步骤<ul><li>你需要有一个Office 开发者账号，目前是免费申请的 
<li>你的应用在发布之前，应该通过一个工具进行检查 
<li>提交给商店后，会由微软的团队负责审核，这个需要一定的时间，而且并不能确保每个人的申请都会被接受 </li></ul><blockquote><p>请注意，因为众所周知的原因，Office Store将会有至少会有两个版本，<a href="https://store.office.com/">国际版</a>和中国版。中国版将有望在2018年落地。</p></blockquote>]]></description></item><item><title>Office Web Add-in的技术原理和开发常见问题剖析</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8074384.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 20 Dec 2017 08:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8074384.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月20日</p></blockquote><p>我过去发表过一些Office Add-in开发的文章，并且也在不同的场合分享过新的开发模式及其带来的机遇。有不少朋友给我反馈，也讨论到一些常见问题，我这里集中地总结一下给大家参考。<ol><li><p>Office Web Add-in的适用场景<p>这是很多人的困惑。我在<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/exceladdinsample.md">这篇文章</a>中详细对照了三种为Office开发Add-in的技术和表现形式，这里再总结一下新的Web Add-in适用的场合<ul><li>开发人员本身对于网络开发比较熟悉
<li>你希望这个插件能够跨平台使用
<li>你希望更加方便地进行集中部署和更新
<li>这个插件的功能除了Office内部的操作，还有大量的外部资源访问
<li>用户能随时访问网络，并且网络条件有保障
<li>用户对于运行速度的敏感度不是很高，并不是说Web Add-in的运行速度慢，是因为Web Add-in开发中很多操作都是异步执行的，所以会造成感觉上的运行慢的体验</li></ul><li><p>工作原理到底是怎么样的<p>这也是很多人的疑问。我们可以稍微回顾一下历史，VBA是直接运行在Office进程（例如Excel）中的，它应该算是一个脚本，会有主程序动态加载，编译运行。一旦运行结束，则会释放资源。而VSTO则更为复杂，因为它是用<code>.NET</code>开发出来的托管代码，所以他本身是不能通过宿主程序直接运行的，而是需要从宿主程序（其实是COM）通过平台调用的方式（Interop）发起一个指令，然后由.NET CLR加载Add-in的组件，这个组件如果需要操作Excel的资源，又要通过平台调用的方式反过来调用COM。<p>那么，今天的Web Add-in到底又是怎么样加载和运行的呢？它是通过一个独立的浏览器进程（例如IE）来运行的。下面我将详细解释这方面的原理。<blockquote><p>在不同的平台上，Office Add-in所依赖的浏览器及其版本是不一样的，这给开发人员要提一个醒：浏览器兼容性测试还是很重要的。官方文档有提到对于浏览器及其版本的要求：<a href="https://docs.microsoft.com/en-us/office/dev/add-ins/concepts/requirements-for-running-office-add-ins">https://docs.microsoft.com/en-us/office/dev/add-ins/concepts/requirements-for-running-office-add-ins</a>。</p></blockquote><p>通过nslookup命令，可以看出我目前这个托管在azurewebsites.net上面的范例插件，它的服务器IP地址是 13.75.46.26（注意，因为Azure平台有很多服务器，所以实际上针对一个域名可能会有很多IP地址，如果你用nslookup命令可能得到的结果跟我不一样）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-14-26-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-14-26-45.png"></a><p>在插件加载后，我们一般会在进程管理器中看到两个IE的进程。这里有一个细节，如果你的Office是32位的，那么它的核心进程会是一个32位的，你可以查看如果加载多个插件的话，它所占用的内存会逐步增加。但是，仍然是一个进程。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-14-27-33.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-14-27-33.png"></a><p>但是，如果你的Windows是64位的，此时它会另外创建一个64位的IE进程，这两个进程其实是一个调用的关系。从下图可以看出来32位的进程其实是在调用64位那个进程的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-14-35-37.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-14-35-37.png"></a><p>如果要具体来证明这些进程是访问到我们那个插件的网站，可以通过进程查看器来观察<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-14-31-33.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-14-31-33.png"></a></p><li><p>如何在Web Add-in的Javascript代码中异步访问到远程的服务<p>既然我们知道Office Add-in本质上是一个网络应用，根据你所选择的开发技术不同，对于访问远程服务资源的做法也不一样。如果你是用ASP.NET MVC来实现的，那么可能会简单一些，因为MVC本身就可以包含一些服务器代码。但如果你更加喜欢用Javascript代码来编程，你的服务资源调用，需要注意遵循一个两个重要原则：<ul><li>这个资源必须使用Https的方式提供，而且证书必须是合法的。如果部署到Azure的应用服务，则默认就带有了合法的证书，支持https访问。
<li>这个资源必须支持跨域访问。关于如何支持跨域访问，我另外有一篇文章可以参考:<a href="http://www.cnblogs.com/chenxizhang/p/7975521.html">http://www.cnblogs.com/chenxizhang/p/7975521.html</a></li></ul><p>下面我这里有一个范例代码可供参考。我专门写了一个范例的API服务 <a href="https://webaddinapisample.azurewebsites.net/api/values">https://webaddinapisample.azurewebsites.net/api/values</a>，大家如果测试也可以直接使用它。<pre><code>$("#run").click(() =&gt; tryCatch(run));

async function run() {
    await Excel.run(async (context) =&gt; {
        await $.get("https://webaddinapisample.azurewebsites.net/api/values").done(async function (result) {
            //这里一定要注意，必须是https地址，而且证书要有效，并且设置跨域访问
            var sheet = context.workbook.worksheets.getActiveWorksheet();
            var range = sheet.getRange("A1:B1");
            range.values = [result];

            await context.sync();

            
        }).fail(function (jqXHR, textStatus, errorThrown) {
            console.log(errorThrown);
        });


    });
}

/** 尝试执行某个方法 */
async function tryCatch(callback) {
    try {
        await callback();
    }
    catch (error) {
        OfficeHelpers.UI.notify(error);
        OfficeHelpers.Utilities.log(error);
    }
}

</code></pre><li><p>网络断开是否可以继续用<p>这个问题的答案跟问题本身一样简单：不能。由于Web Add-in本质上是一个网络应用，所以没有网络，Add-in是无法加载的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-13-50-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-13-50-36.png"></a><blockquote><p>据官方提到，有可能日后会有支持本地缓存的技术实现。但目前还没有看到这方面的路线图。</p></blockquote><li><p>能不能通过代码增加菜单<p>目前仅支持利用清单文件来定义界面元素，包括Ribbon和快捷菜单。如果你对这方面有兴趣，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddinmanifest.md">详解Office Add-in 清单文件</a>。<p>这可能是跟VBA和VSTO相比较而言，比较大的劣势，其他的功能方面，也并不是完全一致，这个还有一个不断发展的过程，好消息是，这些API还是快速地开发中。<p><a href="https://dev.office.com/reference/add-ins/openspec">https://dev.office.com/reference/add-ins/openspec</a></p><li><p>怎么做基于事件的编程？<p>面向事件的编程，可能是绝大部分开发人员根深蒂固的观念。其实Office Add-in本身就是面向事件的编程。所有的代码，都是从一个 <code>Office.initialize</code> 的事件开始的。再往深入地看，针对不同的宿主程序，不同的资源对象，是否还可以绑定事件并且进行响应处理呢？我们在VBA或VSTO中或多或少是可以这么做的，例如Workbook的Open事件等等。<p>在Web Add-in中，事件通过一个特殊的做法来实现：Binding。但目前的支持是有限的，请参考官方文章：<a href="https://dev.office.com/reference/add-ins/excel/binding">https://dev.office.com/reference/add-ins/excel/binding</a> 。下面有一个简单的实例可供参考：<pre><code>$("#setup").click(() =&gt; tryCatch(setup));
$("#register-data-changed-handler").click(() =&gt; tryCatch(registerDataChangedHandler));

async function registerDataChangedHandler() {
    await Excel.run(async (context) =&gt; {
        const sheet = context.workbook.worksheets.getItem("Sample");    
        const salesTable = sheet.tables.getItem("SalesTable");
        const dataRange = salesTable.getDataBodyRange();
        //创建事件绑定
        const salesByQuarterBinding = context.workbook.bindings.add(dataRange, "range", "SalesByQuarter");
        salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

        OfficeHelpers.UI.notify("The handler is registered.", "Change the value in one of the data cells and watch this message banner. (Be sure to complete the edit by pressing Enter or clicking in another cell.)");

        await context.sync();
    });
}

//这是事件处理代码
async function onSalesDataChanged() {
    await Excel.run(async (context) =&gt; {
        OfficeHelpers.UI.notify("Data was changed!!!!", "");

        await context.sync();
    });
} 

//准备初始化数据
async function setup() {
    await Excel.run(async (context) =&gt; {
        const sheet = await OfficeHelpers.ExcelUtilities.forceCreateSheet(context.workbook, "Sample");
        let salesTable = sheet.tables.add('A1:E1', true);        
        salesTable.name = "SalesTable";
        salesTable.getHeaderRowRange().values = [["Sales Team", "Qtr1", "Qtr2", "Qtr3", "Qtr4"]];

        salesTable.rows.add(null, [
            ["London", 500, 700, 654, null ],
            ["Hong Kong", 400, 323, 276, null ],
            ["New York", 1200, 876, 845, null ],
            ["Port-of-Spain", 600, 500, 854, null ],
            ["Nairobi", 5001, 2232, 4763, null ]
        ]);  

        salesTable.getRange().format.autofitColumns();
        salesTable.getRange().format.autofitRows();
        sheet.activate();

        await context.sync();
    });
}


async function tryCatch(callback) {
    try {
        await callback();
    }
    catch (error) {
        OfficeHelpers.UI.notify(error);
        OfficeHelpers.Utilities.log(error);
    }
}
</code></pre><li><p>能不能编写自定义函数<p>这个问题很显然是一个Excel的开发人员问的。<ul><li>在VBA在是这么做的: <a href="https://support.office.com/zh-cn/article/%E5%9C%A8-Excel-%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%87%BD%E6%95%B0-2F06C10B-3622-40D6-A1B2-B6748AE8231F?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN">https://support.office.com/zh-cn/article/在-Excel-中创建自定义的函数-2F06C10B-3622-40D6-A1B2-B6748AE8231F?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN</a><li>在VSTO中是这么做的：<a href="https://blogs.msdn.microsoft.com/eric_carter/2004/12/01/writing-user-defined-functions-for-excel-in-net/">https://blogs.msdn.microsoft.com/eric_carter/2004/12/01/writing-user-defined-functions-for-excel-in-net/</a></li></ul><p>在Web Add-in的时代，目前已经提供了针对发烧友（Office Insider）的Developer Preview支持，请参考 <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/excel/custom-functions-overview">https://docs.microsoft.com/en-us/office/dev/add-ins/excel/custom-functions-overview</a></p><li><p>能不能实现文档打开的时候自动加载某个Add-in<p>可以，但是分两种情况。<ul><li>第一种情况，如果是Content Add-in（目前在Excel和PowerPoint中受支持），则自动就实现了，你可以创建一个文档，然后插入好这个Add-in，保存后，下次打开就自动会加载进来。
<li>第二种情况，如果是TaskPane Add-in（目前在Excel，Word，PowerPoint中受支持），则只有在没有添加VersionOverrides的情况下可以实现类似于Content Add-in 的效果，也就是说不能有自定义的Ribbon和Context Menu。</li></ul><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--Created:ce44715c-8c4e-446b-879c-ea9ebe0f09c8--&gt;
&lt;OfficeApp 
        xmlns="http://schemas.microsoft.com/office/appforoffice/1.1" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:bt="http://schemas.microsoft.com/office/officeappbasictypes/1.0" 
        xmlns:ov="http://schemas.microsoft.com/office/taskpaneappversionoverrides"
        xsi:type="TaskPaneApp"&gt;

&lt;!-- Begin Basic Settings: Add-in metadata, used for all versions of Office unless override provided. --&gt;

&lt;!-- IMPORTANT! Id must be unique for your add-in, if you reuse this manifest ensure that you change this id to a new GUID. --&gt;
&lt;Id&gt;f43cc685-d5de-464e-a97c-520017b901a3&lt;/Id&gt;

&lt;!--Version. Updates from the store only get triggered if there is a version change. --&gt;
&lt;Version&gt;1.0.0.0&lt;/Version&gt;
&lt;ProviderName&gt;[Provider name]&lt;/ProviderName&gt;
&lt;DefaultLocale&gt;en-US&lt;/DefaultLocale&gt;
&lt;!-- The display name of your add-in. Used on the store and various places of the Office UI such as the add-ins dialog. --&gt;
&lt;DisplayName DefaultValue="WordWebAddInSample" /&gt;
&lt;Description DefaultValue="WordWebAddInSample"/&gt;
&lt;!-- Icon for your add-in. Used on installation screens and the add-ins dialog. --&gt;
&lt;IconUrl DefaultValue="~remoteAppUrl/Images/Button32x32.png" /&gt;

&lt;SupportUrl DefaultValue="http://www.contoso.com" /&gt;
&lt;!-- Domains that will be allowed when navigating. For example, if you use ShowTaskpane and then have an href link, navigation will only be allowed if the domain is on this list. --&gt;
&lt;AppDomains&gt;
    &lt;AppDomain&gt;AppDomain1&lt;/AppDomain&gt;
    &lt;AppDomain&gt;AppDomain2&lt;/AppDomain&gt;
    &lt;AppDomain&gt;AppDomain3&lt;/AppDomain&gt;
&lt;/AppDomains&gt;
&lt;!--End Basic Settings. --&gt;

&lt;!--Begin TaskPane Mode integration. This section is used if there are no VersionOverrides or if the Office client version does not support add-in commands. --&gt;
&lt;Hosts&gt;
    &lt;Host Name="Document" /&gt;
&lt;/Hosts&gt;
&lt;DefaultSettings&gt;
    &lt;SourceLocation DefaultValue="~remoteAppUrl/Home.html" /&gt;
&lt;/DefaultSettings&gt;
&lt;!-- End TaskPane Mode integration.  --&gt;

&lt;Permissions&gt;ReadWriteDocument&lt;/Permissions&gt;
&lt;!-- End Add-in Commands Mode integration. --&gt;

&lt;/OfficeApp&gt;</code></pre></li></ol>]]></description></item><item><title>为PowerApps和Flow，Power BI开发自定义连接器</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8072543.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 20 Dec 2017 02:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/20/8072543.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月20日</p></blockquote><h1>前言</h1><p>我在之前用了几篇文章来介绍新一代微软商业应用平台三剑客（<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md">PowerApps</a>，<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md">Microsoft Flow</a>，<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerbi.md">Power BI</a>），相信对于大家会有一种跃跃欲试的冲动，他们看起来真的不难，因为他们的定位是要给业务部门的用户直接使用的。那么现在问题就来了<ol><li>他们为什么能这么灵活和强大？ 
<li>如果这些活儿都是业务部门用户自己去做了，那么IT部门人员，开发人员该干嘛呢？ </li></ol><p>好问题啊！但是这两个问题其实是相关的，而且第二个问题的答案就是第一个问题所描述的结果。因为可以将IT专业人员（IT Pro）和开发人员（Developer）从日常的轻量级业务应用的工作中解放出来，所以，他们可以去做一些更加擅长的技术、通用性的业务支撑组件的开发。<p>我们再来看一张已经多次展示过的图片<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformarc.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformarc.png"></a><p>在应用的基础架构这部分，Common Data Service我此前已经<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/commondatamodel.md">介绍</a>过了，Gateways也已经在 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsadv.md">PowerApps进阶篇</a>中讲解过。Pro dev extensibility 在目前这个系列中我不准备展开。那么就余下了Connectors（连接器了）。当然，实际上我们早就使用过了连接器，例如在Microsoft Flow中内置了将近200个连接器，如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-08-56-29.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-08-56-29.png"></a><p>但是，如果我们需要的某个功能，上面的连接器并没有提供，而你有正好有一定的开发能力，那么本文将很适合你。我们将以一个实例介绍如何自定义连接器。从某种意义上说，PowerApps和Flow是共用连接器的，而Power BI的连接器则更特殊一点。本文的内容将包括<ol><li>编写一个Web API服务（适合于PowerApps和Flow） 
<li>在Flow中创建自定义连接器 
<li>在Flow中使用自定义连接器 
<li>在PowerApps中使用自定义连接器 
<li>Power BI自定义连接器的开发思路 </li></ol><h1>编写一个Web API服务</h1><p>可以这么说，绝大部分的连接器，都是一个Web API服务。我们将一些业务逻辑封装在服务器端(或者准确地说是云端)，然后有选择性地暴露出来一些接口，供PowerApps和Flow在需要的时候调用。所以，在开始自定义连接器之前，你需要做的就是编写一个Web API服务。你可以用任何熟悉的语言和平台完成这个工作，但我已经完成了一个使用C#编写的，基于dotnet core框架的Web API服务的例子，因为本文的重点不是将具体如何创建Web API服务以及部署，所以我用另外一篇文章专门讲解了这个过程，请参考<p><a href="http://www.cnblogs.com/chenxizhang/p/8067824.html">使用 dotnet core 和 Azure PaaS服务进行devOps开发 (Web API 实例)</a><p>该项目的代码，可以通过 <a href="https://github.com/chenxizhang/dotnetcoreapisample">https://github.com/chenxizhang/dotnetcoreapisample</a> 下载到。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-04-50.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-04-50.png"></a><p>但是，在PowerApps或Flow中定义自定义连接器的时候，如果有一个服务描述文档，则会大大简化操作。所以，我们需要在上面这个成果的基础上添加一个功能，让它能自动生成一个服务描述文档。微软官方的建议是用swagger的规范。关于swagger，如果有兴趣，可以参考他们的官网：<a href="https://swagger.io/specification/">https://swagger.io/specification/</a><p>在上述项目中添加swagger的支持，请参考下面的步骤<ol><li>使用该命令导入一个包 <code>dotnet add package Swashbuckle.AspNetCore</code>，然后进行还原 <code>dotnet restore</code><li>在Startup.cs文件中，添加两个命名空间的引用 <code>using Swashbuckle.AspNetCore</code>和 <code>using Swashbuckle.AspNetCore.Swagger</code><li>在ConfigureServices方法的底部增加如下代码 <pre><code>services.AddSwaggerGen(_=&gt;{
    _.SwaggerDoc("v1",new Info(){
        Version ="1.0",
        Title ="dotnet core api sample",
        Contact = new Contact(){Name="Ares Chen",Email ="ares@xizhang.com"},
        Description ="dotnet core api sample using swagger"
    });
});
</code></pre><li>在Configure方法的底部增加如下代码 <pre><code>app.UseSwagger();
app.UseSwaggerUI(_=&gt;_.SwaggerEndpoint("/swagger/v1/swagger.json","v1"));
</code></pre></li></ol><p>完成上面的工作后，请按照<a href="http://www.cnblogs.com/chenxizhang/p/8067824.html">使用 dotnet core 和 Azure PaaS服务进行devOps开发 (Web API 实例)</a> 提到的步骤那样，将代码提交到Azure的Git存储库，然后在浏览器中访问 <a href="https://dotnetcoreapisample.azurewebsites.net/swagger/v1/swagger.json">https://dotnetcoreapisample.azurewebsites.net/swagger/v1/swagger.json</a> ,正常情况下你会看到如下的结果输出。<blockquote><p>你的实际部署地址可能跟我不一样，因为Azure不允许同名地址。如果你不想自己去部署，你可以直接用我的这个地址查看输出结果，并且将其用在后续的自定义连接器中。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-20-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-20-57.png"></a><p>这是一个JSON的文档。如果你用格式化工具来查看，它可能是这样的：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-21-07.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-21-07.png"></a><p>查看它并不是重点，你现在需要做的是将点击右键，然后另存到本地（swagger.json），一会儿我们就会用到这个文件来自定义连接器。<h1>在Flow中创建自定义连接器</h1><p>准备好了上面这个Web API服务的话，接下来就可以在Flow中来自定义连接器了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-29-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-29-30.png"></a><p>在接下来的界面中选择导入现有OpenAPI文件来定义连接器<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-30-29.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-30-29.png"></a><p>接下来定义标题，并且找到此前保存在本地的swagger.json文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-33-40.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-33-40.png"></a><p>点击“继续”，设置一些基本信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-34-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-34-57.png"></a><p>点击“继续”，在安全设置这里暂时先选择 “无身份验证”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-36-06.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-36-06.png"></a><blockquote><p>请注意，真正使用的连接器，是需要做身份验证的。建议在这个基础上，大家做一些针对性的实践。</p></blockquote><p>点击“继续”，此时Flow会读取swagger文件中的定义信息，列出所有的操作<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-37-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-37-28.png"></a><p>你会发现我们有五个操作，对应了创建订单，修改订单，查询订单（列表以及单个订单的详情),删除订单。目前来说在这些操作上面有一个感叹号的提示，因为有部分信息还需要你做定义：摘要和说明。请补充完整即可。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-41-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-41-30.png"></a><p>如果你确认没有问题了，请点击“创建连接器”来完成操作。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-43-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-43-54.png"></a><p>然后点击加号，可以基于这个连接器（connector）创建一个用于当前环境的连接（connection）。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-48-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-48-28.png"></a><h1>在Flow中使用自定义连接器</h1><p>接下来我们“从空白创建”来体验上面这个自定义连接器的使用。为了便于测试，我选择用“手工触发流”。如果你对这个方面不熟悉，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md">这篇文章</a>。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-57-17.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-57-17.png"></a><p>在添加操作的时候，搜索Orderservice，你能看到有五个操作，下面我们添加CreateOrder，输入一些基本信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-02-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-02-36.png"></a><p>当然为了让测试更加直观，我继续添加了一个获取订单列表的操作，然后将获取到的结果发送到一个服务器地址。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-10-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-10-59.png"></a><p>点击“创建流”，然后点击“立即运行”按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-07-58.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-07-58.png"></a><p>点击“继续”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-08-17.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-08-17.png"></a><p>点击“运行流”，很快你就能看到下面的结果<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-11-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-11-57.png"></a><p>而且在我的服务器也很快收到了数据<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-12-46.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-12-46.png"></a><h1>在PowerApps中使用自定义连接器</h1><p>同样的事情，在PowerApps上面也是类似的。所以，你在PowerApps中也立即可以看到之前定义好的这个OrderService的连接。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-18-23.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-18-23.png"></a><p>在创建应用的时候，可以很自然地选择到这个数据连接<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-20-34.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-20-34.png"></a><p>建立连接后，在数据控件上面可以通过下面的方式调用方法。例如下面这个操作，是读取订单列表。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-26-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-26-28.png"></a><p>如果要创建一个订单，可以参考下面的做法。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-28-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-28-21.png"></a><h1>Power BI自定义连接器的开发思路</h1><p>看完上面的介绍，大家对于创建Web API服务，并且将其用于PowerApps和Flow的过程有了感性的认识。我们可能还会很自然地联想到，这个服务和连接器能否也用于三剑客中的另外一个组件——PowerBI，用于数据获取呢？<p>答案是：目前还不行。Power BI目前支持的自定义连接器的方式，目前是在Preview的阶段，其实现方式是比较特殊的，有兴趣的朋友可以参考下面这篇文章：<p><a href="https://powerbi.microsoft.com/en-us/blog/data-connectors-developer-preview/">Data Connector SDK Developer Preview</a><h1>结语</h1><p>新一代的商业应用平台，它的强大依赖于强大的底层设计和灵活的应用架构。作为PowerApps和Flow的基础，连接器是一个核心的基础组件。微软提供的组件化架构，让开发人员可以使用自己习惯的方式开发Web API，并将其无缝地整合到业务应用的开发中去。]]></description></item><item><title>使用 dotnet core 和 Azure PaaS服务进行devOps开发（Web API 实例）</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/19/8067824.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 19 Dec 2017 13:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/19/8067824.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月19日</p></blockquote><h2>引子</h2><p>这一篇文章将用一个完整的实例，给大家介绍如何基于dotnet core（微软.NET的最新版本，支持跨平台，跨设备的应用开发，详情请参考 https://www.microsoft.com/net 开发一个Web API Service，并且利用Azure的PaaS服务来实现部署，以及持续的开发运营（devops）。<blockquote><p>这篇文章的难度不高，但会作为一个操作指南，后续很多文章，如果涉及到这块基础工作，都会引用这篇文章。本文所演示的范例代码，可以通过 <a href="https://github.com/chenxizhang/dotnetcoreapisample">https://github.com/chenxizhang/dotnetcoreapisample</a> 下载。</p></blockquote><h2>1、安装dotnet core SDK</h2><p>目前的最新版本是2.1.3，你可以根据需要下载到不同的版本，请注意安装SDK，而不是Runtime。<ul><li><a href="https://www.microsoft.com/net/download/windows">https://www.microsoft.com/net/download/windows</a></li><li><a href="https://www.microsoft.com/net/download/linux">https://www.microsoft.com/net/download/linux</a></li><li><a href="https://www.microsoft.com/net/download/macos">https://www.microsoft.com/net/download/macos</a></li></ul><h2>2、安装开发工具 visual studio code</h2><p>这个工具同样是支持跨平台的，请通过下面的地址下载安装：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a><h2>3、创建Web API 项目</h2><p>在命令行工具中运行 dotnet new webapi –o dotnetcoreapisample<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-15-58-46.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-15-58-46.png"></a><h2>4、运行Web API 项目</h2><p>即便不做任何修改，在命令行工具中运行dotnet run即可运行这个项目。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-15-59-42.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-15-59-42.png"></a><p>在浏览器中访问 <a href="http://localhost:5000/api/values">http://localhost:5000/api/values</a> 如果你也看到下面的效果，恭喜你，你的项目已经运行成功了。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-00-07.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-00-07.png"></a><p>在命令行中输入 code . 会自动打开Visual Studio Code。如果你打开Controllers目录下面的ValuesController.cs 文件，你可以看到如下代码，跟上面的网页返回结果对照一下，你会觉得现在编写一个Web API 真的非常简单啊。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-00-40.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-00-40.png"></a><h2>5、增加数据实体</h2><p>虽然上面的代码能运行，但我们真正要做的一个Web API服务，是希望能给用户提供创建订单，修改订单，查询订单，甚至删除订单的服务。所以，请先删除掉上面这个ValuesController.cs 文件。我会演示怎么样一步一步地将一个订单服务实现出来。<p>所有的服务都离不开数据，我们将使用Entity Framework来实现数据层服务。所以我们要先定义订单这个数据接口的实体。<p>请增加一个目录，Models，然后增加第一个代码文件 Order.cs<pre><code>namespace dotnetcoreapisample.Models
{

    using System;

    public class Order{
        public int Id { get; set; }

        public DateTime OrderDate { get; set; }

        public int Quantity { get; set; }

        public decimal UnitPrice { get; set; }

        public string Product { get; set; }

    }

}

</code></pre><h2>6、创建数据服务</h2><p>光有数据实体是不够的，我们还需要定义一个数据服务，或者也可以成为数据上下文服务。请在Models目录中，再创建下面这样一个类：SampleDbContext.cs<pre><code>namespace  dotnetcoreapisample.Models{

    using System;
    using Microsoft.EntityFrameworkCore;
    using System.Linq;
   
    public class SampleDbContext:DbContext{

        public SampleDbContext(DbContextOptions&lt;SampleDbContext&gt; options):base(options){
            
        }


        public DbSet&lt;Order&gt; Orders { get; set; }


    }
    
}
</code></pre><h2>7、注入数据服务</h2><p>dotnet core提供了一种非常好的编程模型，我们可以在程序启动的时候，将必要的数据服务对象注入进去，然后在后续的业务服务中就可以直接使用它。<p>定位到Startup.cs这个文件，在顶部先添加两个命名空间的引用 <code>using Microsoft.EntityFrameworkCore;</code> 和 <code>using dotnetcoreapisample.Models;</code><p>然后在 ConfigureServices 这个方法里面，第一行添加如下代码 <code>services.AddDbContext&lt;SampleDbContext&gt;(_=&gt;_.UseInMemoryDatabase("Sample"));</code><p>这句代码的意思是，使用一个在内存中的数据库。作为快速开发和测试目的，这是最方面的。当然，如果你真的想要有一个实际的数据库文件，Entity Framework支持几乎所有的数据源，尤其是对sqlite和SQL Server的支持非常好，请参考 <a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro">https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro</a><h2>8、创建Web API 服务</h2><p>这是最后一步了，请在Controllers目录中增加一个OrderController.cs的文件，代码如下<pre><code>using Microsoft.AspNetCore.Mvc;
using dotnetcoreapisample.Models;
using System.Collections.Generic;
using System.Linq;

namespace dotnetcoreapisample.Controllers
{
    [Route("api/[controller]")]
    public class OrdersController:Controller{

        private SampleDbContext context;
        public OrdersController(SampleDbContext ctx){
            context = ctx;
        }

        [HttpGet]
        public IEnumerable&lt;Order&gt; Get(){
            return context.Orders;
        }

        [HttpGet("{id}")]
        public Order Get(int id){
            return context.Orders.FirstOrDefault(x=&gt;x.Id == id);
        }

        [HttpPost]
        public void Post([FromBody]Order value){
            context.Orders.Add(value);
            context.SaveChanges();
        }

        [HttpPut("{id}")]
        public void Put(int id,[FromBody]Order value){
            var found = context.Orders.FirstOrDefault(x=&gt;x.Id == id);
            if(found!=null){
                found.OrderDate = value.OrderDate;
                found.Product =value.Product;
                found.Quantity =value.Quantity;
                found.UnitPrice =value.UnitPrice;

                context.SaveChanges();
            }
        }

        [HttpDelete("{id}")]
        public void Delete(int id){
            var found = context.Orders.FirstOrDefault(x=&gt;x.Id == id);
            context.Orders.Remove(found);
            context.SaveChanges();
        }
    }
}

</code></pre><h2>9、运行和测试Web API服务</h2><p>完成上面的工作后，你就可以通过按下F5键（或者执行dotnet run命令）运行这个项目了。我用Fiddler来模拟用户请求，下面展示了四个不同的脚本。<p><strong>创建订单</strong><p>我们使用POST方法发起请求，地址是<a href="http://localhost:5000/api/orders%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E8%AF%B7%E6%B1%82%E7%9A%84%E6%AD%A3%E6%96%87%E9%87%8C%E9%9D%A2%E7%94%A8JSON%E6%A0%BC%E5%BC%8F%E8%A1%A8%E7%A4%BA%E4%B8%80%E4%B8%AA%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF">http://localhost:5000/api/orders，然后在请求的正文里面用JSON格式表示一个订单信息</a><p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-29-14.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-29-14.png"></a><p><strong>查询订单</strong><p>我们使用GET方法发起请求，地址也是<a href="http://localhost:5000/api/orders%EF%BC%8C%E5%9C%A8%E8%AF%B7%E6%B1%82%E7%9A%84%E5%A4%B4%E9%83%A8%E9%87%8C%E9%9D%A2%E8%AE%BE%E7%BD%AEContent-Type%E4%B8%BA">http://localhost:5000/api/orders，在请求的头部里面设置Content-Type为</a>application/json<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-31-46.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-31-46.png"></a><p>此时我们可以看到，系统已经创建了一个订单，编号为1（这是自动编号的）。<p><strong>修改订单</strong><p>我们使用PUT方法发起请求，地址是<a href="http://localhost:5000/api/orders/1%EF%BC%8C%E5%9C%A8%E8%AF%B7%E6%B1%82%E7%9A%84%E6%AD%A3%E6%96%87%E9%87%8C%E9%9D%A2%EF%BC%8C%E6%88%91%E5%B0%86%E8%A6%81%E4%BF%AE%E6%94%B9%E7%9A%84%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF%E7%94%A8JSON%E8%A1%A8%E7%A4%BA%EF%BC%8C%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%88%91%E5%B0%86%E5%8D%95%E4%BB%B7%E4%BB%8E200%E4%BF%AE%E6%94%B9%E4%B8%BA400">http://localhost:5000/api/orders/1，在请求的正文里面，我将要修改的订单信息用JSON表示，请注意，我将单价从200修改为400</a><p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-34-23.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-34-23.png"></a><p>如果再次查询订单，你可以看到数据已经修改了<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-34-58.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-34-58.png"></a><p><strong>删除订单</strong><p>最后，我们可以通过DELETE方法发起请求，给定地址是 <a href="http://localhost:5000/api/orders/1">http://localhost:5000/api/orders/1</a> 来完成删除一个订单的操作<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-16-36-18.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-16-36-18.png"></a><p>一切看起来还不错，接下来给大家介绍一下如何采用Azure云平台进行部署，以及通过Azure的PaaS服务实现开发运营一体会（devops）的实践。<h2>10、创建Azure的应用程序服务（App Service）</h2><p>传统的情况，开发人员（和测试人员）做到上面这一步，工作就算结束了。他们会将代码签入到代码库，然后愉快地打卡下班。接下来的工作是什么呢？运维人员会准备虚拟机，安装必要的软件，然后将代码下载下来，编译之后将得到的文件复制到服务器的某个文件夹，沐浴更衣烧香拜佛之后，很有可能Web服务器能正常地启动起来，如果不能，他们就要顶着巨大的压力，跟开发人员打电话，委婉地要求对方帮忙检查一下问题，但是很可能得到的答复是：你是怎么弄的呢，这个明明在我的机器是跑的好好的？上帝保佑，如果这次部署是成功的，但下次如果要更新一个版本，可能是再一次的痛苦的过程。如果说，在以前的时候我们的软件更新并不频繁，这种痛苦还是可以接受的话，现在随着互联网应用开发模式的兴起，业务需求可能三天两头的变化，如此的开发运营割裂的状况，是远远达不到要求的。这也是业界呼唤有更好的工作方式的一个根本原因，devops也就是这么样兴起的。<p>理论其实并不高深，关键看怎么能有效地实现开发和运维的一体化，很大程度上，这个当然取决于平台和工具，其根本在于要实现智能和自动化。另外，devops会逼迫我们重新对应用架构进行一些思考，模组化和微服务化会成为一个自然而然的选择。这个我在后面会有专门的文章给大家解读。本文先用实例来让大家感受一下。<p>我这里推荐的平台是微软的Azure云平台，它不仅仅是一个强大的IaaS平台，提供了全球质量保证和安全合规的基础架构服务（计算，网络，存储等），同时更重要的是，它是一个PaaS平台，对于广大的业务应用开发人员来说，使用Azure提供的工具，可以事半功倍地实现devops，将更多精力集中在应用逻辑而不是服务器配置、监测、部署更新等工作上面。<p>闲话少说，如果你还没有Azure账号，可以申请试用。接下来可以参考我的步骤来看看如何将我们刚才创建的这个Web API项目部署到Azure，并且实现基于代码更新的应用自动发布。<p>登录到Azure的管理门户后，选择“应用程序服务”，然后添加一个“Web应用”<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-22-11.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-22-11.png"></a><p>在接下来的窗口中完成资源配置，请注意，作为测试场景的话，你甚至可以选择免费的一种应用服务计划。这里还可以打开Application Insight（这个目前也是免费的服务）。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-32-30.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-32-30.png"></a><p>配置这个应用服务的部署选择，此时逐渐解开了Azure 作为 devops 平台的面纱了。在下图中可以选择“本地Git存储库”作为部署源<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-36-25.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-36-25.png"></a><p>虽然你可以看到很多其他的选项，但本篇文章是入门的，所以不做一一展开。下面我们设置一下部署的凭据。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-43-23.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-43-23.png"></a><p>完成上面这些配置后，我们回到Web应用的概述页面，你会发现现在多出来一个可以用来远程部署的Git存储库地址，请将这个地址复制下来。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-44-01.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-44-01.png"></a><h2>11、配置和远程部署</h2><p>回到之前的Visual Studio Code的界面，打开命令行窗口，通过<code>git init</code> 命令初始化本地的git存储库，然后执行<code>git add *</code>和<code>git commit -m 'init'</code> 这两条命令完成初始化提交到本地。最后，通过下面的命令添加远程存储库。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-20-48-09.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-20-48-09.png"></a><p>接下来，运行 <code>git push azure master</code>这条命令，此时会弹出一个对话框，请输入上一步创建的用户名和密码，这个提交过程可能会比较长，尤其是第一次。这是因为它不仅仅会将代码上传到代码库，而且后台会启动一系列的操作，来进行编译和部署。下面是在我这边的输出结果。<pre><code>PS C:\temp\dotnetcoreapisample&gt; git push azure master
Counting objects: 9, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (9/9), 7.90 KiB | 899.00 KiB/s, done.
Total 9 (delta 5), reused 0 (delta 0)
remote: Updating branch 'master'.
remote: Updating submodules.
remote: Preparing deployment for commit id '3adc61d27e'.
remote: Generating deployment script.
remote: Running deployment command...
remote: Handling ASP.NET Core Web Application deployment.
remote: ............................................................
remote:   Restoring packages for D:\home\site\repository\dotnetcoreapisample.csproj...
remote:   Restore completed in 755.48 ms for D:\home\site\repository\dotnetcoreapisample.csproj.
remote: .....
remote:   Generating MSBuild file D:\home\site\repository\obj\dotnetcoreapisample.csproj.nuget.g.props.
remote:   Generating MSBuild file D:\home\site\repository\obj\dotnetcoreapisample.csproj.nuget.g.targets.
remote:   Restore completed in 10.36 sec for D:\home\site\repository\dotnetcoreapisample.csproj.
remote: .............................................................
remote: Microsoft (R) Build Engine version 15.4.8.50001 for .NET Core
remote: Copyright (C) Microsoft Corporation. All rights reserved.
remote:
remote: ................................................
remote:   dotnetcoreapisample -&gt; D:\home\site\repository\bin\Release\netcoreapp2.0\dotnetcoreapisample.dll
remote: ...........
remote:   dotnetcoreapisample -&gt; D:\local\Temp\8d546e10a232b37\
remote: KuduSync.NET from: 'D:\local\Temp\8d546e10a232b37' to: 'D:\home\site\wwwroot'
remote: Copying file: 'dotnetcoreapisample.deps.json'
remote: Copying file: 'dotnetcoreapisample.dll'
remote: Copying file: 'dotnetcoreapisample.pdb'
remote: Copying file: 'dotnetcoreapisample.PrecompiledViews.dll'
remote: Copying file: 'dotnetcoreapisample.PrecompiledViews.pdb'
remote: Copying file: 'dotnetcoreapisample.runtimeconfig.json'
remote: Finished successfully.
remote: Running post deployment command(s)...
remote: Deployment successful.
To https://dotnetcoreapisample.scm.azurewebsites.net:443/dotnetcoreapisample.git
   37b30a5..3adc61d  master -&gt; master

</code></pre><p>我们可以很清楚地看到代码上传后，触发了一个部署的事件，该部署脚本先会拉取所有依赖的包，然后执行构建，最后将文件复制到指定的一个目录。这种自动化的过程就是devops的基石。当然，现在的dotnet core的平台无关性也给部署带来了极大的便利。<h2>12、查看Web API的运行结果</h2><p>在完成部署后，我们回到Azure的门户，在应用服务的“部署选项”可以看到已经部署的记录，最新的一次部署被标记为 “活动”状态。<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-21-14-16.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-21-14-16.png"></a><p>点击某一次部署，还可以看到详细信息<p><a href="https://github.com/chenxizhang/devopsguide/blob/master/images/2017-12-19-21-16-24.png"><img alt="" src="https://github.com/chenxizhang/devopsguide/raw/master/images/2017-12-19-21-16-24.png"></a><p>如果我们对于当前这次部署不满意，还可以随时选择其他部署，并且选择“重新部署”操作，这样就可以快速进行应用的回滚。<p>好了，我们最后可以在浏览中输入 <a href="https://dotnetcoreapisample.azurewebsites.net/api/orders">https://dotnetcoreapisample.azurewebsites.net/api/orders</a> ，如果返回一个空白的数组“[]” ，说明这个服务是正常工作的。因为我们使用的是内存数据库，所以每次部署后，都会将数据清空，这就是为什么第一次返回空白数组的原因。<h2>结语</h2><p>使用Azure的PaaS服务来部署Web 应用，通过简单配置后，开发人员只需要关注代码本身，在本地调试后，将代码推送到Azure，后台将自动进行构建和部署，由于有版本控制，所以随时可以根据需要进行前滚和回滚。基于Azure平台进行应用开发，无缝地融入了devops，可以极大地改善开发和运维流程，提高研发效率和质量。本文只是一个开始，我在后续还会介绍各种不同的场景。]]></description></item><item><title>Common Data Service (CDS) 初探</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/17/8051368.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 17 Dec 2017 00:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/17/8051368.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月16日</p></blockquote><h1>前言</h1><p>Common Data Service（以下简称为CDS），通用数据服务是一个创新性的基础功能，这是微软试图打造一个全新的基于SaaS模式的数据服务平台，一方面整合Office 365和Dynamics 365的数据（虽然现在还没有做到），与此同时，支撑以PowerApps，Microsoft Flow，Power BI为核心的商业应用服务。下面这个图可以清晰地看出它们之间的关系：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformarc.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformarc.png"></a><p>CDS最早是作为PowerApps的一部分进行开发的，所以到目前为止，CDS的管理界面都是集成在PowerApps中的，每个PowerApps的环境可以对应一个CDS数据库。<blockquote><p>CDS正式GA的时间是2016年10月份。请参考当时的官方文档：<a href="https://powerapps.microsoft.com/en-us/blog/powerapps-cds-ga/">https://powerapps.microsoft.com/en-us/blog/powerapps-cds-ga/</a></p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-22-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-22-42.png"></a><p>除了数据库，CDS还有几个主要概念，分别如下<ol><li>实体（Entity） 
<li>关系（Relationship） 
<li>选项值（Picklist） </li></ol><p>CDS定义了一套可以在不同的组织通用的实体，以及它们的关系。绝大部分情况下，你应该直接使用这些实体，而不需要创建自定义实体。<h1>创建和管理数据库</h1><p>要创建一个CDS数据库，你可以尝试登录 <a href="https://preview.admin.powerapps.com/environments">https://preview.admin.powerapps.com/environments</a> ，先要创建一个Environment（环境）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-24-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-24-21.png"></a><p>成功创建环境后，会提示你是否要创建数据库<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-25-51.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-25-51.png"></a><p>如果选择创建，则可以设置权限，然后稍等片刻即可完成数据库的创建<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-26-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-26-30.png"></a><h1>在Excel中编辑实体数据</h1><p>对于广大的Excel用户来说，还有一个好消息就是，CDS的数据支持在Excel中直接支持。这在需要批量更新数据的时候，可能更加有用。你需要做的是，定位到你要编辑的实体，然后点击“Open in excel”按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-30-26.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-30-26.png"></a><p>下载得到一个Excel文件，双击打开后，除了看到一个表格结构外，还会自动加载一个Office Add-in<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-27-15.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-27-15.png"></a><p>按照提示，Trust this add-in，然后在下一界面中输入你的Office 365账号和密码登录后，稍等片刻即可刷新读取到所有这个实体的数据<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-33-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-33-20.png"></a><p>当选择某一列时，这个插件会自动检测到数据类型，如果是有选项值的话，还会自动列出来。这样的话，你可以在Excel中修改某个数据，然后点击“Publish”即可完成更新。<h1>在Outlook中集成Common Data Service</h1><p>除了Excel的集成，CDS还提供了一个与Outlook集成的工具，要启动该功能，需要在CDS的界面上点击“Productivity Settings”，然后按照提示下载一个清单文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-45-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-45-47.png"></a><p>这将下载一个XML文件，其实是一个Outlook Add-in的清单文件（manifest）。接下来我们可以利用这个文件在Outlook中加载一个Add-in。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-48-14.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-48-14.png"></a><p>在Outlook的主界面上，点击“Store”这个按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-49-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-49-01.png"></a><p>在Add-ins的界面，选择“Add from File...”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-49-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-49-59.png"></a><p>选择Install<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-21-50-50.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-21-50-50.png"></a><p>这个插件很有意思，你安装完之后，在Outlook主界面上面并看不到任何变化，它是对邮件窗口的一个扩展。目前我发现的功能是这样的：在任意一封邮件中，会多出来一个按钮“Common Data Service”的按钮，点击后，会展开一个面板，它会检测到这个邮件中涉及到联系人，然后去跟CDS中的Contact这个实体对比，如果不存在，则可以添加为Contact，如果存在，则会尝试查找该联系人相关的Case记录。例如下面这个例子<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-16-04.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-16-04.png"></a><blockquote><p>目前该插件是在Preview的阶段，仅开放极少数的实体整合，准确地说，只有Case这个实体可用。</p></blockquote><h1>在PowerApps中使用Common Data Service</h1><p>我在文章开始已经提到了CDS与PowerApps的渊源，应该说PowerApps是跟CDS结合得最好的一个应用。对于PowerApps来说，CDS是一种更加好的数据源，在实体之间定义的关系能被自动识别出来，并且生成对应的下拉框。<p>Common Data Service是PowerApps中一个默认的连接器<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-44-27.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-44-27.png"></a><p>登录成功后，可以在实体列表中选择你希望在当前应用使用的实体<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-22-45-54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-22-45-54.png"></a><p>点击“Connect”后，接下来可以在界面上使用这些实体的数据，例如下面这个表单<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-21-16.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-21-16.png"></a><p>这里特别提一下CDS的优势，我选中的这个字段叫CurrentContact，它的类型其实是一个复杂类型（Contact），透过CDS，PowerApps其实知道这是要读取另外一个实体的信息，所以它会自动生成一个下拉框，而且可以自由设定要显示这个实体里面的什么属性。<p>至于更多的细节，这里就不展开了。如果大家对于PowerApps还不太熟悉，欢迎阅读下面两篇文章<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md">PowerApps 入门篇</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsadv.md">PowerApps 进阶篇</a></li></ol><h1>在Microsoft Flow 中使用Common Data Service</h1><p>接下来要谈一下的是在Microsoft Flow中如何跟CDS进行集成和交互。你可以将CDS理解为一种数据源，那么在Microsoft Flow中，一方面可以根据CDS的数据变化触发流程（例如新增了一个Case时进行触发），也可以在其他流程中，往CDS的实体中写入数据。下图可以看到跟Common data service相关的模板就有18个。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-27-32.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-27-32.png"></a><p>Common Data Service的触发器共有两个，可以监听新增记录和更新记录两个行为<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-29-35.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-29-35.png"></a><p>Common Data Service的操作共有九个<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-30-27.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-30-27.png"></a><p>关于Microsoft Flow的细节，同样不是本文的重点，如果你还不太熟悉，欢迎阅读下面这篇文章<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md">Microsoft Flow 概览</a></li></ol><h1>在Power BI中使用Common Data Service</h1><p>我们几乎可以断定，CDS将在日后的数据服务这个领域发挥重大作用，它整合Office 365和Dynamics 365的数据（虽然现在还没有做到），与此同时，支撑以PowerApps，Microsoft Flow，Power BI为核心的商业应用服务。有了这么多数据，接下来当然就是怎么利用它们，让它们发挥更大作用。这个时候，Power BI就是一个非常不错的选择。<p>讨论Power BI的细节，很明显超出了本文的范围，不过，我此前也写好了相关的文章，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerbi.md">观未见，行不止 —— Power BI 两周年技术和方案交流圆桌会议纪实</a> 。<p>根据<a href="https://powerapps.microsoft.com/en-us/blog/cdsconnectortopowerbi/">二月份的官方说明</a>，Common Data Service已经可以直接在Power BI中使用了，但目前只是Preview，而且仅限于美国用户才能使用。<p>我在自己的Power BI Desktop中其实是能看到这方面的界面，但实际无法操作，可能还是需要等一段时间吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-38-47.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-38-47.png"></a><p>在数据源中搜索Common Data Service，然后点击下一步<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-39-33.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-39-33.png"></a><p>选择对应的数据库之后，点击Ok，很不幸，目前为止，你可能也会收到下面这个类似的提示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-40-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-40-31.png"></a><p>我检查过Admin Center，确实没有发现下图提到的那个“Enable”按钮，这可能是导致我无法使用的原因吧，目前来说，我们能做的估计只有等了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-17-08-40-57.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-17-08-40-57.png"></a><h1>Common Data Service SDK</h1><p>作为一个开发人员，我很自然还会想到，Common Data Service是否有开放的接口，可以让我自己开发的应用程序可以与之交互呢？答案是肯定的，这部分功能目前也只是在前期的研发中，但我相信它将成为CDS成功的关健。<p>下面这篇文章有基本的介绍，目前产品组提供了C# SDK的Sample，最好的情况是，他们正在跟Microsoft Graph团队合作，未来应该有望直接通过统一的接口就能访问到CDS，这真是太酷了！<p><a href="https://docs.microsoft.com/en-us/common-data-service/entity-reference/cds-sdk-get-started">https://docs.microsoft.com/en-us/common-data-service/entity-reference/cds-sdk-get-started</a>]]></description></item><item><title>通过Javascript调用微软认知服务情感检测接口的两种实现方式</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/16/8046542.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 16 Dec 2017 06:44:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/16/8046542.html</guid><description><![CDATA[<p><br></p><p>这是今天在黑客松现场写的代码。我们的项目需要调用认知服务的情感识别接口。官方提供了一种方式，就是从一个远程图片进行识别。我另外写了一个从本地文件读取并上传进行识别的例子。</p><p><br></p><p>官方文档，请参考 <a title="https://docs.azure.cn/zh-cn/cognitive-services/emotion/quickstarts/javascript" href="https://docs.azure.cn/zh-cn/cognitive-services/emotion/quickstarts/javascript">https://docs.azure.cn/zh-cn/cognitive-services/emotion/quickstarts/javascript</a></p><h1><br></h1><h1>第一种方式，使用远程的图片文件</h1><p>&lt;!DOCTYPE html&gt;<br>
&lt;html&gt;<br>
&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;title&gt;&lt;/title&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;script src="Scripts/jquery-3.2.1.min.js"&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;script type="text/javascript"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $("#test").click(function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var params = {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Request parameters<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url: "<a href="https://api.cognitive.azure.cn/emotion/v1.0/recognize&quot;">https://api.cognitive.azure.cn/emotion/v1.0/recognize"</a> + $.param(params),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beforeSend: function (xhrObj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Request headers<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xhrObj.setRequestHeader("Content-Type", "application/json");</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // NOTE: Replace the "Ocp-Apim-Subscription-Key" value with a valid subscription key.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key", "换成你的key");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: "POST",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Request body<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data: '{"url": "<a href="https://tse3.mm.bing.net/th?id=OIP.4M-jZG7HnQUpUKJ0wowq7QDrEs&amp;pid=1.7&quot;}'">https://tse3.mm.bing.net/th?id=OIP.4M-jZG7HnQUpUKJ0wowq7QDrEs&amp;pid=1.7"}'</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .done(function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(data)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fail(function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("error");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });&lt;/script&gt;<br>
&lt;/head&gt;<br>
&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;button id="test"&gt;测试&lt;/button&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;</p><p><br></p><h1>第二种方式，直接使用本地文件，读取二进制上传</h1><p><br></p><p>&lt;!DOCTYPE html&gt;<br>
&lt;html lang="en"&gt;<br>
&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;meta charset="utf-8"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;title&gt;File Emotion detecting&lt;/title&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;link rel="stylesheet" href="style.css"&gt;<br>
&lt;/head&gt;<br>
&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;div id="page-wrapper"&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;Text File Reader&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select a text file:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;input type="file" id="fileInput"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;pre id="fileDisplayArea"&gt;&lt;/pre&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;script src="Scripts/jquery-3.2.1.min.js"&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.onload = function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var fileInput = document.getElementById('fileInput');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var fileDisplayArea = document.getElementById('fileDisplayArea');</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileInput.addEventListener('change', function (e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Put the rest of the demo code here.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var file = fileInput.files[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var textType = /image.*/;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (file.type.match(textType)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var reader = new FileReader();</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.onload = function (e) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileDisplayArea.innerText = reader.result;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var params = {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Request parameters<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $.ajax({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url: "<a href="https://api.cognitive.azure.cn/emotion/v1.0/recognize?&quot;">https://api.cognitive.azure.cn/emotion/v1.0/recognize?"</a> + $.param(params),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beforeSend: function (xhrObj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xhrObj.setRequestHeader("Content-Type", "application/octet-stream");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xhrObj.setRequestHeader("Ocp-Apim-Subscription-Key", "换成你的key");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type: "POST",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data: reader.result,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; processData: false<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .done(function (data) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("success");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .fail(function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("error");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.readAsArrayBuffer(file);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileDisplayArea.innerText = "File not supported!";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;/script&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;</p>]]></description></item><item><title>Microsoft Flow 概览</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/16/8046145.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 16 Dec 2017 03:26:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/16/8046145.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月15日</p></blockquote><h1>前言</h1><p>纵观一下我们周围的世界，以及我们每天忙忙碌碌的工作，你会“惊奇地”发现它们都是一个事件接着一个事件发生的。例如，我每天早上起来，一打开亲爱的手机，就会收到一封邮件，告诉我说今天9点要交个材料，然后11点又有个con-call，下午可能还要拜访一个客户之类的。每一天，每一周几乎都是如此，就连每个月也总有那么几次 —— 要交各种费用，还各种卡的额度。我并不是说我有多忙（这不重要），我只是说，我们很多时候以为有能力控制生活变成我们想要的样子，但事实上，我们大部分时候是在响应一个一个的事件 —— 换言之，我们其实在一个一个流程里面。<p>所以，人、物、事件和流程，构成了精彩纷呈的世界，但我不准备就这个高大上的话题扯太远了。我们今天要谈的是，在IT的世界里面，我们怎么样把各种奇形怪状的应用系统，各种事件和流程无缝地整合起来，并且让它能更好地帮助人们又好又快地完成工作。<p>这不是一个新话题了。在近二十年以来，有大量的工作流引擎（Workflow Engine），BPM 或 EDI 系统不断涌现，在企业级市场上也曾风起云涌，各领风骚。不过，随着云和移动互联网时代的到来，它们或多或少都受到一些挑战和冲击。在这一波新的浪潮中，ifttt无疑是站在浪尖的那一个，风头一时无两。ifttt = if this, then that，很好地诠释了它的精髓。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-16-30.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-16-30.png"></a><p>微软在企业级领域有Biztalk这样的BPM服务器，也有Workflow Foundation这样的系统层面的工作流能力，在SharePoint Server中内置了Workflow Foundation的支持。与此同时在云平台蓬勃发展的当下，又重新开发和打造了一个全新的流程平台，并且冠名为Microsoft Flow，它既有类似于ifttt的强大和灵活架构，也继承了微软多年的企业级服务的基因，在团队协作、与企业内部应用集成以及安全性等方面有一些自己的特点。<blockquote><p>在微软的产品命名传统中，能直接冠以Microsoft作为名称一部分的，其实是不太多的，由此可见，Microsoft Flow 的价值和地位。</p></blockquote><p>如果你有Office 365或者Dynamics 365的账号，你或许已经拥有了Microsoft Flow，你当然也可以自行申请免费版（注意，是真正免费，不是试用版）和收费版本，详情请参考： <a href="https://flow.microsoft.com/en-us/pricing/">https://flow.microsoft.com/en-us/pricing/</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-26-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-26-01.png"></a><p>本文将包括如下内容，我相信会对大家了解Microsoft Flow 会有帮助：<ol><li>通过Microsoft Flow实现特定邮件的附件自动保存到SharePoint Online文档库中 
<li>实现周期性执行的流程 
<li>实现用户手工启动的流程 
<li>在 PowerApps 里面操作引发的流程 
<li>通过 Power BI 警报引发的流程 </li></ol><h1>通过Microsoft Flow实现特定邮件的附件自动保存到SharePoint Online文档库中</h1><p>这种基于事件的流程处理，可能是Microsoft Flow中最为常见的。这是我们部门在用的一个真实案例，我大致介绍一下场景：我们每周会收到内部同事发送过来的一个邮件，通常都带有一个附件（名称是 Office 365 周报.xlsx）。与此同时，我们又希望这些附件，能以固定命名规则保存在团队网站的某个文档库中，这样我们所有人就随时可以集中看到所有的周报。我们希望这个动作能自动实现，无需人为地操作。<p>从Microsoft Flow的角度来看，这样的流程简直是太合它的胃口了，你甚至都可以直接用它的模板实现。请登陆到 flow.microsoft.com 后，搜索“附件”这个关键字，你可以看到有好多的模板列出来：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-46-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-46-42.png"></a><p>我们要的其实就是第一排的第三个模板<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-55-31.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-55-31.png"></a><p>设置好你的账号信息，然后点击“继续”按钮，设置一下你需要监控的邮箱文件夹，以及要保存的SharePoint Online团队网站以及文档库位置。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-55-59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-55-59.png"></a><p>等一等，我们如何去设置条件呢？毕竟我们只是想监控带有附件，而且附件名为“Office 365 周报.xlsx”这样的邮件呢。通过点击下面的加号，选择“添加条件”即可实现这个功能<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-15-16-59-36.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-15-16-59-36.png"></a><p>下面是我编辑好的一个流程，带有两个条件分支，只有两个条件都满足的话，我才会在SharePoint Online 相应的文档库创建文件，而且文件名是自动加上了时间戳的，这样确保不会重复（默认情况下，如果文件名重复的话，Microsoft Flow会自动覆盖掉原文件）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-09-28-02.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-09-28-02.png"></a><p>保存这个工作流，然后模拟发送一个邮件，我很快就能看到SharePoint Online的文档库中已经自动创建了一个文件<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-09-31-28.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-09-31-28.png"></a><p>如果你对这个流程的执行细节有兴趣，可以回到工作流的视图查看运行记录<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-09-32-52.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-09-32-52.png"></a><p>点击某一个运行记录，可以看到细节<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-09-34-20.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-09-34-20.png"></a><blockquote><p>如果某次执行失败，你将收到一封邮件，而且可以在这个界面重新提交流程执行。</p></blockquote><p>到这里为止，我们已经创建了一个简单但实用的流程，它会自动监控我的邮箱的收件箱，如果邮件带有附件，并且附件名是“Office 365周报.xls”的话，就将此文件加上时间戳保存到我指定的SharePoint Online文档库中去。如果你觉得这个想法还不错，你还可以分享给其他同事使用呢。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-09-40-24.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-09-40-24.png"></a><p>对于复杂一些的流程，Microsoft Flow支持多人共同编辑<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-00-09.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-00-09.png"></a><h1>周期性执行的流程</h1><p>上面这种场景是根据某个事件来触发Microsoft Flow，这当然是最常见的，但还有一种情况也比较普遍，那就是周期性执行某个流程，例如每个月从SharePoint Online的列表中导出一批数据，生成一个Excel文件，然后发送给某个邮箱。这样要怎么实现的呢？流程的细节我这里不准备展开，但我要提示的是最关健的一个操作，就是如何设置周期性执行流程。<p>其实并不难，你只需要将一个特定的触发器放在流程的第一步就可以了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-04-55.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-04-55.png"></a><p>选择“计划”这个触发器，进行必要的设置<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-05-33.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-05-33.png"></a><h1>用户手工启动的流程</h1><p>Microsoft Flow是如此的简单易用，以至于我们不再满足于将其定义为仅仅在后台执行自动化任务（就像上面提到的两种情况一样），有没有可能定义一个流程，然后由我们自己想什么时候执行就什么时候执行呢？打个比方说，电脑开机其实就是一个流程，但我不想它每次都自动开机，而是由我按下开机按钮后才开机。<p>我很喜欢上面这个比喻，毕竟这样一来，作为人类我们似乎也多少能找回了一些控制世界的尊严和自豪感。不管怎样，Microsoft Flow确实实现了类似的机制，而且名称就叫“按钮”。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-09-45.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-09-45.png"></a><p>我们先来看第一种，它允许用户在Microsoft Flow的移动App中，通过一个按钮执行某个流程。例如我简单设计一个流程，让用户输入几个参数后，Microsoft Flow给我的邮箱发一个邮件。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-25-03.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-25-03.png"></a><p>在Microsoft Flow的移动App里面，有一个专门的分类：Buttons<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-26-07.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-26-07.png"></a><p>点击第一个按钮，会进入一个输入参数的界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-28-42.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-28-42.png"></a><p>挺有意思的对吧？试想一下，你可以通过一个按钮发邮件，当然也可以通过它来开启你家里的空调。为什么不呢？<blockquote><p>截至目前为止，Microsoft Flow的移动App，还只是在测试版，除了微软员工可以使用dog food版本以及部分App Store可以下载外，中国用户还不能下载。详情请关注：<a href="https://preview.flow.microsoft.com/en-us/mobile/download/?src=banner">下载地址</a></p></blockquote><h1>在PowerApps里面操作引发的流程</h1><p>在上一个场景中，包括我在 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsadv.md">PowerApps 进阶篇</a> 中我都提到了PowerApps可以和Flow结合起来实现强大的功能，到底怎么做的呢？这里我将揭晓谜底。<p>首先，PowerApps的应用提交的数据，也许是保存在Excel文件中，或者SharePoint Online的列表中。它只管那样做就好了。Flow 这边能监控Excel或者列表的变化，然后自动地在后台执行任务。这种情况下，PowerApps和Flow其实是松耦合的，没有任何直接联系的，这可能是最好的一种方式吧。<p>但是，我们确实能实现在PowerApps中直接发起Flow的流程。这个要分两步来走：<p>第一，创建一个可以从PowerApps中调用的流程。这里的关键是触发器是“PowerApps”，其他部分没有什么特别需要注意的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-40-56.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-40-56.png"></a><p>第二，在PowerApps的应用中启动流程。其实很简单，放一个按钮，然后在Action中选择“Flow”，此时会弹出一个面板，让你选择一个流程。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-53-13.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-53-13.png"></a><p>如果我们需要输入参数怎么办呢？这里有一个非常有意思的设计，是在Flow的设计器中，你可以选择一个你希望接受参数的位置，然后选择“在PowerApps中提问”，这样它就会生成一个上下文变量出来，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-10-55-14.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-10-55-14.png"></a><p>然后，在PowerApps中，执行Run这个方法的时候，就可以指定邮件主题了。你肯定已经猜到了，这个参数可以定义任意多个，这真是太强大了。<h1>通过Power BI 警报引发的流程</h1><p>本文的最后我还要介绍一下如何在PowerBI中集成Flow来实现自动化。Power BI是新一代的智能数据分析和可视化的工具，一经发布就受到了广泛的关注和好评，目前稳居Gartner魔力象限的领导者象限。下图是一个典型的Power BI 仪表盘，用来分析零售门店的业绩。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-11-11-43.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-11-11-43.png"></a><p>今天不会对于Power BI的细节进行展开，我只提一个很有意思的功能：假设我是一个销售总监，我希望能监控到这个仪表盘上面的一些关健指标，当它们发生变化，尤其是我不希望看到的一些变化（例如销售额下降明显）时，我能自动得到一些通知，我该怎么办呢？我是24小时不吃不睡地守在电脑前面刷这个仪表盘吗？当然不能，Power BI提供了一个警报的功能，可以让用户自己定义需要监控的指标，并且定义发除警报的动作，默认情况下，它可以给用户发一封邮件。创建警报很简单，在某个磁贴的右上角点击，会出现一个菜单。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-11-15-32.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-11-15-32.png"></a><p>点击“管理警报”，然后点击“添加警报规则”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-11-16-39.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-11-16-39.png"></a><p>细心的你估计已经发现，在这个界面的右下方，其实有一个链接：“使用 Microsoft Flow 触发其他操作”，点击之后会调到Microsoft Flow的界面，并自动选择好了一个模板，你要做的就是设置一些账号即可。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-11-18-21.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-11-18-21.png"></a><p>接下来你就可以发挥想象力定制这个流程吧，只要你愿意，你可以做的很复杂。不过，作为一个销售总监，你的成功之道可能是要赶紧去跑到门店现场去了解情况，所以关于这里面的更多的技术细节我就不多跟你展开了吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-16-11-20-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-16-11-20-01.png"></a>]]></description></item><item><title>使用PowerApps快速构建基于主题的轻业务应用 —— 进阶篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/15/8043265.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 15 Dec 2017 07:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/15/8043265.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年12月14日</p></blockquote><p>在上一篇 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md">使用PowerApps快速构建基于主题的轻业务应用 —— 入门篇</a> 中，我用了三个实际的例子演示了如何快速开始使用PowerApps构建轻业务应用，你可能已经发现，我都是使用默认生成的设置，没有做任何修改。当然，那样做出来的应用看起来不那么酷，但已经可以运行了，作为一个起点，已经不错了，不是吗？<p>但这样自动生成的应用，估计也不能直接用于咱们实际的工作中，为了达到这个目的，你还多多少少需要掌握一些“高级”知识，并且要多一些练习。这一篇将从如下几个方面展开介绍<ol><li>布局与控件 
<li>使用数据 
<li>使用网关 
<li>应用生命周期管理 </li></ol><h1>布局与控件</h1><p>让我们再次回到之前自动生成好的基于Excel文件的订单应用吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-orderapp-1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-orderapp-1.png"></a><p>我们先从左侧开始来剖析一下这个应用。作为一个给最终的业务用户使用的应用，它是怎么构建用户界面的呢？这个应用虽然简单，但其实已经包含了我们常说的“增删改查”的四项基本功能。PowerApps的应用是由一个一个的Screen（屏幕）组成的，一个屏幕通常代表了某一项功能，例如<ol><li>BrowseScreen，这个一般是用来显示数据列表的，对应的数据操作是“查询列表”。 
<li>DetailScreen，这个一般是用来显示某条数据的详细信息的，对应的数据操作是“查询”。 
<li>EditScreen，这个屏幕比较有意思，它一般用来新建数据，或者编辑数据，对应的数据操作是“插入”和“更新”。 </li></ol><p>值得注意的是，以上名称只是推荐的做法，并不强制要求查询的屏幕名称必须叫BrowseScreen，也不要求你必须要上面三个屏幕。事实上，你随时可以添加自己需要的屏幕（Screen）。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-newscreen.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-newscreen.PNG"></a><p>顺便要提一下的是，PowerApps的应用天生就是面向移动设备来使用的，所以它默认是有两种布局：手机的布局，和平板电脑的布局。我们此前自动生成应用的时候，是选择“手机的布局（Phone Layout），这个取决于模板的设置。但一旦熟悉之后，我们完全可以自己选择布局，然后开始设计。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-layout.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-layout.PNG"></a><p>你可以从零开始做，也可以从一个模板开始做，但请注意这次选择“Tablet Layout”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-layout-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-layout-2.png"></a><p>回到应用本身，我们刚才说了，PowerApps的应用是由一个一个屏幕组成的，那么屏幕又是由什么组成的呢？控件。<p>PowerApps的控件，总体来说，分为两大类，一类是容器控件，一类是普通控件。容器控件是可以包含其他控件的控件。主要包括下面两类：<ol><li>Gallery 控件，这类控件主要用来显示列表数据。 
<li>Form 控件，这类控件主要用来显示数据或编辑数据。 </li></ol><p>相比较而言，普通控件则更多，也更加有意思。总体来说，可以分为下面几个类别，请注意粗体部分，这是PowerApps在移动优先这个目标之下的一些亮点功能。<ol><li>文本 
<ol><li>标签（Label） 
<li>文本框（Text Input） 
<li><em><strong>HTML文本框</strong></em>（HTML text），支持用户输入HTML文本，显示富文本内容，例如显示链接 <code>&lt;a href="xxxx"&gt;文本&lt;/a&gt;</code><li><em><strong>手写笔输入框</strong></em>（Pen input），支持用户通过手写或者电子笔之前签名，生成的图片可以保存起来。具体参考 <a href="https://docs.microsoft.com/en-us/powerapps/controls/control-pen-input">https://docs.microsoft.com/en-us/powerapps/controls/control-pen-input</a></li></ol><li>控件 
<ol><li>按钮（Button） 
<li>下拉框（Drop down） 
<li>组合框（Combo box） 
<li>日期选择器（Date picker） 
<li>列表框（List box） 
<li>复选框（Check box） 
<li>单选框（Radio） 
<li><em><strong>切换按钮</strong></em>（Toggle） 
<li><em><strong>滑动框</strong></em>（Slider） 
<li><em><strong>评分按钮</strong></em>（Rating） 
<li><em><strong>计时器</strong></em>（Timer） 
<li>导入数据（Import） 
<li>导出数据（Export） 
<li><em><strong>PDF查看器</strong></em>（PDF Viewer） 
<li><em><strong>Power BI 磁贴</strong></em> （Power BI Tile） 
<li>附件（Attachments） 
<li>数据表控件（Table） </li></ol><li>多媒体空控件 
<ol><li>图片（Image） 
<li><em><strong>摄像头</strong></em>（Camera）,详情请参考 <a href="https://docs.microsoft.com/en-us/powerapps/controls/control-camera">https://docs.microsoft.com/en-us/powerapps/controls/control-camera</a><li><em><strong>码扫描器</strong></em>（Barcode）,可以扫描一维码和二维码，详情请参考 <a href="https://docs.microsoft.com/en-us/powerapps/scan-barcode">https://docs.microsoft.com/en-us/powerapps/scan-barcode</a><li>视频播放器（Video） 
<li>音频播放器（Audio） 
<li>麦克风（Microphone） 
<li>图片选择器（Add Picture） </li></ol><li><em><strong>图形控件</strong></em><ol><li>饼图（Pie chart） 
<li>柱状图（Column chart） 
<li>折线图（Line chart） </li></ol></li></ol><p>现在你对于PowerApps所支持的一些图形化界面元素都有了一个基本的了解，接下来就是怎么真正地使用好它们了。你不需要去学一门编程语言，只需要知道这些控件的使用无外乎两个方面<ol><li><p>为控件的属性赋值。一般是选中一个控件后，在右侧会有一个属性面板，列出了所有可以设置的属性。当然，如果你已经比较熟悉的话，则可以在工具栏下面的编辑栏中直接输入属性名和值，快速来完成设置。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-control-props.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-control-props.png"></a></p><li><p>为控件的事件绑定表达式。除了纯粹显示数据的控件，大部分控件都是可以交互式操作的，例如接受用户的点击等。如何为这种行为做出响应呢？在编程中，我们的专业术语叫编写事件处理程序。PowerApps不需要编码，所以它提供了一些特殊的表达式来实现简单的事件处理逻辑。例如下面是一个最常见的按钮事件，当用户点击后，它会从第一个屏幕切换到第二个屏幕。这里用的是navigate函数（另外还有Back，Forward函数来表示后退和前进）。你其实不需要记住这些东西，选择你的控件后，在顶部的Action菜单中，一般会列出来该控件支持的常见的操作。Navigate是一个导航的功能，Collect是一个收集数据的功能（我在下一节会介绍），Remove则是删除数据的操作，跟Collect对应。Flows能够发起一个外部流程，这里先不做展开，后续有专门的文章介绍。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-button-event.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-button-event.PNG"></a></p></li></ol><blockquote><p>请注意，你可以在事件表达式中定义多个操作，只要用分号将他们分开即可，例如 <code>Collect(TestData,Dropdown1.Selected);Navigate(Screen2, ScreenTransition.Fade)</code></p></blockquote><p>在这里，我建议大家花个半天的时间，逐一地了解这些控件，理解常见的属性以及事件，只要大致做过一次，我相信对于你日后使用PowerApps将有极大的帮助。<h1>使用数据</h1><p>接下来要谈一谈数据。大家知道，界面只是一个表象，真正用户在交互的其实是数据。我在 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md">入门篇</a> 中已经介绍了Excel文件，SharePoint List，Dynamics 365的业务实体作为数据的场景。今天要进一步深入探讨一下。<p>首先，你要知道的是，一个PowerApps的应用可以使用多个数据源，一个数据源反过来也可以用于多个PowerApp的应用中。在顶部菜单中找到View，点击Data Source可以查看到当前这个应用中能用到的所有数据源，当然也可以添加你需要的其他数据源。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-datasource.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-datasource.png"></a><p>其次，你需要掌握几个常见的数据筛选函数。虽然一个应用中能支持多个数据源，但是它没有办法像PowerBI 那样在这些数据源建立映射和关系。那么，当我希望根据用户的选择，决定对某个数据集合进行筛选、排序等操作时应该怎么办呢？答案是使用数据筛选函数。PowerApps提供了三个非常强大的函数：Filter、Search 和 LookUp。我非常推荐大家要详细阅读 <a href="https://docs.microsoft.com/zh-cn/powerapps/functions/function-filter-lookup">https://docs.microsoft.com/zh-cn/powerapps/functions/function-filter-lookup</a> 这篇文章并且进行实际的操作来加深了解，这是你从会做一个Hello world这样的应用到一个实际能用在工作中的应用必须要学会的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/Powerapps-filter-function.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/Powerapps-filter-function.PNG"></a><p>最后，你需要了解如何在屏幕传递数据。如果我们需要从一个屏幕切换到另外一个屏幕，如何将前一个屏幕的数据传递过来呢？PowerApps提供了上下文变量的概念，而且在很多函数中都自带了这个功能，例如Navigate函数，就可以在第三个参数定义要传递下去的变量和值。下图定义了一个Language的变量，仅在这个Navigate的生命周期内有效。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-context-function.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-context-function.PNG"></a><p>你还可以通过下面的功能查看所有的变量，以及它们被使用的情况<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-context-variable.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-context-variable.PNG"></a><p>关于PowerApps的上下文变量的细节，请参考 <a href="https://docs.microsoft.com/zh-cn/powerapps/functions/function-updatecontext">https://docs.microsoft.com/zh-cn/powerapps/functions/function-updatecontext</a><p>如果想要定义在整个应用程序都能用的全局变量，请参考Collect函数 <a href="https://docs.microsoft.com/en-us/powerapps/functions/function-clear-collect-clearcollect">https://docs.microsoft.com/en-us/powerapps/functions/function-clear-collect-clearcollect</a><blockquote><p>对于绝大部分数据源来说，每次都是以当前用户的身份去访问的。所以不管你是一个Excel文件放在OneDrive for Business，还是一个SharePoint List，在分享给同事们之前，你需要确保他们是有权限访问到的。</p></blockquote><p>PowerApps也提供了一个专门的函数（User），用来获取当前用户的邮箱，显示名称，个人头像这三个数据。<h1>使用网关</h1><p>PowerApps默认支持上百种数据源，尤其是对于云端的SaaS应用有极好的支持。但是，假设你的数据不在支持列表中，或者你的数据是在公司内部的服务器，能否一样享受到PowerApps带来的好处呢？答案是可以，PowerApps通过一个网关（gateway）的技术，可以在你授权的情况下安全地连接到你私有的数据。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-gateway.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-gateway.png"></a><p>点击右上角的New Gateway按钮，你将被引导到一个下载界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-downloadgateway.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-downloadgateway.png"></a><p>下载完成后双击安装，最后输入你能登录到PowerApps的账号进行身份认证<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-gateway-install.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-gateway-install.png"></a><p>如果你看到下面这样的界面，则表示配置成功了。我们发现PowerApps，Microsoft Flow，Power BI是共用Gateway这个基础设施的，无需配置三套。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-gateway-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-gateway-2.png"></a><p>那么怎么使用这个网关呢？我们还是要回到网关的管理界面，你看到现在多出来一个gatewaydemo的网关<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-gateway-3.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-gateway-3.png"></a><p>接下来，你在新建连接的时候，选择你的数据源类型（例如SQL Server）后，在具体配置的时候，选择使用Connect using on-premises data gateway<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-gateway-4.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-gateway-4.PNG"></a><p>详细步骤你还可以参考 <a href="https://powerapps.microsoft.com/en-us/blog/connect-to-your-on-premises-data-sources-using-on-premises-data-gateway-from-powerapps/">这篇文章</a><h1>应用生命周期管理</h1><p>本文的结束，我想要给大家介绍关于PowerApps的应用生命周期管理的概念。PowerApps是面向业务用户、快速开发和迭代的一个平台，只有这样才能满足随需应变的业务需求。所以，你会快速开始工作，发布你的应用，然后在使用过程中，根据反馈再快速调整设计，然后又重新发布。这样就带来一个版本管理（或者再往大里说——应用生命周期管理）的问题。<p>PowerApps会为每次发布保存一个版本，例如下图可以看到我的AppTest这个应用，目前两个版本，而版本2是目前在使用的(Live)<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-versioncontrol.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-versioncontrol.PNG"></a><p>如果你发现版本2并不是很稳定，或者某些功能并不是你所预期的那样正常工作，你完全可以在这里回滚到版本1，通过点击版本1的Restore按钮即可。]]></description></item><item><title>使用PowerApps快速构建基于主题的轻业务应用 —— 入门篇</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/14/8039394.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 14 Dec 2017 11:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/14/8039394.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年12月12日</p></blockquote><h1>前言</h1><p>在上一篇文章 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officebusinessapp.md">基于Office 365的随需应变业务应用平台</a> 中我提到，随着随需应变的业务需要，以及技术的发展，业务应用的开发的模式也有了深刻的变化。基于微软的平台，有服务于主干业务应用的Dynamic 365 业务应用平台（包括CRM和ERP），也有服务于员工日常工作的Office 365 生产力平台。这看起来非常清晰，但他们的界限其实在逐渐模糊，谁说在Office 365上面就不能进行业务操作呢？又谁说在Dynamics 365这个成熟的平台上用户不能自己去定义自己需要的应用呢？<blockquote><p>我曾经在年初的 <a href="https://www.linkedin.com/pulse/%E9%A3%8E%E8%B5%B7%E4%BA%91%E6%B6%8C%E8%A5%BF%E9%9B%85%E5%9B%BE%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD%E8%A7%81%E9%97%BB%E5%88%86%E4%BA%AB-%E5%B8%8C%E7%AB%A0-%E9%99%88/">这篇文章</a> 提到Office 365 这些年本身也在朝微服务方面发展，不仅服务粒度越来越小，易于根据用户的需求进行组合，同时还创新性提供了包括Bookings和Staffhub这种专业性的业务服务，有兴趣的朋友可以参考 <a href="https://products.office.com/en-us/business/scheduling-and-booking-app">bookings</a>, <a href="https://staffhub.ms/">staffhub</a>, 并且我们有理由相信，这只是一个开始。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformtrend.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformtrend.PNG"></a><p>我们今天要谈论的基于主题的轻业务应用，更多是偏向前台创新应用和差异化应用。而所谓的随需应变，就是让更多的业务人员拥有构建面向主题的业务应用的能力，并且能随时根据捕捉到的信息进行调整，以达到快速响应变化的目标。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/WeChat_Image_20170908063810.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/WeChat_Image_20170908063810.jpg"></a><p>为了使得业务用户自己有能力构建基于主题的轻业务应用，微软给出的答案是一套全新定义的商业应用平台，主要包括了PowerApps，Flow，PowerBI这三个组件。他们与Office 365以及Dynamics 365是紧密的集成关系（当然，他们也支持很多其他的外部系统），通过底层的通用连接器、数据模型、网关进行连接，并且在必要的时候，也支持高级定制化。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformarc.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformarc.png"></a><p>PowerApps可以根据数据模型快速生成移动优先和云优先的业务应用，这个应用里面如果需要实现业务流程，则通过Flow来解决，而最终产生的大量数据，则通过PowerBI来展现，或者根据数据的规则发起新的流程或者应用操作，它们形成了一个闭环，可以满足不断优化的、随需应变的业务需要，最重要的一个前提是，这一切都是由业务用户自己来做的，无需编程。本文将用实例介绍PowerApps的快速入门，其中包括四个场景：<ol><li>基于一个保存在OneDrive for Business个人网盘中的Excel文件创建业务应用 
<li>基于SharePoint Online的列表创建轻业务应用 
<li>基于Dynamics 365 创建自定义应用 
<li>在Microsoft Teams中集成PowerApps </li></ol><h1>先决条件</h1><p>在如下的几种情况下，你可以开始使用PowerApps<ol><li>你已经拥有下面的Office 365授权 <pre><code>Office 365 Business Essentials 
Office 365 Business Premium 
Office 365 Education 
Office 365 Education Plus 
Office 365 Enterprise E1 
Office 365 Enterprise E3 
Office 365 Enterprise E5
</code></pre><li>你已经拥有下面的Dynamics 365授权 <pre><code>Dynamics 365 for Sales, Enterprise edition 
Dynamics 365 for Customer Service, Enterprise edition 
Dynamics 365 for Operations, Enterprise edition 
Dynamics 365 for Field Service, Enterprise edition 
Dynamics 365 for Project Service Automation, Enterprise edition 
Dynamics 365 for Team Members, Enterprise edition 
Dynamics 365 for Financials, Business edition 
Dynamics 365 for Team Members, Business edition 
</code></pre><li>你单独购买了PowerApps <pre><code>PowerApps Plan 1
PowerApps Plan 2
</code></pre></li></ol><p>以上不同的授权存在一定的功能差异，请参考<a href="https://powerapps.microsoft.com/en-us/pricing/">https://powerapps.microsoft.com/en-us/pricing/</a><blockquote><p>截至目前为止，以上提到的PowerApps，Flow，PowerBI，除了PowerBI之外，另外两个组件还没有在中国区部署，据产品组给的一个大致的时间表是在2018年的中期有望落地。目前在国内访问PowerApps服务，偶尔会出现速度稍慢的问题，请大家谅解。</p></blockquote><p>PowerApps是给业务用户来准备的，所以他的使用并不需要你懂编程，甚至都不需要了解数据库这些细节。让我们用实例来学习一下吧。<h1>基于一个保存在OneDrive for Business个人网盘中的Excel文件创建业务应用</h1><p>让我们就从Excel开始吧。假设我们的场景是这样：你是一个销售部门主管，有一个Excel文件，是用来保存订单数据的，你希望快速开发一个轻量级的业务应用，可以让你以及同事快速地在手机上面就可以输入或修改订单信息、查询订单列表，以及其他一些你认为有意思的事情。有了PowerApps，你不需要等待开发人员（不管是你公司内部的IT部门同事，还是外面的专业团队）去开发一个网页，或者定制一个移动App，然后等待一到两周才能看到真正用起来。你要的只是把Excel文件定义好，就像下面这样<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-file.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-file.PNG"></a><blockquote><p>这里有一个小技巧：尽量用英文定义标题，否则你可能会遇到一些小问题。</p></blockquote><p>没有什么特别的，除了你需要定义一个表格，然后把这个文件保存在你的OneDrive for Business中即可。（你在第一行输入标题后，选择A1，然后在“插入”菜单中选择“表格”）<p>接下来，你要做的是打开<a href="https://preview.web.powerapps.com/">https://preview.web.powerapps.com</a>这个在线的应用开发平台，用你的账号（不管是Office 365账号，还是Dynamics 365账号，或者单独的PowerApps账号）<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/web.powerapps.portal.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/web.powerapps.portal.png"></a><p>点击左侧的Apps，然后选择右上角的"Create an app"<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-create-apps.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-create-apps.png"></a><p>选择“OneDrive for Business” 里面的“Phone Layout”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-onedrive-excel.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-onedrive-excel.png"></a><p>如果你是第一次运行，则可以通过下面的界面创建一个连接<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-onedrive-createconnection.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-onedrive-createconnection.PNG"></a><p>如果你之前已经创建过连接，则定位到并单击你保存的Excel文件，PowerApps会自动检测文件内部的表格，选中其中一个表格后，点击右下角的Connect按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-onedrive-selectexcel.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-onedrive-selectexcel.png"></a><p>一两分钟后，你就能看到一个自动生成的应用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-app.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-app.png"></a><p>我们这里先不展开细节，可以直接按F5运行这个应用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-1.png"></a><p>点击右上角的加号（+），可以输入订单信息<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-2.png"></a><p>点击右上角的勾号，可以保存当前这条记录，并且自动给回到主界面，此时会显示所有的订单列表<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-3.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-3.png"></a><p>如果点击某条记录，则会进入订单的详细界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-4.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-4.png"></a><p>点击右上角的笔形按钮，可以进入订单的编辑视图<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-2.png"></a><p>到这里为止，我们就完成了一个最简单、但确实能立即工作的轻业务应用，你已经在预览界面中进行了操作，接下来要做的是什么呢？当然是保存这个应用啦。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-5.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-5.PNG"></a><p>然后你可以将应用分享给需要的同事<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-6.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-6.PNG"></a><p>点击“Share this app” 按钮, 你可以一次性添加公司中所有同事，让他们可以使用这个app，也可以单独添加某个同事。后面这种情况下，你还可以授权给这位同事可以一起编辑。如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-share-app.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-share-app.png"></a><p>我们指定分享的同事会收到一封邮件，大致如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-share-app-email.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-share-app-email.png"></a><p>如果他点击了“Use the app”的话，会弹出下面的页面，要求他进行授权<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-share-permission.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-share-permission.png"></a><p>这里的授权，主要是希望得到用户的许可，OneDrive for Business可以代表用户去进行必要的操作。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-onedrive-permission.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-onedrive-permission.PNG"></a><p>但这里需要特别注意的是，如果该同事并没有被授予访问上面提到这个Excel文件的权限的话，虽然能打开OrderApp，但无法读取任何数据，也无法进行操作。作为应用的作者，我需要在OneDrive for Business中选择该文件，然后给同事授予访问权限。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-onedrive-grantpermission.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-onedrive-grantpermission.PNG"></a><p>到现在为止，一个最简单但足够实用的应用就创建好了，你可以通过网页版（<a href="https://web.powerapps.com/home">https://web.powerapps.com/home</a>) 进行访问，也可以通过免费的一个Windows桌面客户端（PowerApps）来进行使用。但用得最多的场景，我估计是使用手机吧。目前PowerApps这个应用可以在Apple Store和Google Play等应用市场中免费下载。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-ios.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-ios.jpg"></a><p>这个PowerApps其实相当于是一个超级App，它负责来运行我们自定义的业务应用。打开这个PowerApps，输入账号和密码登陆后，可以看到你有权使用的所有应用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-applist.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-applist.jpg"></a><p>点击某个应用，你就可以进行数据查询和操作了，这一点都不奇怪，以至于我都不想多做截图了。我这里要给大家做一个提示的是，如果某个应用你需要经常使用，你甚至可以将它固定在手机的屏幕上面，而无需每次都进入PowerApps这个主界面，然后再查找了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-pinttohome.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-pinttohome.jpg"></a><p>最后，所有用户在PowerApps中操作的数据，都将统一保存在Excel文件中。值得注意的是，PowerApps会在表格中增加一个特殊的列：__ PowerAppsId __ 用来唯一标识每一行。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-excel-result.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-excel-result.PNG"></a><p>以上我用了很长的篇幅，完整地介绍了如何基于OneDrive for Business中保存的一个Excel文件快速开发一个业务应用，并且分发给公司里面的同事，他们可以有多种方式进行使用的场景。接下来，我将继续展示两个最典型的场景。<h1>基于SharePoint Online的列表创建轻业务应用</h1><p>SharePoint 作为业界领先的团队协作和内容管理平台的能力已经得到了数以亿计的用户所认可。在团队协作这个场景中，有基于文档或者内容（如笔记）的协作，也有基于工作任务的协作。不光是文档，还是工作任务，他们的本质上都是一个列表。列表的强大超过了很多人的想象，以至于我这里并不准备过多地展开细节。我反而要说一说的是列表的简单，只要你会用Excel，你肯定会用列表，而且我鼓励你这样思考：SharePoint的列表是一种服务器技术，用来像Excel那样帮我们保存各种数据，它的共同编辑和协作更加容易。<p>要创建一个列表非常容易，在你的团队网站的首页上面，点击“新建”按钮，选择“列表”，然后输入一些基本信息即可<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-createlist.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-createlist.png"></a><p>然后为这个列表增加一些字段，最终效果如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-list.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-list.png"></a><p>细心的朋友肯定都已经发现了，在列表的顶部工具栏中，其实已经看到了PowerApps这个按钮，可以说这是PowerApps与SharePoint无缝整合的有力证明了。点击这个按钮，会有两个选项，一个是“创建应用”，一个是“自定义表单”。我们先选择第一个吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/sharepoint-powerapps-create.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/sharepoint-powerapps-create.png"></a><p>点击“创建”按钮，差不多一两分钟时间，PowerApps会根据SharePoint这个列表结构，自动能够生成一个应用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/sharepoint-powerapps-newapp.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/sharepoint-powerapps-newapp.png"></a><p>即便不做任何修改，这个应用也已经能用来填写工作日志了。至于如何分享，如何在移动设备中使用，我这里就不再赘述。但直得注意的是，如果一个列表关联了至少一个PowerApps应用的话，它的主界面会多出来一个对应的视图<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-list-app.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-list-app.png"></a><p>点击“打开”按钮将启动PowerApps对列表进行操作<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-list-1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-list-1.png"></a><p>其实PowerApps只是用户界面，所有的数据都是保存在列表里面的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-list-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-list-2.png"></a><blockquote><p>不要忘记，如果你要分享给同事，希望他们能使用这个应用能提交工作日志的话，他们必须被授予访问这个列表的权限。</p></blockquote><p>看起来挺方便的，不是吗？这还不是全部呢。下面介绍另外一个PowerApps与SharePoint结合的场景。我相信，虽然有了PowerApps，还是会有一些用户习惯直接在SharePoint里面编辑和修改列表数据。我们先来看一下默认情况下SharePoint提供的列表项编辑界面吧<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-list-3.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-list-3.png"></a><p>这个默认的界面已经很不错了，但如果用户想要有自己的界面，我们该怎么做呢？很久很久以来，我们有一个强大的技术，叫做Infopath，它是一种基于XML定义的表单技术，使用它可以自定义SharePoint列表的界面。我以前写过很多这方面的文章，其中一篇可以参考 <a href="http://www.cnblogs.com/chenxizhang/archive/2010/04/22/1718090.html">http://www.cnblogs.com/chenxizhang/archive/2010/04/22/1718090.html</a> .<p>但Infopath有它的问题，而且对于SharePoint的版本有依赖。进入SharePoint Online的时代以来，我们已经不使用Infopath了。但直到现在，才揭晓了它的替代方案，那就是PowerApps。<p>其实很简单，在列表的工具栏中选择“PowerApps”，在下拉菜单中选择“自定义表单”，你就很快看到会生成一个应用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-form.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-form.png"></a><p>请注意，为了让大家看到效果，我在界面底部故意加了一个文字。选择左上角的“Back to SharePoint”按钮，按照提示发布应用，然后在SharePoint页面上再次创建列表项的话，就会看到下面这样的界面。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-sharepoint-form-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-sharepoint-form-2.png"></a><blockquote><p>请注意，这个自定义表单功能，只影响网页编辑界面。SharePoint 移动App上面的界面还是会使用默认的。</p></blockquote><h1>基于Dynamics 365 创建自定义应用</h1><p>最后，我们快速来了解一下PowerApps如何跟Dynamics 365结合创建自定义应用。这个场景其实跟前面两个也很类似，无外乎是数据源换成了Dynamics 365而已吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-d365-1.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-d365-1.PNG"></a><p>选择“Dynamics 365”这个模板, 然后用你的Dynamics 365账号创建一个连接，选择到合适的业务实体对象<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-d365-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-d365-2.png"></a><p>然后点击“Connect”，PowerApps又开始根据给定的数据结构自动生成应用的神奇工作了。每到这个时候，我就想起那个“怎么样分三步将一头大象装进冰箱”的经典桥段。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-d365-3.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-d365-3.png"></a><p>后面的步骤与OneDrive for Business非常类似，我这里就不重复了。<h1>将PowerApps应用集成到Microsoft Teams中</h1><p>之前使用PowerApps的业务应用至少有三种方式：网页，桌面客户端，移动客户端。现在又多了一个选择，就是将它直接集成到Microsoft Teams这个一站式的协作和沟通工具中。<p>Microsoft Teams是Office 365的一个组件，如果你还不熟悉，请参考 <a href="https://products.office.com/zh-cn/microsoft-teams/group-chat-software">https://products.office.com/zh-cn/microsoft-teams/group-chat-software</a><p>下面是我们看到的一个常见的Team的界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-teams-1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-teams-1.png"></a><p>点击界面上“Wiki”旁边的加号，我们可以添加PowerApps这个功能作为一个选项卡<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-teams-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-teams-2.png"></a><p>如果第一次使用，会有一个界面，提示安装，你只需要点击“Install”即可，然后会进入下面的界面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-teams-4.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-teams-4.PNG"></a><p>点击“Save”，会自动创建一个选项卡，以后用户就可以直接在Teams中运行这个应用了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerapps-teams-5.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerapps-teams-5.png"></a><blockquote><p>请注意，如果是在Microsoft Teams的移动客户端中，会尝试直接打开PowerApps应用，而不是在Teams中打开应用</p></blockquote><h1>扩展阅读</h1><p>看完这一篇入门文章，我不能保证你对PowerApps有了很深的理解，但我确信你可以认识到PowerApps的威力了吧。要把这个工具用好，你可能还需要进一步的阅读，我这个系列后续还有高级篇，我还是推荐大家记住PowerApps的官方文档地址 <a href="https://docs.microsoft.com/zh-cn/powerapps/">https://docs.microsoft.com/zh-cn/powerapps/</a>]]></description></item><item><title>详解Office Add-in 清单文件</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/11/8023834.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 11 Dec 2017 08:44:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/11/8023834.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于2017年12月8日</p></blockquote><h1>前言</h1><p>我们都知道，一个Office Add-in，最主要是由两个部分组成的：清单文件（manifest）和真正要用来执行的网站。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/dk2-agave-overview-01.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/dk2-agave-overview-01.png"></a><p>清单文件其实是一个标准的XML文件，它有固定的Schema。目前来说，最新版本的清单文件必须指定“<a href="http://schemas.microsoft.com/office/appforoffice/1.1%E2%80%9D%E4%BD%9C%E4%B8%BASchema%EF%BC%8C%E5%90%A6%E5%88%99%E6%9F%90%E4%BA%9B%E5%8A%9F%E8%83%BD%E5%8F%AF%E8%83%BD%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E3%80%82%E5%BD%93%E7%84%B6%EF%BC%8C%E6%8C%87%E5%AE%9ASchema%E8%BF%99%E4%BB%B6%E4%BA%8B%E6%83%85%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E5%A4%AA%E4%BC%9A%E9%9C%80%E8%A6%81%E6%89%8B%E5%B7%A5%E5%8E%BB%E5%81%9A%EF%BC%8C%E6%AF%95%E7%AB%9F%E4%B8%8D%E7%AE%A1%E4%BD%A0%E6%98%AF%E7%94%A8Visual">http://schemas.microsoft.com/office/appforoffice/1.1”作为Schema，否则某些功能可能不能正常工作。当然，指定Schema这件事情你可能不太会需要手工去做，毕竟不管你是用Visual</a> Studio的项目模板，还是用其他开发工具（例如Visual Studio Code），清单文件都是自动生成的，而且默认就已经指定了1.1这个版本。下面两篇文章介绍了如何在不同工具开始office Add-in的开发。<ul><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddindev.md">在Visual Studio 中开发Office Add-in</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/vscodetoofficeaddin.md">在Visual Studio Code中开发Office Add-in</a></li></ul><p>一个典型的清单文件看起来是下面这样的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vscode-manifest.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vscode-manifest.PNG"></a><p>在Visual Studio中，有时候会用可视化界面，取代纯文本的XML编辑界面，例如下面这样<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vs2017-manifest.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vs2017-manifest.PNG"></a><blockquote><p>平胸而论，Visual Studio 提供了对于清单文件的最佳编辑体验，因为它会自动根据Schema提供智能感知，甚至如你刚才看到的那样，它甚至提供了可视化界面，我爱死这个功能了。</p></blockquote><p>下面我会从三个方面分别对清单文件进行详细介绍<ol><li>基本属性定义
<li>通过清单文件自定义Ribbon和快捷菜单
<li>通过清单文件是实现多语言支持</li></ol><h1>基本属性定义</h1><p>清单文件中的根元素是OfficeApp，这里会指定几个namespace，但同时会有一个至关重要的属性：xsi:type，目前我们支持三种不同类型的Office Add-in，分别是<ol><li>ContentApp，这是内容应用，主要是在Excel和PowerPoint中能用。通过这类Add-in，可以为宿主程序添加自定义的内容元素，例如一个自定义地图之类的。
<li>TaskPaneApp，这是应用最广的类型。通过这类Add-in，可以为宿主程序添加自定义的功能，例如通过一个自定义菜单，执行某些操作。
<li>MailApp，这是专用于Outlook的Add-in。</li></ol><p>除此之外，OfficeApp这个根元素，还需要包含如下的基本元素<ol><li>Id，唯一的编号（一个GUID）
<li>Version，这个版本信息在你更新时可能需要修改
<li>ProviderName，作者及公司信息
<li>DefaultLocale，默认的语言，格式是类似于en-US这样的。我在下面还会介绍多语言支持的功能
<li>DisplayName，显示名称
<li>Description，描述
<li>IconUrl，图标文件路径（32*32，PNG格式）
<li>HighResolutionIconUrl，高清图片文件路径
<li>SupportUrl，技术支持网址
<li>AppDomains，如果你的应用中，需要导航到其他网站（不同域），则需要在这里定义。
<li>Hosts，宿主形式。因为一个Add-in其实可以同时用于几个不同的宿主（例如Word，Excel等），所以这里可以定义多个Host。<pre><code>Document (Word)
Database (Access)
Mailbox (Outlook)
Notebook (OneNote)
Presentation (PowerPoint)
Project (Project)
Workbook (Excel)
</code></pre><li>DefaultSettings，默认设置，这里最关键的属性有SourceLocation，这个是用来指定Add-in加载时默认显示的页面。另外，不同的Add-in可能还会有一些自己的DefaultSettings，例如ContentApp的话，还可以设置RequestedWidth和RequestedHeight这两个属性，以确定自定义内容默认的尺寸。
<li>Permissions，这是规定Add-in拥有的对于宿主和文档的访问权限，不同的Add-in有不同的Permission设置。<pre><code>ContentApp 和 TaskPaneApp

&lt;Permissions&gt; [Restricted | ReadDocument | ReadAllDocument | WriteDocument | ReadWriteDocument]&lt;/Permissions&gt;

MailApp

&lt;Permissions&gt;[Restricted | ReadItem | ReadWriteItem | ReadWriteMailbox]&lt;/Permissions&gt;

</code></pre></li></ol><p>值得一提的是，如果你用Visual Studio 项目模板生成的清单文件，你会发现IconUrl以及SourceLocation 等属性，会包含一个特定的地址 ~remoteurl，这个其实会在工具进行编译和发布时自动替换为你的网站的根地址。而在Visual Studio code等工具中，你可能需要精确地设置。<h1>通过清单文件自定义Ribbon</h1><p>作为TaskPaneApp，最常见的做法是在启动后位宿主程序添加一个工具栏按钮，然后用户点击按钮的话，执行某个操作（打开内容面板和执行某个Javascript函数）。我在这一节主要介绍的是自定义Ribbon的方式。<p>有意思的是，要定义工具栏和清单，在清单文件中，我们称之为VersionOverrides。一个最简单的Ribbon定义如下<pre><code>&lt;VersionOverrides xmlns="http://schemas.microsoft.com/office/taskpaneappversionoverrides" xsi:type="VersionOverridesV1_0"&gt;
    &lt;Hosts&gt;
      &lt;Host xsi:type="Workbook"&gt;
        &lt;DesktopFormFactor&gt;
          &lt;GetStarted&gt;
            &lt;Title resid="Contoso.GetStarted.Title"/&gt;
            &lt;LearnMoreUrl resid="Contoso.GetStarted.LearnMoreUrl"/&gt;
          &lt;/GetStarted&gt;
            &lt;!--函数文件，是定义可以直接被调用的Javascript函数所在的位置--&gt;
          &lt;FunctionFile resid="Contoso.DesktopFunctionFile.Url" /&gt;

          &lt;!-- 扩展定义 --&gt;
          &lt;ExtensionPoint xsi:type="PrimaryCommandSurface"&gt;
            &lt;!-- 如果是扩展现有的Tab，使用 OfficeTab .如果是创建新的Tab，则使用 CustomTab --&gt;
            &lt;OfficeTab id="TabHome"&gt;
              &lt;!-- 这个id必须唯一，可以结合公司的名称. --&gt;
              &lt;Group id="Contoso.Group1"&gt;
                &lt;Label resid="Contoso.Group1Label" /&gt;
                &lt;Icon&gt;
                  &lt;bt:Image size="16" resid="Contoso.tpicon_16x16" /&gt;
                  &lt;bt:Image size="32" resid="Contoso.tpicon_32x32" /&gt;
                  &lt;bt:Image size="80" resid="Contoso.tpicon_80x80" /&gt;
                &lt;/Icon&gt;

                &lt;Control xsi:type="Button" id="Contoso.TaskpaneButton"&gt;
                  &lt;Label resid="Contoso.TaskpaneButton.Label" /&gt;
                  &lt;Supertip&gt;
                    &lt;Title resid="Contoso.TaskpaneButton.Label" /&gt;
                    &lt;Description resid="Contoso.TaskpaneButton.Tooltip" /&gt;
                  &lt;/Supertip&gt;
                  &lt;Icon&gt;
                    &lt;bt:Image size="16" resid="Contoso.tpicon_16x16" /&gt;
                    &lt;bt:Image size="32" resid="Contoso.tpicon_32x32" /&gt;
                    &lt;bt:Image size="80" resid="Contoso.tpicon_80x80" /&gt;
                  &lt;/Icon&gt;

                  &lt;!-- 下面这个方式是打开一个内容面板 --&gt;
                  &lt;Action xsi:type="ShowTaskpane"&gt;
                    &lt;TaskpaneId&gt;ButtonId1&lt;/TaskpaneId&gt;
                    &lt;SourceLocation resid="Contoso.Taskpane.Url" /&gt;
                  &lt;/Action&gt;
                  &lt;!-- 下面这个方式是执行一个Javascript函数--&gt;
                  &lt;Action xsi:type="ExecuteFunction"&gt;
                    &lt;FunctionName&gt;SubmitDataToServer&lt;/FunctionName&gt;
                  &lt;/Action&gt;
                &lt;/Control&gt;
              &lt;/Group&gt;
            &lt;/OfficeTab&gt;
          &lt;/ExtensionPoint&gt;
        &lt;/DesktopFormFactor&gt;
      &lt;/Host&gt;
    &lt;/Hosts&gt;
    
    &lt;!--目前规定所有的定义必须用资源的形式来做，避免重复定义 --&gt;
    &lt;Resources&gt;
      &lt;bt:Images&gt;
        &lt;bt:Image id="Contoso.tpicon_16x16" DefaultValue="~remoteAppUrl/Images/Button16x16.png" /&gt;
        &lt;bt:Image id="Contoso.tpicon_32x32" DefaultValue="~remoteAppUrl/Images/Button32x32.png" /&gt;
        &lt;bt:Image id="Contoso.tpicon_80x80" DefaultValue="~remoteAppUrl/Images/Button80x80.png" /&gt;
      &lt;/bt:Images&gt;
      &lt;bt:Urls&gt;
        &lt;bt:Url id="Contoso.DesktopFunctionFile.Url" DefaultValue="~remoteAppUrl/Functions/FunctionFile.html" /&gt;
        &lt;bt:Url id="Contoso.Taskpane.Url" DefaultValue="~remoteAppUrl/Home.html" /&gt;
        &lt;bt:Url id="Contoso.GetStarted.LearnMoreUrl" DefaultValue="https://go.microsoft.com/fwlink/?LinkId=276812" /&gt;
      &lt;/bt:Urls&gt;
      &lt;!-- ShortStrings 最长可以125. --&gt;
      &lt;bt:ShortStrings&gt;
        &lt;bt:String id="Contoso.TaskpaneButton.Label" DefaultValue="Show Taskpane" /&gt;
        &lt;bt:String id="Contoso.Group1Label" DefaultValue="Commands Group" /&gt;
        &lt;bt:String id="Contoso.GetStarted.Title" DefaultValue="Get started with your sample add-in!" /&gt;
      &lt;/bt:ShortStrings&gt;
      &lt;!-- LongStrings 最长可以250. --&gt;
      &lt;bt:LongStrings&gt;
        &lt;bt:String id="Contoso.TaskpaneButton.Tooltip" DefaultValue="Click to Show a Taskpane"&gt;
        &lt;/bt:String&gt;
        &lt;bt:String id="Contoso.GetStarted.Description" DefaultValue="Your sample add-in loaded succesfully. Go to the HOME tab and click the 'Show Taskpane' button to get started." /&gt;
      &lt;/bt:LongStrings&gt;
    &lt;/Resources&gt;
  &lt;/VersionOverrides&gt;
</code></pre><h1>通过清单文件自定义快捷菜单（Context Menu）</h1><p>除了Office Ribbon的自定义之外，目前也支持通过清单文件对快捷菜单进行自定义，例如下面这个例子，是给单元格的快捷菜单增加一个按钮。这个按钮，同样可以有两种操作：打开一个内容面板，还是直接执行一个Javascript函数。<pre><code>&lt;ExtensionPoint xsi:type="ContextMenu"&gt;
    &lt;OfficeMenu id="ContextMenuCell"&gt;
        &lt;!-- Define a control that shows a task pane. --&gt;
        &lt;Control xsi:type="Button" id="Button2Id1"&gt;
            &lt;Label resid="Contoso.TaskpaneButton.Label" /&gt;
            &lt;Supertip&gt;
                &lt;Title resid="Contoso.TaskpaneButton.Label" /&gt;
                &lt;Description resid="Contoso.TaskpaneButton.Tooltip" /&gt;
            &lt;/Supertip&gt;
            &lt;Icon&gt;
                &lt;bt:Image size="16" resid="Contoso.tpicon_16x16" /&gt;
                &lt;bt:Image size="32" resid="Contoso.tpicon_32x32" /&gt;
                &lt;bt:Image size="80" resid="Contoso.tpicon_80x80" /&gt;
            &lt;/Icon&gt;
            &lt;Action xsi:type="ShowTaskpane"&gt;
                &lt;SourceLocation resid="Contoso.Taskpane.Url" /&gt;
            &lt;/Action&gt;
        &lt;/Control&gt;
    &lt;/OfficeMenu&gt;
&lt;/ExtensionPoint&gt;

</code></pre><blockquote><p>关于在内容面板中开发以及自定义Javascript函数的开发，我会通过另外一个专题文章来讲解。</p></blockquote><h1>通过清单文件实现多语言支持</h1><p>Office Web Add-in的愿景是希望开发人员一次编写，处处运行——不光是在不同设备都能体验一致地工作，而且在全球都能使用。那么问题来了？如何实现这样的美好愿望呢？这个问题同样分为两个方面：通过清单文件来无代码实现UI层面的多语言支持，以及在Javascript代码中根据当前的环境实现自定义多语言支持。<p>后者相对简单，而且更多的是依赖于开发人员的自定义实现，这里列出来两个非常重要的属性：<ul><li>Office.context.displayLanguage，这个属性能获取到当前Office宿主程序的显示语言。代码范例如下<pre><code>function sayHelloWithDisplayLanguage() {
    var myLanguage = Office.context.displayLanguage;
    switch (myLanguage) {
        case 'en-US':
            write('Hello!');
            break;
        case 'fr-FR':
            write('Bonjour!');
            break;
    }
}

// Function that writes to a div with id='message' on the page.
function write(message) {
    document.getElementById('message').innerText += message; 
}
</code></pre><li>Office.context.contentLanguage，这个属性我觉得很酷，它是能检测当前文档内容的语言，例如是一篇中文的Word文档，还是一个英文的Excel表格。<pre><code>function sayHelloWithContentLanguage() {
    var myLanguage = Office.context.contentLanguage;
    switch (myLanguage) {
        case 'en-US':
            write('Hello!');
            break;
        case 'fr-FR':
            write('Bonjour!');
            break;
    }
}

// Function that writes to a div with id='message' on the page.
function write(message) {
    document.getElementById('message').innerText += message; 
}
</code></pre></li></ul><p>接下来要看一下的是在清单文件中如果定义一些UI层面的多语言支持。目前有如下的属性是支持多语言的。<ol><li>Description，这是Add-in的描述，定义方式如下<pre><code>&lt;Description DefaultValue="ExcelWebAddIn2"&gt;
    &lt;Override Locale="zh-CN" Value="我的插件描述说明......"/&gt;
&lt;/Description&gt;
</code></pre><li>DisplayName，这是Add-in的显示名称，定义方式如下<pre><code>&lt;DisplayName DefaultValue="ExcelWebAddIn2"&gt;
    &lt;Override Locale="zh-CN" Value="我的第二个插件"/&gt;
&lt;/DisplayName&gt;
</code></pre><li>IconUrl，这是Add-in的图标<pre><code>&lt;IconUrl DefaultValue="~remoteAppUrl/Images/Button32x32.png"&gt;
    &lt;Override Locale="zh-CN" Value="~remoteAppUrl/Images/zh-Button32x32.png"/&gt;
&lt;/IconUrl&gt;
</code></pre><li>HighResolutionIconUrl，这是Add-in的高清图标，定义方式如下<pre><code>&lt;HighResolutionIconUrl DefaultValue="~remoteAppUrl/Images/Button32x32.png"&gt;
    &lt;Override Locale="zh-CN" Value="~remoteAppUrl/Images/zh-Button32x32.png"/&gt;
&lt;/IconUrl&gt;
</code></pre><li>Resources，所有针对界面扩展（例如工具栏或者快捷菜单的按钮相关的文字，路径，图片等），定义方式大多如下<pre><code>&lt;bt:String id="Contoso.TaskpaneButton.Tooltip" DefaultValue="Click to Show a Taskpane"&gt;
    &lt;bt:Override Locale="zh-CN" Value="显示一个内容面板"/&gt;
&lt;/bt:String&gt;
</code></pre><li>SourceLocation<pre><code>    &lt;SourceLocation DefaultValue="~remoteAppUrl/Home.html"&gt;
    &lt;Override Locale="zh-CN" Value="~remoteAppUrl/zh-Home.html"/&gt;
    &lt;/SourceLocation&gt;
</code></pre></li></ol><p>关于所有目前支持的语言列表，请参考<p><a href="http://images2017.cnblogs.com/blog/9072/201712/9072-20171211164341602-532309040.png"><img width="568" height="2608" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201712/9072-20171211164342774-885457582.png" border="0"></a><blockquote><p>关于Office Add-in的本地化支持，官方文档在 <a href="https://docs.microsoft.com/en-us/office/dev/add-ins/develop/localization">https://docs.microsoft.com/en-us/office/dev/add-ins/develop/localization</a>。</p></blockquote><h1>其他注意事项</h1><ol><li><p>确保add-in ID是唯一的，这是一个GUID。如果使用Visual Studio开发的话，可以在工具菜单中，找到Create GUID的一个小工具，但也可以通过其他一些方式生成。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createguid.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createguid.png"></a></p><li><p>所有的Url都必须是https的。</p><li><p>所有的图片（例如用在命令按钮上面的图片），都必须是允许缓存，也就是说服务器不能在Header里面添加on-cache/no-store 这样的值。</p><li><p>如果add-in需要发布到Office Store，则必须提供SupportUrl这个属性。</p></li></ol>]]></description></item><item><title>在dotnet core web api中支持CORS（跨域访问）</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/12/04/7975521.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 04 Dec 2017 01:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/12/04/7975521.html</guid><description><![CDATA[<p>最近在写的Office add-in开发系列中，其中有一个比较共性的问题就是在add-in的客户端脚本中访问远程服务时，要特别注意跨域访问的问题。</p> <p><br></p> <p>关于CORS的一些基本知识，请参考维基百科的说明：<a title="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">https://en.wikipedia.org/wiki/Cross-origin_resource_sharing</a></p> <p><br></p> <p>那么，如果我们自己写一个服务，怎么样让他支持CORS呢？我下面用一个例子演示这个过程</p> <p><br></p> <p>1. 使用dotnet new webapi 这个指令创建一个基于dotnet core的项目</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091827404-344163354.png"><img width="244" height="180" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091828357-666254809.png" border="0"></a></p> <p>2.不要做任何修改，直接运行dotnet run</p> <p>3.在浏览器中，输入 <a href="http://localhost:5000/api/values">http://localhost:5000/api/values</a> 查看结果</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091829169-1250027924.png"><img width="244" height="108" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091829810-1017243936.png" border="0"></a></p> <p><br></p> <p>此时我们这个api其实是不支持跨域访问的，我们可以通过下面的免费的工具进行测试</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091830872-179994652.png"><img width="244" height="227" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091831716-693985958.png" border="0"></a></p> <p><br></p> <p>4.通过简单的两句代码即可让这个api支持跨域访问</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091832904-1041680321.png"><img width="244" height="192" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091833732-1632746682.png" border="0"></a></p> <p>请注意，这一行代码需要写在AddMvc之后。</p> <p>然后在需要暴露出来的API Controller上面启用CORS</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091834919-1421486967.png"><img width="244" height="195" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091835872-494702749.png" border="0"></a></p> <p>5. 再次测试，我们就可以发现现在这个API已经支持跨域访问了</p> <p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091837185-1199852432.png"><img width="233" height="244" title="image" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204091837935-1528663504.png" border="0"></a></p><p>6.如果是需要给所有的API，都实现这个功能，那么下面这样的方式可能更加简化</p><p><a href="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204092914357-16445509.png"><img width="244" height="192" title="image" style="display: inline; background-image: none;" alt="image" src="https://images2018.cnblogs.com/blog/9072/201712/9072-20171204092915201-279809800.png" border="0"></a></p><p>7. 如果不想这么复杂，其实在对应的方法里面，显式地修改Response的Headers属性也是可以的。</p><p>Response.Headers.Add("Access-Control-Allow-Origin","*");<p><br></p><p>8. 如果你选择将这个API部署到Azure，而且使用的是 Web App这个服务的话，甚至可以做到更好：代码中不需要定义CORS属性，而是在平台上面定义</p><p><a href="http://images2017.cnblogs.com/blog/9072/201712/9072-20171208201352374-918862266.png"><img width="244" height="137" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2017.cnblogs.com/blog/9072/201712/9072-20171208201353031-906192490.png" border="0"></a></p>]]></description></item><item><title>Office 365 机器人（Bot）开发入门</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904487.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904487.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年7月29日</p></blockquote><h1>前言</h1><p>作为人工智能技术的一个主要的表现形式，这些年机器人（bot）的应用越来越广泛。不管是有实物的，还是纯软件的，现在的机器人技术应该说已经走入寻常百姓家了。这一篇文章探讨的是，在微软提供的Bot Framework基础上快速开发和部署一个软件的机器人，并且将其与 Office 365 或其他应用无缝地整合起来，为用户带来全新的基于会话的人机交互体验。<h4>基本概念</h4><p>本文会用一个实例带领大家入门，如下的几个基本概念稍作说明<ol><li>Bot Framework —— 这是微软提供的一整套工具和服务的集合，它的访问地址是 <a href="https://dev.botframework.com/">https://dev.botframework.com</a> 。它主要包括了
<ul><li>Bot注册和管理、运行服务
<li>多种开发模板和SDK（Bot Builder SDK）以及在线的开发和部署服务（Azure Bot Service）
<li>用于调试的模拟器 （Bot Framework Emulator）
<li>在线的应用商店（Bot Directory）</li></ul><li>Bot —— 这是我们最终开发出来的一个逻辑上的对象，它主要包含了一组API代码，一个描述文件。
<li>Channel —— 上面提到过了，我们开发出来的机器人（Bot）是一个逻辑上的对象，真正与用户交互的，必须要有一个合适的界面，这些界面，如果能跟用户最常用的应用程序整合在一起，则可能是一种更加好的体验。Bot Framework的设计理念是让Bot一次编写，处处能运行，它通过所谓的Bot connector service来连接不同的用户界面。这些用来使用我们Bot的应用程序，我们称之为Channel。目前已经有十几个Channel是受支持的。详情请见：<a href="https://docs.microsoft.com/en-us/bot-framework/portal-configure-channels">https://docs.microsoft.com/en-us/bot-framework/portal-configure-channels</a>.</li></ol><blockquote><p>截至本文发稿，我发现Bot Directory这个服务已经不再接受新的提交了，现在的政策改为Bing Channel来提供服务。</p></blockquote><h1>注册一个Bot</h1><p>要进行Bot开发，你首先需要在Bot Framework中进行注册。你可以使用个人账号（Microsoft Account）和工作账号（Office 365账号）登陆 <a href="https://dev.botframework.com/">https://dev.botframework.com</a>，然后选择“My bots”，进行如下操作完成注册。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createbot.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createbot.png"></a><p>在下面这个页面中，Bot handle是你的bot的标识符，不能包含空格，请保存这个名字，后续会用到。另外，Messaging endpoint此时可以不填。最关键就是要点击“Create Microsoft App ID and password”，并且请保存返回的AppID和Password信息，后续会用到。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createbotdetails.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createbotdetails.PNG"></a><h1>使用Visual Studio 模板进行快速开发</h1><p>目前Bot Framework支持四种开发方式 —— <a href="https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-quickstart">.NET</a>、<a href="https://docs.microsoft.com/en-us/bot-framework/nodejs/bot-builder-nodejs-quickstart">NodeJS</a>、<a href="https://docs.microsoft.com/en-us/bot-framework/azure/azure-bot-service-quickstart">Azure Bot Service（preview）</a>、<a href="https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-connector-quickstart">REST</a>. 基于.NET的开发是在Visual Studio 2017中进行，基于NodeJS的开发则一般在Visual Studio Code完成，后面两种则无需特定的编辑器，在线或者通过文本编辑器即可。<p>限于篇幅，我不会逐个展开，本文的案例将基于Visual Studio 2017和C#来进行演示，而且为了快速进行开发，我们将采用官方提供的模板来进行开发。请下载下面三个模板<ol><li><a href="http://aka.ms/bf-bc-vstemplate">Bot Application</a>,请将这个zip文件放在%USERPROFILE%\Documents\Visual Studio 2017\Templates\ProjectTemplates\Visual C#\下面
<li><a href="http://aka.ms/bf-bc-vscontrollertemplate">Bot Controller</a>，请将这个zip文件放在%USERPROFILE%\Documents\Visual Studio 2017\Templates\ItemTemplates\Visual C#\ 下面
<li><a href="http://aka.ms/bf-bc-vsdialogtemplate">Bot Dialog</a>，请将这个zip文件放在%USERPROFILE%\Documents\Visual Studio 2017\Templates\ItemTemplates\Visual C#\下面</li></ol><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/bottemplate.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/bottemplate.PNG"></a><p>完成上面的操作后，重新打开Visual Studio 2017，我们可以在新建项目的时候看到下面的模板<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createbotcodemonkey.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createbotcodemonkey.png"></a><p>通过模板创建出来的项目，其实是一个标准的ASP.NET Web API项目，其中最关键的两个代码文件如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/botsample.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/botsample.png"></a><p>为了帮助大家快速入门，我在这里暂时不解释代码结构，也不去做任何修改。你现在需要做的是，在web.config中将Bot注册时我提醒你保存的三个信息填写进去。我的例子信息如下：<pre><code>&lt;appSettings&gt;
    &lt;!-- update these with your BotId, Microsoft App Id and your Microsoft App Password--&gt;
    &lt;add key="BotId" value="codemonkeybot" /&gt;
    &lt;add key="MicrosoftAppId" value="89403745-7fe4-453a-ae0a-e53caf84866b" /&gt;
    &lt;add key="MicrosoftAppPassword" value="7LLQHqUYYWU72dY3c6OvBG4" /&gt;
&lt;/appSettings&gt;

</code></pre><p>完成这些之后，你就可以按下F5键进行调试了，如果不出意外的话，你将看到浏览器被打开并显示如下的页面<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/botsampledebug.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/botsampledebug.png"></a><p>那么，这有什么用呢？目前来说，确实还看不出有什么用。因为现在来说，我们还只是构建了Bot中的服务部分，并没有将其与对应的Channel连接起来，所以也就没有用户界面来进行调用它。<p>事实上我们还不要那么着急，在真正去跟Channel绑定之前，建议在本地进行测试和调试。为此，Bot Framework中很贴心地为开发人员准备了一个模拟器，下一节我将介绍如何使用它。<h1>使用Bot Framework 模拟器进行本地测试</h1><p>首先，你需要通过<a href="https://github.com/Microsoft/BotFramework-Emulator/releases">https://github.com/Microsoft/BotFramework-Emulator/releases</a> 下载和安装最新版本的模拟器。<blockquote><p>值得注意的是，这个模拟器可以在PC,Mac上面运行。</p></blockquote><p>打开模拟器，并且输入服务地址，和应用ID及密钥后，点击“Connnect”按钮<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/botframeworkemulator.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/botframeworkemulator.png"></a><p>确保在右侧的"Log"中看到的返回信息是 “-&gt; POST 200 [conversationUpdate] ”，这个就表示连接成功了。然后我们在左下角的文本框，可以随便输入一些文字，点击回车后模拟器会将信息包装起来，发送给后台服务，正常情况下我们会很快看到Bot的回复文本。我的范例如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/botframeworkemulator2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/botframeworkemulator2.png"></a><p>在这个标准模板中，机器人（Bot）只是很简单地将用户发送过来的指令原封不动地返回给用户，并没有做任何实质性的工作。但其实，这已经是一个很好的起点了，我们至少确保机器人正确地收到了指令，至于如何根据这些指令进行响应，可以在下一步来完善。<p>通过Bot Framework模拟器进行本地测试和调试的好处是，可以直接在Visual Studio中设置断点，一步一步地调试，便于发现和解决问题。<h1>将Bot应用部署到Azure App Service</h1><p>在完成本地的开发和测试后，下一步是需要将我们开发好的API Service发布到一个合适的生产环境，以便其他用户能够访问到这个服务。这个API Service是一个标准的ASP.NET项目，你可以自行选择合适的托管环境，只要有IIS并且支持.NET Framework 4.6的Windows Server就可以。我这里演示的是，如何将这个应用部署到Azure 的App Service中，这是Azure 提供的PaaS服务，它可以将很多运行环境的细节隐藏掉，开发人员不需要关注操作系统和IIS怎么安装，负载均衡怎么做等基础性工作，而是将全部精力集中在应用开发上面。关于Azure App Service的更多细节，已经超出了本文的范畴，有兴趣的朋友可以直接参考 <a href="https://azure.microsoft.com/en-us/services/app-service/">https://azure.microsoft.com/en-us/services/app-service/</a>.<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createazureappservice.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createazureappservice.PNG"></a><p>在App Service的Overview页面中，点击”Get publish profile“<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/createazureappservice2.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/createazureappservice2.PNG"></a><p>在Visual Studio中，停止调试，然后选中项目，在右键菜单中选择“Publish”，在属性页面中，选择“Import Profile”<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeypublish.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeypublish.PNG"></a><p>Visual Studio会自动对项目进行编译并且完成第一次发布，如果一切顺利的话，你将很快看到一个新打开的浏览器窗口<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeypublish2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeypublish2.png"></a><p>请注意浏览器中的地址<a href="http://codemonkeybot.azurewebsites.net/">http://codemonkeybot.azurewebsites.net/</a>,你可以换成 <a href="https://codemonkeybot.azurewebsites.net/">https://codemonkeybot.azurewebsites.net/</a> 也是能正常工作的，这其实是Azure App Service的一个福利，所有部署到App Service的应用，都默认拥有https访问的功能，不需要自己去申请证书。要知道，在生产环境使用Bot的时候，我们是强烈推荐https的。<p>看起来跟本地也没有什么不一样，对吗？这不是重点。我们接下来要完成一系列的配置，使这个Bot真的能在一些常见的Channel中运行起来。<p>使用Azure App Service，你可以专注应用开发，在Visual Studio中做了代码修改之后，只需要再次发布即可。<h1>与Microsoft Teams进行集成</h1><p>我们前面完成了几个关键步骤，包括Bot注册，Bot应用开发和发布，接下来是时候让它实际地为我们的用户进行服务了。<p>首先，我们需要修改Bot的注册信息，让它使用我们上面提到的Azure App Service来提供服务。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeybot.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeybot.PNG"></a><p>保存设置后，你可以在当前页面完成测试，确保其能正常工作<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeytest.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeytest.PNG"></a><p>现在，万事俱备，只欠东风了。我需要隆重给大家介绍Office 365家族中的新成员——Microsoft Teams。它是一款全新的以聊天为基础的协作沟通工具，整合了Office 365的很多服务，并且作为Office 365的一站式前端应用为用户提供了聊天，团队和项目协作，会议等功能。<p>Microsoft Teams既提供了桌面端应用，网页应用，也提供了移动端应用，关于它的更多细节，请有兴趣的朋友参考 <a href="https://teams.microsoft.com/">https://teams.microsoft.com</a>。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsofteams.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsofteams.png"></a><p>接下来我们重点来看一下，如何将此前配置好的Bot与Teams连接起来，让Teams的用户可以愉快地跟它对话起来。<p>在Bot的设置页面，点击“CHANNELS”按钮，可以看到默认情况下连接好了两个Channel，一个是Skype（这是针对个人的一个即时通讯服务，由微软提供），另外一个是Web Chat，这是支持在任意的网页应用程序中，通过iframe的方式嵌入这个Bot，相当实用。<p>接下来我们要做的是，在下方“Add a channel”的列表中选择“Microsoft Teams”的图标，将其加入当前这个Bot的Channel中来。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeychannel.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeychannel.PNG"></a><p>完成配置后，在新的Channel列表中点击“Microsoft Teams” 这个链接<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeychannel2.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeychannel2.PNG"></a><p>它会要求打开Microsoft Teams客户端，并且会自动将这个Bot添加到你的联系人列表中来。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/codemonkeyonteams.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/codemonkeyonteams.PNG"></a><p>如果你想邀请你的同事也添加这个Bot进行测试，那么你需要做的是将注册Bot时获得的App Id（通常是一个GUID字符串，例如我的Code Monkey的ID是 89403745-7fe4-453a-ae0a-e53caf84866b，欢迎大家添加 ）提供给他（她），然后他们可以在Microsoft Teams中通过这个ID找到你的Bot，将其添加为好友后即可开始聊天了。<p>使用ID来搜索当然不会是很友好的一个体验，如果你希望将你的Bot让更多的人使用到，而且希望直接用Bot的名字来搜索到，这个过程可能略微复杂一些，请参考 <a href="https://msdn.microsoft.com/en-us/microsoft-teams/submission">https://msdn.microsoft.com/en-us/microsoft-teams/submission</a> 了解详细信息。<p>另外，作为Office 365用户而言，大家可能对 Skype for Business 也是很熟悉的。Bot Framework目前也支持Skype for Business的整合，这个操作需要Office 365管理员才能完成，具体操作细节请参考 <a href="https://msdn.microsoft.com/en-us/skype/skype-for-business-bot-framework/docs/overview">https://msdn.microsoft.com/en-us/skype/skype-for-business-bot-framework/docs/overview</a><h1>扩展开发提示</h1><p>看起来还不错，不是吗？现在开发一个机器人，真的不再是一件非常难的事情，我并不是说你通过这篇文章就能开发出来很酷的机器人，但至少你能快速开始，并且你可以看到Bot Framework已经帮助我们将基础架构做得非常完善了，你唯一需要去花心思的是，具体你的这个机器人要提供什么服务，以及以什么样的交互形式提供等等。这些内容跟具体的业务场景有关，显然超出了本文的范畴，但我这里很乐意给大家提供一些思路和参考链接。<ol><li>Bot开发的一些原则 <a href="https://docs.microsoft.com/en-us/bot-framework/bot-design-principles">https://docs.microsoft.com/en-us/bot-framework/bot-design-principles</a><li>为Bot添加更多智慧，如何跟微软认知服务整合 <a href="https://docs.microsoft.com/en-us/bot-framework/cognitive-services-bot-intelligence-overview">https://docs.microsoft.com/en-us/bot-framework/cognitive-services-bot-intelligence-overview</a><li>如何设计交互和会话流 <a href="https://docs.microsoft.com/en-us/bot-framework/bot-design-conversation-flow">https://docs.microsoft.com/en-us/bot-framework/bot-design-conversation-flow</a></li></ol><h1>结语</h1><p>本文通过一个实例介绍了基于Bot Framework的 Office 365 机器人开发流程，在人工智能的大背景下，这是一个很好的机遇：一方面可以为Office 365用户带来全新的基于对话的体验，另外最重要的是业务应用可以更加自然地与Office 365这样的平台实现融合，结合微软的认知服务则可以将机器人的智慧水平提升到一个新的高度，这些创新（虽然说还有改进空间）是看得见的生产力，也将对我们日后的人机交互形式产生深远的影响。]]></description></item><item><title>人工智能背景下的Office 365现状和发展趋势</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904477.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904477.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年7月31日</p></blockquote><h1>引子</h1><p>谈论人工智能是让人兴奋的，因为它具有让人兴奋的两大特征 —— 每个人都似乎知道一点并且以知道一点为荣，但又好像没多少人能真正讲的明白。毫无疑问，我也仅仅是知道一点点，这一篇文章试图想通过比较接地气的方式给一部分人讲明白。这还得说要感谢这样一个时代，换做是几年前我是绝不敢造次的 —— 那时虽然人工智能并不稀奇，但大抵都是王谢堂前的燕儿，而如今随着技术的发展，人工智能不再高不可攀，变得和我们日常工作生活密切相关、看得见摸的着了。<p>人工智能已经从一个概念，到原型实践，到现在的产业化，甚至前不久国务院还专门印发了“<a href="http://www.gov.cn/zhengce/content/2017-07/20/content_5211996.htm">新一代人工智能发展规划</a>”，所以从这个意义上说，我写这篇文章不仅恰逢其时，并且在政治上非常正确了。<blockquote><p>和很多"突然"成为热点的技术一样，人工智能在坊间也流传着一些真假难辨的传奇故事，例如下面这一则：</p></blockquote><pre><code>客户：我想做一个人工智能项目，你给我做个方案吧？
销售：做人工智能干啥？我看现在也不太成熟，不如做个大数据项目先吧。
客户：我也不懂它能干啥，我手头有3000万的预算还没有用完。
销售：哎呀，你怎么不早说呢？那我们就来做一个3000万的人工智能项目吧。
</code></pre><h1>微软人工智能，增强人类智慧</h1><p>人工智能到底是指什么？下面先来看一段维基百科的<a href="https://zh.wikipedia.org/zh-hans/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">定义</a><blockquote><p>人工智能的定义可以分为两部分，即“人工”和“智能”。“人工”比较好理解，争议性也不大。有时我们会要考虑什么是人力所能及制造的，或者人自身的智能程度有没有高到可以创造人工智能的地步，等等。但总括来说，“人工系统”就是通常意义下的人工系统。 关于什么是“智能”，就问题多多了。这涉及到其它诸如意识（consciousness）、自我（self）、心灵（mind），包括无意识的精神（unconscious mind）等等问题。人唯一了解的智能是人本身的智能，这是普遍认同的观点。但是我们对我们自身智能的理解都非常有限，对构成人的智能必要元素的了解也很有限，所以就很难定义什么是“人工”制造的“智能”了。因此人工智能的研究往往涉及对人智能本身的研究。其它关于动物或其它人造系统的智能也普遍被认为是人工智能相关的研究课题。 人工智慧目前在计算机领域内，得到了愈加广泛的发挥。并在机器人、经济政治决策、控制系统、仿真系统中得到应用。</p></blockquote><p>这是一个透过现象看本质的定义，但并不是那么好理解。反过来，如果我们从本质出发看现象，也就是用大白话来说 :人工智能的核心是算法，基础是数据，表现形式为机器人或类机器人应用程序。几乎可以肯定的是，算法会越来越复杂，属于真正的高科技领域；而应用程序这一端则会越来越简单，以后也许中小学生都能做自己的机器人程序。<p>微软在人工智能这个领域一直在投入研究资源，并且在2016年9月份专门成立了“微软人工智能与研究事业部”，由微软全球执行副总裁、技术与研发部门主管沈向洋博士领导。与此同时，微软与其他4家科技巨头亚马逊、谷歌、Facebook和IBM还共同成立了AI联盟，用以推动公众对人工智能技术的理解。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftaipriciple.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftaipriciple.PNG"></a><p>微软人工智能的目的是增强人类智慧，在今年的<a href="https://blogs.microsoft.com/blog/2017/05/10/microsoft-build-2017-microsoft-ai-amplify-human-ingenuity/#sm.0000pp7q6tmuke8uvy11u462jmkcy">Build大会</a> 上，沈向洋博士用更加清晰和具体的行动计划诠释了这一点。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftai.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftai.png"></a><p>微软将通过如下两个方面来实现这一目标<ol><li><strong>Bringing AI to every developer</strong> —— With Microsoft Cognitive Services, developers can build apps that recognize gestures, translate text in multiple languages, deconstruct video for quicker search, editing and real-time captioning, and even customize data to recognize images in categories most important to customers.
<li><strong>Redefining Microsoft with AI</strong> —— We are infusing AI into every product and service we offer, from Xbox to Windows, from Bing to Office.</li></ol><p>而如果想进一步了解这方面的细节，我强烈推荐大家阅读微软亚洲研究院院长洪小文博士在“二十一世纪的计算”学术研讨会所做的报告<a href="https://www.leiphone.com/news/201611/jVCnhaDqAUnU5kt7.html?viewType=weixin">《Co-Evolution of Artificial Intelligence and Human Intelligence —— 人工智能和人类智能的 “共进化”》</a>，这个报告非常具体、生动地给我们展示了人工智能的三个能力（视觉识别，自然语言理解，数据分析）和智能的四个阶段（功能，智能，智力，智慧）。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/hongxiaowen.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/hongxiaowen.PNG"></a><h1>微软人工智能总体框架和战略</h1><p>通过下面一张图可以全面了解微软的人工智能总体框架和战略：智能来自于数据，服务于决策。 </p><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftaimap.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftaimap.PNG"></a></p><p>如果再用大家更加喜闻乐见的产品或服务来介绍，则可以分为下面四个方面<p><br><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftaifourpoint.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftaifourpoint.PNG"></a><ol><li><p>大多数人看到人工智能的威力，都是从一些数字化助手开始的。微软目前有严肃活泼的私人工作助理<strong>小娜（cortana）</strong>，也有集智慧和美貌于一身的<strong>小冰</strong>，以及辅助学习英语的<strong>小英</strong>。有关小娜的详细介绍，请参考 <a href="https://www.microsoft.com/zh-cn/windows/Cortana">https://www.microsoft.com/zh-cn/windows/Cortana</a>，小冰和小英请在微信公众号中搜索添加。</p><li><p>数字化助手毕竟是有限的几个，更加广阔的场景则会出现在应用程序这个大类别中，这也是前面提到的“Redefining Microsoft with AI”的具体体现。<strong>Windows</strong>，<strong>Office 365</strong>等核心应用程序都将极大地增强智能水平，以便更好地帮助用户聪明地工作和生活。有关Office 365的基本情况，请参考 <a href="https://products.office.com/zh-CN/">https://products.office.com/zh-CN/</a>。</p><li><p>而不管是数字化助手，还是微软的应用程序，他们的人工智能的能力都来自于目前已经初具规模的<strong>微软认知服务</strong>，它基本囊括了<strong>听说读写看</strong>的常规能力，以及一部分理解能力。（这些在我们看来还是属于常识层面的，也就是洪小文博士提到的功能，和一点点智能的层次）。但是，这是一个很好的起点，更重要的是，广大的开发人员可以站在微软的肩膀上，结合自己的业务需求，开发自己的人工智能应用。这是“Bringing AI to every developer”的承诺和输出。有关认知服务的详细介绍，请参考 <a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/">https://azure.microsoft.com/zh-cn/services/cognitive-services/</a>。</p><li><p>最后，使用<strong>微软智能云（Azure）</strong>，不管是与物联网结合的IoT套件，还是大数据量的存储和处理，以及应用开发和运营一体化等，可以为你的人工智能应用提供可靠、强大的支撑。了解Azure的基本情况，请参考 <a href="https://www.azure.com/">https://www.azure.com</a> 和 <a href="https://www.azure.cn/">https://www.azure.cn</a> 。</p></li></ol><h1>Office 365已经具有的AI能力</h1><p>接下来给大家介绍的是，Office 365目前已经具备的人工智能（AI）能力。Office 365在全球范围内目前每月活跃用户超过1亿，在数字化转型的时代，无论是对于客户及用户而言，还是对于微软来说，都是极为重要的一个生产力服务平台。沈向洋博士在履新不久接受专访时提到，微软的人工智能部门将投入大量的资源，在近一两年内会为Office 365的智能水平提升到一个新的级别。在近半年多来，我们已经看到Office 365的很多创新功能，并且有理由相信这仅仅是一个开始。<ol><li><p><strong>Cortana with Office 365</strong><p>前面已经提到Cortana 是 Windows 10 设备上的个人信息助理。Windows 10 中的 Cortana 非常适合你快速查看日程安排，了解你的第一个会议的时间和地点，大致了解适当的差旅时间或甚至从你的日历中获取更新以了解未来的行程。Cortana 在连接到 Office 365 时更加出色，其能力得到增强，可帮助你准备会议、了解与你共事的人员并提醒你接下来要去的地方，以防你迟到。详情请见 <a href="https://support.office.com/zh-cn/article/Cortana-integration-with-Office-365-7257cb50-0d5c-4f7a-ac2e-9fe5d13bb5cb">https://support.office.com/zh-cn/article/Cortana-integration-with-Office-365-7257cb50-0d5c-4f7a-ac2e-9fe5d13bb5cb</a> 和 <a href="https://docs.microsoft.com/zh-cn/windows/configuration/cortana-at-work/cortana-at-work-o365">https://docs.microsoft.com/zh-cn/windows/configuration/cortana-at-work/cortana-at-work-o365</a></p></li></ol><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/cortana-o365-screen.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/cortana-o365-screen.png"></a><ol><li><p>管理员可以在Office 365管理中心控制是否允许Cortana访问组织中用户的数据 </p><li><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/office365admincortanasettings.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/office365admincortanasettings.PNG"></a><p>而最终还需要得到用户的授权才可以完成Cortana的连接，充分保证用户的隐私</p><li><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/cortana-connect-o365.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/cortana-connect-o365.png"></a></p><li><p>Cortana目前不光是在桌面的Windows 10中运行，据我所知，它还深度整合在其他一些设备——例如无人驾驶的控制台中。我虽然不太了解无人驾驶技术，但在这样一个全新的现代办公空间中，有Cortana，有Office 365，你工作相关的信息都可以一览无余，随时得到反馈，并且通过全新的对话交互方式掌控一切，想一想都是很美的事情吧。而这已经是现实的案例了，如果有兴趣的话，请参考宝马汽车的故事 <a href="http://www.bmwblog.com/2017/01/05/microsoft-cortana-coming-bmw-cars/">http://www.bmwblog.com/2017/01/05/microsoft-cortana-coming-bmw-cars/</a></p></li><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/cortanabmw.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/cortanabmw.PNG"></a></p><li><p><strong>Tell me</strong> —— 重新定义Office应用交互方式<p>这是一个看起来不太起眼的小功能，但我觉得未来可能影响深远，因为它也代表了Office应用程序一种新的交互方式。我们都知道Office应用程序（Word，Excel，PowerPoint等）的功能非常强大，这个当然是好事情，但另外一方面来看，也造成用户一定的学习成本 —— 怎么样让用户找到他想要的功能呢？在Office 2003及以前的版本，用户的界面是一级一级的菜单；而从Office 2007开始，产品组设计了全新的Modern UI（Ribbon），将易用性提高了一个级别。但这种做法的局限性仍然是存在的，因为屏幕的尺寸总是有限的。<p>现在，Office 365用户使用这些最新版的Office客户端应用程序的时候，将拥有一个全新的体验——你再也不需要记住你所要的功能在哪个菜单下面，或者那个Tab里面，取而代之的是你可以在一个固定的位置，用自然语言查找所需要的功能。你只需按下ALT+Q 这个快捷键，然后输入想要做的事情，Office 应用程序会聪明地理解你的想法，并且告诉你用什么功能来实现。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/tellme.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/tellme.PNG"></a><p>目前这个功能支持文字输入，但其实如果设备支持的话，用户完全可以用语音来发出指令即可快速找到自己想要的功能，甚至完成后续的操作。这个功能的关键在于自然语言的理解能力。进一步说，如果这个接口能开放出来，让开发人员可以进行扩展，那将是一个革命性的进步。</p><li><p><strong>Word</strong> —— Editor, Tap，Research，Smart Lookup<p>毫无疑问，Word是世界上最好的字处理软件之一。尽管如此，微软还在不断地创新。最新版本的Word编辑器具有非常智能的特性，可以在你写作的时候提供及时反馈，纠正拼写错误是最基本的，它甚至可以帮助你提供更好的书写建议。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/4aaeb110-eef7-4317-924c-b1ae395ed356.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/4aaeb110-eef7-4317-924c-b1ae395ed356.png"></a><p>在2016年10月份，Office 365用户拥有一个全新的功能—— Tap（Insert Document Item），它允许在不离开Word的情况下查找本地文件夹、个人网盘，团队工作区中的文档内容，并且可以按需将一些感兴趣的片段插入到文档中来。关于这项功能的详细说明，请参考 <a href="https://support.office.com/en-us/article/Find-and-use-the-content-you-need-when-you-need-without-leaving-Word-860118fc-1f61-41f6-922f-40084a284658?ui=en-US&amp;rs=en-US&amp;ad=US">https://support.office.com/en-us/article/Find-and-use-the-content-you-need-when-you-need-without-leaving-Word-860118fc-1f61-41f6-922f-40084a284658?ui=en-US&amp;rs=en-US&amp;ad=US</a><blockquote><p>这个功能不是Word独有的，Office 365用户在使用Outlook编写邮件的时候，也可以拥有同样的全新体验。</p></blockquote><p>Tap这个功能可以通过如下的菜单访问到<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/adee35b5-8880-4a56-bd4e-e2fd1d670004.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/adee35b5-8880-4a56-bd4e-e2fd1d670004.png"></a><p>然后可以在下面的面板中进行搜索<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/be5d637d-1053-456a-a78b-e0e2c0aa53d2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/be5d637d-1053-456a-a78b-e0e2c0aa53d2.png"></a><p>另外一个很有用的功能（Researcher），一看名字就知道是研究人员的最爱。它可以在你撰写研究材料的时候，在不离开Word的情况下，在线搜索网络上面公开可以被引用的资源(由Bing提供学术搜索支持），然后将其片段插入到当前文档中，并自动生成引用等信息。关于这项功能的详细信息，请参见 <a href="https://support.office.com/en-us/article/Research-for-your-paper-easily-within-Word-1728f286-8702-4d72-8169-ab7677ca0e1f">https://support.office.com/en-us/article/Research-for-your-paper-easily-within-Word-1728f286-8702-4d72-8169-ab7677ca0e1f</a><p>你可以在References这个Tab中找到该功能<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/0ec19e1d-28ba-451f-96be-c1f0bc9ab58e.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/0ec19e1d-28ba-451f-96be-c1f0bc9ab58e.png"></a><p>它的基本使用效果如下<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/9543982c-5a2a-4109-8865-b40d51f09165.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/9543982c-5a2a-4109-8865-b40d51f09165.png"></a><p>Smart Lookup则是另外一项基于Bing提供的搜索服务,相比较Researcher而言，它提供的见解会更加广。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/d8c77a4f-0834-4a6b-b5be-3fc551a8c2d2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/d8c77a4f-0834-4a6b-b5be-3fc551a8c2d2.png"></a></p><li><p><strong>Excel</strong> —— PowerMap，PowerPivot，PowerView系列工具<p>Excel作为一个专业的数据及分析工具，它在商业智能——Business Intelligence（BI）有颇多建树，但目前在人工智能——Artificial Intelligence（AI）方面的应用还不太多。<blockquote><p>Smart Lookup和Tell me这两项是属于通用功能,在Excel中也能使用。</p></blockquote><p>请关注Excel的BI系列工具<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdin.png"></a><p>PowerMap是一个3D 的图形化展示工具，可以基于多种不同的数据源进行呈现<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/8463.Power-Map-for-Excel.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/8463.Power-Map-for-Excel.png"></a></p><li><p><strong>PowerPoint</strong> —— Zoom，Morph，Designer，Translator<p>和很多人一样，我一直以来只能算是PowerPoint的初级用户，并不擅长制作既有Power又有Point的材料，而且作为一个理工男很难看到这方面能有所改善的迹象。谢天谢地，我终于等来了PowerPoint的这一代产品，它的四个新功能我都很喜欢，甚至可以说是爱不释手了。<p>Zoom（中文翻译为缩放），可以快速帮助我们建立PowerPoint的骨架，并且可以自动实现转场效果。典型情况来说，我们的一个演示文稿通常都应该有一个大纲，每个大纲的题目又对应了几个细节展开的页面，而每切换到一个大纲题目的时候，为了给观众知道当前所处的位置，我们通常会复制大纲页面，然后手工地做一个转场。这的确不难，但比较繁琐。现在有了Zoom，一切都很简单。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/07fa3f3c-d1e7-4756-842a-91e25197f7d3.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/07fa3f3c-d1e7-4756-842a-91e25197f7d3.png"></a><p>Zoom 的详细介绍请参见<a href="https://support.office.com/en-us/article/Use-Zoom-for-PowerPoint-to-bring-your-presentation-to-life-9d6c58cd-2125-4d29-86b1-0097c7dc47d7?ui=en-US&amp;rs=en-US&amp;ad=US">https://support.office.com/en-us/article/Use-Zoom-for-PowerPoint-to-bring-your-presentation-to-life-9d6c58cd-2125-4d29-86b1-0097c7dc47d7?ui=en-US&amp;rs=en-US&amp;ad=US</a>, 这里还有中文介绍 <a href="http://mp.weixin.qq.com/s?__biz=MzAwNzA3NjAzNw==&amp;mid=303874520&amp;idx=1&amp;sn=ed7d11854ec75380ca540d18e397753b&amp;scene=19#wechat_redirect">http://mp.weixin.qq.com/s?__biz=MzAwNzA3NjAzNw==&amp;mid=303874520&amp;idx=1&amp;sn=ed7d11854ec75380ca540d18e397753b&amp;scene=19#wechat_redirect</a><p>Zoom解决的是整个演示文档的纲举目张的问题，而Morph（中文翻译为变体）则是专注于页面之间的平滑切换，通过一两次点击就可以实现以往我们可能要用专业级软件才能实现的动画转场效果，让你的演示文档不再枯燥乏味。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/7fff9dd3-3792-4ce7-9f9f-99dacacc10fb.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/7fff9dd3-3792-4ce7-9f9f-99dacacc10fb.png"></a> <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/7dbd43a5-95ab-4986-a272-84a8f56710e4.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/7dbd43a5-95ab-4986-a272-84a8f56710e4.png"></a><p>Morph 的详细介绍请参见 <a href="https://support.office.com/en-us/article/Use-the-Morph-transition-in-PowerPoint-8dd1c7b2-b935-44f5-a74c-741d8d9244ea?ui=en-US&amp;rs=en-US&amp;ad=US">https://support.office.com/en-us/article/Use-the-Morph-transition-in-PowerPoint-8dd1c7b2-b935-44f5-a74c-741d8d9244ea?ui=en-US&amp;rs=en-US&amp;ad=US</a><p>接下来的Designer（中文翻译为设计器）则更进一步，它可以根据页面内容（如文字，图片等）自动给出多种设计建议，用户要做的只是选择其中一条建议即可。我必须承认，自动用了这个Designer的功能后，我再也不怕做演示文稿了，我只需要专注于要展现的内容即可，至于展现形式它会帮我搞定，而且我发现用了它之后，我的演示文档的体积也能大幅减小（相比较之前用一些模板的情况），至于这其中的缘由我也做了一些研究，后续再找个机会单独分享。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/fbf62655-9fa4-48e9-889a-bee7f883f9e8.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/fbf62655-9fa4-48e9-889a-bee7f883f9e8.png"></a><p>Designer的详细介绍请参见<a href="https://support.office.com/en-us/article/About-PowerPoint-Designer-53c77d7b-dc40-45c2-b684-81415eac0617?ui=en-US&amp;rs=en-US&amp;ad=US">https://support.office.com/en-us/article/About-PowerPoint-Designer-53c77d7b-dc40-45c2-b684-81415eac0617?ui=en-US&amp;rs=en-US&amp;ad=US</a><p>好，用了Zoom，Morph，Designer，我担保你做出来的演示文稿水准可以上一个明显的台阶，但接下来的问题是如何交付出去，也就是说最后一公里的问题。我曾经遇到这样的情况：我精心准备的一份材料（当然是用中文写的），因为要给不同的客户去讲，所以就需要做多个语言版本，这个翻译工作很费时间，这么多个版本的材料也很难维护，甚至针对不同客户的讲解都需要请到不同的同事去讲。当然，世界是多姿多彩的，这本身很好，但这个要为不同语言准备不同的材料的状况也许有望得到彻底的改变，因为我们现在有专门用于PowerPoint的翻译利器 —— Presentation Translator。你可能不会想到，这居然是微软的一个内部车库项目的成果，不过没关系的，尽情享用它就好了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerpointtranslatorsetup.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerpointtranslatorsetup.png"></a><p>下面一个例子就是演讲者用英语，自动显示西班牙语的字幕<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/Garage-Screenshot-1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/Garage-Screenshot-1.png"></a><p>Presentation Translator 的详细介绍和安装说明请参见 <a href="https://translator.microsoft.com/help/presentation-translator/">https://translator.microsoft.com/help/presentation-translator/</a></p><li><p><strong>Outlook</strong> —— focus Inbox、Tap<p>邮件是现代生活的一个基石，时至今日它也成为商业活动所必不可少的一部分，全球每分钟发送的邮件都数以亿计。这样就会带来另外一个问题：邮件过多很可能会造成我们的工作受到干扰，而不是得到帮助，而如果你不幸遭受了垃圾邮件的攻击，那其中的痛苦是一定会让你记忆深刻的。（当然，如果使用Office 365的邮件服务，你将基本与垃圾邮件无缘）。<p>应对邮件过多的挑战，虽然有一定的方法，例如我在2008年就写过这方面的文章，提到过<a href="http://www.cnblogs.com/chenxizhang/archive/2008/10/07/1305456.html">3D筛选法</a>. 但这里面的关键还是要知道哪些邮件是重点关心的，而另外一些则可以在空闲时间再翻看。<p>Office 365用户使用最新的Outlook，它会使用一定的算法自动地帮助你将邮件分为两类，一类是重要的，一类是普通的。这个功能就叫Focus Inbox（重点邮箱）。当然，除了内置的算法，你可以手动地通过一些行为告诉Outlook哪些是你所认为的重要邮件。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/focusedinbox.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/focusedinbox.PNG"></a><p>关于重点邮箱的原则和更多信息，请参考 <a href="https://support.office.com/zh-cn/article/Outlook-%E7%9A%84%E9%87%8D%E7%82%B9%E6%94%B6%E4%BB%B6%E7%AE%B1-f445ad7f-02f4-4294-a82e-71d8964e3978?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN">https://support.office.com/zh-cn/article/Outlook-%E7%9A%84%E9%87%8D%E7%82%B9%E6%94%B6%E4%BB%B6%E7%AE%B1-f445ad7f-02f4-4294-a82e-71d8964e3978?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN</a><p>关于Outlook中的Tap（Insert Document Item）的功能，此前在Word的那个小节已经介绍。你可以通过下图管中窥豹。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/outlooktap.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/outlooktap.png"></a></p><li><p><strong>Delve</strong> —— My Analytics, Workplace Analytics，Discovery<p>Delve是Office 365用户专享的一个服务，而且目前只有云端的版本。你可以通过 <a href="https://delve.office.com/">https://delve.office.com</a> 直接访问到该项服务，或者也可以通过Delve 的移动App进行操作。<p>Delve 为你显示 Office 365 中的个性化内容（OneDrive for Business、SharePoint、Exchange 和 Yammer 等）。Delve 基于 Microsoft Graph 实现，能根据正在处理的工作以及与你合作的人员为你显示信息，并始终保持已具有的权限。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/ac83d942-0ecb-420c-b1d0-3ad05f81ac54.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/ac83d942-0ecb-420c-b1d0-3ad05f81ac54.png"></a><p>关于Delve的入门介绍，请参见<a href="https://support.office.com/zh-cn/article/%e4%bb%80%e4%b9%88%e6%98%af-Office-Delve%ef%bc%9f-1315665a-c6af-4409-a28d-49f8916878ca?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN">https://support.office.com/zh-cn/article/%e4%bb%80%e4%b9%88%e6%98%af-Office-Delve%ef%bc%9f-1315665a-c6af-4409-a28d-49f8916878ca?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN</a><p>关于如何在组织内部启用 Delve 以及了解Delve如何使用你的数据 ，请参见 <a href="https://support.office.com/zh-cn/article/%E9%9D%A2%E5%90%91-Office-365-%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84-Office-Delve-54f87a42-15a4-44b4-9df0-d36287d9531b">https://support.office.com/zh-cn/article/%E9%9D%A2%E5%90%91-Office-365-%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84-Office-Delve-54f87a42-15a4-44b4-9df0-d36287d9531b</a><p>Delve不仅仅了解你及周围的同事所做的事情（在得到你的许可的情况下），还能为你提供基于你的工作的数字化分析，乃至为团队或者整个组织提供生产力方面的统计分析，帮助我们更好地了解时间到底去哪了。<p>MyAnalytics帮助您了解如何进行通信和花费在工作时间。设置您自己的目标，并让MyAnalytics度量进度。<p>你看到的某些信息基于其他同你一样已打开 MyAnalytics 的人员正在做的事。例如，组织中人员花费在会议上的平均时间，或者组内成员阅读你的电子邮件的及时程度。隐私对我们而言非常重要，而 MyAnalytics 只显示满足最小大小的组的相关信息，并且为了保护用户隐私，不按姓名标识用户。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/MyAnalytics.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/MyAnalytics.jpg"></a><p>MyAnalytics 还有一个<a href="https://support.office.com/zh-cn/article/Microsoft-MyAnalytics-Outlook-%e5%8a%a0%e8%bd%bd%e9%a1%b9-e305ae2d-6f16-4688-b2b0-487c4c2d067b?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN">Outlook插件</a>可供使用<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/3aadbd39-cb17-4e80-a991-d0a308c3060a.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/3aadbd39-cb17-4e80-a991-d0a308c3060a.png"></a><p>今年7月份正式推出的Workplace Analytics则为管理者提供了全新的视角了解团队和组织的工作效率，为改善工作环境提供见解。详情请参考 <a href="https://blogs.office.com/en-us/2017/07/05/transform-your-organization-with-microsoft-workplace-analytics/">https://blogs.office.com/en-us/2017/07/05/transform-your-organization-with-microsoft-workplace-analytics/</a>。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/Transform-your-organization-with-Microsoft-Workplace-Analytics-2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/Transform-your-organization-with-Microsoft-Workplace-Analytics-2.png"></a><blockquote><p>Delve目前暂时还没有出现在Office 365的国内版本中</p></blockquote><li><p><strong>Skype for Business</strong> —— EDI（Enterprise Deep Intelligence）<p>Skype for Business是Office 365中的沟通套件，它提供了一对一的对话（支持文字，语音，视频等多种形式），以及高清音视频会议，以及现代化的PBX解决方案。EDI（Enterprise Deep Intelligence）这个2015年开始的研究项目，其主要目的是以简单聪明地解决“预定会议室”这件事情为入口，进行企业级别深度智慧应用及其研究。<p>关于EDI的详细介绍，请参见 <a href="https://www.microsoft.com/en-us/research/project/enterprise-deep-intelligence/">https://www.microsoft.com/en-us/research/project/enterprise-deep-intelligence/</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/editeam.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/editeam.png"></a><p>经过近两年的发展，EDI目前已经包括了多项功能，预定会议是我最常用的功能，除此之外还比较喜欢第四项功能<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/edidetails.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/edidetails.png"></a><p>目前这个项目的成果已经在微软公司内部推广使用，并且在少量的客户中进行了部署（由微软企业服务部提供服务）。从形式上来说，EDI其实就是一个机器人，而它后台使用的技术，很有可能就是认知服务早期的版本。</p><li><p><strong>Microsoft Teams &amp; Skype for Business</strong> —— Bot<p>我需要隆重给大家介绍Office 365家族中的新成员——Microsoft Teams。它是一款全新的以聊天为基础的协作沟通工具，整合了Office 365的很多服务，并且作为Office 365的一站式前端应用为用户提供了聊天，团队和项目协作，会议等功能。<p>不仅如此，Microsoft Teams为Office 365引入了机器人（Bot）的应用场景，事实上，它的帮助系统就是通过一个机器人—— T-bot—— 来实现的<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/teambot.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/teambot.PNG"></a><p>同时Microsoft Teams支持用户自定义机器人，目前在官方的市场中，已经有超过30个功能各异的机器人供用户选用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/teamsbotlist.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/teamsbotlist.PNG"></a><p>这些机器人虽然功能各异，但都是基于微软的Bot Framework开发出来的。关于如何定制Bot，以及如何跟Microsoft Teams整合起来，我有一篇专门的文章介绍，请参考 <a href="https://chenxizhang.gitbooks.io/office365devguide/content/docs/botframeworkquickstart.html">Office 365 机器人（Bot）开发入门</a>。<p>而在Skype for Business这个方面，前面提到了EDI这个机器人服务，事实上它也支持和Microsoft Teams的这种Bot的集成，或者换句话说，因为有了Bot Framework，现在开发一个机器人已经变得相对比较容易了。</p><li><p><strong>Microsoft Pix, Office Lens</strong><p>Microsoft Pix是一款聪明的拍照应用，你可以用手机拍出专业级别的照片，例如智能防抖，人像跟随，实时照片等。<p>它大量用到了认知服务中的计算机视觉的服务，在这个领域一直被模仿，从未被超越。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftpix.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftpix.PNG"></a><p>Microsoft Pix目前只有iPhone版本，关于它详细信息，请参考 <a href="https://www.microsoft.com/en-us/research/product/microsoftpix/">https://www.microsoft.com/en-us/research/product/microsoftpix/</a><p>Office Lens则是另外一款免费的移动应用，它非常适合从白板、菜单、符号、手写备忘录或任何具有大量文本的地方捕获笔记和信息。你无需记笔记、依赖模糊图片，也不必担心将笔记放错位置。它也是捕获草图、绘图、公式甚至是无文本图片的最佳选择。它还可以和Office 365实现无缝的整合，例如一键保存到OneDrive等等。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officelens.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officelens.PNG"></a><p>Office Lens如此有用并且有趣，以至于现在这个功能甚至已经整合到OneNote的App里面，现在用OneNote创建笔记的时候，可以通过调用Office Lens进行拍照，实现上述功能。</p></li></ol><h1>基于Office 365的人工智能发展方向与机遇</h1><p>前面我用了大量的篇幅给大家介绍了Office 365已经具有的人工智能能力，这只是一个开始，未来会怎么样呢？老实讲，我也没有明确的答案，但我看到三个方向的发展趋势，给大家参考<ol><li><p>通过 <strong>Microsoft Graph</strong> 驱动Office 365向PaaS的演化<p>我们都知道人工智能的基础是数据，Office 365有大量的数据（当然这些数据及其隐私都归用户自己所有），下一个阶段的发展在于从SaaS（Software as a service）向PaaS（Platform as a service）的延伸。客户的组织、或者用户自己可以基于微软提供的服务接口（Microsoft Graph）实现对这些数据的再次利用，尤其是与业务应用整合。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/msgraph.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/msgraph.png"></a><p>关于Microsoft Graph的更多细节，请参考 <a href="https://developer.microsoft.com/zh-cn/graph/docs/concepts/overview">https://developer.microsoft.com/zh-cn/graph/docs/concepts/overview</a>, 我的这个系列文章也花了相当多的篇幅介绍Microsoft Graph，请参考 <a href="https://aka.ms/office365devguide">https://aka.ms/office365devguide</a> 。</p><li><p>利用<strong>认知服务</strong>增强Office 365能力，尤其是在提供见解方面<p>反过来说，开发者可以利用认知服务提供的能力，扩展Office 365的能力（以Office Add-in的形式），为其实现更多人工智能的应用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/renzhifuwu.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/renzhifuwu.PNG"></a><p>关于认知服务的详细信息，请参考<a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/">https://azure.microsoft.com/zh-cn/services/cognitive-services/</a></p><li><p>基于对话的<strong>机器人框架</strong>将深度影响未来人们进行办公的方式<p>不管是Microsoft Graph集成应用，还是Office add-in的扩展开发，现在的时代已经跟以前完全不一样了。基于对话的机器人框架（Microsoft Bot Framework）是一种全新的用户交互形式，这种CUI的方式会作为GUI和NUI的有益补充，为用户提供更加边界的交互体验。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/cui.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/cui.PNG"></a><p>Microsoft Bot Framework是微软提供的一整套工具和服务的集合，它的访问地址是 <a href="https://dev.botframework.com/">https://dev.botframework.com</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/botframework.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/botframework.PNG"></a><p>关于Bot的开发，此前我有一篇专门的文章，请参考 <a href="https://chenxizhang.gitbooks.io/office365devguide/content/docs/botframeworkquickstart.html">https://chenxizhang.gitbooks.io/office365devguide/content/docs/botframeworkquickstart.html</a></p></li></ol>]]></description></item><item><title>观未见，行不止 —— Power BI 两周年技术和方案交流圆桌会议纪实</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904444.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904444.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年8月13日</p></blockquote><p>2017年8月11日下午两点，Power BI 两周年技术和方案交流圆桌会议如期举行。线上和线下约有100位朋友参加了由我组织和主持的本次活动，在两个小时的会议中我也很荣幸邀请到了Power BI产品技术专家，典型客户和合作伙伴做精彩分享，在活动的最后，还有热烈的互动讨论环节。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/jiabing.JPG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/jiabing.JPG"></a><h1>谈一谈现代工作方式将如何帮助企业提高竞争力</h1><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerbi2year-opening.JPG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerbi2year-opening.JPG"></a><p>前不久我专门谈了谈 AI（Artifical Intelligence——<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeandai.md">人工智能</a>），很高兴今天又可以来谈谈BI的话题。Business Intelligence（BI）——商业智能其实不是一个新话题了，从SQL Server 97 第一次提出多维数据集（OLAP和Cube）的概念，到后来的百花齐放，逐渐形成了从数据整合和清洗，到数据建模和分析，以及最后的报表展现这样一种三个阶段的标准做法，相当一段时间以来，我们甚至认为这个领域的经验已经固化，谈不上什么创新了。那么，今天我们要谈的这个已经两周岁的Power BI到底Power（厉害）在哪里呢？<p>我相信不同的人会对Power BI有不同的见解，而在我看来，Power BI不仅仅是微软商业智能解决方案的重要版图和创新成果，它更是现代工作方式的一种具体体现 —— 利用创新的数据展现技术洞察先机 —— 它是我们能保持创造力的一个非常重要的因素。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/modernworkplace.JPG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/modernworkplace.JPG"></a><p>Power BI 是一组看得见摸得着的先进工具和服务，它包括云端服务，客户端设计器，移动应用，以及和企业内部数据整合的网关组件在内的四大核心组件，同时使用开放式的架构支持第三方应用的整合。基于Power BI提供的服务，不同的用户（数据创作者、数据建模专家、报表设计师、管理员）可以各司其职并协同工作，并且都能得到绝佳的创新体验。这些体验包括但不仅限于多数据源建模支持、本地计算、跨设备和平台体验、自然语言查询、自动产生见解、实时数据分析、与Cortana的整合、从Excel发布等等。其中，自然语言查询和自动产生见解、与Cortana整合这三块已经是使用到了微软人工智能(AI)的研究成果 —— 得益于AI所提供的创新动力，将是Power BI区别于其他产品的一个重要分水岭。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerbiessential.JPG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerbiessential.JPG"></a><p>如果仅仅把Power BI当作一组工具和服务，我个人觉得并不足以体现它的先进性。我自己是第一时间就使用了Power BI，到后来爱不释手，在平时的工作中经常会使用它。我认为Power BI还有两个层面的意义，分享给大家参考一下。<ol><li><p>Power BI 给我们带来了一种对数据充满好奇的思考问题的方式。<p>经验是好东西，至少在它成为制约我们创新的阻力之前是这样。正如认识世界的过程本质上是一个不断参与和体验的过程一样，Power BI给我们带来的是一种渐进式、交互性的分析体验。你在Power BI Desktop中导入数据并且进行建模和分析，你会有丰富多样的选择性和组合，而不是一种或者固定的几种，往往是做着做着会蹦出来一些新的做法。而如果你以为说将Desktop做好的报表发布到Power BI Service就完事了，那就大错特错了。实际上，这可能是Power BI 的整个创作的过程的10%，这只是一个开始而已。大量的创作是在报表基础上，通过你的视角（通常是管理层或业务部门用户）去产生见解，并且形成独特的视图（Dashboard），与此同时，通过分享还能获得其他同事的反馈。<p>到底是先进的技术引发了我们的好奇，还是我们自身的好奇心驱使我们发现这些技术所蕴含的价值？放在今天这个Power BI的话题上来看，我倾向于同意这样的观点：我们成就了彼此。</p><li><p>Power BI 真正赋予我们理解数据的能力，因此我们将获得前所未有的信心。<p>数据分析行业有一句经典名言：“如果不能用数据表示我们所知的，那么我们对它所知不多；如果对它所知不多，又怎样控制它；如果我们不能控制它，那就只有靠运气了”。人类对于很多事情的恐惧源自于其不确定性，所以说，二十一世纪什么最珍贵？信心！<p>那么信心是从哪里来的呢？消除不确定性是一个对症的药方，而这，我想多半应该来自于你对所面临问题能够充分了解的能力吧。Power BI真正将商业智能的能力赋予每一个人，而不是特定的几个人，不需要去读几年数据挖掘的专业课程，而只要会基本的数据操作即可。同时由于它可以通过不同的设备随时随地访问到，所有的业务视角，可以通过交互式的体验实时地展开，我们再也不需要为了做一个汇报而将一大堆报表打印出来了。<p>当然，不确定性仍然是世界的主流特征，你不能期待完全的确定性。此时，保持好奇就是一个很好的态度了。</p></li></ol><h1>圆桌会议嘉宾精彩分享</h1><p>本次会议邀请到了Power BI产品技术专家，以及来自于典型客户和合作伙伴的精彩分享。这里简要地做一个总结，他们的演讲材料可以在下一节的链接中下载到。<p><strong>微软（中国）有限公司数据平台技术顾问 邱泠</strong>，拥有丰富的大型数据库设计及其分析建模的经验，他是Power BI中国版落地和推广的重要参与者。他为本次活动带来的演讲内容包括<ol><li>Power BI的两周年发展过程，最新创新成果
<li>Power BI的用户主导的创新文化
<li>Power BI的多种部署模式和微软商业智能组合
<li>Power BI的生态环境及给合作伙伴的机会</li></ol><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerbimap.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerbimap.PNG"></a><p><strong>天津市滨海新区汉沽九中教师 杨威 &amp; 赵杰</strong>，作为微软教育大使，将Office 365及Power BI 在教学中进行创 新实践和常态化使用，在业界享有盛誉。他们为本次活动带来的课题是“利用Power BI构建成绩分析系统”。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/WeChat-Image_20170813230835.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/WeChat-Image_20170813230835.jpg"></a><p><strong>上海南洋万邦软件技术有限公司的商业智能事业部系统架构师 李东</strong>，微软数据库方面的MCT、 MSDBA，Oracle的OCP，拥有五年微软平台BI实施项目， 服务的客户涵盖制造业、销 售业、快消、研发设计领域。他为本次活动带来了几个真实的客户案例分享，李老师尤其提到了在不同的几种分析模式之间如何根据实际需要进行选择的问题。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/lidong.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/lidong.PNG"></a><p><strong>菲斯科（上海）软件 有限公司技术总监 王辉</strong>，作为中国区最早一批SQL Server MVP，拥有大量客户商业智能项目实战经验并曾担任过多家公司的高级技术职位。王辉老师用他富有亲和力的演讲和真实的客户案例，并且有大量演示，让与会者都大呼过瘾，受益匪浅。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/wanghui.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/wanghui.PNG"></a><h1>圆桌会议所有的演讲材料</h1><p>这些材料我已经统一发布到Github，如果有需要，请访问<a href="https://github.com/chenxizhang/powerbi2yearroundtable">https://github.com/chenxizhang/powerbi2yearroundtable</a> 进行查看和下载。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/powerbi2yearroundtableppts.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/powerbi2yearroundtableppts.PNG"></a><p>关于本次活动的答疑，以及Power BI的一些其他问题，如果有需要的朋友，也可以继续通过这个渠道和我取得联系和交流。前提是，你会用Github哦。<h1>圆桌会议中的有奖问答和互动问题摘要</h1><ol><li><p>Power BI 国际版发布的准确日期是哪一天？<p>回答：2015-7-24</p><li><p>Power BI Pro账号能支持的数据刷新时间最短是多少？<p>回答：一小时。相对应的，Power BI Free账号也能实现每天一次的数据刷新。</p><li><p>Power BI中用于提供对企业内部数据源进行整合的组件是什么？<p>回答：Gateway（网关），它分为两种，一种是用于个人用户的Personal Gateway，一种是用于生产用途的Enterprise Gateway。</p><li><p>Power BI有哪几种授权模式？<p>回答：Power BI有完全基于SaaS的订阅模式，也有和本地SQL Server相结合的On-Premises模式，同时还有基于Azure的按照用量付费的模式。</p><li><p>Power BI Report Server支持SQL Server 2016吗？<p>回答：支持. 但最好的支持版本是在SQL Server 2017.</p><li><p>Power BI 是否支持3D 的视图展示？<p>回答：Power BI的部分Visual组件已经支持3D。例如这个例子<a href="https://azurewebsiteexperience.azurewebsites.net/">https://azurewebsiteexperience.azurewebsites.net/</a>.另外，Excel中的Power Map有3D的版本，而且可以自动录制视频，嵌入到PowerPoint中。</p><li><p>一个企业使用一个Power BI Enterprise Gateway还是建议根据不同的Reporting情况分多个Gateway？<p>回答：由于一个Gateway可以定义多个数据源，目前比较常见的做法是只部署一个Gateway。这样在管理上面会更加简单。Power BI Gateway本身不需要授权，只要有Power BI Pro的账号就可以使用。</p><li><p>Power BI 可以和Splunk等第三方程序进行集成吗?<p>回答：Splunk也是和数据分析有关的东西。 理论上，数据能连，就能整合。</p><li><p>Power BI 导入数据，可以直接导入，还是需要ODBC等？<p>回答：Power BI 内置了超过100种数据源导入，不依赖ODBC。但是Power BI 也提供了对ODBC，OLEDB等方式的支持，以便对于一些没有在支持列表的数据源进行访问。</p><li><p>Power BI 作为SaaS服务未来会 有计划落到Azure Stack吗？<p>回答：目前没有这方面的信息。</p><li><p>我是菜鸟，推荐一下入门方式呢？<p>回答：请关注官方网站的文档和向导式培训课程：<a href="https://powerbi.microsoft.com/zh-cn/guided-learning/">https://powerbi.microsoft.com/zh-cn/guided-learning/</a></p></li></ol>]]></description></item><item><title>基于Office 365的随需应变业务应用平台</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904422.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:36:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904422.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年9月7日</p></blockquote><p>这是我去年10月底在微软技术大会（Microsoft Ignite 2016) 上面的演讲主题，承蒙大家抬爱，也沾了前一场明星讲师的光，我记得会场几乎是满座。观众中既有IT部门的技术人员，也有业务部门的用户，也有少量的开发人员，这正好契合了这个主题想要表达的意思：在业务需求的变化日趋频繁的当下，这三类用户的参与，并且借助合适的技术及平台（例如微软的Office 365），可以构建随需应变的业务应用平台。<p>顺便预告一下，本年度的微软技术暨生态大会（<a href="https://www.microsoft.com/china/techsummit/2017/">Microsoft Tech Summit</a>）将于2017年10月23日在国家会议中心举办，本届大会将全面呈现微软平台的最新技术，尤其是在人工智能方面的重要创新，我将在大会上分享随需应变业务应用平台2.0解决方案，在延续去年话题的同时添加了Microsoft Teams以及Bot Framework整合的内容，敬请关注。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017techsummit.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017techsummit.PNG"></a><p>更多内容请关注 <a href="https://www.microsoft.com/china/techsummit/2017/">https://www.microsoft.com/china/techsummit/2017/</a></p><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017techsummittopic.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017techsummittopic.PNG"></a></p><p>言归正传，我将利用6篇文章来给大家阐述如何基于微软的Office 365构建随需应变的业务应用平台，这一篇文章是一个概要，我将给大家介绍一些基本概念，演示主要的流程和效果。<p>我们先来看一看企业业务应用平台的现状、需求和挑战。业务的需求通常来自于客户的反馈和市场的需要，业务部门会发现及捕捉到这些变化，快速响应的企业能赢得更多的业务和机会。这是一个基本常识，但是越来越多的企业会遇到如下的三个挑战<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformchallenge.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformchallenge.PNG"></a><p>这三个挑战相互联系，甚至互为因果。由于以往业务应用开发过分依赖专业性技术，带来的问题就是周期长，成本高，而业务用户很多时候都是在干等着，无法及时地应对市场和客户的需求；与此同时因为只有少部分人才能从事这类工作，大量的业务用户的能力其实是被闲置了，这将带来企业的整体效能下降。业务移动化是一个趋势，但由于多平台都需要单独开发和维护，这又进一步加剧了前面两个问题的严重性。<p>那么，有什么办法可以解开这个结呢？我们不妨来先看一下业务应用的发展趋势<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformtrend.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformtrend.PNG"></a><p>我必须说明一点的是，企业的业务应用是分层的。早在2011年Gartner就提出了企业业务应用的三层模型<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/WeChat_Image_20170908063810.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/WeChat_Image_20170908063810.jpg"></a><p>应该说作为业务主干应用系统这一层，大部分企业都已经建设完毕，这些都是比较标准的、也相对比较复杂的系统。我们今天要谈论的业务应用，更多是偏向前台创新应用和差异化应用。而所谓的随需应变，就是让更多的业务人员拥有构建面向主题的业务应用的能力，并且能随时根据捕捉到的信息进行调整，以达到快速响应变化的目标。<p>那么，从微软的角度来看，我们提供了什么样的解决方案能实现这样的目标呢？在Office 365的平台上，目前已经内置了很多强大的服务，例如我们耳熟能详的邮件服务，在线协作平台，视频会议平台等等，同时我们针对业务应用也提供了创新性的服务，例如Power Apps可以快速根据数据源（最简单的做法是基于SharePoint的列表）构建跨平台移动业务应用，用于收集并且处理数据；Microsoft Flow可以在异构系统之间建立业务流程；Power BI则提出了全新的数据呈现技术，彻底改变我们与数据交互的方式，洞察先机，而这些见解又可以引导用户回到Power Apps里面进行操作，或者触发某个Microsoft Flow的流程进行响应。这是一个不断迭代的过程，或者也可以称之为闭环，这也是随需应变的最核心的理念。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformview.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformview.PNG"></a><p>关于微软的商业应用平台，敬请关注微软的官方网站了解更多 <a href="https://businessplatform.microsoft.com/en-us/">https://businessplatform.microsoft.com/en-us/</a><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatform.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatform.PNG"></a><p>接下来的几天内，我将用一个实际案例给大家展示一个典型的业务应用开发的流程，我相信这代表着未来，更加让人高兴的是，这已经是看得见摸得着的能力了。]]></description></item><item><title>实战Excel Add-in的三种玩法</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904401.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:33:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904401.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年11月26日</p></blockquote><h1>前言</h1><p>这个系列文章应该有一阵子没有更新了，原因是一如既往的多，但是根本所在是我对于某些章节其实还没有完全想好怎么写，尤其是对于Office Add-in这块 —— 到底是要每个都去单独写一遍，还是有其他什么好的写法会对读者更有帮助？正如我在 <a href="https://www.linkedin.com/pulse/%E6%88%91%E5%88%86%E4%BA%AB%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%86%99%E4%BD%9C%E7%BB%8F%E9%AA%8C-%E5%B8%8C%E7%AB%A0-%E9%99%88/?trackingId=oVKlHAByFMtC%2FPtv58IMnw%3D%3D">这篇文章</a> 分享的一些关于写作的个人经验那样，我为此颇费了一些心思琢磨，直到最近才做出了一个选择：我将不拘泥于每个应用都写一次，而是尝试总结一些共性的操作指南。本文将是一个尝试，以我对于Office Add-in开发的了解，Excel所占的比重相对较高（根据不完全统计，在应用商店所有Office Add-in中，Excel占到40%左右），所以我希望用本文的Excel Add-in的实际案例，给广大的Office Add-in开发人员直观地了解三种不同的开发技术是如何过渡和共存的，以帮助大家做出自己的选择。<blockquote><p>本文所提到的三种玩法，是指最早的VBA技术，后来的VSTO技术，以及现在更推荐的Web Add-in的技术。如果大家对于这些基本概念以及Office 365的开发还不太熟悉，欢迎阅读我此前写好的 Office 365开发概述和生态环境介绍：<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365dev-overview-1.md">上篇</a>，<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365dev-overview-2.md">下篇</a></p></blockquote><h1>案例介绍</h1><p>我一向鼓励在实践中学习。为了演示如何自定义开发，并且比对不同的技术下面实现方式的差异，本文将以下面的一个需求作为案例展开。假设我们需要为Excel增加一项功能，用户点击一个菜单或者按钮后，可以动态生成一些统计数据，并且根据这些数据生成一个柱状图。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/reportgeneration.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/reportgeneration.PNG"></a><h1>VBA —— 一曲肝肠断，天涯何处觅知音</h1><p>VBA 是我们最早的一个用来扩展Office 应用程序的技术，由于其简单易用且功能强大，在全世界范围内拥有数以亿计的用户。实现上面提到的这样的需求，其实是VBA很擅长的，尤其是数据如果本身就来自于Excel内部的话。<p>学习VBA的一个最好起点就是用录制宏。以本案例而言，即便你是VBA的新手，也可以尝试一步一步地输入数据并且生成图表，然后将生成的代码稍作整理和修改后，可能就是下面这样子的。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/reportgenerator-vba.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/reportgenerator-vba.PNG"></a><p>完整代码可以通过 <a href="https://gist.github.com/chenxizhang/3bc5e940f59f9e30d13cb88e3a6c8a6a">https://gist.github.com/chenxizhang/3bc5e940f59f9e30d13cb88e3a6c8a6a</a> 获取，请在Excel的VBA编辑器中，新建一个模块，然后将这个代码复制进去，最后按下F5运行即可看到效果。<h1>VSTO —— 出道即巅峰，从未被超越</h1><p>VSTO是2005年正式引入的，它带来的好处是可以基于功能强大且已经被证明成功的Microsoft .NET平台进行编程，这意味着你可以使用宇宙最强的Visual Studio进行快速开发，同时使用 .NET Framework 的全部功能，可以访问到任何你想要的资源。VSTO的开发语言有VB.NET和C#两种。<p>我个人目前用的最多的是C#，以我自己的亲身体会来看，从VBA转到VSTO，短期来说，使用VB.NET可能是最简单的，因为语法绝大部分都是一致的。但长期来看，我还是建议大家学习一下C#这门专门为.NET设计的语言。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsto-excel-template.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsto-excel-template.PNG"></a><p>Visual Studio 的项目模板非常强大，它会自动生成很多的代码。对于一个VSTO的Add-in来说，我们最常见的做法会为它创建对应的Ribbon工具栏，当用户单击了某个按钮后，再根据当前的上下文进行相关的代码处理。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsto-ribbon.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsto-ribbon.PNG"></a><p>你可以在Ribbon 的设计器中，添加一个按钮，然后将下面的代码复制到按钮的单击事件中,然后按下F5即可进行调试。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsto-exceladdin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsto-exceladdin.png"></a><p>完整代码可以通过<a href="https://gist.github.com/chenxizhang/c249740f63edf8c29d18700fb357474d">https://gist.github.com/chenxizhang/c249740f63edf8c29d18700fb357474d</a> 或者 <a href="https://gist.github.com/chenxizhang/e75b849b1d2ef6eab5d742a9c976527d">https://gist.github.com/chenxizhang/e75b849b1d2ef6eab5d742a9c976527d</a> 获取，前者是VB.NET代码，后者是C#代码。<h1>Web Add-in —— 向云而生，机遇和挑战共存</h1><p>Web Add-in是从Office 2013开始支持的新的开发模式，它具有划时代的意义，主要在于利用业界标准的Web开发技术来做Add-in开发，同时具有跨平台和设备的先天优势，集中化部署也降低了运维的复杂性。<p>不同于VBA到VSTO的平滑过渡，这个新技术对于传统的VBA和VSTO的开发者来说，最大的挑战在于要学习全新的Web开发的技术。Web Add-in包含但不仅限于下面这些主流技术，请大家有一定的心理准备。<ol><li>HTML
<li>CSS
<li>Javacript
<li>Typescript (可选)
<li>NodeJS （可选）</li></ol><p>前面三个是基础，如果有兴趣学习，我推荐一个不错的网站 <a href="http://w3school.com.cn/">http://w3school.com.cn/</a>。<p>后面两个是高级部分，但很可能会成为以后的主流。有兴趣可以通过他们的官方网站进行学习。<p>我的范例是使用NodeJS来实现的，所以如果要运行范例，则需要先安装好NodeJS的运行环境，请参考 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> .<p>在开发工具这个方面，Visual Studio仍然提供了非常好用的模板，但Visual Studio Code可能是一个更好的选择，尤其是你准备学习和使用基于NodeJS来开发Office Add-in的话。<p>一下子讲了这么多，是不是已经有点头大了？一个好消息是，我们现在有一个有意思的小插件—— Script lab —— 可以在不离开Excel界面的情况下，快速开始学习Web Add-in的开发。这个插件本身就是一个非常典型的Add-in的范例，是由微软内部开发的，它提供了很多样例代码，可以帮助开发者熟悉全新的基于javascript的对象模型。<p>只要你拥有Office 365的账号，你就可以免费使用这个插件。具体的操作方式是在顶部的Ribbon工具栏中，找到“Insert”这个选项卡，然后单击里面的“Store”这个按钮，搜索Script lab即可进行安装。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/scriptlabsetup.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/scriptlabsetup.PNG"></a><p>安装成功后，顶部的Ribbon工具栏会多出来一个选项卡“Script Lab”，点击“Code”按钮，然后找到Report generation 这个Sample，如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/scriptlab.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/scriptlab.png"></a><p>你现在无需做任何代码的修改，直接Run就可以看到上图的效果了。<blockquote><p>请注意，官方提供的这个Report Generation的Sample其实有一个小的代码问题，它在设置图表的数据源时没有把标题行包括进去，我已经修改了这个Sample，有需要可以通过 <a href="https://gist.github.com/chenxizhang/cebfde8cf08c55d54d5cdb336b166cee">https://gist.github.com/chenxizhang/cebfde8cf08c55d54d5cdb336b166cee</a> 查看，并且导入到你的Sample库中去。</p></blockquote><p>关于在Visual Studio Code中如何开发和测试Office Add-in，微软官方也有一篇文章可以参考：<a href="https://code.visualstudio.com/docs/other/office">https://code.visualstudio.com/docs/other/office</a> 。我这里要告诉大家的好消息是，你用Script lab运行成功的代码，几乎可以原封不动地复制粘贴到Visual Studio Code中去，做成一个真正的Add-in，并且通过你的渠道分发出去。（这些内容我后续还会专门的文章展开讲解）。<h1>结语</h1><p>虽然我做这方面研究已经有相当长时间了，但真正这三个技术放一起对比讨论，却是直到昨天我在与大中华区两个影响力最大的Office中文技术社区（ExcelHome和ExcelPX）的专家朋友们聚会讨论时才首次展示。我用这个作为例子的主要目的，是希望让大家看到技术的发展路线，理解为什么要这么变化，同时并且通过实例让大家更加有信心，虽然学习新东西会遇到一些挑战的，但大家也能清楚地看到，代码的结构、逻辑其实是相通的。说到底，这也是一个程序员的基本素养 —— 我们从来不会停止探索，而因为我们有编程的思维，所以我们毫无畏惧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/Image_20171126224729.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/Image_20171126224729.jpg"></a><p>关于本次活动，我分享的资料，如有兴趣，也可以通过 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/assets/Office%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E6%96%B0%E8%80%81%E6%9C%8B%E5%8F%8B%E8%A7%81%E9%9D%A2%E4%BC%9A-%E9%99%88%E5%B8%8C%E7%AB%A0.pdf">这里</a> 下载到。]]></description></item><item><title>Office Add-in 设计规范与最佳实践</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904389.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:31:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904389.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年8月6日</p></blockquote><h1>引子</h1><p>离<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/vscodetoofficeaddin.md">上一篇</a>Office Add-in的文章已经过去了一段时间，期间有去年Office 365 Asia Devday &amp; Hackathon的二等奖获得者闫晓迪写了<a href="http://www.cnblogs.com/yanxiaodi/p/7192280.html">Office365开发系列——开发一个全功能的Word Add-In </a>,另外我也写了两篇有关人工智能方面的文章<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeandai.md">人工智能背景下的Office 365现状和发展趋势</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/botframeworkquickstart.md">Office 365 机器人（Bot）开发入门</a></li></ol><p>我一直在思考怎么为大家讲解Office Add-in开发，一方面确实需要实例（所以我们需要更多的闫晓迪站出来），另一方面来说，我觉得从一开始就讲解一些设计规范和最佳实践可能对大家会有较大帮助。<p>当然，实际上我也没有非常丰富的Office Add-in开发经验，这方面还需要有时间和案例的积累。所以这一篇文章的主要内容都来自于官方的手册，我稍微做了一些整理，增加了少量我个人的建议。如果希望查看英文的版本，请访问：<a href="https://dev.office.com/docs/add-ins/overview/add-in-development-best-practices">https://dev.office.com/docs/add-ins/overview/add-in-development-best-practices</a>。<h1>第一个规范：提供清晰的价值</h1><p>这个原则之所以放在最前面，是因为它要回答“你为什么需要开发这个Office Add-in”的终极哲学性问题。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/d8de904b-0047-41fb-b83c-4e116a486a76.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/d8de904b-0047-41fb-b83c-4e116a486a76.png"></a><p>下面几个最佳实践是比较适合关注的<ol><li>在不增加中断的情况下，帮助用户更好地基于Office Add-in完成创作。
<li>为Offie 提供新的应用场景。
<li>为Offie 嵌入一些辅助服务。
<li>提高Office 的使用体验达到实现更好的生产力的目的。</li></ol><p>我要补充的一两点我的理解：一个好的Office Add-in因为提供明确，并且尽量独特的价值 —— 不要贪大求全，而是因为专注于做好一件事情。同时，用户不应该被要求离开他当前所在的Office 环境，就能完成一些有意思的工作，并且与他本身在Office里面做的工作无缝地融合在一起。这个让我想起在<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeandai.md">人工智能背景下的Office 365现状和发展趋势</a> 中提到的Tap和Rsearcher这两项功能。<p>如果你希望将你的Add-in发布到Office Store，还有两个文档可能对你有用<ol><li>在发布之前，通过 <a href="https://dev.office.com/officestore/docs/validation-policies">Office Store validation policies</a> 以及 <a href="https://dev.office.com/add-in-availability">Office Add-in host and platform availability</a> 来确保你想要提供的Add-in所需要满足的一些策略。
<li>通过了解<a href="https://dev.office.com/officestore/docs/create-effective-office-store-listings">Create effective Office Store listings</a>的一些细节，提高你的Office Add-in在Office Store能更好地被查找到，甚至被推荐。</li></ol><h1>第二个规范：打造引人入胜的首次使用体验</h1><p>你永远无法改变留给别人的第一印象。这句话同样适合于Office Add-in开发的领域。下面的一些最佳实践或许能让你的Office Add-in给人留下深刻印象，并且愿意长期使用下去。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/586202ad-333b-417c-ad31-cc6eb952b239.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/586202ad-333b-417c-ad31-cc6eb952b239.png"></a><ol><li>在首页上面清晰地告诉（引导）用户如何使用这个Add-in，不要一上来就要求用户注册啦，登录啦，好好想一想你到底能为他们提供什么。
<li>如果你的Add-in需要绑定数据，尽可能在创建时提供范例数据作为参考。
<li>提供试用版。作为SaaS服务的一个基本理念，就是用户可以通过试用了解你的产品，并且决定是否要购买订阅。而即便是有接受订阅的高级版本，也建议保留一个免费的（但依然包含了有限功能的）版本。
<li>如果需要用户注册，应该尽可能简单，尽可能预先填好一些基本信息，并且避免邮件验证。
<li>如果有可能，应在应用中实现单点登陆的体验，尤其是对于现有Office 365用户而言，他们本身就是有身份的。
<li>在应用中应该尽量避免弹出窗口，如果无法避免，则应该让用户决定是否启用该功能。</li></ol><p>虽然写了这么多条，但我总结起来可能就是一条：KISS原则用在这里是恰如其分的 —— Keep it simple, stupid —— 如果你让用户思考，你就输了。<h1>第三个规范：使用Add-in Command</h1><p>使用Add-in Command是非常常见的做法，它可以用来在Office 应用程序中添加Ribbon按钮，也可以在快捷菜单中增加子菜单。点击这些按钮或者子菜单，可以直接执行一段代码（通常是Javascript函数），也可以打开任务面板（Task Pane）以进一步操作。典型的Add-in Command效果图如下所示：<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/addincommands1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/addincommands1.png"></a><blockquote><p>考虑到对触摸操作的支持，应该尽量减少对于快捷菜单的依赖。</p></blockquote><p>下面还有一些具体的建议<ol><li>尽可能将Add-in Command通过添加组的方式合并到现有的Ribbon Tab（例如Insert，Review等）里面去，当然前提是你的功能，正好跟这些Ribbon Tab的含义是匹配的。
<li>如果不匹配，则尽可能放在Home这个Ribbon Tab，这样可以减少用户查找你的Add-in Command的难度。
<li>但是如果你的自定义Add-in Command有超过6个顶级Ribbon Button，那么就建议单独创建一个Ribbon Tab了。
<li>在命名上面，Ribbon组的名称应该尽可能跟你的Add-in一致。如果有多个组，那么每个组都应该有清晰的命名，让用户一眼就知道它的用途。
<li>不要添加多余的按钮。请考虑奥卡姆的简单有效原则——“如无必要，勿增实体”。</li></ol><h1>第四个规范：遵循界面设计原则</h1><p>值得高兴的一件事情是，微软为开发人员专门提供了<a href="https://dev.office.com/fabric#/get-started">Office UI Fabric</a>这一套UX 框架，你可以直接使用Fabric Core Style开展工作，它主要提供了CSS的支持（字体，图标，内置组件等），但也可以结合你熟悉的UI框架使用，例如React和AngularJS。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeuifabric.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeuifabric.PNG"></a><p>Office UI Fabric是一切界面问题的解药，与此同时下面还有一些可以参考的最佳实践<ol><li><p>确保你的Add-in的用户体验跟Office宿主程序一脉相承。</p><li><p>如无必要，不要添加多余的元素。</p><li><p>为1366*768的主流分辨率优化设计，尽量避免滚动条。</p><li><p>不要使用未经授权的图像（或其他素材）。</p><li><p>使用简单明了的语言。</p><li><p>不要在Add-in做广告。</p><li><p>考虑不同平台的适用性，包括鼠标、键盘和触摸体验。<p>通过Context.touchEnabled 可以检测到当前是否运行在触摸的模式下。如果在触摸模式下，还有几条参考的建议<ul><li>请确保所有的界面元素都拥有合适的尺寸。
<li>不要依赖于右键菜单和鼠标悬停等机制进行工作。
<li>确保在横屏和竖屏的情况下都能正常工作。
<li>在真实的设备中进行测试（使用<a href="https://dev.office.com/docs/add-ins/testing/sideload-an-office-add-in-on-ipad-and-mac.htm">Sideloading</a>技术）</li></ul><li><p>增加辅助访问功能。</p></li></ol><h1>第五个规范：将性能始终放在重要位置</h1><p>以前我们当然也讲性能，但如今Office Web Add-in的话，这个就显得尤为重要了，你的Add-in可能会被成千上万的人使用，性能可能成为你的制胜法宝，反过来也可能葬送你所有的努力。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddinperformancetable.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddinperformancetable.PNG"></a><p>除了一直要将性能放在重要位置，从思想上很重视它之外，下面也有一些具体的建议<ol><li>确保Add-in加载时间在主要的网络环境下的加载时间不应该超过500毫秒。
<li>确保用户交互操作的时间不超过1秒。
<li>如果是长时间操作，请提供进度提示。
<li>对于公共资源（图片，CSS文件，脚本等）请考虑使用CDN技术加速，并且尽可能在一个位置（尽可能利用缓存的好处）。
<li>参考网站设计的一些基本规范。这个可以参考我几年前写的<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html">优化网站设计的三十五条建议</a>。</li></ol>]]></description></item><item><title>在Visual Studio Code中开发Office Add-in</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904377.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:30:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904377.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年7月13日</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddindev.md">上一篇</a> 我介绍了如何在Visual Studio中开发Office Add-in，因为有标准的项目模板，一系列配套的工具，尤其是自带的一键调试功能，可以让开发人员很快地开始探索。<p>有些朋友可能已经知道，Visual Studio家族这些年增加了一个新的成员—— <a href="https://code.visualstudio.com/">Visual Studio Code</a>。这是一款跨平台的代码编辑工具（可以愉快地在PC,Mac,Linux上面运行），它更加轻量，主要面向新一代的Web应用开发人员而设计（毫无意外，它也吸引了包括我在内的老一辈的Visual Studio的忠实用户的广泛关注），对几乎所有的开源平台和开发语言都有较好的支持。<p>Visual Studio Code提供了对Office Add-in 开发的完美支持，这一篇文章就带领大家来完整体验一下。<h1>安装工具</h1><p>除了<a href="https://code.visualstudio.com/Download">安装Visual Studio Code</a> 之外，要进行Office Add-in的开发，你还需要做一些额外的准备。这是跟Visual Studio略有不同的地方：它会多一些步骤，但这种留给开发人员的可控性也从一定程度上促使我们了解更多细节，我想这也是有不少开发人员喜欢Visual Studio Code（或者同类以代码为中心的编辑器）的原因之一吧。<ol><li>安装node.js。node.js 是这几年涌现出来的一个广受欢迎的全新开发工具，它颠覆了我们对于Javascript能力边界的认识，并且在高并发，但低计算的Web应用场景有较好的表现。关于这个话题，如果要展开来又可以讲几天几夜了，所以就此打住，请通过<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 进行安装并且通过下面的命令确认其是否安装正确。 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/nodenpmversion.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/nodenpmversion.png"></a><li>安装node.js版本的Office add-in模板。虽然Visual Studio Code强调以代码为中心，但也不是说什么都要从零开始做。node.js的很多开发场景，也都有配套的模板来辅助开发。要实现这个目的，首先需要安装一个yo的模块。这是很有意思的，yo其实不是模板，而是一个工具，用来加载模板（或者在它来看是所谓的生成器—— generator）。下面这一行命令，既安装了yo，也安装了一个office开发对应的generator。</li></ol><pre><code>npm install -g yo generator-office
</code></pre><blockquote><p>yo 这个工具的全称是yeoman, 有兴趣请参考它的官方网站 <a href="http://yeoman.io/">http://yeoman.io/</a>, 甚至也可以提交自己的generator</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/npmyoofficegenerator.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/npmyoofficegenerator.png"></a><h1>创建项目</h1><p>做了上述的准备后，我们就可以通过一句命令来创建Office Add-in 项目了<pre><code>yo office
</code></pre><p>此时同样会有一个向导问你几个问题，在你做出自己的选择并且最终按下回车键后，它就会自动地生成一个office add-in项目出来，这是一个基于node.js的项目。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officewebaddinnodejs.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officewebaddinnodejs.png"></a><p>如果你的最后一个问题跟我一样回答了“Yes”的话，在项目生成后，还会自动打开一个很贴心的操作指南<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddinvscodestart.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddinvscodestart.png"></a><p>通过下面的命令可以将这个项目运行起来<pre><code>npm start
</code></pre><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinsamplecodesample.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinsamplecodesample.png"></a><h1>调试项目</h1><p>那么，怎么让这个add-in在Excel里面运行起来呢？上面提到的操作指南给出了一个步骤<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinsideload.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinsideload.PNG"></a><p>但是，这个步骤可能是错误的。我在最新版本的Office 客户端中并没有看到上传add-in的链接。经过一些研究，我发现下面的方法是奏效的。<p>Sideload Office Add-ins for testing <a href="https://dev.office.com/docs/add-ins/testing/create-a-network-shared-folder-catalog-for-task-pane-and-content-add-ins">https://dev.office.com/docs/add-ins/testing/create-a-network-shared-folder-catalog-for-task-pane-and-content-add-ins</a><p>简单地说，你需要将add-in的manifest文件复制到一个共享目录<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddinsharedfolder.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddinsharedfolder.PNG"></a><p>然后将这个目录加入到Office客户端的信任位置中去<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddincatalogs.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddincatalogs.png"></a><blockquote><p>如你所见，这里还可以设置其他一些catalog的路径，包括SharePoint站点。这个会在后续进行介绍。</p></blockquote><p>完成上述步骤后，你就可以在插入add-in的窗口中看到相关的add-in了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/sharedfolderaddin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/sharedfolderaddin.png"></a><p>如果点击“Add”，Excel会加载这个Add-in。作为一个还没有做过任何改动的标准add-in，它目前做的事情只会增加一个Show Taskpane的按钮，点击之后就可以打开任务面板。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdincodeloadsample.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdincodeloadsample.png"></a><blockquote><p>需要注意的是，Office Add-in要求的Web Url是使用https的，而在本机测试的时候，因为证书是自签名的，所以会显示错误，但可以点击查看详情，继续运行</p></blockquote><p>如果有兴趣，你可以留意一下此前那个命令行窗口<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinnpmconsole.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinnpmconsole.png"></a><h1>使用Visual Studio Code进行编程</h1><p>使用Visual Studio Code打开这个项目（准确来说是一个目录，因为在Code里面其实没有项目的概念）后，会看到如下的目录结构<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vscodeexceladdin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vscodeexceladdin.png"></a><p>最右侧的manifest不用多说了，内容跟上一篇文章的例子是基本相同的。有意思的是中间的app.ts文件。这又是什么呢？<p>ts文件是TypeScript文件，而TypeScript是一种自由和开源的编程语言。它是JavaScript的一个严格的超集，并且添加了可选的静态类型和基于类的面向对象编程。<a href="http://www.typescriptlang.org/">TypeScript</a>是著名的Turbo Pascal，Delphi和C#的发明者 <strong>安德斯·海尔斯伯格</strong> 的又一力作。很荣幸，神一般存在的安德斯是我现在的同事。<p>我不准备在这里对TypeScript进行过多展开，但我充分理解现在在看文章的你，可能会有这样的感慨：哇，看起来不错！嗯，又要学新东西了。<p>这是一个事实，但是我相信你会最终喜欢这种变化。欢迎来到一个全新的，动态的世界。</p>]]></description></item><item><title>在Visual Studio 中开发Office Add-in</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904364.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904364.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于2017年7月13日</p></blockquote><p>“<strong>Talk is cheap, show me the code</strong>”，我们就用代码来说话吧。这一篇将给大家介绍如何开始Office Add-in的奇妙开发之旅。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddins.md">上一篇文章</a>已经提到过了，要进行Office Add-in的开发，你可以选择自己最喜欢的Web开发平台和工具。限于经验和精力，我这里展示的是用微软提供的Visual Studio系列工具进行开发。<p>Visual Studio这个宇宙第一的IDE伴随着我从对编程一无所知到靠编写代码为生，从入门到一直没有放弃。与此同时，Visual Studio 2005开始提供了对Office Add-in开发的内置支持。<p>当时的技术叫做VSTO——Visual Studio Tools for Office，其内在的机制是用托管代码封装了Office 的COM对象模型，我们在Visual Studio中编写C#或者VB.NET的代码，最终会编译成一个dll，打包成一个vsto的文件，部署到计算机的特定目录后，相应的Office客户端在启动的时候，就会加载这些vsto文件中定义好的add-in，并且执行其中的代码，或是自动执行某些功能（或者监听某个事件进行响应），或是在Ribbon中添加一些按钮，等待用户点击后执行某些操作。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsofficeaddin1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsofficeaddin1.png"></a><p>每一代的Visual Studio都有对应的Office Add-in开发的更新。在最近的几个版本中，除了继续支持VSTO外，也一直提供了对于新一代Web Add-in的支持。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsofficeaddin2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsofficeaddin2.png"></a><p>使用Visual Studio开发Office Add-in非常高效，因为有标准的项目模板，有向导式的工具，并且直接就支持一键式进行调试。我们下面就来体验一下吧。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsaddinwizard1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsaddinwizard1.png"></a><blockquote><p>由于不同的Office 客户端对于Add-in支持的功能会略有差异，所以基于你所选择的项目模板，你看到的向导界面可能也会略有不同</p></blockquote><p>点击“Finish”按钮后，你应该会看到一个类似下面的项目结构<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vsofficeaddinproject.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vsofficeaddinproject.png"></a><p>最左边的是manifest文件，中间是Web应用程序的首页 —— home.html，这两个部分是通过在manifest文件中的如下内容来是进行关联的<pre><code>&lt;DefaultSettings&gt;
    &lt;SourceLocation DefaultValue="~remoteAppUrl/Home.html" /&gt;
&lt;/DefaultSettings&gt;
</code></pre><blockquote><p>你一定会对~remoteAppUrl感到好奇，这是一个什么地址呢？这只是一个占位符，后续真正在调试或者部署的时候会替换成真正的地址。</p></blockquote><p>关于manifest文件的具体规范，以及Web应用程序开发的细节，我还会在后续专门来写。现在就让我们不做任何的修改，直接运行起来看看效果吧。对，就是按F5键。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinsample1.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinsample1.png"></a><p>这个Add-in会在“Home”这个Tab里面增加一个Add-in Command—— “Show TaskPane”，点击这个按钮后，会在工作表的右侧出现一个任务面板，并且与此同时已经插入了一些范例数据到工作表上面。如果我们选中这些数据，同时在任务面板中点击“Highlight”的话，它会把这些数字中的最大值找出来，并且用颜色进行高亮显示。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinsample2.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinsample2.png"></a><p>那么到底发生了什么呢？以上面这个范例项目为例，在你按下F5键的时候，Visual Studio其实做了如下一系列的事情<ol><li>编译和生成 ExcelWebAddin4Web这个项目，并且在本地用IIS Express将其运行起来，在我的电脑上，它会在下面的地址运行 <a href="https://localhost:44379/">https://localhost:44379/</a>，这是在项目属性中指定的。</li></ol><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdin4prop.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdin4prop.PNG"></a></p><ol><li>编译和生成 ExcelWebAddin4这个项目，并且用上面这个地址，替换到manifest文件中 ~remoteAppUrl。</li></ol><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdin4manifest.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdin4manifest.PNG"></a></p><p>与此同时，它会生成一个Book1.xlsx的文件用来做测试</p><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdin4debug.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdin4debug.PNG"></a></p><ol><li>Visual Studio启动Excel，加载Book1.xlsx，并且用开发模式，加载上面这个manifest文件，进而言之就是加载我们这个Web Addin</li></ol><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/excelwebaddindebugmode.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/excelwebaddindebugmode.png"></a></p><p>为什么我们会在“Home”这个Tab中看到那个自定义的按钮，是因为在Manifest文件中定义了如下的信息<pre><code>&lt;ExtensionPoint xsi:type="PrimaryCommandSurface"&gt;
  &lt;!-- Use OfficeTab to extend an existing Tab. Use CustomTab to create a new tab. --&gt;
  &lt;OfficeTab id="TabHome"&gt;
    &lt;!-- Ensure you provide a unique id for the group. Recommendation for any IDs is to namespace using your company name. --&gt;
    &lt;Group id="Contoso.Group1"&gt;
      &lt;!-- Label for your group. resid must point to a ShortString resource. --&gt;
      &lt;Label resid="Contoso.Group1Label" /&gt;
      &lt;!-- Icons. Required sizes 16,32,80, optional 20, 24, 40, 48, 64. Strongly recommended to provide all sizes for great UX. --&gt;
      &lt;!-- Use PNG icons. All URLs on the resources section must use HTTPS. --&gt;
      &lt;Icon&gt;
        &lt;bt:Image size="16" resid="Contoso.tpicon_16x16" /&gt;
        &lt;bt:Image size="32" resid="Contoso.tpicon_32x32" /&gt;
        &lt;bt:Image size="80" resid="Contoso.tpicon_80x80" /&gt;
      &lt;/Icon&gt;

      &lt;!-- Control. It can be of type "Button" or "Menu". --&gt;
      &lt;Control xsi:type="Button" id="Contoso.TaskpaneButton"&gt;
        &lt;Label resid="Contoso.TaskpaneButton.Label" /&gt;
        &lt;Supertip&gt;
          &lt;!-- ToolTip title. resid must point to a ShortString resource. --&gt;
          &lt;Title resid="Contoso.TaskpaneButton.Label" /&gt;
          &lt;!-- ToolTip description. resid must point to a LongString resource. --&gt;
          &lt;Description resid="Contoso.TaskpaneButton.Tooltip" /&gt;
        &lt;/Supertip&gt;
        &lt;Icon&gt;
          &lt;bt:Image size="16" resid="Contoso.tpicon_16x16" /&gt;
          &lt;bt:Image size="32" resid="Contoso.tpicon_32x32" /&gt;
          &lt;bt:Image size="80" resid="Contoso.tpicon_80x80" /&gt;
        &lt;/Icon&gt;

        &lt;!-- This is what happens when the command is triggered (E.g. click on the Ribbon). Supported actions are ExecuteFunction or ShowTaskpane. --&gt;
        &lt;Action xsi:type="ShowTaskpane"&gt;
          &lt;TaskpaneId&gt;ButtonId1&lt;/TaskpaneId&gt;
          &lt;!-- Provide a URL resource id for the location that will be displayed on the task pane. --&gt;
          &lt;SourceLocation resid="Contoso.Taskpane.Url" /&gt;
        &lt;/Action&gt;
      &lt;/Control&gt;
    &lt;/Group&gt;
  &lt;/OfficeTab&gt;
&lt;/ExtensionPoint&gt;
</code></pre><p>事实上，点击按钮就是显示出来那个TaskPane（任务面板）而已，唯一做了设置的就是指定了这个面板默认打开的Url地址. 这是通过在Resources中设定的。<pre><code>&lt;Resources&gt;
  &lt;bt:Images&gt;
    &lt;bt:Image id="Contoso.tpicon_16x16" DefaultValue="~remoteAppUrl/Images/Button16x16.png" /&gt;
    &lt;bt:Image id="Contoso.tpicon_32x32" DefaultValue="~remoteAppUrl/Images/Button32x32.png" /&gt;
    &lt;bt:Image id="Contoso.tpicon_80x80" DefaultValue="~remoteAppUrl/Images/Button80x80.png" /&gt;
  &lt;/bt:Images&gt;
  &lt;bt:Urls&gt;
    &lt;bt:Url id="Contoso.DesktopFunctionFile.Url" DefaultValue="~remoteAppUrl/Functions/FunctionFile.html" /&gt;
    &lt;bt:Url id="Contoso.Taskpane.Url" DefaultValue="~remoteAppUrl/Home.html" /&gt;
    &lt;bt:Url id="Contoso.GetStarted.LearnMoreUrl" DefaultValue="https://go.microsoft.com/fwlink/?LinkId=276812" /&gt;
  &lt;/bt:Urls&gt;
  &lt;!-- ShortStrings max characters==125. --&gt;
  &lt;bt:ShortStrings&gt;
    &lt;bt:String id="Contoso.TaskpaneButton.Label" DefaultValue="Show Taskpane" /&gt;
    &lt;bt:String id="Contoso.Group1Label" DefaultValue="Commands Group" /&gt;
    &lt;bt:String id="Contoso.GetStarted.Title" DefaultValue="Get started with your sample add-in!" /&gt;
  &lt;/bt:ShortStrings&gt;
  &lt;!-- LongStrings max characters==250. --&gt;
  &lt;bt:LongStrings&gt;
    &lt;bt:String id="Contoso.TaskpaneButton.Tooltip" DefaultValue="Click to Show a Taskpane" /&gt;
    &lt;bt:String id="Contoso.GetStarted.Description" DefaultValue="Your sample add-in loaded succesfully. Go to the HOME tab and click the 'Show Taskpane' button to get started." /&gt;
  &lt;/bt:LongStrings&gt;
&lt;/Resources&gt;

</code></pre><p>也就是说，任务面板会默认加载Web应用程序的Home.html页面，而如果你打开这个文件，你会发现除了一些简单的布局设计之外，其核心部分的逻辑是写在了一个Home.js文件中的。这个js文件的核心代码是下面这一段，它做了一些基本的判断，然后加载了范例数据（loadSampleData），并且为页面上的一个编号为highlight-button的按钮绑定了一个事件（highlightHighestValue)。<pre><code>Office.initialize = function (reason) {
    $(document).ready(function () {
        // Initialize the FabricUI notification mechanism and hide it
        var element = document.querySelector('.ms-MessageBanner');
        messageBanner = new fabric.MessageBanner(element);
        messageBanner.hideBanner();
            
        // If not using Excel 2016, use fallback logic.
        if (!Office.context.requirements.isSetSupported('ExcelApi', '1.1')) {
            $("#template-description").text("This sample will display the value of the cells that you have selected in the spreadsheet.");
            $('#button-text').text("Display!");
            $('#button-desc').text("Display the selection");

            $('#highlight-button').click(displaySelectedCells);
            return;
        }

        $("#template-description").text("This sample highlights the highest value from the cells you have selected in the spreadsheet.");
        $('#button-text').text("Highlight!");
        $('#button-desc').text("Highlights the largest number.");
                
        loadSampleData();

        // Add a click event handler for the highlight button.
        $('#highlight-button').click(hightlightHighestValue);
    });
};
</code></pre>]]></description></item><item><title>Office Add-in 架构和入门</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904343.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904343.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于2017年7月12日</p></blockquote><h1>前言</h1><p>从2月26日开始写这个Office 365开发概览系列文章—— <a href="https://aka.ms/office365devguide">https://aka.ms/office365devguide</a>，到现在已经有17篇文章。此前的这个阶段，我将主要的精力集中在Microsoft Graph的介绍和实例演示，有很多细节的研究，尤其是针对Office 365两个版本（国际版和国内版），Azure AD的两个版本（v1.0和v2.0）都有针对性的比较。<p>Microsoft Graph 显然值得我花那么多时间，而且还有很多值得深入探究的地方，但是现在是时候将镜头拉回来看看Office 365开发的全貌以及其他有意思的方向了。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f41414541415141414141414141417365414141414a47597a4f5456684e4755344c5449774e6a63744e444e6c4d7931694f4455314c5749345a6d466a596a49314d44557a59.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f41414541415141414141414141417365414141414a47597a4f5456684e4755344c5449774e6a63744e444e6c4d7931694f4455314c5749345a6d466a596a49314d44557a59.png"></a><p>不忘初心，方得始终。以下最新版本的目录，请大家参考，这个系列文章将完整覆盖但不仅限于上面提到的Office 365开发四大方向。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/contenttable.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/contenttable.PNG"></a><h1>Office Add-in 开发概述</h1><p>Microsoft Graph可以让你的业务系统很容易地和Office 365 <strong>集成</strong> 起来，立即利用Office 365的强大服务增强业务应用能力。而Office Add-in则是面向所有的Office 365 &amp; Office 开发人员的盛宴，它用来<strong>扩展</strong>Office 365 &amp; Office的能力，用中国话讲就是“插件”。只要你愿意，你随时可以为自己及周围的同事定制一些有意思的功能，它们在本机的客户端（PC &amp; Mac）和云端的在线版本（Office Online）、手机的App里面都能运行，并且得到一致性的体验。进一步地说，你还可以将这个插件发布到Office Store中去，全世界数以十亿计的Office 365 &amp; Office用户都可以使用你的杰作。<p>所以，总结起来说，Office Add-in的开发有如下的特点<ol><li>面向Office 365的订阅用户，也面向Office 2013或2016的本地用户。但后者可能在某些细节功能上面略有差异。
<li>Office Add-in的开发采用了全新的技术架构（Web Add-in，后续会专门介绍），其主要目的在于想要实现"<strong>一次编写，处处运行</strong>"。
<li>Office Add-in拥有一个成熟的生态环境，有庞大的用户群体（不完全统计，地球上1/7的人们在使用Office），有<a href="https://store.office.com/en-us/appshome.aspx?ui=en-US&amp;rs=en-US&amp;ad=US">Office Store</a>，也有配套的<a href="https://techcommunity.microsoft.com/">技术社区</a></li></ol><p>截至现在，Office Add-in支持的运行平台和可扩展的应用如下图所示<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officeaddinavailability.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officeaddinavailability.PNG"></a><blockquote><p>这个范围可能会随着时间推移发生变化，请关注 <a href="https://dev.office.com/add-in-availability">https://dev.office.com/add-in-availability</a></p></blockquote><h4>Web Add-in 技术架构</h4><p>毫无疑问，Office 的扩展开发拥有悠久的历史，也拥有包括我在内的很多忠实的粉丝。关于这段历史及其演化，我有两篇专门的文章介绍，有兴趣请参考<ol><li><a href="https://chenxizhang.gitbooks.io/office365devguide/content/docs/office365dev-overview-1.html">Office 365开发概述及生态环境介绍（一）</a><li><a href="https://chenxizhang.gitbooks.io/office365devguide/content/docs/office365dev-overview-2.html">Office 365开发概述及生态环境介绍（二）</a></li></ol><p>相比较之前的VBA（Visual Basic for Application）和VSTO（Visual Studio Tools for Office）开发，我们将这一代的Office Add-in开发技术称为“Web Add-in”，顾名思义，就是使用最普遍的Web技术来进行Office Add-in的开发。<p>实事求是地说，这一方面降低了技术的门槛，因为如果你已经有Web的开发经验，你将很容易地上手，无需特别学习。反过来说，这也增加了技术的门槛，对于一些早期的Office 插件开发者来说，这是一个不太熟悉的领域，要学的新东西不少，可能会增加大家的转换成本。无论如何，Web Add-in是一个有益的补充（使用它并不意味着要抛弃此前的VBA和VSTO），也是跨平台尤其是移动化的需要。<p>从技术的角度来看，Web Add-in确实跟早期有较大差异。下图可以看出来，Web Add-in是由两个部分组成的，首先是用来声明Add-in的manifest文件，这是一个标准的XML文件，其次是一个标准的Web应用程序。所有的功能都是在Web应用程序中实现的，对于具体用什么技术来实现没有要求，其核心是会调用到Office.js这个脚本文件完成与Office 应用程序的交互。采用这种结构，则有利于开发和部署的分离。通常来说，我们开发好的Web应用可以部署到任意地方，而给到Office 管理员或者用户的，只是那个manifest文件即可。<blockquote><p>Office.js 是对Office应用程序对象模型的封装。它还在不断地完善，但与VBA和VSTO拥有的完整COM对象模型还是会略有差异。有兴趣请关注 <a href="https://dev.office.com/reference/add-ins/javascript-api-for-office">https://dev.office.com/reference/add-ins/javascript-api-for-office</a></p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/webaddinarc.PNG"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/webaddinarc.PNG"></a><p>所以，如果要谈Web Add-in的技术架构，你需要了解几个方面<ol><li>掌握一门Web应用开发技术（不管是微软的ASP.NET，或者ASP.NET Core，还是PHP,NodeJS,Python等，都是可以的）
<li>掌握Web应用程序的托管技术（你可以部署在自己的托管服务器上面，也可以部署在微软的Azure App Service里面）
<li>了解如何将manifest文件分发给用户（你可以将文件给用户，也可以集中在Office 365中部署，也可以发布到Office Store）</li></ol><p>值得注意的是，Web Add-in对于运行的环境也有一定的要求，请参考 <a href="https://dev.office.com/docs/add-ins/overview/requirements-for-running-office-add-ins">https://dev.office.com/docs/add-ins/overview/requirements-for-running-office-add-ins</a>，我这里特别指出是浏览器兼容性。<ol><li>如果是在Windows上运行，那么必须至少安装IE 11，哪怕不是将其设置为默认浏览器。
<li>不管是在Windows 还是 MacOS上面，只接受五种浏览器设置为默认浏览器：IE 11(或更高版本)，最新版本的Microsoft Edge, Chrome, Firefox， Safari。</li></ol><h1>Office Add-in 能做什么</h1><p>那么，Office Add-in到底能做什么呢？它能做两部分事情<ol><li>为 Office 客户端添加新的功能。例如点击某个工具栏按钮后，调用外部的服务来处理文档或者邮件之类的。这种插件，通常会注册一些命令（Add-in command)，关联到Office Ribbon区域中，当用户点击后，要么就直接根据当前上下文（Office Context）进行操作，更为常见的是会打开一个任务面板（Task Pane），提供一个界面，让用户可以进一步根据需要操作。
<li>为 Office 文档添加新的内容。这个主要指的是在Excel和PowerPoint中，可以为文档插入一些特殊的对象，例如地图，图表和可视化元素等。</li></ol><p>还有一些技术细节你可能有兴趣了解<ol><li>创建自定义的Ribbon按钮和选项卡来扩展Office原生的界面
<li>使用HTML和Javascript的技术创建交互界面和逻辑
<li>可以搭配业界流行的Javacript框架（包括jQuery,Angular,TypeScript）使用，简化开发
<li>使用HTTP和AJAX的技术调用外部服务
<li>可以运行服务器代码和逻辑，如果使用ASP.NET和PHP等技术的话</li></ol><h1>Office Add-in 一瞥</h1><p>截至目前，在Office Store里面有2186个不同类型的Office Add-in</p><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/officestore.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/officestore.png"></a></p><blockquote><p>请注意，上面截图是国际版Office Store。句我得到的信息，今年的晚些时候，国内版的Office Store将很快跟我们见面。</p></blockquote><p>在每个不同的Office应用程序中，通过在“插入”选项卡中选择“Add-ins”这个分组中的“Store”按钮，可以查看到与该应用程序直接相关的所有Add-in</p><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinstore.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinstore.png"></a></p><p>下图我展示了几个在Excel运行的Add-in效果</p><p>&nbsp;<a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/exceladdinsample.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/exceladdinsample.png"></a></p><h1>结语</h1><p>Office 365 不仅仅是无可争议的高效办公第一选择，而且秉持一贯以来的优良传统，它是一个很开放的可扩展平台。除了继续支持VBA和VSTO的扩展方式，新一代Web Add-in 将全面实现“一次编写，处处运行”的目标，发挥你的创意，定制专属的功能，可以在台式机、网页、平板、手机中得到一致性的使用体验，并且还可以与全世界的数以十亿计的Office 365用户分享。]]></description></item><item><title>跨平台应用集成(在ASP.NET Core MVC 应用程序中集成 Microsoft Graph)</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904330.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904330.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年6月25日</p></blockquote><h1>谈一谈.NET 的跨平台</h1><p>终于要写到这一篇了。跨平台的支持可以说是 Office 365 平台在设计伊始就考虑的目标。我在前面的文章已经提到过了，Microsoft Graph 服务针对一些主流的开源平台（主要用来做跨平台应用）都有支持，例如 python,nodejs 等。他们真的非常好用，与此同时我虽然对他们也有一定的了解，但要跟我最熟悉的 Microsoft .NET 来比较的话，我自然还是更喜欢后者了。<p>所以，一直在等待合适的时间，要来写 Microsoft .NET 的跨平台应用，这是多么令人期待的事情啊。经过一段时间的研究，我今天正式隆重地给大家介绍，如何在 ASP.NET Core 平台上面构建一个 MVC 应用程序，并且在里面集成 Microsoft Graph。<p>关于Microsoft .NET 这几年的发展，我是感到比较兴奋的，作为一个从.NET 1.1就开始追随的骨灰级粉丝，我很高兴地看到现在.NET 已经真正迈出了跨平台的脚步，而且完全开源了。如果要讲这个话题，恐怕我是一时半会刹不住车的，所以我就此打住吧，有兴趣的朋友们可以通过下面这个网址了解更多.NET 的发展情况。 <a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/microsoftdotnet.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/microsoftdotnet.png"></a><p>这一篇文章用到的技术，是最新的.NET Core 中 ASP.NET Core 提供的，我使用了其中的 MVC 这个模板创建了一个简单的应用程序，并且略微改造了一下，使其能够采用 Azure AD 进行身份验证，继而通过获得的用户凭据能实现对 Microsoft Graph 的使用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/aspnetcore.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/aspnetcore.png"></a><h1>ASP.NET Core MVC 整合了 Graph 的场景效果</h1><p>我已经编写好了一个完整的范例，请大家通过下面的地址进行下载，我后面将大致提到一些重点的功能是如何实现的<a href="https://github.com/chenxizhang/office365dev/tree/master/samples/aspnetcoremvc">https://github.com/chenxizhang/office365dev/tree/master/samples/aspnetcoremvc</a><p>在准备这个范例，以及编写这个文章的时候，为了全面地测试在跨平台开发方面的能力，我完全采用了一台全新的 MacBook 作为工作用机，开发工具我使用的是 Visual Studio Code（这个直接就可以在 Mac 里面运行），就像你看到的这样。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/visualstudiocode.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/visualstudiocode.png"></a><p>好的，大致背景我也交代清楚了，如果大家下载了代码，可以跟我一起来体验一下这个应用程序运行起来的效果吧 —— 我推荐你也用 Visual Studio Code 来打开这个应用程序。（是的，你不再需要安装 Visual Studio 完整版）<p>打开命令行工具，我们很快要运行几个命令 </p><p><br></p><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/vscodeprojectview.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/vscodeprojectview.png"></a></p><p>请运行下面的命令，下载当前项目所依赖的一些组件包<blockquote><p>dotnet restore</p></blockquote><p>然后运行下面的命令，可以将当前项目运行起来<blockquote><p>dotnet run</p></blockquote><p>如果不出意外的话，我写好的这个简单的应用程序会启动起来，并且在本机的5000端口进行监听<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/aspnetcoremvchomepage.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/aspnetcoremvchomepage.png"></a><p>看起来跟我们一般的 MVC 程序真的是一样一样的，此时，请点击页面顶部左上角的“About”，看看会发生什么呢<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/aspnetcorelogin.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/aspnetcorelogin.png"></a><p>输入正确的用户名和密码后，你就可以看到该用户的基本信息了<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/aspnetcoreaboutpage.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/aspnetcoreaboutpage.png"></a><p>好了，功能确实就是这样，足够简单，不是吗？但是正如我猜想你应该会想到的那样，只要打开了 Graph 这扇大门，无穷的宝藏就等着你尽情地创造性地利用了。<h1>代码解析</h1><p>下面我还是简单地讲解一下我在标准的模板基础上做过哪些定制，从而实现了上面的功能的。<blockquote><p>要创建这个应用程序，你需要安装 dotnet sdk（<a href="https://www.microsoft.com/net/download/core">https://www.microsoft.com/net/download/core</a> ），然后在本地命令行工具中运行 dotnet new mvc 即可</p></blockquote><p>首先，我为项目添加了几个外部组件包，这是通过修改项目定义文件（aspnetcoremvc.csproj）来实现的。<pre><code>&lt;PackageReference Include="Microsoft.Graph" Version="1.4.0"/&gt;
&lt;PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="1.1.0"/&gt;
&lt;PackageReference Include="Microsoft.AspNetCore.Authentication.Cookies" Version="1.1.0"/&gt;
&lt;PackageReference Include="Microsoft.IdentityModel.Clients.ActiveDirectory" Version="3.13.9"/&gt;
&lt;PackageReference Include="Microsoft.AspNetCore.Session" Version="1.1.0"/&gt;
&lt;PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="1.1.2"/&gt;

</code></pre><blockquote><p>这些组件都是托管在 nuget.org 这个网站上面，甚至整个 dotnet core 的核心组件也都是开源托管在这个上面。一般添加完这些组件后，都需要运行 dotnet restore 命令在本地进行还原。</p></blockquote><p>然后，我修改了 Startup.cs 文件。这是 asp.net core 应用程序的一个标准文件，用来定义程序入口，加载相关服务和中间件。（这里涉及的知识面太多，以至于我无法一一说明，有兴趣可以参考 <a href="https://asp.net/core">https://asp.net/core</a> 了解。<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
//这里增加了一写命名空间导入
using Microsoft.Extensions.Caching;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Session;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.AspNetCore.Authentication;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;

namespace aspntecoremvc
{
    public class Startup
    {

        // This method gets called by the runtime. Use this method to add services to the container.
        //这里引入一些服务，注入一些组件
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSession();
            services.AddAuthentication(sharedoptions =&gt; sharedoptions.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme);
           
            // Add framework services.
            services.AddMvc();
        }

        //这里定义了一些静态信息
        private readonly string ClientId="e91ef175-e38d-4feb-b1ed-f243a6a81b93";
        private readonly string Authority=String.Format("https://login.microsoftonline.com/{0}","office365devlabs.onmicrosoft.com");
        private readonly string ClientSecret="2F5jdoGGNn59oxeDLE9fXx5tD86uvzIji74dmLaj3YI=";
        private readonly string GraphResourceId="https://graph.microsoft.com";
        private readonly string CallbackPath ="/signin-oidc";

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole();
            loggerFactory.AddDebug();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseBrowserLink();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();
            //这里几步是最关键的，定义了如何进行身份认证以及如何保存
            app.UseSession();
            app.UseCookieAuthentication();
            app.UseOpenIdConnectAuthentication(new OpenIdConnectOptions{
                ClientId = ClientId,
                Authority = Authority,
                ClientSecret = ClientSecret,
                ResponseType = OpenIdConnectResponseType.CodeIdToken,
                CallbackPath = CallbackPath,
                GetClaimsFromUserInfoEndpoint =true,
                Events = new OpenIdConnectEvents{
                    OnAuthorizationCodeReceived = OnAuthorizationCodeReceived
                }
            });

            app.UseMvc(routes =&gt;
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }
        private async Task OnAuthorizationCodeReceived(AuthorizationCodeReceivedContext context)
        {
            
            // 将 Token 信息保存在 session 里面，后续 Graph 就可以直接调用了

            string userObjectId = (context.Ticket.Principal.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier"))?.Value;
            ClientCredential clientCred = new ClientCredential(ClientId, ClientSecret);
            AuthenticationContext authContext = new AuthenticationContext(Authority, new SampleSessionCache(userObjectId, context.HttpContext.Session));
            AuthenticationResult authResult = await authContext.AcquireTokenByAuthorizationCodeAsync(
                context.ProtocolMessage.Code, new Uri(context.Properties.Items[OpenIdConnectDefaults.RedirectUriForCodePropertiesKey]), clientCred, GraphResourceId);

            
        }

        private Task OnAuthenticationFailed(FailureContext context)
        {
            context.HandleResponse();
            context.Response.Redirect("/Home/Error?message=" + context.Failure.Message);
            return Task.FromResult(0);
        }
    }
}

</code></pre><p>我还专门定义了一个简单的类用来保存 Token 信息。为了简单起见，我们将 Token 保存在 Session 里面，这样的话，用户登陆一次后，在一个会话里面就不需要多次登录，而是可以直接重用这些 Token。<p>这个类其实我是重用了之前在 ASP.NET MVC 开发中的那个类，没有什么特别要交待的，请直接打开 SampleSessionCache.cs 这个文件了解即可。<p>接下来，为了便于后续在 Controller 里面快速地访问到 Graph，我对 GraphServiceClient 进行了封装，请参考 SDKHelper.cs 这个文件<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.Graph;
using System.Net.Http.Headers;
using Microsoft.AspNetCore.Http;


namespace aspntecoremvc{
    public static class SDKHelper{
        
        //这里其实是对 ControllerBase 这个类型进行了扩展
        public static async Task&lt;GraphServiceClient&gt; GetAuthenticatedClient(this ControllerBase controller){

            var Authority = String.Format("https://login.microsoftonline.com/{0}","office365devlabs.onmicrosoft.com");
            var ClientId = "e91ef175-e38d-4feb-b1ed-f243a6a81b93";
            var ClientSecret = "2F5jdoGGNn59oxeDLE9fXx5tD86uvzIji74dmLaj3YI=";
            var GraphResourceId = "https://graph.microsoft.com";


            string userObjectId = controller.HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
            ClientCredential clientCred = new ClientCredential(ClientId, ClientSecret);
            AuthenticationContext authContext = new AuthenticationContext(Authority, new SampleSessionCache(userObjectId, controller.HttpContext.Session));
            AuthenticationResult result = await authContext.AcquireTokenSilentAsync(GraphResourceId,ClientId);

            GraphServiceClient client = new GraphServiceClient(new DelegateAuthenticationProvider(async request=&gt;{
                request.Headers.Authorization = new AuthenticationHeaderValue("bearer", result.AccessToken);
                await Task.FromResult(0);
            }));

            return client;

        }

    }

}

</code></pre><p>有了上面的准备，在真正需要用到 Graph 服务的地方，我们的代码是非常简单的，请参考 HomeController.cs 文件中的 About 方法<pre><code>[Authorize]//用这个标记该方法需要用户登录
public async Task&lt;IActionResult&gt; About()
{
    var client = await this.GetAuthenticatedClient();  
    //获取用户详细信息，然后传递给视图
    return View(await client.Me.Request().GetAsync());
}
</code></pre><p>到这里为止，我的这个例子的主要代码就解释完了。你可能会觉得，这太简单了吧。如果你这样认为，我一方面感到很高兴，因为这是我希望呈现出来的效果；另一方面我要提醒你的是，由于 asp.net core 是一个还比较新的技术，这方面的材料相当少，其实我还是做了相当多的研究才精炼成这样的，其间遇到过多少坑，多少曲折迂回，不足以外人道也，但我很看好 asp.net core，并且将持续在此之上进行投资，这也几乎是可以肯定的。<h1>结语</h1><p>这个例子实现的功能并没有什么惊天动地的，但与咱们之前一系列的范例相呼应的是，我是要帮助大家打开 Microsoft Graph 的大门，至于你要怎么去利用里面丰富的宝藏，我就选择的权利交给你自己。<p>写到这里，我的这个系列文章的第一个大的里程碑应该是要实现了。我用了将近四个月的时间，写了十几篇跟 Office 365 开发入门，以及具体的 Microsoft Graph 开发有关的文章，差不多算是比较完整了。<p>我还将继续写后续的内容，例如 Office Add-ins，SharePoint 开发，Teams 开发（Bot 等），有兴趣的朋友们可继续关注。<h1>2017年6月30日更新</h1><p>作为一个不断追求代码复用的程序猿，我这两天在上面这个范例基础上对代码进行了一定的封装，如果你此时查看代码的话，会发现已经有了较大的不同。<p>首先，我将所有公用的代码全部提取到了一个单独的项目（<a href="https://github.com/chenxizhang/office365dev/tree/master/samples/Office365GraphCoreMVCHelper">Office365GraphCoreMVCHelper</a> ）中，这里面的关键代码有<p>一个用来读取配置文件的类型<pre><code>namespace Office365GraphCoreMVCHelper
{
    public class AppSetting
    {

        public Info Office365ApplicationInfo { get; set; }

        public class Info
        {
            public string ClientId { get; set; }
            public string ClientSecret { get; set; }
            public string Authority { get; set; }

            public string GraphResourceId { get; set; }
        }
    }
}

</code></pre><p>一个可公用的Startup类型<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Caching;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Session;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.AspNetCore.Authentication;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace Office365GraphCoreMVCHelper
{
    public class Startup
    {

        static IConfigurationRoot Configuration { get; set; }

        public Startup(IHostingEnvironment env)
        {
            Configuration = new ConfigurationBuilder()
                            .SetBasePath(env.ContentRootPath)
                            .AddJsonFile("appsettings.json")
                            .Build();
        }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            //这里将配置信息注入到应用程序中
            services.AddOptions();
            services.Configure&lt;AppSetting&gt;(Configuration);

            services.AddSession();
            services.AddAuthentication(sharedoptions =&gt; sharedoptions.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme);

            // Add framework services.
            services.AddMvc();
        }


        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole();
            loggerFactory.AddDebug();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseBrowserLink();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            //ConfigureMiddleware(app,env,loggerFactory);

            app.UseStaticFiles();
            app.UseSession();
            app.UseCookieAuthentication();
            //获得之前注入的配置信息
            var options = app.ApplicationServices.GetRequiredService&lt;IOptions&lt;AppSetting&gt;&gt;();

            app.UseOpenIdConnectAuthentication(new OpenIdConnectOptions
            {
                ClientId = options.Value.Office365ApplicationInfo.ClientId,
                Authority = options.Value.Office365ApplicationInfo.Authority,
                ClientSecret = options.Value.Office365ApplicationInfo.ClientSecret,
                ResponseType = OpenIdConnectResponseType.CodeIdToken,
                CallbackPath = "/signin-oidc",
                GetClaimsFromUserInfoEndpoint = true,
                Events = new OpenIdConnectEvents
                {
                    OnAuthorizationCodeReceived = async (context) =&gt;
                    {
                        string userObjectId = (context.Ticket.Principal.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier"))?.Value;
                        ClientCredential clientCred = new ClientCredential(options.Value.Office365ApplicationInfo.ClientId, options.Value.Office365ApplicationInfo.ClientSecret);
                        AuthenticationContext authContext = new AuthenticationContext(options.Value.Office365ApplicationInfo.Authority, new SampleSessionCache(userObjectId, context.HttpContext.Session));
                        AuthenticationResult authResult = await authContext.AcquireTokenByAuthorizationCodeAsync(
                            context.ProtocolMessage.Code, new Uri(context.Properties.Items[OpenIdConnectDefaults.RedirectUriForCodePropertiesKey]), clientCred, options.Value.Office365ApplicationInfo.GraphResourceId);
                    }
                }
            });

            app.UseMvc(routes =&gt;
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }

        private Task OnAuthenticationFailed(FailureContext context)
        {
            context.HandleResponse();
            context.Response.Redirect("/Home/Error?message=" + context.Failure.Message);
            return Task.FromResult(0);
        }
    }
}
</code></pre><p>改造过的SDKHelper类型，主要增加了从配置文件中读取信息的功能<pre><code>using System;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Graph;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Builder;

namespace Office365GraphCoreMVCHelper
{
    public static class SDKHelper
    {
        public static async Task&lt;GraphServiceClient&gt; GetAuthenticatedClient(this ControllerBase controller,IOptions&lt;AppSetting&gt; options)
        {
            var Authority = options.Value.Office365ApplicationInfo.Authority;
            var ClientId = options.Value.Office365ApplicationInfo.ClientId;
            var ClientSecret = options.Value.Office365ApplicationInfo.ClientSecret;
            var GraphResourceId = options.Value.Office365ApplicationInfo.GraphResourceId;


            string userObjectId = controller.HttpContext.User.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
            ClientCredential clientCred = new ClientCredential(ClientId, ClientSecret);
            AuthenticationContext authContext = new AuthenticationContext(Authority, new SampleSessionCache(userObjectId, controller.HttpContext.Session));
            AuthenticationResult result = await authContext.AcquireTokenSilentAsync(GraphResourceId, ClientId);

            GraphServiceClient client = new GraphServiceClient(new DelegateAuthenticationProvider(async request =&gt;
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("bearer", result.AccessToken);
                await Task.FromResult(0);
            }));

            return client;

        }

    }
}
</code></pre><p>由于有了这个公用的组件，那么在aspnetcoremvc这个主程序中，我可以极大地简化代码。<p>首先，我在项目文件中定义了对公用组件的引用<pre><code>
&lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;


  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore" Version="1.1.2" /&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.Mvc" Version="1.1.3" /&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.StaticFiles" Version="1.1.2" /&gt;
    &lt;PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="1.1.2" /&gt;
    &lt;PackageReference Include="Microsoft.VisualStudio.Web.BrowserLink" Version="1.1.2" /&gt;
    &lt;PackageReference Include="Microsoft.Graph" Version="1.4.0"/&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="1.1.0"/&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.Authentication.Cookies" Version="1.1.0"/&gt;
    &lt;PackageReference Include="Microsoft.IdentityModel.Clients.ActiveDirectory" Version="3.13.9"/&gt;
    &lt;PackageReference Include="Microsoft.AspNetCore.Session" Version="1.1.0"/&gt;
    &lt;PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="1.1.2"/&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;   
    &lt;ProjectReference Include="..\Office365GraphCoreMVCHelper\Office365GraphCoreMVCHelper.csproj" /&gt;
  &lt;/ItemGroup&gt;  

&lt;/Project&gt;

</code></pre><p>然后，我删除了该项目中的Startup类型，取而代之的在Program中直接引用公用组件中定义好的那个Startup<pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Office365GraphCoreMVCHelper;

namespace aspntecoremvc
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseSetting("startupAssembly","Office365GraphCoreMVCHelper")
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseIISIntegration()
                .Build();

            host.Run();
        }
    }
}
</code></pre><p>当然，我们需要定义一个配置文件来保存clientId等信息，该文件命名为appsettings.json<pre><code>{
    "Office365ApplicationInfo":{
        "ClientId":"e91ef175-e38d-4feb-b1ed-f243a6a81b93",
        "ClientSecret":"2F5jdoGGNn59oxeDLE9fXx5tD86uvzIji74dmLaj3YI=",
        "Authority":"https://login.microsoftonline.com/office365devlabs.onmicrosoft.com",
        "GraphResourceId":"https://graph.microsoft.com"
    }
}
</code></pre><p>最后，在HomeController（或者同类需要用到Microsoft Graph的Controller）中，通过下面的代码来实现调用<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Clients.ActiveDirectory;
using Microsoft.Graph;
using System.Net.Http.Headers;
using Office365GraphCoreMVCHelper;
using Microsoft.Extensions.Options;

namespace aspntecoremvc.Controllers
{
    public class HomeController : Controller
    {
        private readonly IOptions&lt;AppSetting&gt; Options;
        public HomeController(IOptions&lt;AppSetting&gt; options)
        {
            this.Options = options;
        }
    
        public IActionResult Index()
        {

            return View();
        }

        [Authorize]
        public async Task&lt;IActionResult&gt; About()
        {
            var client = await this.GetAuthenticatedClient(this.Options);            
            return View(await client.Me.Request().GetAsync());
        }

        public IActionResult Contact()
        {
            ViewData["Message"] = "Your contact page.";

            return View();
        }

        public IActionResult Error()
        {
            return View();
        }
    }
}

</code></pre><h1>2017年7月1日更新</h1><p>我进一步上面分离出来的这个Office365GraphCoreMVCHelper的项目打包成了一个nuget的package<a href="https://www.nuget.org/packages/Office365GraphCoreMVCHelper/">https://www.nuget.org/packages/Office365GraphCoreMVCHelper/</a>，以便实现更大范围的复用。<p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/aspnetcorehelpernugetpackage.png"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/aspnetcorehelpernugetpackage.png"></a><p>如何使用它呢？很简单，请按照下面的步骤即可<ol><li>创建一个ASP.NET Core MVC项目</li></ol><blockquote><p>dotnet new mvc</p></blockquote><ol start="2"><li>增加对于Office365GraphCoreMVCHelper的引用，修改csproj文件，添加如下的定义</li></ol><blockquote></blockquote><ol start="3"><li>下载这个包</li></ol><blockquote><p>dotnet restore</p></blockquote><ol start="4"><li>修改Program.cs文件，使用Office365GraphCoreMVCHelper 定义好的Startup类（增加下面代码中的UseSetting这一句）。当前项目的Startup.cs文件可以删除。</li></ol><pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;

namespace testaspnetcoremvc
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseContentRoot(Directory.GetCurrentDirectory())
                .UseIISIntegration()
                .UseSetting("startupAssembly","Office365GraphCoreMVCHelper")
                .Build();

            host.Run();
        }
    }
}

</code></pre><ol start="4"><li>修改appsettings.json文件，确保里面有如下Office365ApplicationInfo信息</li></ol><pre><code>{
  "Office365ApplicationInfo":{
    "ClientId":"e91ef175-e38d-4feb-b1ed-f243a6a81b93",
    "ClientSecret":"2F5jdoGGNn59oxeDLE9fXx5tD86uvzIji74dmLaj3YI=",
    "Authority":"https://login.microsoftonline.com/office365devlabs.onmicrosoft.com",
    "GraphResourceId":"https://graph.microsoft.com"
  },
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Warning"
    }
  }
}


</code></pre><ol start="5"><li>修改HomeController，在需要进行身份验证以及调用Graph API的地方使用如下的代码即可</li></ol><pre><code>//添加几个引用
using Office365GraphCoreMVCHelper;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Authorization;

//修改构造函数，接受注入的配置信息
private IOptions&lt;AppSetting&gt; settings;
public HomeController(IOptions&lt;AppSetting&gt; options)
{
    settings = options;
}


//在需要调用Graph API的Action中做如下修改
[Authorize]
public async Task&lt;IActionResult&gt; About()
{
    var client = await this.GetAuthenticatedClient(settings);
    var user = client.Me.Request().GetAsync().Result;

    ViewData["Message"] = $"Hello,{user.DisplayName}";
    return View();
}</code></pre>]]></description></item><item><title>在无人值守程序（服务）中调用Microsoft Graph</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904311.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904311.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年5月31日</p></blockquote><h1>什么是无人值守程序（服务）</h1><p>我在此前用了几篇文章分别介绍了在桌面应用程序（控制台），Web应用程序（ASP.NET MVC），以及PowerSehll脚本中如何访问Microsoft Graph，今天这一篇要继续讲一个场景：在无人值守程序中访问Microsoft Graph。那么什么是无人值守程序呢？通常我们将此类程序定义为不需要（不允许）用户进行干预，一般用来在后台自动化运行的程序。在英文文档中，我们将其称之为daemon application，广义上说，也包括了服务这种特殊的应用程序。<p>无人值守程序与Microsoft Graph的集成，要遵守一般的流程，但也有自己的一些特点，总结起来有如下的步骤<ol><li>注册应用程序
<li>配置应用程序权限
<li>获得管理员同意
<li>获得访问令牌
<li>使用令牌访问资源</li></ol><blockquote><p>关于这个话题，官方有一个英文的文档，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/concepts/auth_v2_service">https://developer.microsoft.com/en-us/graph/docs/concepts/auth_v2_service</a></p></blockquote><h1>注册应用程序</h1><p>针对Azure AD的不同版本，注册应用程序的过程我此前已经有专门的文章介绍了，请参考<ol><li>注册Azure AD 2.0应用程序（支持国际版，支持Office 365账号以及个人账号登录，功能可能有所缺失，但这个是以后的方向），<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/applicationregisteration2.0.html">文章链接</a><li>注册Azure AD 1.0应用程序（支持国际版和中国版，仅支持Office 365账号登录，功能最全），<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/applicationregisteration.html">文章链接1</a>，<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/chinaoffice365applicationregisteration.html">文章链接2</a></li></ol><p>本文先演示注册Azure AD 2.0应用，具体的步骤就不做截图了，唯一要提醒的是<ol><li>应用程序类型设置为Web
<li>ReplyUrl可以设置为一个通用的地址，我喜欢设置为 <a href="https://developer.microsoft.com/en-us/graph/">https://developer.microsoft.com/en-us/graph/</a></li></ol><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplicationregistration-1.PNG"><h1>配置应用程序权限</h1><p>这是无人值守应用程序注册的时候，要特别注意的。由于该程序是没有用户参与的，所以它无法使用某个特定用户的身份做什么事情，而是使用一个统一的身份，该身份我们称为Application Identity，而相应的，我们要为程序申请的权限也是所谓的“Application Permissions”，而不是“Delegated Permissions”。<p>本例中，我想为应用程序申请两个权限：一个是用来获取所有用户信息的，另外一个是用来代替任何用户发送邮件。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-permissions.PNG"><h1>获得管理员同意</h1><p>由于无人值守的程序其实是自动化运行的，无需用户进行参与进行授权，而它进行的操作，却又有可能要代表用户的行为。所以通常这些权限都需要得到真正的Office 365 Tenant管理员同意才能真正生效。<blockquote><p>其实细心的朋友在上图中也应该可以看出来，几乎所有Application Permission都是需要管理员同意的（Admin Consent）</p></blockquote><p>要获得管理员同意，你可以将下面的这个链接发送给用户的Office 365 Tenant管理员<p><a href="https://login.microsoftonline.com/common/adminconsent?client_id=dff48006-b010-4859-b5d5-68acdb821322&amp;state=12345&amp;redirect_uri=https://developer.microsoft.com/en-us/graph/">https://login.microsoftonline.com/common/adminconsent?client_id=dff48006-b010-4859-b5d5-68acdb821322&amp;state=12345&amp;redirect_uri=https://developer.microsoft.com/en-us/graph/</a><p>管理员需要在下面这样的界面中对应用程序所申请的权限进行确认<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-adminconsent.png"><p>正常情况下，完成授权后页面会被导航到下面的地址，请确认admin_consent的值为true，并记录下来tenant的值。这个表示用户的Office 365 Tenant的编号，后面我们需要用到。<p><a href="https://developer.microsoft.com/en-us/graph/?admin_consent=True&amp;tenant=59723f6b-2d14-49fe-827a-8d04f9fe7a68&amp;state=12345">https://developer.microsoft.com/en-us/graph/?admin_consent=True&amp;tenant=59723f6b-2d14-49fe-827a-8d04f9fe7a68&amp;state=12345</a><h1>获取访问令牌</h1><p>无人值守应用程序，不需要用户参与进行授权，所以它获取令牌的方式也略有不同。你可以在应用程序里面使用下面的方式发起一个POST请求来获得访问令牌（Access Token）。<pre><code>POST https://login.windows.net/59723f6b-2d14-49fe-827a-8d04f9fe7a68/oauth2/token
Content-Type: application/x-www-form-urlencoded
Host: login.windows.net

client_id=338c8e70-d0da-444e-b877-9f427a16eb17&amp;scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&amp;client_secret=8V59e4aBfNr6x4lN8EAMTisk3J7WRH+glZbvgMwdDQY=&amp;grant_type=client_credentials
</code></pre><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-fiddler-request.PNG"><p>正常情况下，这个请求将返回如下的结果<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-fiddler-response.PNG"><p>请复制得到的这个access_token的值。请注意，默认情况下，这个access_token会在1个小时后过期。至于怎么刷新token，我会在后续文章中介绍。<h1>使用令牌访问资源</h1><p>有了这个access_token，应用程序就可以尽情地访问Microsoft Graph的资源了。例如，通过下面的请求可以获取到对应的Office 365 Tenant中的所有用户信息。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-getusers.PNG"><h1>使用一个控制台程序来实现代码逻辑</h1><p>上面演示的时候，我用了Fiddler这个小工具来模拟发起请求，并且快速地查看到结果。下面用一个简单的应用程序，来实现代码逻辑，给大家参考。<blockquote><p>这个程序使用了最简单的代码实现，并添加了Newtonsoft.Json这个Package</p></blockquote><pre><code>using Newtonsoft.Json.Linq;
using System;
using System.Net.Http;

namespace daemonapplication
{
    class Program
    {
        static void Main(string[] args)
        {
            //准备环境
            var clientId = "dff48006-b010-4859-b5d5-68acdb821322";
            var client_secret = "uxO3frQOekCfdOfX2Oom4Vc";
            var tenantId = "59723f6b-2d14-49fe-827a-8d04f9fe7a68";

            var client = new HttpClient();

            //获得令牌
            var request = new HttpRequestMessage(HttpMethod.Post, $"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token");
            var body = new StringContent($"grant_type=client_credentials&amp;client_id={clientId}&amp;scope=https%3A%2F%2Fgraph.microsoft.com%2F.default&amp;client_secret={client_secret}");
            body.Headers.ContentType.MediaType = "application/x-www-form-urlencoded";
            request.Content = body;
            var access_token = JObject.Parse(client.SendAsync(request).Result.Content.ReadAsStringAsync().Result)["access_token"].ToString();

            //访问资源
            request = new HttpRequestMessage(HttpMethod.Get, "https://graph.microsoft.com/v1.0/users");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", access_token);

            var users = JObject.Parse(client.SendAsync(request).Result.Content.ReadAsStringAsync().Result)["value"];

            foreach (var item in users)
            {
                Console.WriteLine($"displayName:{item["displayName"]},email:{item["email"]}");
            }

            Console.Read();


        }
    }
}
</code></pre><h1>使用Azure AD 1.0</h1><p>上面的例子很简单易懂，但如果我们使用的是Azure AD 1.0（国际版同时支持1.0和2.0，中国版则只支持1.0），则注册应用程序和使用Microsoft Graph的方式会略有不同。<h5>注册Azure 1.0 应用程序（中国版）</h5><p>请参考之前的两篇文章了解如何在Azure 1.0的环境中注册应用程序<ol><li>国际版 <a href="https://chenxizhang.gitbooks.io/office365devguide/docs/applicationregisteration.html">链接</a><li>中国版 <a href="https://chenxizhang.gitbooks.io/office365devguide/docs/chinaoffice365applicationregisteration.html">链接</a></li></ol><p>和上面提到的一样，有两点需要注意<ol><li>应用程序类型设置为Web
<li>ReplyUrl可以设置为一个通用的地址，我喜欢设置为 <a href="https://developer.microsoft.com/en-us/graph/">https://developer.microsoft.com/en-us/graph/</a></li></ol><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemonapplication-gallatin-reg.PNG"><h1>配置Azure 1.0 应用程序权限（中国版）</h1><p>和上面提到的一样，这里需要申请Application permission，而不是delegation permission<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/daemon-gallatin-permission.png"><p>这里需要注意修改Manifest文件（先下载，然后编辑，最后上传），允许隐式授权</p><p><br></p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/4578.image_thumb_5D5F9F63.png"></p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/1362.image_thumb_6D023B25.png"><h1>获得管理员同意 (中国版)</h1><p>和Azure AD 2.0明显不同的是，在1.0中，获取管理员同意，需要使用如下的链接<p><a href="https://login.chinacloudapi.cn/12c0cdab-3c40-4e86-80b9-3e6f98d2d344/oauth2/authorize?prompt=admin_consent&amp;response_type=token&amp;redirect_uri=https://developer.microsoft.com/en-us/graph/&amp;resource=https://microsoftgraph.chinacloudapi.cn&amp;client_id=3f56a5d5-7882-4290-9fd8-3908d734b3fe">https://login.chinacloudapi.cn/12c0cdab-3c40-4e86-80b9-3e6f98d2d344/oauth2/authorize?prompt=admin_consent&amp;response_type=token&amp;redirect_uri=https://developer.microsoft.com/en-us/graph/&amp;resource=https://microsoftgraph.chinacloudapi.cn&amp;client_id=3f56a5d5-7882-4290-9fd8-3908d734b3fe</a><p>此处的关键在于有一个prompt=admin_consent的参数，正常情况下，管理员进行授权确认后会跳转到下面这样的地址，里面已经包含了一个access_token<p><a href="https://developer.microsoft.com/en-us/graph/#access_token=eyJ0eXAiOiJKV1QiLCJub25jZSI6IkFRQUJBQUFBQUFDckhLdnJ4N0cyU2FaYlpoLXREbnA3Z1BvSDFZc2w5MWlxU0x4Qmdqc1ZXODhmMDR5Vm11Tm1pZGlWZGFJclY5MEhLTl9aUXlXMENERlowcWdwRnBfOWw4Wkhpb21LdkNSM19LQURMdWZ3R1NBQSIsImFsZyI6IlJTMjU2IiwieDV0IjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIiwia2lkIjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIn0.eyJhdWQiOiJodHRwczovL21pY3Jvc29mdGdyYXBoLmNoaW5hY2xvdWRhcGkuY24iLCJpc3MiOiJodHRwczovL3N0cy5jaGluYWNsb3VkYXBpLmNuLzEyYzBjZGFiLTNjNDAtNGU4Ni04MGI5LTNlNmY5OGQyZDM0NC8iLCJpYXQiOjE0OTYyNDI0MjQsIm5iZiI6MTQ5NjI0MjQyNCwiZXhwIjoxNDk2MjQ2MzI0LCJhY3IiOiIxIiwiYWlvIjoiQVNRQTIvOEFBQUFBd2E2S3Y1YmVVRGtSVTliY2pBTzBKbFVJb0xaYzk3bEtkYW5hbzRzMFJTVT0iLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6ImRlYW1vbiIsImFwcGlkIjoiM2Y1NmE1ZDUtNzg4Mi00MjkwLTlmZDgtMzkwOGQ3MzRiM2ZlIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTgwLjE1Mi4yMi41MiIsIm5hbWUiOiLpmYgg5biM56ugIiwib2lkIjoiZjU1MjRmMTAtYTNlYy00Njg3LTllMzktNWFkNmU1ZTY3MDVhIiwicGxhdGYiOiIzIiwicHVpZCI6IjIwMDM3RkZFODExNjMyMDUiLCJzY3AiOiJNYWlsLlNlbmQgVXNlci5SZWFkLkFsbCIsInN1YiI6InhpckVWTFBtVG1BRFpJTW1sZTdBajZwS0NQU2JHMlNGU3EzN3JQaV9rWkUiLCJ0aWQiOiIxMmMwY2RhYi0zYzQwLTRlODYtODBiOS0zZTZmOThkMmQzNDQiLCJ1bmlxdWVfbmFtZSI6ImFyZXNAbW9kdHNwLnBhcnRuZXIub25tc2NoaW5hLmNuIiwidXBuIjoiYXJlc0Btb2R0c3AucGFydG5lci5vbm1zY2hpbmEuY24iLCJ1dGkiOiJRSEswVy0xdXcwbTlxWW9TekNvRUFBIiwidmVyIjoiMS4wIn0.EZhZhKFXzS1hVkz5HNEFSG9lcL6CSRyjqRNEMTYpM0Q4wp7UICf1_61PQFCe_5opnZlEMl-e7sHJ2W4Ni1hqjASUxOamFoQ5pBVNQ-WgEfhX_QPJXLBbyMdFguRPdrXy1AqzYGqFQ_mtmjqFa0w7nXf4LI7vgx7MRPMm5YDljnK4vk4oXC9M7fb4EcU7g26XrBUnTz6Es_IGT9SUqAXYLDjfI3dC06GqtjRrTwtd0AYwbbUPZ288j4XZ_fb8x1lj97ZpIFZh-STnIZUatIij0dFphMrFhUig0YbMtCxlfsrpZgPyuwlrrXbnj5fgWw1ABj3xKrEaWbVt5XCT4T9-aA&amp;token_type=Bearer&amp;expires_in=3599&amp;session_state=022f05fb-4b3f-4f86-b593-cbda90232a7a&amp;admin_consent=True">https://developer.microsoft.com/en-us/graph/#access_token=eyJ0eXAiOiJKV1QiLCJub25jZSI6IkFRQUJBQUFBQUFDckhLdnJ4N0cyU2FaYlpoLXREbnA3Z1BvSDFZc2w5MWlxU0x4Qmdqc1ZXODhmMDR5Vm11Tm1pZGlWZGFJclY5MEhLTl9aUXlXMENERlowcWdwRnBfOWw4Wkhpb21LdkNSM19LQURMdWZ3R1NBQSIsImFsZyI6IlJTMjU2IiwieDV0IjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIiwia2lkIjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIn0.eyJhdWQiOiJodHRwczovL21pY3Jvc29mdGdyYXBoLmNoaW5hY2xvdWRhcGkuY24iLCJpc3MiOiJodHRwczovL3N0cy5jaGluYWNsb3VkYXBpLmNuLzEyYzBjZGFiLTNjNDAtNGU4Ni04MGI5LTNlNmY5OGQyZDM0NC8iLCJpYXQiOjE0OTYyNDI0MjQsIm5iZiI6MTQ5NjI0MjQyNCwiZXhwIjoxNDk2MjQ2MzI0LCJhY3IiOiIxIiwiYWlvIjoiQVNRQTIvOEFBQUFBd2E2S3Y1YmVVRGtSVTliY2pBTzBKbFVJb0xaYzk3bEtkYW5hbzRzMFJTVT0iLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6ImRlYW1vbiIsImFwcGlkIjoiM2Y1NmE1ZDUtNzg4Mi00MjkwLTlmZDgtMzkwOGQ3MzRiM2ZlIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTgwLjE1Mi4yMi41MiIsIm5hbWUiOiLpmYgg5biM56ugIiwib2lkIjoiZjU1MjRmMTAtYTNlYy00Njg3LTllMzktNWFkNmU1ZTY3MDVhIiwicGxhdGYiOiIzIiwicHVpZCI6IjIwMDM3RkZFODExNjMyMDUiLCJzY3AiOiJNYWlsLlNlbmQgVXNlci5SZWFkLkFsbCIsInN1YiI6InhpckVWTFBtVG1BRFpJTW1sZTdBajZwS0NQU2JHMlNGU3EzN3JQaV9rWkUiLCJ0aWQiOiIxMmMwY2RhYi0zYzQwLTRlODYtODBiOS0zZTZmOThkMmQzNDQiLCJ1bmlxdWVfbmFtZSI6ImFyZXNAbW9kdHNwLnBhcnRuZXIub25tc2NoaW5hLmNuIiwidXBuIjoiYXJlc0Btb2R0c3AucGFydG5lci5vbm1zY2hpbmEuY24iLCJ1dGkiOiJRSEswVy0xdXcwbTlxWW9TekNvRUFBIiwidmVyIjoiMS4wIn0.EZhZhKFXzS1hVkz5HNEFSG9lcL6CSRyjqRNEMTYpM0Q4wp7UICf1_61PQFCe_5opnZlEMl-e7sHJ2W4Ni1hqjASUxOamFoQ5pBVNQ-WgEfhX_QPJXLBbyMdFguRPdrXy1AqzYGqFQ_mtmjqFa0w7nXf4LI7vgx7MRPMm5YDljnK4vk4oXC9M7fb4EcU7g26XrBUnTz6Es_IGT9SUqAXYLDjfI3dC06GqtjRrTwtd0AYwbbUPZ288j4XZ_fb8x1lj97ZpIFZh-STnIZUatIij0dFphMrFhUig0YbMtCxlfsrpZgPyuwlrrXbnj5fgWw1ABj3xKrEaWbVt5XCT4T9-aA&amp;token_type=Bearer&amp;expires_in=3599&amp;session_state=022f05fb-4b3f-4f86-b593-cbda90232a7a&amp;admin_consent=True</a><h1>获取访问令牌（中国版）</h1><p>这一步可以跳过，因为上面这一步已经获得了access_token<h5>使用令牌访问资源（中国版）</h5><pre><code>using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace ConsoleApp6
{
    class Program
    {
        static void Main(string[] args)
        {
            var result = GetUsers().Result;
            Console.WriteLine(result);

            Console.Read();

        }


        static async Task&lt;string&gt; GetUsers()
        {
            var token = "eyJ0eXAiOiJKV1QiLCJub25jZSI6IkFRQUJBQUFBQUFDckhLdnJ4N0cyU2FaYlpoLXREbnA3Z1BvSDFZc2w5MWlxU0x4Qmdqc1ZXODhmMDR5Vm11Tm1pZGlWZGFJclY5MEhLTl9aUXlXMENERlowcWdwRnBfOWw4Wkhpb21LdkNSM19LQURMdWZ3R1NBQSIsImFsZyI6IlJTMjU2IiwieDV0IjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIiwia2lkIjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIn0.eyJhdWQiOiJodHRwczovL21pY3Jvc29mdGdyYXBoLmNoaW5hY2xvdWRhcGkuY24iLCJpc3MiOiJodHRwczovL3N0cy5jaGluYWNsb3VkYXBpLmNuLzEyYzBjZGFiLTNjNDAtNGU4Ni04MGI5LTNlNmY5OGQyZDM0NC8iLCJpYXQiOjE0OTYyNDI0MjQsIm5iZiI6MTQ5NjI0MjQyNCwiZXhwIjoxNDk2MjQ2MzI0LCJhY3IiOiIxIiwiYWlvIjoiQVNRQTIvOEFBQUFBd2E2S3Y1YmVVRGtSVTliY2pBTzBKbFVJb0xaYzk3bEtkYW5hbzRzMFJTVT0iLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6ImRlYW1vbiIsImFwcGlkIjoiM2Y1NmE1ZDUtNzg4Mi00MjkwLTlmZDgtMzkwOGQ3MzRiM2ZlIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTgwLjE1Mi4yMi41MiIsIm5hbWUiOiLpmYgg5biM56ugIiwib2lkIjoiZjU1MjRmMTAtYTNlYy00Njg3LTllMzktNWFkNmU1ZTY3MDVhIiwicGxhdGYiOiIzIiwicHVpZCI6IjIwMDM3RkZFODExNjMyMDUiLCJzY3AiOiJNYWlsLlNlbmQgVXNlci5SZWFkLkFsbCIsInN1YiI6InhpckVWTFBtVG1BRFpJTW1sZTdBajZwS0NQU2JHMlNGU3EzN3JQaV9rWkUiLCJ0aWQiOiIxMmMwY2RhYi0zYzQwLTRlODYtODBiOS0zZTZmOThkMmQzNDQiLCJ1bmlxdWVfbmFtZSI6ImFyZXNAbW9kdHNwLnBhcnRuZXIub25tc2NoaW5hLmNuIiwidXBuIjoiYXJlc0Btb2R0c3AucGFydG5lci5vbm1zY2hpbmEuY24iLCJ1dGkiOiJRSEswVy0xdXcwbTlxWW9TekNvRUFBIiwidmVyIjoiMS4wIn0.EZhZhKFXzS1hVkz5HNEFSG9lcL6CSRyjqRNEMTYpM0Q4wp7UICf1_61PQFCe_5opnZlEMl-e7sHJ2W4Ni1hqjASUxOamFoQ5pBVNQ-WgEfhX_QPJXLBbyMdFguRPdrXy1AqzYGqFQ_mtmjqFa0w7nXf4LI7vgx7MRPMm5YDljnK4vk4oXC9M7fb4EcU7g26XrBUnTz6Es_IGT9SUqAXYLDjfI3dC06GqtjRrTwtd0AYwbbUPZ288j4XZ_fb8x1lj97ZpIFZh-STnIZUatIij0dFphMrFhUig0YbMtCxlfsrpZgPyuwlrrXbnj5fgWw1ABj3xKrEaWbVt5XCT4T9-aA";

            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            HttpResponseMessage response = await client.GetAsync("https://microsoftgraph.chinacloudapi.cn/v1.0/users/");
            string retResp = await response.Content.ReadAsStringAsync();

            return retResp;
        }
    }
}
</code></pre><p>如果我们将代码再演化一下，使用Microsoft.Graph进行访问的话，会更加轻松惬意，因为可以完全基于强类型的方式进行操作<p><br><pre><code>using Microsoft.Graph;
using System;
using System.Threading.Tasks;
using System.Linq;

namespace ConsoleApp6
{
    class Program
    {
        static void Main(string[] args)
        {
            var result = GetUsers().Result;

            foreach (var item in result)
            {
                Console.WriteLine(item.DisplayName);
            }

            Console.Read();

        }


        static async Task&lt;IGraphServiceUsersCollectionPage&gt; GetUsers()
        {
            var token = "eyJ0eXAiOiJKV1QiLCJub25jZSI6IkFRQUJBQUFBQUFDckhLdnJ4N0cyU2FaYlpoLXREbnA3Z1BvSDFZc2w5MWlxU0x4Qmdqc1ZXODhmMDR5Vm11Tm1pZGlWZGFJclY5MEhLTl9aUXlXMENERlowcWdwRnBfOWw4Wkhpb21LdkNSM19LQURMdWZ3R1NBQSIsImFsZyI6IlJTMjU2IiwieDV0IjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIiwia2lkIjoiWTFjenBtLXhpY2FRVFZYQzlPU2JXN3pHeHRRIn0.eyJhdWQiOiJodHRwczovL21pY3Jvc29mdGdyYXBoLmNoaW5hY2xvdWRhcGkuY24iLCJpc3MiOiJodHRwczovL3N0cy5jaGluYWNsb3VkYXBpLmNuLzEyYzBjZGFiLTNjNDAtNGU4Ni04MGI5LTNlNmY5OGQyZDM0NC8iLCJpYXQiOjE0OTYyNDI0MjQsIm5iZiI6MTQ5NjI0MjQyNCwiZXhwIjoxNDk2MjQ2MzI0LCJhY3IiOiIxIiwiYWlvIjoiQVNRQTIvOEFBQUFBd2E2S3Y1YmVVRGtSVTliY2pBTzBKbFVJb0xaYzk3bEtkYW5hbzRzMFJTVT0iLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6ImRlYW1vbiIsImFwcGlkIjoiM2Y1NmE1ZDUtNzg4Mi00MjkwLTlmZDgtMzkwOGQ3MzRiM2ZlIiwiYXBwaWRhY3IiOiIwIiwiZmFtaWx5X25hbWUiOiLpmYgiLCJnaXZlbl9uYW1lIjoi5biM56ugIiwiaXBhZGRyIjoiMTgwLjE1Mi4yMi41MiIsIm5hbWUiOiLpmYgg5biM56ugIiwib2lkIjoiZjU1MjRmMTAtYTNlYy00Njg3LTllMzktNWFkNmU1ZTY3MDVhIiwicGxhdGYiOiIzIiwicHVpZCI6IjIwMDM3RkZFODExNjMyMDUiLCJzY3AiOiJNYWlsLlNlbmQgVXNlci5SZWFkLkFsbCIsInN1YiI6InhpckVWTFBtVG1BRFpJTW1sZTdBajZwS0NQU2JHMlNGU3EzN3JQaV9rWkUiLCJ0aWQiOiIxMmMwY2RhYi0zYzQwLTRlODYtODBiOS0zZTZmOThkMmQzNDQiLCJ1bmlxdWVfbmFtZSI6ImFyZXNAbW9kdHNwLnBhcnRuZXIub25tc2NoaW5hLmNuIiwidXBuIjoiYXJlc0Btb2R0c3AucGFydG5lci5vbm1zY2hpbmEuY24iLCJ1dGkiOiJRSEswVy0xdXcwbTlxWW9TekNvRUFBIiwidmVyIjoiMS4wIn0.EZhZhKFXzS1hVkz5HNEFSG9lcL6CSRyjqRNEMTYpM0Q4wp7UICf1_61PQFCe_5opnZlEMl-e7sHJ2W4Ni1hqjASUxOamFoQ5pBVNQ-WgEfhX_QPJXLBbyMdFguRPdrXy1AqzYGqFQ_mtmjqFa0w7nXf4LI7vgx7MRPMm5YDljnK4vk4oXC9M7fb4EcU7g26XrBUnTz6Es_IGT9SUqAXYLDjfI3dC06GqtjRrTwtd0AYwbbUPZ288j4XZ_fb8x1lj97ZpIFZh-STnIZUatIij0dFphMrFhUig0YbMtCxlfsrpZgPyuwlrrXbnj5fgWw1ABj3xKrEaWbVt5XCT4T9-aA";

            GraphServiceClient client = new GraphServiceClient(
                new DelegateAuthenticationProvider(async (request) =&gt;
                {
                    await Task.Run(() =&gt; { request.Headers.Add("Authorization", $"Bearer {token}"); });
                }));

            client.BaseUrl = "https://microsoftgraph.chinacloudapi.cn/v1.0";

            var result = client.Users.Request().GetAsync().Result;

            return result;
        }
    }
}</code></pre>]]></description></item><item><title>如何通过PowerShell获取Office 365 TenantID</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904293.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904293.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于2017年5月31日</p></blockquote><h1>安装Azure Powershell 模块</h1><p>Installing the Azure PowerShell Service Management module <a href="https://docs.microsoft.com/en-us/powershell/azure/install-azure-ps?view=azuresmps-3.7.0">https://docs.microsoft.com/en-us/powershell/azure/install-azure-ps?view=azuresmps-3.7.0</a><h1>使用Login-AzureRMAccount 命令查询Office 365 TenantID</h1><p>如果是国际版，直接在PowerShell中输入Login-AzureRMAccount即可<p>如果是中国版，请输入 Login-AzureRmAccount -EnvironmentName AzureChinaCloud<p>这个命令，会弹出一个对话框要求你输入用户凭据，正确地输入用户名和密码后，会显示如下的结果<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/login-azurermaccount-result.PNG">]]></description></item><item><title>Microsoft Graph Web应用程序极致开发体验</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904287.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904287.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 重写于 2017年5月24日</p></blockquote><h1>前言</h1><p>这篇文章最早写于2017年5月2日，当时的想法是从最简单的方式来写如何在一个ASP.NET MVC应用程序中集成Microsoft Graph，但实际上还真不是那么简单，至少我是不满意的，加上这一两周都比较忙，所以这一篇就一直搁置。直到上周的一个契机，让我看到了一个全新的方式，而且可以极大地改变我们在Web应用程序中集成Microsoft Graph，所以抓紧做了实践，写出来给大家参考。<p>在今年3月份Visual Studio 2017进行发布的时候，我已经发现它新增了一个很重要的功能，名称叫Connected Services，它提供了连接Azure AD，Office 365等云端服务的能力，这让我大喜过外，因为这确实是我们一直需要的东西。但仔细看下来，却发现这个第一版的功能，并不是最新的Microsoft Graph集成，而是Office 365传统的每个服务单独的RestAPI的接口。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-services-office365.png"><p>由于我正好在写这个系列文章，对Microsoft Graph有些研究，对其重要性深有感触，所以我当即给公司内部负责Visual Studio的最高领导（Julia Liuson —— 潘正磊女士）发了邮件提出意见，希望她能尽快考虑直接集成Microsoft Graph。没想到Julia很快就回了邮件，在表示亲切慰问的同时明确表态会尽快考虑这个需求，而就在前不久举办的Build 2017大会上，我们就看到了这个组件的更新，包含在最新的Visual Studio 2017 Preview中。<blockquote><p>我将这个有意思的小插曲写出来，当然不是天真地认为这个更新的快速推出有我什么功劳。但从这里可以看出微软的产品组是很重视一线（包括客户，用户以及内部员工等）反馈的声音，而且他们的响应速度是非常快的。我必须为他们点个赞！</p></blockquote><p>Visual Studio 2017 Preview是一个特殊的版本，可以单独安装，并且可以与现存的Visual Studio其他版本共存。它的下载地址在 <a href="https://www.visualstudio.com/vs/preview/">https://www.visualstudio.com/vs/preview/</a> .<p>与此同时，Microsoft Graph的官方网站也提供了一篇专门的文章介绍如何使用这个Connected Service来实现与Graph的集成，请参考 <a href="https://developer.microsoft.com/en-us/graph/docs/concepts/office_365_connected_services">https://developer.microsoft.com/en-us/graph/docs/concepts/office_365_connected_services</a><h1>根据范例快速体验</h1><p>我非常推荐你根据官方文档的说明，下载它的那个<a href="https://github.com/microsoftgraph/aspnet-connect-sample/archive/Office365connectedservice.zip">范例代码</a>来快速实践。<p>在Visual Studio 2017 Preview中打开上面这个解决方案，并且打开Connected Services的界面</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/vs2017-add-connectedservice.png"></p><p>选择“Access Office 365 Services with Microsoft Graph”,输入或者选择你的Office 365 租户信息。请注意，这里目前还只支持国际版</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-graph.png"></p><p>点击“Next”进行Application的配置，如果是第一次操作，则选择“Create a new Azure AD Application”</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-createapp.png"></p><p>接下来，按照文档要求， 选择以下几个权限<pre><code>For the File APIs, set permissions to Have full access to your files
For the Mail APIs, set permissions to Send mail as you
For the User APIs, set permissions to Sign you in and read your profile
</code></pre><p>最后，按照文档要求，将Models目录下面的GraphService.cs文件中的几行代码取消注释。一切就绪，我们就可以调试了。</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-sampleapp1.png"></p><p>点击右上角的“Sign in with Microsoft”，会被导航到Office 365的登录页面</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-sampleapp2.png"></p><p>输入用户名和密码后，点击“Sign In”，系统会引导你对权限进行确认</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-sampleapp3.png"></p><p>点击“Accept”后回到主界面，然后点击“Get email address” 按钮可以看到读取到当前用户的邮箱地址，然后点击“send mail”则可以实现邮件发送。</p><p>&nbsp;</p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-sendmail.png"></p><p><br></p><p>看起来还是不错的，对吧？那么，这是怎么做到的呢？首先是Visual Studio帮我们做了不少工作，主要是自动完成应用程序注册，并且在配置文件中保存信息 </p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-config.PNG"></p><p><br><p>其次，这个范例程序，里面有几个文件预先编写好了代码<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-samplecode.PNG"><p>我不想解释这些代码。我当然是知道为什么应该这么写，但并不想让每个人都去这么写。作为一个有一点追求的老同志，我根据这些代码的逻辑封装了一个组件，便于在大家后续开发的时候，直接使用。<h4>在你的应用中快速集成Microsoft Graph</h4><p>范例运行成功并没有什么了不起，下面就要看一下怎么在一个自己写的应用程序中实现同样的功能。我上面提到了，虽然Visual Studio帮我们做了不少工作，但有些代码还是省不了的，为了让大家的代码减到最少，我写了一个组件，叫做Office365GraphMVCHelper。<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/office365graphmvchelper.png"><p><br><p>接下来我就带大家来极致体验一下，怎么用不到三行代码就完整地实现Microsoft Graph的调用。对，就是这么任性。<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-createapp1.png"><p>请注意使用Visual Studio 2017 Preview，同时确保上面对话框中，目标的Framework选择 4.6。然后再下面的对话框中选择“Empty”模板，并选择“MVC”这个功能<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-createapp2.png"><p>按照之前的介绍，添加"Connected Service","Access Office 365 Services with Microsoft Graph"。作为演示目的，请选择一个权限即可<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-user-permission.png"><p>接下来就是添加我写好的那个组件，请运行下面的命令 Install-Package Office365GraphMVCHelper<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-addpackage.PNG"><p>接下来为当前这个项目添加一个启动类（Owin Startup Class）<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-addowinclass.png"><p>用一行代码为启动类添加Microsoft Graph身份功能</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-startupclass.PNG"></p><p><br><p>接下来就可以实现业务模块了，我们可以添加一个默认的Controller，在Index这个Action里面，我用两行代码做了实现：读取当前用户的信息，并且输出到浏览器。<blockquote><p>请不要告诉你不知道什么叫Controller，咱这篇文章讲的是MVC哦</p><p><br></p></blockquote><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-homecontroller.PNG"><p>运行起来看看效果吧。在要求你输入用户名和密码，以及授权确认后，你将看到如下的界面。</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/connected-service-result.PNG"></p><p>当然，这只是一个演示，但只要打开了这扇大门，接下来你要做的就是尽情地调用Microsoft Graph所提供的功能了，详情请参考 <a href="https://github.com/microsoftgraph/msgraph-sdk-dotnet">https://github.com/microsoftgraph/msgraph-sdk-dotnet</a> 。<h1>总结</h1><p>这一篇文章讲解了Visual Studio 2017 Preview最新推出的直接将Microsoft Graph集成到应用程序的开发体验，并且演示了如何借助我封装好的一个组件，进一步将后续编码简化到最少。我后续还会看看怎么把中国版的功能整合进来。<h4>已经实现对中国版Office 365的支持</h4><p>2017年5月31日，重构代码实现了对中国版Office 365的支持，并且将Office365GraphMVCHelper这个工具包升级到了2.0版本。</p><p><br></p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/office365mvchelper-nuget.PNG"></p><p>由于Visual Studio 2017 Preview提供的工具，不能直接添加中国版的Office 365作为Connected Service，所以，你需要手工地在中国版Office 365中<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/chinaoffice365applicationregisteration">注册应用程序</a>，并且在web.config文件中添加如下的信息<pre><code>&lt;add key="ida:ClientId" value="1142d051-c271-4044-b1ac-522c8029e3b7" /&gt;
&lt;add key="ida:ClientSecret" value="Ei4JeIsuKzPVfnkgAmWSFfE9p5YKs0yhm41dcZo/ink=" /&gt;
&lt;add key="ida:TenantId" value="12c0cdab-3c40-4e86-80b9-3e6f98d2d344" /&gt;
&lt;add key="ida:Domain" value="modtsp.partner.onmschina.cn" /&gt;
&lt;add key="ida:AADInstance" value="https://login.chinacloudapi.cn/" /&gt;
&lt;add key="ida:ResourceId" value="https://microsoftgraph.chinacloudapi.cn" /&gt;
</code></pre><p>请注意，最后一行跟国际版不一样。国际版可以省略。<p>这样完成设置后，其他的代码都是和国际版一样的，尽情享受吧]]></description></item><item><title>支持国内版Office 365的PowerShell模块现已发布</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904267.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904267.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于2017年5月12日</p></blockquote><p><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/powershell-application.html">上一篇</a>文章我详细介绍了如何在PowerShell中访问到Office 365的Graph API，在文章结尾处我留了一个问题，希望有朋友可以根据那个思路，尝试开发和设计一个可以直接用于国内版Office 365的PowerShell模块。虽然到目前为止我还木有收到有人踊跃反馈，但这段时间我已经依葫芦画瓢做了一个自己的版本，并且发布到了PowerShell Gallery，如果有兴趣的朋友，可以直接使用。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-graph-api.png"><p>因为这是一个标准的模块，所以使用方式跟其他的模块是一样的，目前我为该模块做的设计是：优先支持国内版Office 365（Gallatin），并且提供了最简化的参数调用方式。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/galltin-graph-api-desc.png"><p>安装完这个模块后，可以在你的PowerShell脚本中像下面这样使用它<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/use-gallatin-graphapi.PNG"><p>尽情享用吧，如果有什么使用上面的问题，欢迎给我反馈。]]></description></item><item><title>在PowerShell脚本中集成Microsoft Graph</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904265.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904265.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于2017年4月23日</p></blockquote><p>我旗帜鲜明地表态，我很喜欢PowerShell，相比较于此前的Cmd Shell，它有一些重大的创新，例如基于.NET的类型系统，以及管道、模块的概念等等。那么，PowerShell是否可以愉快地跟Microsoft Graph搭配工作，为我们的IT管理员或者开发人员提供一种利用脚本就可以对Office 365进行运维和集成呢？<blockquote><p>PowerShell一直可以管理Office 365，但那是通过比较传统的方式，就是Office 365提供了一些特定的Cmdlet，通常是给管理员用的，而且每个服务都可能有一套自己的Cmdlet，有兴趣的朋友可以参考<a href="http://powershell.office.com/">http://powershell.office.com/</a>。今天介绍的这个与Microsoft Graph的集成，是一种全新的视角。</p></blockquote><p>言归正传，要在PowerShell脚本中访问Microsoft Graph，当然首先也得注册应用程序，这个我已经用了几篇文章详细介绍过了，这里不再赘述。其次，就是要面临认证和授权的问题，最后才是对Microsoft Graph资源的调用。<blockquote><p>这个三部曲，看起来最后一步是重点，但其实很多朋友是被卡在第一步和第二步。请仔细阅读我此前的文章。</p></blockquote><h1>准备环境</h1><p>本文将直接使用<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/desktopapplication.html">上一篇</a>中已经注册好的应用程序，它的信息如下<pre><code>AppId ：45aa2ecc-5e57-4c91-86c1-b93064800c39
RedirectUrl ：https://login.microsoftonline.com/common/oauth2/nativeclient
</code></pre><p>接下来我们就着手来做认证和授权了。我坚持我的观点，不想自己去发起和解析OAuth，所以我推荐给大家一个能直接用的PowerShell模块。它虽然不是官方提供的，但经过我的测试使用我发现还是挺方便的。<p>Microsoft Graph API <a href="https://www.powershellgallery.com/packages/MicrosoftGraphAPI/0.1.4">https://www.powershellgallery.com/packages/MicrosoftGraphAPI/0.1.4</a><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/microsoftgraphapi-powershell.png"><blockquote><p>值得注意的是，它的最后更新时间是2016年4月27日。</p></blockquote><h4>安装Microsoft Graph API 模块</h4><p>这个模块需要在本地安装才能执行，请用管理员身份打开PowerShell，然后执行如下的命令 Install-Module -Name MicrosoftGraphAPI </p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-installmodule.png"></p><blockquote><p>执行Install-Module的前提条件是当前操作系统需要有一个PowerShellGet的模块，所以要求运行环境是Windows 10，关于这个的说明，有兴趣可以参考 <a href="https://www.powershellgallery.com/">https://www.powershellgallery.com/</a></p></blockquote><p>安装成功后，可以通过Get-Command -Module MicrosoftGraphAPI 获得这个模块为当前环境安装的命令，并且通过Get-Help xxxxx 快速了解这些命令的用法<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-install-post.png"><h1>通过Get-GraphAuthToken认证和授权</h1><p>安装好了Microsoft Graph API这个模块，我们可以通过下面这样的命令去进行用户身份的认证和授权 $token=Get-GraphAuthToken -AADTenant "office365devlabs.onmicrosoft.com" -ClientId "45aa2ecc-5e57-4c91-86c1-b93064800c39" -RedirectUri "<a href="https://login.microsoftonline.com/common/oauth2/nativeclient">https://login.microsoftonline.com/common/oauth2/nativeclient</a>" -Credential (Get-Credential)<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-login.png"><p>请注意，我们这里调用的是PowerShell自带的一个获取用户凭据的对话框来得到用户信息，然后API会将这些信息提交给Microsoft Graph，并且得到AccessToken给PowerShell。<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-token.PNG"><h1>通过Invoke-GraphRequest执行Microsoft Graph查询</h1><p>这是一个通用的方法，它可以用来执行所有的Microsfot Graph操作，包括查询数据，增加、更新、删除数据等。下面演示一个最简单的查询，用来获取当前用户的基本信息 Invoke-GraphRequest -url "<a href="https://graph.microsoft.com/v1.0/me">https://graph.microsoft.com/v1.0/me</a>" -Token $token -Method GET<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-me.PNG"><p><br><p>看起来还不错，有觉悟的同学一定会发现，以上的命令访问的都是国际版Office 365。那么，中国版的Office 365是否也可以同样操作呢？很抱歉，<strong>目前来说这个API是不支持中国版的Office 365的</strong>。<p>这就给我们提了一个好问题，我们能不能自己写一个适合于中国版Office 365的Microsoft Graph API呢？为什么不呢？<p>结合<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/desktopapplication.html">上一篇</a>演示的访问中国版Office 365的代码，有兴趣的同学可以自行研究一下怎么在现有的这个API基础上进行修改实现<p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/powershell-api-sample.png"><blockquote><p>如果有实现出来，并且自告奋勇地分享在PSGallery中，我请喝咖啡 :)</p></blockquote>]]></description></item><item><title>Microsoft Graph 桌面应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904255.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:12:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904255.html</guid><description><![CDATA[<blockquote><p>作者：陈希章 发表于 2017年3月22日</p></blockquote><p>桌面应用程序，在我这篇文章的语境中，我是特指在Windows桌面上面直接运行的.NET应用程序，包括Console Application，WPF Application，Windows Forms Application, UWP Application，并且限于篇幅，我只会以Console Application作为演示，因为无论表现形式如何不同，它们从本质上是类似的。<blockquote><p>本文所附带示例代码可以通过<a href="https://github.com/chenxizhang/office365dev/tree/master/samples/graph-consoleapplicationsample">https://github.com/chenxizhang/office365dev/tree/master/samples/graph-consoleapplicationsample</a>访问,这是由Visual Studio 2017编写,开发语言为C#,在Windows 10 Enterprise上面测试通过。请注意，作为演示目的，我尽可能在范例代码中仅包含最必要的代码。</p></blockquote><h1>注册Microsoft Graph应用程序</h1><p>要进行具体的编程之前，你需要注册Microsfot Graph应用程序。本系列文章约定，针对国际版我将采用Azure AD 2.0这种方式进行注册，而针对中国版将采用Azure AD 1.0这种方式。这两种方式的详细操作步骤，以及我注册好的范例应用程序，请参考<h5><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/applicationregisteration2.0.html">注册Azure AD 2.0 应用程序</a></h5><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/office365application-20.PNG"><h5><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/chinaoffice365applicationregisteration.html">注册中国版Microsoft Graph应用程序</a></h5><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-nativeapplicationsample.PNG"><h1>创建Console Application</h1><p>不要问我怎么做这个事情，你应该知道的。 </p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graph-createconsoleapplication.png"></p><h1>考虑安全认证功能</h1><p>关键是，接下来你该如何考虑呢？有的人会联想到OAuth，这是一个很好的想法。我在此前已经提到过如何分三个步骤实现Microsoft Graph应用开发，第一步是注册应用程序，第二步是实现身份认证，第三步就是该怎么调用你就怎么调用。<p>下图介绍了在Azure AD 2.0中支持的OAuth认证流程</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/active-directory-oauth-code-flow-native-app.png"></p><p>简单地说，OAuth认证一般会有三个步骤<ol><li>客户端代表用户发起认证请求（通常是/authorize 这个地址），这个会跳转到Office 365的登录页面，让用户输入账号和密码
<li>如果用户提供了正确的账号和密码，并确认授权，Azure AD会向我们在注册应用程序时提供的回调地址（redirectUrl）POST一个请求过来，附上一个code，然后我们的应用需要继续用这个code去发起一个请求，申请访问令牌（通常是/token这个地址）
<li>客户端得到令牌（Access_Token），就可以代表用户访问Microsoft Graph的资源（通常是放在请求的头部里面）。这里需要注意的是，通常令牌都是会一定时间过期的，Micrsoft Graph的令牌默认为1小时有效。过期前可以通过一定的方式刷新令牌。</li></ol><p>你当然可以在了解上述原理马上开始编写代码，但这里要请你了解，为了降低开发人员在这块的工作量，并且尽量进行标准化，Microsoft Graph针对不同的平台和语言都有对应的SDK。请参考 <a href="https://developer.microsoft.com/zh-cn/graph/docs/get-started/get-started">https://developer.microsoft.com/zh-cn/graph/docs/get-started/get-started</a><p><br><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphsdk.PNG"><p>具体到我们本篇文章的目标，如果Office 365是国际版，你可以使用Microsoft Graph Client Library <a href="https://www.nuget.org/packages/Microsoft.Graph/">https://www.nuget.org/packages/Microsoft.Graph/</a> </p><p><br></p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/microsoftgraphclientlib.PNG"></p><p><br></p><p>和 Microsoft Authentication Library <a href="https://www.nuget.org/packages/Microsoft.Identity.Client/1.0.304142221-alpha">https://www.nuget.org/packages/Microsoft.Identity.Client/1.0.304142221-alpha</a></p><blockquote><p>目前这个 Microsoft Authentication Library 的状态是Preview，但是很值得期待，因为它还有针对.NET Core的版本</p></blockquote><p>而如果是用中国版，你也可以使用 Active Directory Authentication Library .NET <a href="https://msdn.microsoft.com/library/en-us/Mt417579.aspx">https://msdn.microsoft.com/library/en-us/Mt417579.aspx</a> </p><p><br></p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/adal.PNG"></p><h1>实现国际版Microsoft Graph调用</h1><p>首先，运行下面的命令安装上面提到的两个Library，并且进行更新<pre><code>Install-Package Microsoft.Graph
Install-Package Microsoft.Identity.Client -IncludePrerelease

Update-Package
</code></pre><p>接下来，我们需要编写一个方法，封装一下Graph Authentication这个步骤.<blockquote><p>备注，我认为这里还有可以改进的空间，最好是连这一步都可以省略掉。产品组是还没有完全想好，日后应该会加上这块实现。</p></blockquote><pre><code>class GraphAuthenticator : IAuthenticationProvider
{
    static string token;
    static DateTimeOffset Expiration;



    public async Task AuthenticateRequestAsync(HttpRequestMessage request)
    {
        string clientID = "45aa2ecc-5e57-4c91-86c1-b93064800c39";//这个ID是我创建的一个临时App的ID，请替换为自己的
        string[] scopes = { "user.read", "mail.read", "mail.send"};
        var app = new PublicClientApplication(clientID);

        AuthenticationResult result = null;
        try
        {
            result = await app.AcquireTokenSilentAsync(scopes);
            token = result.Token;
        }
        catch (Exception)
        {
            if (string.IsNullOrEmpty(token) || Expiration &lt;= DateTimeOffset.UtcNow.AddMinutes(5))
            {
                result = await app.AcquireTokenAsync(scopes);
                Expiration = result.ExpiresOn;
                token = result.Token;
            }
        }


        request.Headers.Add("Authorization", $"Bearer {token}");

    }
}
</code></pre><p>有了这个类，接下来我们要调用Microsoft Graph简直可以说是易如反掌，请参考下面的代码<pre><code>var client = new GraphServiceClient(new GraphAuthenticator());//创建客户端代理
var user = client.Me.Request().GetAsync().Result;//获取当前用户信息
Console.WriteLine(user.DisplayName);

var messages = client.Me.Messages.Request().GetAsync().Result;//获取用户的前十封邮件
foreach (var item in messages)
{
    Console.WriteLine(item.Subject);
}

client.Me.SendMail(new Message() //发送邮件
{
    Subject = "调用Microsoft Graph发出的邮件",
    Body = new ItemBody()
    {
        ContentType = BodyType.Text,
        Content = "这是一封调用了Microsoft Graph服务发出的邮件，范例参考 https://github.com/chenxizhang/office365dev"
    },
    ToRecipients = new[]
    {
        new Recipient()
        {
            EmailAddress = new EmailAddress(){ Address ="ares@office365devlabs.onmicrosoft.com"}
        }
    }
}, true).Request().PostAsync();


Console.Read();
</code></pre><blockquote><p>完整代码，请参考 <a href="https://github.com/chenxizhang/office365dev/blob/master/samples/graph-consoleapplicationsample/graph-consoleapplicationsample/Program.cs">https://github.com/chenxizhang/office365dev/blob/master/samples/graph-consoleapplicationsample/graph-consoleapplicationsample/Program.cs</a></p></blockquote><p>就是这么简单，就是这么任性，你可以马上运行这个应用程序看看效果了</p><p><br></p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graph-consoleapp-ww-login.PNG"></p><p>输入你的Office 365账号和密码（请注意，需要是国际版），然后点击“Sign In”，Microsoft Graph将引导你进行授权确认</p><p><br></p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graph-consoleapp-ww-auth.PNG"></p><p>不出意外的话，你现在就可以在控制台窗口中看到当前登录的用户信息，十个邮件标题等信息了。<h1>VB.NET 开发人员看过来</h1><p>我不止一次听到开发人员反馈说，现在在网络上想一些VB或者VB.NET的代码范例比较难。这是一个事实，我自己对VB是有感情的，为了向这部分开发人员致意，我特别提供了一个VB.NET的版本。<blockquote><p>我不能担保后续每一篇，每个范例都会提供VB.NET的版本，因为精力真的很有限。如果你有兴趣根据我的C#的范例转换为VB.NET代码，欢迎跟我联系。</p></blockquote><pre><code>Imports System.Net.Http
Imports Microsoft.Graph
Imports Microsoft.Identity.Client
''' &lt;summary&gt;
''' 这个是国际版Microsoft Graph的客户端应用程序范例
''' 作者：陈希章
''' 时间：2017年3月23日
''' &lt;/summary&gt;
Module Module1

    Sub Main()

        Dim serviceClient = New GraphServiceClient(New GraphAuthenticator())
        Dim user = serviceClient.Me.Request.GetAsync().Result

        '获取用户基本信息

        Console.WriteLine(user.DisplayName)
        Console.WriteLine(user.Mail)

        '获取用户的邮件列表
        Dim messages = serviceClient.Me.MailFolders.Inbox.Messages.Request.GetAsync().Result
        For Each item In messages
            Console.WriteLine(item.Subject)

        Next
        '发送邮件
        serviceClient.Me.SendMail(New Message() With {
            .Subject = "调用Microsoft Graph发出的邮件（VB.NET）",
            .Body = New ItemBody() With {
                .Content = "这是一封调用了Microsoft Graph服务发出的邮件，范例参考 https://github.com/chenxizhang/office365dev",
                .ContentType = BodyType.Text
            },
            .ToRecipients = New List(Of Recipient) From {
                New Recipient() With {.EmailAddress = New EmailAddress() With {.Address = "ares@office365devlabs.onmicrosoft.com"}}
            }
        }, True).Request.PostAsync()

        Console.Read()
    End Sub



    Public Class GraphAuthenticator
        Implements IAuthenticationProvider

        Shared token As String
        Shared Expiration As DateTimeOffset




        Public Async Function AuthenticateRequestAsync(request As HttpRequestMessage) As Task Implements IAuthenticationProvider.AuthenticateRequestAsync

            Dim clientID As String = "45aa2ecc-5e57-4c91-86c1-b93064800c39" '这个ID是我创建的一个临时App的ID，请替换为自己的
            Dim scopes As String() = {"user.read", "mail.read", "mail.send"}
            Dim app As PublicClientApplication = New PublicClientApplication(clientID)
            Dim result As AuthenticationResult

            Try
                result = Await app.AcquireTokenSilentAsync(scopes)
                token = result.Token


            Catch ex As Exception
                If (String.IsNullOrEmpty(token) OrElse Expiration &lt;= DateTimeOffset.UtcNow.AddMinutes(5)) Then

                    result = app.AcquireTokenAsync(scopes).Result
                    Expiration = result.ExpiresOn
                    token = result.Token
                End If
            End Try


            request.Headers.Add("Authorization", $"Bearer {token}")


        End Function
    End Class

End Module
</code></pre><h1>实现中国版Microsoft Graph调用</h1><p>接下来我们该看看在中国版Microsoft Graph调用方面有什么不同。虽然因为没有封装好的Microsoft Graph Client，但是看起来基本代码也还算简单易懂，请参考。<h5>安装下面这个Package</h5><pre><code>Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory
Update-Package
</code></pre><h5>编写一个自定义方法获取用户的访问令牌</h5><pre><code>static async Task&lt;string&gt; GetAccessToken()
{
    var appId = "9c7dd51c-072c-4aea-aaee-fc57efacb150";
    var authorizationEndpoint = "https://login.chinacloudapi.cn/common/oauth2/authorize";//国际版是https://login.microsoftonline.com/common/oauth2/authorize
    var resource = "https://microsoftgraph.chinacloudapi.cn"; //国际版是https://graph.microsoft.com 
    var redirectUri = "http://nativeapplication";//其实这个应该去掉，目前必须要填，而且要跟注册时一样


    AuthenticationResult result = null;

    var context = new AuthenticationContext(authorizationEndpoint);
    result = await context.AcquireTokenAsync(resource, appId, new Uri(redirectUri), new PlatformParameters(PromptBehavior.Always));


    return result.AccessToken;
}
</code></pre><h5>编写一个自定义方法发起Microsoft Graph请求</h5><pre><code>
/// &lt;summary&gt;
/// 定义这个方法用来进行Rest调用
/// &lt;/summary&gt;
/// &lt;param name="url"&gt;&lt;/param&gt;
/// &lt;param name="token"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
static async Task&lt;string&gt; InvokeRestReqeust(string url, string token)
{
    var client = new System.Net.WebClient();
    client.Headers.Add("Authorization", $"Bearer {token}");
    var result = await client.DownloadStringTaskAsync(url);
    return result;//请注意，这里直接返回字符串型的结果，它是Json格式的，有兴趣的可以继续在这个基础上进行处理
}
</code></pre><p>万事俱备，下面就可以在主程序中组合使用这两个方法进行Microsoft Graph调用了<pre><code>static void Main(string[] args)
{
    ///获得用户的令牌
    var token = GetAccessToken().Result;

    //获得用户的基本信息
    var me = InvokeRestReqeust("https://microsoftgraph.chinacloudapi.cn/v1.0/me", token).Result;
    Console.WriteLine(me);

    //获得用户的邮件列表（前十封）
    var messages = InvokeRestReqeust("https://microsoftgraph.chinacloudapi.cn/v1.0/me/messages", token).Result;
    Console.WriteLine(messages);


    Console.Read();

}
</code></pre><h1>VB.NET用户看过来</h1><p>我同样为这个范例准备了一个VB.NET的版本，请大家参考<pre><code>Imports System.Net
Imports Microsoft.IdentityModel.Clients.ActiveDirectory

Module Module1

    Sub Main()
        '获得用户令牌
        Dim token = GetAccessToken().Result
        '获得当前用户基本信息
        Dim user = InvokeRestRequest("https://microsoftgraph.chinacloudapi.cn/v1.0/me", token).Result
        Console.WriteLine(user)
        '获得用户的邮件列表（前十封）
        Dim messages = InvokeRestRequest("https://microsoftgraph.chinacloudapi.cn/v1.0/me/messages", token).Result
        Console.WriteLine(messages)

        Console.Read()


    End Sub

    Async Function InvokeRestRequest(url As String, token As String) As Task(Of String)
        Dim client = New WebClient()
        client.Headers.Add("Authorization", $"Bearer {token}")
        Dim result = Await client.DownloadStringTaskAsync(url)
        Return result
        '请注意，这里直接返回字符串型的结果，它是Json格式的，有兴趣的可以继续在这个基础上进行处理
    End Function

    Async Function GetAccessToken() As Task(Of String)
        Dim appId = "9c7dd51c-072c-4aea-aaee-fc57efacb150"
        Dim authorizationEndpoint = "https://login.chinacloudapi.cn/common/oauth2/authorize"
        '国际版是https://login.microsoftonline.com/common/oauth2/authorize
        Dim resource = "https://microsoftgraph.chinacloudapi.cn" '国际版是https://graph.microsoft.com
        Dim redirectUri = "http://nativeapplication" '其实这个应该去掉，目前必须要填，而且要跟注册时一样

        Dim result As AuthenticationResult
        Dim context = New AuthenticationContext(authorizationEndpoint)
        result = Await context.AcquireTokenAsync(resource, appId, New Uri(redirectUri), New PlatformParameters(PromptBehavior.Auto))

        Return result.AccessToken

    End Function


End Module
</code></pre><blockquote><p>从上面的代码对照来看，Azure AD 1.0的方式，需要开发人员处理更多细节，例如身份验证，服务调用结果处理等等。如果有兴趣并且有能力的朋友，欢迎在这个基础上做一定的封装，简化开发。</p></blockquote><p>本文所有代码范例，可以通过 <a href="https://github.com/chenxizhang/office365dev/tree/master/samples/graph-consoleapplicationsample">https://github.com/chenxizhang/office365dev/tree/master/samples/graph-consoleapplicationsample</a> 查看或者下载 </p><p><br></p><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graph-consoleapplicationsample.PNG"></p><h1>结语</h1><p>本文完整地介绍了针对国际版和中国版Office 365，在桌面应用程序中如何实现Microsoft Graph的集成。针对国际版，我采用的是Azure AD 2.0的方式；针对中国版，我采用的是Azure AD 1.0的方式。同时，为了照顾到VB.NET的开发人员，本文所有范例都提供了VB.NET的版本。]]></description></item><item><title>掀起Azure AD的盖头来——深入理解Microsoft Graph应用程序和服务权限声明</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904222.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:07:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904222.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年7月12日</p></blockquote><h1>引子</h1><p>这是一篇计划外的文章。我们都知道要进行Microsoft Graph的开发的话，需要进行应用程序注册。这个在此前我已经有专门的文章写过了。但这里存在一个小的问题：国内版的Office 365在申请好之后，并没有像国际版那样，有一个对应的可以注册和管理应用程序的Azure的界面。说起来有点绕，国际版的Office 365管理员可以直接登陆到portal.azure.com进行应用程序注册和管理，但国内版却不行。这个问题目前来说还是一个know issue。不过，在帮助一些客户解决这个问题的过程中，我们也有一些变通的做法，例如我下面的这篇文章就是摘自于世纪互联技术支持的标准做法。<p><a href="http://www.cnblogs.com/chenxizhang/p/6010139.html">国内版Office 365和Azure AAD绑定的问题及解决方案</a><p>上述方案中建议客户要另外在购买一个Azure AD的订阅，然后可以跟Office 365那个Tenant绑定起来。这个从一定程度上解决了问题，但不是那么完美。本文给大家分享的是我们另外研究出来的一些经验做法。<h1>理解Office 365与Azure AD的关系</h1><p>从逻辑上说，Azure是微软的智能云平台，在这个平台上，不光是运行了全球不计其数的客户的应用程序，也承载着包括Office 365在内的规模庞大的一些SaaS平台。而Office 365的用户管理和应用管理，本质上就是用Azure AD来实现的。当然，国外的版本，Azure AD还可以做到更多，包括组织配置文件、设备管理、按条件的访问控制等等。限于篇幅，本文不对这些高级功能进行展开，我们仅仅针对用户管理和应用管理，尤其是应用管理这块来一探究竟。<blockquote><p>本文的例子，因为主要是要演示如何解决国内版的问题，所以截图全部采用国内版Office 365或者Azure 请注意，登陆国内版本的Azure，有两种方式，一种是传统门户(manage.windowsazure.cn)，一种是新门户（portal.azure.cn)。新门户毫无疑问带来了一些新的功能，例如支持使用最新的Resource Management的方式创建和管理资源。但是，要进行Azure AD的操作的话，目前还只能在传统门户中进行</p></blockquote><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azureadportal.png"><p>这就是我们喜闻乐见的Azure AD管理界面，用户管理不用多说了，这里可以增加和删除用户，修改用户的一些基本信息。我们重点关注的是应用管理的这个部分。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azureadapplicationportal.png"><p>稍微简单地回顾一下相关的概念，注册应用程序（application）有两种不同类型（本机或者Web），除了提供一些基本信息（对于Web应用程序而言，关键一点在于提供ReplyUrl）之外，最重要的就是定义该应用程序需要访问的资源，以及申请的权限了。资源，在Azure AD内部的技术范畴来说，是较为ServicePrinciple的一个对象，而所谓的权限，又分为两种，一种是delegated permission，一种是application permission。前者也称为oauth权限，这是需要用户授权，并且模拟用户的身份去进行操作，适合于一些有用户交互的应用程序，而后者（也称为role权限）则适合于一些在后台运行的服务或者自动运行的脚本。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azureadapppermission.png"><p>必须承认，就算是有图形化界面，要完全理解上面这些东西也多少需要一定的时间。与此同时，如果我们连图形化界面都没有的话，怎么来创建应用程序并且为其申请相关资源的权限呢，这有点挑战，但是谢天谢地，我们还是找到了一些方法。<h1>通过PowerShell来创建应用程序并且定义服务和权限声明</h1><p>我旗帜鲜明地喜欢PowerShell，尤其是用来管理Azure AD以及Office 365的时候，它总是能让我们事半功倍。为了演示下面的功能，我需要提醒你准备如下的软件环境。<p>请在Windows 10的机器上面，安装如下的几个组件<ol><li>下载安装官方提供的Microsoft Online Service Sign-in Assistant for IT Professionals <a href="https://go.microsoft.com/fwlink/p/?LinkId=286152">https://go.microsoft.com/fwlink/p/?LinkId=286152</a><li>下载安装官方提供的Azure Active Directory Connection <a href="http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185">http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185</a><li>请在本地用管理员身份打开PowerShell，并运行命令 Install-Module -Name AzureAD</li></ol><blockquote><p>当然，你还得需要有一个Office 365 的管理员账号信息</p></blockquote><p>为了验证你是否安装成功如上的组件，请重新打开一个PowerShell窗口，运行下面的命令<pre><code>$credential = Get-Credential
# 此时会弹出一个登陆框，请输入Office 365管理员和密码信息，如果没有错误请继续

Connect-AzureAD -Credential $credential -AzureEnvironmentName AzureChinaCloud
# 如果没有错误请继续
Get-AzureADApplication
</code></pre><h4>查询所有的服务定义信息</h4><p>我们需要通过脚本获取到当前这个Azure AD中已经定义好的服务信息<pre><code>Get-AzureADServicePrincipal
</code></pre><p>正常情况下将返回下面的结果<p>ObjectId<br>AppId<br>DisplayName<p>06d6e7e4-dcb4-4783-a617-78d89bb584f3<br>0000000f-0000-0000-c000-000000000000<br>Microsoft.Azure.GraphExplorer<p>0a80ca08-a6b5-42d9-91a3-1a93c6c25b05<br>43e38210-29b3-411d-b9f7-4a75b5fd2786<br>工作流<p>0f6b73aa-9a6d-4c25-b518-5aef795042d6<br>00000002-0000-0ff1-ce00-000000000000<br>Office 365 Exchange Online<p>13fc1a89-6a58-406a-9cb2-42e92c458fd3<br>aa9ecb1e-fd53-4aaa-a8fe-7a54de2c1334<br>Office 365 Configure<p>1a17c404-11db-442b-93ae-e0751e1563b7<br>00000007-0000-0ff1-ce00-000000000000<br>Microsoft.ExchangeOnlineProtection<p>224fdbf8-fbe8-4d54-b98e-f8b9ad15cac8<br>00000005-0000-0000-c000-000000000000<br>Microsoft.Azure.Workflow<p>26df55ee-6a90-4a17-879c-1a982094512c<br>00000009-0000-0000-c000-000000000000<br>Power BI Service<p>2ab85e47-1ba1-4948-9a95-f16eef6215aa<br>00000003-0000-0ff1-ce00-000000000000<br>Office 365 SharePoint Online<p>30236da4-3a49-4615-bb09-d665e5938602<br>181dc382-d034-45ad-b7d7-4f440986737b<br>sample<p>30ee19e0-47bd-4a3d-8e2b-3752f02d4ffc<br>2d4d3d8e-2be3-4bef-9f87-7875a61c29de<br>OneNote<p>3319d71d-8dfc-42ff-8fa0-0aa64f553350<br>00000003-0000-0000-c000-000000000000<br>Microsoft Graph<p>348ecf66-4f9c-4ec5-8db4-c86171859ea5<br>c5393580-f805-4401-95e8-94b7a6ef2fc2<br>Office 365 Management APIs<p>465b5392-ee37-4d69-be91-dad28b5fb77a<br>00000004-0000-0ff1-ce00-000000000000<br>Office 365 Lync Online<p>465eec3f-9bcd-4c27-b071-780b86f01083<br>0000000c-0000-0000-c000-000000000000<br>Microsoft.Azure.ActiveDirectoryUX<p>4ba6a93c-053e-4575-83aa-419fcc7cadb5<br>c84c5f13-394f-4807-9a35-317cffa11143<br>工作流<p>4fa14876-02c2-4089-a450-2b8b45d17ae0<br>00000002-0000-0000-c000-000000000000<br>Windows Azure Active Directory<p>524c2aaa-6ca4-4db5-9876-b758bbd4d6c7<br>8d3a7d3c-c034-4f19-a2ef-8412952a9671<br>MicrosoftOffice<p>6226889d-694d-4ee0-8717-0997c544b94e<br>ab27a73e-a3ba-4e43-8360-8bcc717114d8<br>Microsoft.OfficeModernCalendar<p>63246e22-5673-4665-9744-e33f18aceaf3<br>aa2cd2a1-5a04-4e64-b76a-0a0f21e9d1d9<br>webappsample123<p>67749e7c-7d67-4338-abdd-82f13ff22010<br>00000006-0000-0ff1-ce00-000000000000<br>Microsoft.Office365Portal<p>6de0d20c-2b7f-4aed-803c-f3157018b59b<br>00000013-0000-0000-c000-000000000000<br>Windows Azure Management Portal<p>72f64ca3-d200-423b-92da-4f3dd6621ef9<br>1142d051-c271-4044-b1ac-522c8029e3b7<br>websampletest<p>76c56681-2887-4cd4-a375-971669f0d471<br>8fca0a66-c008-4564-a876-ab3ae0fd5cff<br>Microsoft.SMIT<p>778437c2-766d-4853-8738-2f397efeae06<br>0f698dd4-f011-4d23-a33e-b36416dcb1e6<br>OfficeClientService<p>793601bf-1a81-400d-bb7d-68db352702c5<br>ae675dd6-076c-4036-9d0b-f5a4e9c10c71<br>nativeapplication<p>79a7fbfe-a0d5-4416-8c8f-6a523d45cd4c<br>803ee9ca-3f7f-4824-bd6e-0b99d720c35c<br>Azure Media Service<p>7f07985a-6657-41cb-b5f6-14c3554b027d<br>326128ad-f5f4-474c-bb19-c5e9b7780ba0<br>微软 Office 365 移动办公套件<p>866d1fbf-bf6d-4e30-a8ad-570317df9642<br>797f4846-ba00-4fd7-ba43-dac1f8f63013<br>Windows Azure Service Management API<p>8ac0becf-4180-43fd-883f-18bda7f45827<br>0f6edad5-48f2-4585-a609-d252b1c52770<br>AIGraphClient<p>8f5f81a0-7690-4bad-b097-bb22a9940041<br>168f7c69-e70d-4a14-ae22-c069b5d296bc<br>webapp<p>93a3c4d5-6451-4648-8195-b00eafe51b0e<br>f05ff7c9-f75a-4acd-a3b5-f4b6a870245d<br>SharePoint Android<p>94decd41-c70a-4255-b73a-0d52ead4dde9<br>2ab3d641-6164-4930-8f58-68d56787ab47<br>testapplication<p>9c4b5e57-6ec2-4218-be29-70d197664262<br>595d87a1-277b-4c0a-aa7f-44f8a068eafc<br>Microsoft.SupportTicketSubmission<p>a4c307c2-d229-4cea-a51c-c498b146fc3f<br>601d4e27-7bb3-4dee-8199-90d47d527e1c<br>Microsoft.Office365.ChangeManagement<p>a534ad32-c4a0-491e-810f-7499a8b9016a<br>c44b4083-3bb0-49c1-b47d-974e53cbdf3c<br>Ibiza Portal<p>a913c56c-7a86-479e-894e-9649f99f7841<br>8fad9a3d-ce06-4d85-8f9a-873164f0cafc<br>native<p>c259baa5-c050-420d-a4a9-3130dbeed2f9<br>6f82282e-0070-4e78-bc23-e6320c5fa7de<br>Microsoft.DiscoveryService<p>ce72c49b-a6df-45c6-9055-76d7eb684a9d<br>3f56a5d5-7882-4290-9fd8-3908d734b3fe<br>deamon<p>dc4e9fbc-9e1d-4900-9ea1-dfc9b8d414c5<br>0000000b-0000-0000-c000-000000000000<br>Microsoft.SellerDashboard<p>e1d2b488-d085-4af5-bd97-d2436f72fd7d<br>e3583ad2-c781-4224-9b91-ad15a8179ba0<br>Microsoft.ExtensibleRealUserMonitoring<p>ebf95d4c-7ccf-4ecf-ac48-793d2782f98d<br>67e3df25-268a-4324-a550-0de1c7f97287<br>Microsoft.OfficeWebAppsService<p>f0df0bc2-1c0a-446b-9eb6-7a4cf9749079<br>61a7b0d6-2bc9-48b6-8653-ef6b496815cb<br>GraphExplorer<p><br><p>虽然列了这么多，但其实我们一般最关注就是下面这个服务 ObjectId | AppId | DisplayName -------- | ----- | ----------- 3319d71d-8dfc-42ff-8fa0-0aa64f553350 | 00000003-0000-0000-c000-000000000000 | Microsoft Graph<h4>查询服务的权限信息</h4><p>有了服务的基本信息，我们就可以查询它的详细信息，尤其是我们关注的权限定义这部分信息了<pre><code>$graph = Get-AzureADServicePrincipal -ObjectId 3319d71d-8dfc-42ff-8fa0-0aa64f553350
# 这个命令将Microsoft Graph这个服务定义保存为一个变量

$graph | fl * 
# 这个命令将显示详细信息
</code></pre><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azureappgraphdetails.png"><p>下面我将演示一下如何将它的两类权限分别列举出来<pre><code>$graph.Oauth2Permissions 
# 这个会列举出来所有的用户模拟权限
</code></pre><p>Id<br>IsEnabled<br>Type<br>UserConsentDescription<br>UserConsentDisplayName<br>Value<p>58e15261-dfce-4dbd-b1a9-6a513ccf39cd<br>True<br>User<br>Allows the app to read, update, create, and delete contacts you have permissions to access, including your own and shared contacts.<br>Read and write to your and shared contacts<br>Contacts.ReadWrite.Shared<p>c8ee694a-ac5f-44eb-9487-f4fea3a6538d<br>True<br>User<br>Allows the app to read contacts you have permissions to access, including your own and shared contacts.<br>Read your and shared contacts<br>Contacts.Read.Shared<p>9e044dd2-b119-478e-8b0c-3143ff864625<br>True<br>User<br>Allows the app to read, update, create and delete events in all calendars in your organization you have permissions to access. This includes delegate and shared calendars.<br>Read and write to your and shared calendars<br>Calendars.ReadWrite.Shared<p>f1731364-f498-453c-a95f-c57fdbeff4f1<br>True<br>User<br>Allows the app to read events in all calendars that you can access, including delegate and shared calendars.<br>Read calendars?you can access<br>Calendars.Read.Shared<p>2bf44396-38c4-4826-813f-75074b46a125<br>True<br>User<br>Allows the app to send mail as you or on-behalf of someone else.<br>Send mail on behalf of others or yourself<br>Mail.Send.Shared<p>0772b0b8-18f9-4412-a1dc-cdbb000727fa<br>True<br>User<br>Allows the app to read, update, create, and delete mail you have permission to access, including your own and shared mail. Does not allow the app to send mail on your behalf.<br>Read and write mail?you can access<br>Mail.ReadWrite.Shared<p>07382180-f05b-4f94-8e51-02736bd78f14<br>True<br>User<br>Allows the app to read mail you can access, including shared mail.<br>Read mail you can access<br>Mail.Read.Shared<p>e1fe6dd8-ba31-4d61-89e7-88639da4683d<br>True<br>User<br>Allows you to sign in to the app with your organizational account and let the app read your profile. It also allows the app to read basic company information.<br>Sign you in and read your profile<br>User.Read<p>b4e74841-8e56-480b-be8b-910348b18b4c<br>True<br>User<br>Allows the app to read your profile, and discover your group membership, reports and manager. It also allows the app to update your profile information on your behalf.<br>Read and update your profile<br>User.ReadWrite<p>b340eb25-3456-403f-be2f-af7a0d370277<br>True<br>User<br>Allows the app to read a basic set of profile properties of other users in your organization on your behalf. Includes display name, first and last name, email address and photo.<br>Read all users' basic profiles<br>User.ReadBasic.All<p>a154be20-db9c-4678-8ab7-66f6cc099a59<br>True<br>Admin<br>Allows the app to read the full set of profile properties, reports, and managers of other users in your organization, on your behalf.<br>Read all users' full profiles<br>User.Read.All<p>204e0828-b5ca-4ad8-b9f3-f32a958e7cc4<br>True<br>Admin<br>Allows the app to read and write the full set of profile properties, reports, and managers of other users in your organization, on your behalf.<br>Read and write all users' full profiles<br>User.ReadWrite.All<p>5f8c59db-677d-491f-a6b8-5f174b11ec1d<br>True<br>Admin<br>Allows the app to list groups, and to read their properties and all group memberships on your behalf. Also allows the app to read calendar, conversations, files, and other group content for all groups you can access.<br>Read all groups<br>Group.Read.All<p>4e46008b-f24c-477d-8fff-7bb4ec7aafe0<br>True<br>Admin<br>Allows the app to create groups and read all group properties and memberships on your behalf. Additionally allows the app to manage your groups and to update group content for groups you are a member of.<br>Read and write all groups<br>Group.ReadWrite.All<p>06da0dbc-49e2-44d2-8312-53f166ab848a<br>True<br>Admin<br>Allows the app to read data in your organization's directory.<br>Read directory data<br>Directory.Read.All<p>c5366453-9fb0-48a5-a156-24f0c49a4b84<br>True<br>Admin<br>Allows the app to read and write data in your organization's directory, such as other users, groups. It does not allow the app to delete users or groups, or reset user passwords.<br>Read and write directory data<br>Directory.ReadWrite.All<p>0e263e50-5827-48a4-b97c-d940288653c7<br>True<br>Admin<br>Allows the app to have the same access to information in your work or school directory as you do.<br>Access the directory as you<br>Directory.AccessAsUser.All<p>570282fd-fa5c-430d-a7fd-fc8dc98a9dca<br>True<br>User<br>Allows the app to read email in your mailbox.<br>Read your mail<br>Mail.Read<p>024d486e-b451-40bb-833d-3e66d98c5c73<br>True<br>User<br>Allows the app to read, update, create and delete email in your mailbox. Does not include permission to send mail.<br>Read and write access to your mail<br>Mail.ReadWrite<p>e383f46e-2787-4529-855e-0e479a3ffac0<br>True<br>User<br>Allows the app to send mail as you.<br>Send mail as you<br>Mail.Send<p>465a38f9-76ea-45b9-9f34-9e8b0d4b0b42<br>True<br>User<br>Allows the app to read events in your calendars.<br>Read your calendars<br>Calendars.Read<p>1ec239c2-d7c9-4623-a91a-a9775856bb36<br>True<br>User<br>Allows the app to read, update, create and delete events in your calendars.<br>Have full access to your calendars<br>Calendars.ReadWrite<p>ff74d97f-43af-4b68-9f2a-b77ee6968c5d<br>True<br>User<br>Allows the app to read contacts in your contact folders.<br>Read your contacts<br>Contacts.Read<p>d56682ec-c09e-4743-aaf4-1a3aac4caa21<br>True<br>User<br>Allows the app to read, update, create and delete contacts in your contact folders.<br>Have full access of your contacts<br>Contacts.ReadWrite<p>10465720-29dd-4523-a11a-6a75c743c9d9<br>True<br>User<br>Allows the app to read your files and files shared with you.<br>Read your files and files shared with you<br>Files.Read<p>5c28f0bf-8a70-41f1-8ab2-9032436ddb65<br>True<br>User<br>Allows the app to read, create, update, and delete your files and files shared with you.<br>Have full access to your files and files shared with you<br>Files.ReadWrite<p>8019c312-3263-48e6-825e-2b833497195b<br>True<br>User<br>Allows the app to read, create, update and delete files in the application's folder.<br>Have full access to the application's folder<br>Files.ReadWrite.AppFolder<p>17dde5bd-8c17-420f-a486-969730c1b827<br>True<br>User<br>Allows the app to read and write files that you select. After you select a file, the app has access to the file for several hours.<br>Read and write selected files<br>Files.ReadWrite.Selected<p>5447fe39-cb82-4c1a-b977-520e67e724eb<br>True<br>User<br>Allows the app to read files that you select. After you select a file, the app has access to the file for several hours.<br>Read selected files<br>Files.Read.Selected<p>205e70e5-aba6-4c52-a976-6d2d46c48043<br>True<br>User<br>Allow the application to read documents and list items in all site collections on your behalf<br>Read items in all site collections<br>Sites.Read.All<pre><code>$graph.AppRoles
# 这个会列举出来所有的应用权限
</code></pre><p>Description<br>DisplayName<br>Id<br>IsEnabled<br>Value<p>Allows the app to read mail in all mailboxes without a signed-in user.<br>Read mail in all mailboxes<br>810c84a8-4a9e-49e6-bf7d-12d183f40d01<br>True<br>Mail.Read<p>Allows the app to create, read, update, and delete mail in all mailboxes without a signed-in user. Does not include permission to send mail.<br>Read and write mail in all mailboxes<br>e2a3a72e-5f79-4c64-b1b1-878b674786c9<br>True<br>Mail.ReadWrite<p>Allows the app to send mail as any user without a signed-in user.<br>Send mail as any user<br>b633e1c5-b582-4048-a93e-9f11b44c7e96<br>True<br>Mail.Send<p>Allows the app to read events of all calendars without a signed-in user.<br>Read calendars in all mailboxes<br>798ee544-9d2d-430c-a058-570e29e34338<br>True<br>Calendars.Read<p>Allows the app to create, read, update, and delete events of all calendars without a signed-in user.<br>Read and write calendars in all mailboxes<br>ef54d2bf-783f-4e0f-bca1-3210c0444d99<br>True<br>Calendars.ReadWrite<p>Allows the app to read all contacts in all mailboxes without a signed-in user.<br>Read contacts in all mailboxes<br>089fe4d0-434a-44c5-8827-41ba8a0b17f5<br>True<br>Contacts.Read<p>Allows the app to create, read, update, and delete all contacts in all mailboxes without a signed-in user.<br>Read and write contacts in all mailboxes<br>6918b873-d17a-4dc1-b314-35f528134491<br>True<br>Contacts.ReadWrite<p>Allows the app to read group properties and memberships, and read the calendar and conversations for all groups, without a signed-in user.<br>Read all groups<br>5b567255-7703-4780-807c-7be8301ae99b<br>True<br>Group.Read.All<p>Allows the app to create groups, read all group properties and memberships, update group properties and memberships, and delete groups. Also allows the app to read and write group calendar and conversations. All of these operations can be performed by the app without a signed-in user.<br>Read and write all groups<br>62a82d76-70ea-41e2-9197-370581804d09<br>True<br>Group.ReadWrite.All<p>Allows the app to read data in your organization's directory, such as users, groups and apps, without a signed-in user.<br>Read directory data<br>7ab1d382-f21e-4acd-a863-ba3e13f7da61<br>True<br>Directory.Read.All<p>Allows the app to read and write data in your organization's directory, such as users, and groups, without a signed-in user. Does not allow user or group deletion.<br>Read and write directory data<br>19dbc75e-c2e2-444c-a770-ec69d8559fc7<br>True<br>Directory.ReadWrite.All<p>Allows the app to read and write all device properties without a signed in user. Does not allow device creation, device deletion or update of device alternative security identifiers.<br>Read and write devices<br>1138cb37-bd11-4084-a2b7-9f71582aeddb<br>True<br>Device.ReadWrite.All<p>Allows the app to read user profiles without a signed in user.<br>Read all users' full profiles<br>df021288-bdef-4463-88db-98f22de89214<br>True<br>User.Read.All<p>Allows the app to read and update user profiles without a signed in user.<br>Read and write all users' full profiles<br>741f803b-c850-494e-b5df-cde7c675a1ca<br>True<br>User.ReadWrite.All<h4>创建应用程序</h4><p>创建应用程序的PowerShell命令是New-AzureADApplication,它的详细用法请参考这里 <a href="https://docs.microsoft.com/en-us/powershell/module/azuread/new-azureadapplication?view=azureadps-2.0">https://docs.microsoft.com/en-us/powershell/module/azuread/new-azureadapplication?view=azureadps-2.0</a><pre><code>$app= New-AzureADApplication -DisplayName "yourapplicationname"  -ReplyUrls "https://websample.com/replyurl" -Homepage "https://websample.com" -IdentifierUris "https://websample.com"

# 这是用来创建Web应用程序的

$app= New-AzureADApplication -DisplayName "yourapplicationname"  -PublicClient $true

# 这是用来创建本地应用程序的，设置PublicClient属性为true即可

$app

#请保存app的具体信息，尤其是AppId
</code></pre><h1>创建密钥</h1><p>如果上面创建的是Web 应用程序，还需要为应用程序创建密钥。这里会用到的PowerShell命令是New-AzureADApplicationPasswordCredential，它的详细用法请参考这里 <a href="https://docs.microsoft.com/en-us/powershell/module/azuread/new-azureadapplicationpasswordcredential?view=azureadps-2.0">https://docs.microsoft.com/en-us/powershell/module/azuread/new-azureadapplicationpasswordcredential?view=azureadps-2.0</a><pre><code>New-AzureADApplicationPasswordCredential -ObjectId $app.ObjectId

# 正常情况下，将返回一个为期一年的密钥信息

CustomKeyIdentifier :
EndDate             : 7/12/2018 10:25:28 AM
KeyId               :
StartDate           : 7/12/2017 10:25:28 AM
Value               : /TD0rbE5gwm/a6TGqUhqVY46LA16rir6Zwm7pK69prI=


# 请保存这个Value信息
</code></pre><h1>绑定服务和设定权限</h1><p>我们已经创建了应用程序，也为他申请了一个密钥，下面就是最后也是最关键的环节————为应用程序绑定服务并且设定权限了。下面这个代码段是为上面创建好的应用程序，并且为其申请了四个delegated permission。（具体这四个权限对应的是什么，请参考上面的表格）<pre><code>$graphrequest = New-Object -TypeName "Microsoft.Open.AzureAD.Model.RequiredResourceAccess"

$graphrequest.ResourceAccess = New-Object -TypeName "System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]"

$ids =@("024d486e-b451-40bb-833d-3e66d98c5c73","e383f46e-2787-4529-855e-0e479a3ffac0","e1fe6dd8-ba31-4d61-89e7-88639da4683d","b340eb25-3456-403f-be2f-af7a0d370277")

foreach($id in $ids){
    $obj = New-Object -TypeName "Microsoft.Open.AzureAD.Model.ResourceAccess" -ArgumentList $id,"Scope"
    # 如果是AppRole权限，则第二个参数为Role

    $graphrequest.ResourceAccess.Add($obj)
}

$graphrequest.ResourceAppId = "00000003-0000-0000-c000-000000000000"

Set-AzureADApplication -ObjectId $app.ObjectId -RequiredResourceAccess ($graphrequest)
# 这句命令的RequiredResourceAccess 参数中可以有多个对象
</code></pre><h1>结语</h1><p>这篇文章的篇幅较长，我尽可能详细地展示了很多Azure AD中注册应用程序，绑定服务和设定权限的细节，尤其是对于国内的Office 365客户以及合作伙伴来说应该有较高的实用价值。 当我们没有图形化界面可以使用的时候，你就会由衷地感慨，脚本（例如PowerShell）确实是很强大的，而且通过脚本的探索过程，你可以更加清晰地理解其背后的逻辑。]]></description></item><item><title>中国版Office 365 应用程序注册</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904205.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:05:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904205.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年3月23日</p></blockquote><p>中国版Office 365是由世纪互联进行运营的一个云服务，单纯从技术角度来看的话，它基本保持了与国际版的同步。但是由于两个版本本质上是完全独立的，其中最关键的就是账号系统是分开的，所以在使用角度，不管是直接用户还是开发人员，会有些小小的差异。<p>就应用程序注册这件事情而言，中国版Office 365的操作方式有如下的特点：<ol><li>注册地址不一样，这个能理解
<li>目前仅支持Azure AD 1.0
<li>功能和用法跟国际版还略有差异</li></ol><h1>注册应用程序</h1><p>你需要登录到 <a href="https://manage.windowsazure.cn/">https://manage.windowsazure.cn</a> 这个管理门户进行中国版Office 365应用程序注册。<blockquote><p>需要注意的是，目前国内版的Azure，如果要管理活动目录（AD），还只能用旧版。而且如果你是刚开通中国版的Office 365，那么默认还无法访问到对应的Azure AD的，这有点让人迷惑，但我这里有一个变通办法 <a href="http://www.cnblogs.com/chenxizhang/p/6010139.html">http://www.cnblogs.com/chenxizhang/p/6010139.html</a></p></blockquote><p><img alt="中国版Azure管理中心" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/mooncake-portal.PNG"><p>点击左侧的“Active Directory”，可以管理当前租户的活动目录，也可以看到目前注册好的应用程序列表<p><img alt="office 365应用程序" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-applications.PNG"><p>点击“添加”，系统会提供一个向导引导你进行应用程序注册<p><img alt="增加应用程序" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-add-application.PNG"><p>下图展示了一个配置好的应用程序截图<p><img alt="应用程序示例" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-applicationsample.PNG"><img alt="应用程序示例" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-applicationsample2.PNG"><blockquote><p>在每个配置项处如果有疑问，都可以通过点击问号按钮查看详细信息</p></blockquote><h1>功能和用法差异</h1><p>在用法上面，主要是登录地址不同。</p><p>&nbsp;<img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-use.PNG"></p><p>功能也确实是有差异的，但这个差距会越来越小。详细情况，请参考下面的链接<a href="https://developer.microsoft.com/zh-cn/graph/docs/concepts/deployments">https://developer.microsoft.com/zh-cn/graph/docs/concepts/deployments</a> <img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/gallatin-function.PNG">]]></description></item><item><title>注册Azure AD 2.0 应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904180.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904180.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年3月22日</p></blockquote><p><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/applicationregisteration.html">上一篇</a> 介绍了Microsoft Graph应用程序的一些概念，以及目前还比较普遍的Azure AD 1.0应用程序的注册方式。但正如我多次提到的那样，虽然目前功能还在不断完善，但Azure AD 2.0会逐渐成为主流，它有如下几个优势<ol><li>Azure AD 2.0 应用程序，既支持访问工作或学校账号，也支持访问个人账号的资源。
<li>注册Azure AD 2.0应用程序，不需要访问目标客户的Azure AD，是在一个独立的平台注册，也就是说这种应用程序天生就是Multi Tenant模式的，有更高的复用性。
<li>Azure AD 2.0应用程序的权限，是动态申请的，有利于应用程序升级，简化部署和管理。
<li>Azure AD 2.0应用程序，微软提供了更加高级的开发工具支持，针对大部分开发平台都有SDK提供。</li></ol><p>说了这么多好处，下面就能实际体验一下吧<h1>创建应用程序</h1><p>微软提供了一个独立的应用管理平台，请用个人账号（Microsoft Account）登录 <a href="https://apps.dev.microsoft.com/">https://apps.dev.microsoft.com</a><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread20-portal.PNG"><p>点击“Add an app”<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azure20-addanapp.PNG"><p>点击“Create application"按钮，然后在详细页面中，分别点击Generate New Password 生成密钥，点击 Add Platform添加相关的平台支持<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread20-application-details.PNG"><h1>授予权限</h1><p>同样的，我们也需要为这个应用程序授予权限，Azure AD 2.0应用程序在授权这部分相对来说更加简单，而且提出了一个相对更新的概念（scope，后续实际项目开发时会讲解）。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azure20-permission.PNG"><h1>其他设置</h1><p>你在应用程序详细页面中还能看到其他一些可配置项，他们并不是必须的<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azure20-otheroptions.PNG">]]></description></item><item><title>注册Azure AD 应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904163.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 07:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904163.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于2017年3月22日</p></blockquote><p>在此前的文章中，我给大家介绍了分别用Graph 浏览器以及第三方工具（POSTMAN）快速体验Microsoft Graph的功能，其中有一个重要的环节就是，开发人员需要访问Microsoft Graph的话，其实是事先需要注册一个应用程序的。Graph 浏览器是特例，因为这个应用程序是微软官方注册好的。而大家在POSTMAN这篇文章中已经看到我注册的自定义应用程序的效果。我这里再针对这个问题展开介绍。<p>目前针对Microsoft Graph的应用程序注册，有两种途径：<ol><li>Azure AD应用程序，它仅适合于开发人员希望用户能授权访问工作或者学校的账号。
<li>Azure AD 2.0应用程序，它适合于开发人员希望既希望用户授权访问工作或者学校的账号，也能授权访问个人账号。</li></ol><blockquote><p>前一种方式也可以称为Azure AD 1.0，从趋势上来说，后者将逐渐全面取代，成为日后主要的方式。但就目前而言，2.0中所提供的服务数量还没有1.0多。</p></blockquote><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-compare.PNG"><h1>创建应用程序</h1><p>这一篇文章，我首先介绍Azure AD应用程序这种注册方式。<p>我在之前已经介绍过，其实Microsoft Graph的一个基础是Azure AD，所以第一步需要使用你的Office 365账号登录到Azure管理中心 <a href="https://portal.azure.com/">https://portal.azure.com</a> <img alt="Azure AD" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-1.PNG"><p>点击左侧的Azure Active Directory，然后点击“应用注册”<p><img alt="应用程序注册" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-registeration.PNG"><p>点击“新应用程序注册”按钮，输入必要的信息即可创建一个新的应用程序<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-createapplication.PNG"><p>这里要给大家介绍，Auzre AD应用程序有两种主要类型，一种是Web应用/API，另外一种是“本机”应用，其中通常指的是网站或者服务站点，或者则指的是桌面应用或者移动应用。如果选择前者，那么需要提供登录Url, 这个需要填写对应的网站真正的登录路径；而如果选择了后者，则需要提供重定向URL，这个地址其实是可以随便填，例如<a href="http://localhost/">http://localhost</a> 即可。<p>点击“创建”按钮，就可以快速完成应用程序的创建工作。 <img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-application-details.PNG"><h1>申请权限</h1><p>接下来我们需要为这个应用程序申请必要的权限。点击上图中的“所需权限”按钮，然后依次进行如下操作<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-permissions-api.PNG"><p>在委派权限中选择如下四个权限<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-permissions.PNG"><h1>创建密钥 [可选]</h1><p>这一步并不是必须的。一般情况下，我们调用Microsoft Graph之前，都会弹出（或者跳转）到指定的页面要求用户去输入账号信息，并且亲自确认授权。但是如果我们的应用程序是一个后台的服务，它需要一直运行，而且是没有交互界面的，这种情况下则需要另外创建一个密钥，同时采用Client Credential的方式来获取授权。（这个具体代码的做法，我会在后续的范例程序中做介绍）<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-key.PNG"><p>创建密钥很简单，你需要指定名称和时效，然后点击“保存”后，会自动生成一个密钥。请一定注意，这个密钥必须马上复制妥善地保存，因为在此刷新页面它就不可查看了。<p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-key-info.PNG"><p>如果我们是为后台服务类应用程序进行注册，那么除了创建密钥外，还需要为应用程序申请“应用程序权限”，而不是“委派权限”。<blockquote><p>委派的意思，指的是代理当前用户进行操作，所以它是需要用户交互式授权的。而“应用程序权限”则是不跟具体某个用户有关，是直接授予应用程序的权限。</p></blockquote><p><img alt="" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/azuread-applicationpermission.PNG"><h1>小结</h1><p>要进行Microsoft Graph的开发，必须要在Azure AD中进行应用程序的注册，由于历史的原因，目前我们有两个不同的版本。本文介绍了Auzre AD 1.0中注册应用程序的步骤，并且也说明了三种不同类型的应用（Web 应用/API ，本机，后台服务），以及两种不同的权限（委派权限，应用程序权限）。]]></description></item><item><title>通过第三方工具体验Microsoft Graph</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904148.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 06:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904148.html</guid><description><![CDATA[<p><br></p><blockquote><p>作者：陈希章 发表于 2017年3月22日</p></blockquote><p><br><p><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/graphexplorer.html">上一篇</a>文章我介绍了如何利用官方提供的Graph 浏览器快速体验Microsoft Graph强大功能，这是极好的起点。官方的Graph浏览器力图用最简单的方式帮助您使用Microsoft Graph，为此也隐藏了很多细节。为了帮助大家更好地理解Microsoft Graph的工作原理，例如要使用Microsoft Graph需要进行应用改程序注册，OAuth的过程以及Token传递的方式等，我专门再写一篇，介绍如何通过其他第三方工具来体验Microsoft Graph。<p>我们可以在网络上找到很多进行REST API调用和测试的工具，这一篇我给大家演示的是一款叫POSTMAN的工具。它的官方主页在 <a href="https://www.getpostman.com/">https://www.getpostman.com/</a>,提供了针对MacOS,Windows,Linux的版本，也提供了Chrome的插件，你可以按需下载。<blockquote><p>POSTMAN 有免费版和专业版，就本文的需求来说，免费版就够用了。</p></blockquote><p><img alt="下载postman" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/getpostman.PNG"><p>为了能通过POSTMAN来调用Microsoft Graph，我们必须按照<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/microsoftgraphoverview.html">Microsoft Graph概述</a>中介绍的三部曲，首先要注册一个应用程序。<h2><br></h2><h2>注册应用程序</h2><p>我会有专门的文章来讲解注册应用程序的细节，本文将演示一个注册好的应用程序，如果你不想自己注册，也可以用我的信息进行测试。<p><img alt="app注册" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/apps-dev-microsoft-appregistration.png"><p>你可以通过Microsoft 账号登录<a href="https://apps.dev.microsoft.com/#/">https://apps.dev.microsoft.com/#/</a>, 注册一个应用程序，需要提供名称，并且声称一个秘钥，然后制定对应的平台，申请必要的权限。<h1>发起POSTMAN请求</h1><p>打开POSTMAN，默认情况下，如果去调用Microsoft Graph，因为没有提供身份，会返回如下的错误信息<p><img alt="postman未经授权的访问" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/getpostman-defaulterror.PNG"><p>这很容易理解，我们接下来要做就是为POSTMAN添加OAuth的认证。选择上图中"Authorization"这个选项卡中的Type为“OAuth 2.0", 然后点击“Get New Access Token"按钮，在弹出的对话框中填写你注册好的应用程序信息。<p><img alt="postman获取新的访问身份" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-getnewaccesstoken.PNG"><p>如果你在此前的注册应用程序中遇到障碍，请直接使用我准备好的测试应用程序信息：<pre><code>Auth URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
Access Token URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
ClinetID: 61df125c-f335-448e-8110-e6ab785a85f3
Client Secret: uCs9wjhyZok9EULEVPcjAfW
Scope: user.read mail.read mail.send
</code></pre><p>点击上图中的“Request Token”按钮，POSTMAN会弹出跳转到Microsoft Graph的认证页面，此时你可以输入Office 365的账号信息。<p><img alt="postman授权" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/getpostman-oauth-authorization.PNG"><p>如果你输入了合法的账号信息，接下来应用程序将会请求你的授权<p><img alt="postman授权确认" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/getpostman-oauth-result.PNG"><p>点击上图中的“Accept”按钮，正常情况下会关闭所有弹出的窗口，并且返回到POSTMAN的主界面，你现在就可以查看到当前申请得到的访问凭据(Access Token)了。<blockquote><p>这里特别提一下，我发现有时候同样的操作却不能成功，可能受到一些网络方面的干扰因素吧，请大家遇到这种情况的话，耐心地重试一两次。</p></blockquote><p><img alt="postman access Token" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-accesstoken.PNG"><p>点击最右侧的“Use Token"按钮，可以将Access Token插入到当前的请求中去，注意观察“Headers”这个选项卡的变化 (Authorization:Bearer xxxxxxxxx)，然后点击“Send”按钮，我们就可以顺利地完成当前的Microsoft Graph调用了。<blockquote><p>请注意确保“Add token to” 这里选择“Header”</p></blockquote><p><img alt="postman 成功请求" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-request.PNG"><p>看起来不错吧？你是不是会说，这看起来也跟Graph 浏览器差别不大啊。是的，到目前为止，这都属于最基本的操作，接下来我介绍一下POSTMAN的一些亮点功能。<ol><li>保存请求
<li>对请求进行测试</li></ol><h1>保存请求</h1><p>这是首先吸引我的功能，也是很自然的需求：如果能把上面的请求设置保存起来，那么下一次我就可以直接使用而不需要重复地去输入了。<p>点击上图中的最右侧的“Save”按钮，然后在弹出的对话框中输入Request Name等信息即可。<p><img alt="保存请求" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-saverequest.PNG"><p>在保存请求的时候，我们还可以将其归类到一个集合（collection）中去。（如果你还没有创建集合，则可以选择创建一个新的集合）<p>我这里将几个常见的请求保存成了一个Office 365 devlab的集合，如下图所示<p><img alt="保存请求到集合" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-savetocollection.PNG"><h1>对请求进行测试</h1><p>POSTMAN还有一个较有意思的功能，就是支持对一个集合的请求进行测试。点击上图左上角的“Runner”，在弹出的窗口中选择一个保存好的collection，进行一些简单的参数设置后，点击“Start Test”按钮，它会依次发起集合中的请求，并且将返回结果一一显示。<p><img alt="运行测试" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/postman-test.PNG"><blockquote><p>POSTMAN 还有命令行工具，可以便于脚本化进行测试，限于篇幅本文就不做展开了。</p></blockquote><p>POSTMAN的专业版还有一些高级功能，例如团队协作之类的，有兴趣的朋友可以自行尝试。<h1>结语</h1><p>POSTMAN是一个不错的第三方工具，在同类的REST API 客户端工具中的优势在于图形化界面比较友好，而且对OAuth的强大支持，同时它还可以保存请求并且进行批量测试，这将为我们体验Micrsooft Graph打开一扇方便之门，并且也有助于更好地理解Microsoft Graph的工作原理。]]></description></item><item><title>通过Graph 浏览器体验Microsoft Graph</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904130.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Nov 2017 06:54:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/11/27/7904130.html</guid><description><![CDATA[<p><br></p><h3>作者：陈希章 发表于 2017年3月18日</h3><p><br></p><p><a href="https://chenxizhang.gitbooks.io/office365devguide/docs/microsoftgraphoverview.html">上一篇</a>介绍了Microsoft Graph的基本概念，接下来我们快速体验一下Microsoft Graph到底能做什么？<p>为了帮助开发人员直观和快速体验Microsoft Graph的魅力，官方提供了一个专门的工具，叫做Graph 浏览器（Graph Explorer）。同时，由于国际版和世纪互联版本的Graph接口相关地址有所不同，所以针对这两个不同的版本，分别有对应的Graph浏览器。<ol><li>国际版Graph 浏览器: <a href="https://developer.microsoft.com/zh-cn/graph/graph-explorer">https://developer.microsoft.com/zh-cn/graph/graph-explorer</a><li>世纪互联版 Graph 浏览器: <a href="https://developer.microsoft.com/zh-cn/graph/graph-explorer-china">https://developer.microsoft.com/zh-cn/graph/graph-explorer-china</a></li></ol><blockquote><p>本文将以国际版Graph 浏览器作为演示。两者的功能及使用流程基本类似，具体的差异在于世纪互联版的某些接口还在快速开发中。关于两者的细微差别，请随时可以通过<a href="https://developer.microsoft.com/zh-cn/graph/docs/concepts/deployments">https://developer.microsoft.com/zh-cn/graph/docs/concepts/deployments</a> 进行了解。</p></blockquote><p>下面将简单演示五个场景，帮助大家理解Microsoft Graph API及其工作原理。<p><br><h1>登录Graph 浏览器</h1><p><img alt="Graph浏览器" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorer.PNG"><p>点击上图中的“登录”按钮，使用国际版Office 365账号进行登录。请注意，我在此前的<a href="https://chenxizhang.gitbooks.io/office365devguide/docs/office365devenv.html">文章</a>中已经介绍了如何申请一个为期一年的Office 365开发者订阅。<p><br><p><img alt="Graph浏览器登录" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorelogin.PNG"><p>输入正确的账号和密码后，点击确定，系统将引导用户进行授权确认，如下图所示<p><br><p><img alt="Graph浏览器身份授权" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorerauthorization.PNG"><p><br><p>只有你自己点击了“接受”按钮，Graph 浏览器才能真正访问到你的数据。上面这个授权方式，其实就是所谓的OAuth的标准机制：Graph 浏览器作为一个独立的应用，它并不需要保存你的Office 365账号信息，它可以得到用户授权之后代表用户去访问到Graph后台所连接的资源，包括Office 365的数据。<h1>查询当前用户的基本信息</h1><p>完成授权登录后，我们就可以愉快地使用Microsoft Graph的服务了。首先，下图示例了如何获取当前用户的基本信息。</p><p>&nbsp;<img alt="查询当前用户的基本信息" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexploregetuserinfo.PNG"></p><p>Microsoft Graph的服务是RESTful的，具体表现在发起服务请求，只需要一个Url即可（本例为<a href="https://graph.microsoft.com/v1.0/me/%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B9%9F%E6%98%AF%E6%A0%87%E5%87%86%E7%9A%84Http%E6%96%B9%E6%B3%95%EF%BC%88GET,POST%E7%AD%89%EF%BC%89%EF%BC%8C%E4%B8%8E%E6%AD%A4%E5%90%8C%E6%97%B6%EF%BC%8C%E5%AE%83%E7%9A%84%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%9A%E7%95%8C%E5%BA%94%E7%94%A8%E6%9C%80%E5%B9%BF%E7%9A%84Json%E6%A0%BC%E5%BC%8F%E3%80%82">https://graph.microsoft.com/v1.0/me/），使用的方式也是标准的Http方法（GET,POST等），与此同时，它的返回结果是业界应用最广的Json格式。</a><h1>查询当前用户的个人网盘文件列表</h1><p>通过 <a href="https://graph.microsoft.com/v1.0/me/drive/root/children">https://graph.microsoft.com/v1.0/me/drive/root/children</a> ，点击“转到”，可以查询当前用户的个人网盘（OneDrive for Business)文件列表。<p><br><p><img alt="查询当前用户的个人网盘文件列表" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorermyodfb.PNG"><p><br><h1>查询当前用户的收件箱前10条邮件信息</h1><p>使用Microsoft Graph，在得到用户授权的前提下，应用程序可以读取到用户的邮件列表，所使用的服务请求地址是 <a href="https://graph.microsoft.com/v1.0/me/messages">https://graph.microsoft.com/v1.0/me/messages</a><p><br><p><img alt="获取用户的邮件列表" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorergetusermessages.PNG"><p>默认情况下，这个查询只会返回前10条邮件信息，并且不区分邮件目录，如果需要获取特定邮箱目录的邮件信息，请参考下面这样的语法<p><a href="https://graph.microsoft.com/v1.0/me/mailFolders/**inbox**/messages">https://graph.microsoft.com/v1.0/me/mailFolders/**inbox**/messages</a><p>如果想要对返回结果集做筛选，排序，请参考下面这样的语法<ol><li>只选择前五封邮件 <a href="https://graph.microsoft.com/v1.0/me/messages?$top=5">https://graph.microsoft.com/v1.0/me/messages?$top=5</a><li>跳过前五封邮件选择十封邮件 <a href="https://graph.microsoft.com/v1.0/me/messages?$skip=5&amp;take=10">https://graph.microsoft.com/v1.0/me/messages?$skip=5&amp;take=10</a><li>按照发件人邮件地址排序 <a href="https://graph.microsoft.com/v1.0/me/messages?$orderby=from/emailAddress/address">https://graph.microsoft.com/v1.0/me/messages?$orderby=from/emailAddress/address</a></li></ol><blockquote><p>更多查询参数，请参考<a href="https://developer.microsoft.com/zh-cn/graph/docs/overview/query_parameters">https://developer.microsoft.com/zh-cn/graph/docs/overview/query_parameters</a></p></blockquote><h4>发送邮件</h4><p>上面演示了几个场景都是查询，实际上Microsoft Graph的功能远远不止是做查询，它也可以在用户授权下进行某些操作，例如接下来要演示的发送邮件。<p>这里需要用到的API是<a href="https://graph.microsoft.com/v1.0/me/sendmail%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8POST%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%EF%BC%8C%E4%BD%A0%E8%A6%81%E5%8F%91%E9%80%81%E7%9A%84%E9%82%AE%E4%BB%B6%E5%86%85%E5%AE%B9%E9%80%9A%E8%BF%87Json%E6%A0%BC%E5%BC%8F%E8%BF%9B%E8%A1%8C%E5%AE%9A%E4%B9%89%E3%80%82">https://graph.microsoft.com/v1.0/me/sendmail，这个接口需要使用POST方法调用，你要发送的邮件内容通过Json格式进行定义。</a><pre><code>{
  "message": {
    "subject":"Welcome to Microsoft Graph",
    "body": {
      "contentType": "Text",
      "content": " Welcome to Microsoft Graph world."
    },
    "toRecipients": [
      {
        "emailAddress": {
          "address": "ares@office365devlabs.onmicrosoft.com"
        }
      }
    ],
    "ccRecipients": [
      {
        "emailAddress": {
          "address": "ares@xizhang.com"
        }
      }
    ]
  },
  "saveToSentItems": "true"
}
</code></pre><p><img alt="发送邮件" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorersendmail.PNG"><p>如果发送成功的话，返回状态码为200，反之，则会有详细的错误信息。<h1>结语</h1><p>本文我介绍了利用Graph 浏览器快速体验Microsoft Graph的强大功能。以上只是举了几个常见的例子，如何用支持的功能很多，等待你的发现，常见的查询请参考下图<p><img alt="更多场景" src="https://chenxizhang.gitbooks.io/office365devguide/docs/images/graphexplorerquerysample.PNG">]]></description></item><item><title>为WebClient增加Cookie的支持</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/09/17/7534752.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 17 Sep 2017 01:33:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/09/17/7534752.html</guid><description><![CDATA[<p><br></p><p>我们经常会在应用程序中使用到WebClient模拟访问网站资源并且进行处理，如果多次访问之间我们希望为他们保存Cookie，换句话说，第一个请求产生的Cookie能自动带到第二个请求的话，可以通过自定义ebClient进行实现。下面是一个实际的例子。</p><p><br></p>   <script src="https://gist.github.com/chenxizhang/8f84aa65f6515075f13e4c9c1cb0cf6f.js"></script>]]></description></item><item><title>在Azure Container Service创建Kubernetes（k8s）群集运行ASP.NET Core跨平台应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/07/24/7226903.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 23 Jul 2017 23:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/07/24/7226903.html</guid><description><![CDATA[<h1>引子</h1><p>在此前的一篇文章中，我介绍了如何在本地docker环境中运行ASP.NET Core跨平台应用程序（<a title="http://www.cnblogs.com/chenxizhang/p/7148657.html" href="http://www.cnblogs.com/chenxizhang/p/7148657.html">http://www.cnblogs.com/chenxizhang/p/7148657.html</a>），看起来非常不错，不是吗？那么，如果我们希望真正在实际的生产环境去部署和运行这个应用程序，应该怎么做呢？</p><p>通常来说，有两种方案可以选择</p><p>1. 在目标运行环境（可以是本地的服务器，也可以是云端）申请虚拟机，然后启用docker运行这些应用程序，所有的细节都可以（也必须）由你自己控制。</p><p>2. 使用云平台的PaaS服务，尤其是支持容器化的云平台的PaaS服务，这里面就包括了Azure Container Service，简称ACS。这种情况下，你可以将一些底层的细节工作交给Azure，而将你的精力专注在业务应用上面即可。</p><p><br></p><h1>ACS简介</h1><p>Azure 容器服务让创建、配置和管理预配置来运行容器化应用程序的虚拟机群集变得更简单。 它使用热门开源计划和业务流程工具的优化配置。 通过此服务，用户可使用现有技能或利用不断增加的大量社区专业知识，在 Microsoft Azure 上部署和管理基于容器的应用程序。请参考下面的链接了解一些细节，包括快速进行动手实验</p><p><a title="https://docs.microsoft.com/zh-cn/azure/container-service/" href="https://docs.microsoft.com/zh-cn/azure/container-service/">https://docs.microsoft.com/zh-cn/azure/container-service/</a>&nbsp;</p><p><br></p><h1>发布本地的docker镜像</h1><p>其实，不管是你用哪种方案，一个前提条件是将你本地的镜像发布到一个公共可以访问的仓库。你可以发布到hub.docker.com，也可以发布到自己的仓库。</p><p>如果要发布到hub.docker.com，请参考下面的步骤</p><p>1. 你需要拥有一个Docker ID。请前往<a title="https://hub.docker.com/" href="https://hub.docker.com/">https://hub.docker.com/</a>注册。</p><p>2.在本地将镜像打上自己的tag。例如我的镜像是mvcapp，我的Docker ID是chenxizhang，那么要能发布到Docker Hub的话，这个镜像需要打上一个Tag，名称为chenxizhang/mvcapp。请通过这个命令来完成此操作：docker tag mvcapp chenxizhang/mvcapp</p><p>你无需担心，其实打上Tag，只是一个逻辑上面的映射，并不会增加本地的存储占用空间。</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070945914-1431095825.png"><img width="984" height="176" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070946664-2110976651.png" border="0"></a></p><p>3.使用docker login 命令 登陆hub.docker.com </p><p>4.使用docker push chenxizhang/mvcapp 这样的命令，将本地的镜像推送到hub.docker.com ，这可能需要一定的时间，取决于你的网络配置</p><p>如果一切顺利的话，你将可以看到如下的结果</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070947414-1530282601.png"><img width="1028" height="500" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070947821-1844272764.png" border="0"></a></p><p><br></p><p>备注：如果要创建自己的docker 仓库，可以了解&nbsp; Azure Container Registry 这个服务。（<a title="https://azure.microsoft.com/zh-cn/services/container-registry/" href="https://azure.microsoft.com/zh-cn/services/container-registry/">https://azure.microsoft.com/zh-cn/services/container-registry/</a>），这里不做展开。</p><p><br></p><h1>在Azure Container Service创建 Kubernetes群集</h1><p><br></p><p>你可以完全参考这篇入门文章（<a title="https://docs.microsoft.com/zh-cn/azure/container-service/container-service-kubernetes-walkthrough" href="https://docs.microsoft.com/zh-cn/azure/container-service/container-service-kubernetes-walkthrough">https://docs.microsoft.com/zh-cn/azure/container-service/container-service-kubernetes-walkthrough</a>），通过几个简单的命令创建Kubernetes群集</p><p><br></p><p>1. az group create</p><p>2.az acs create</p><p>3.az acs kubernetes install-cli （这一步是可选的，如果是在azure cloudshell中可以省略）</p><p>4.az acs kubernetes get-credentials</p><p>5.kubectl get nodes （请等待各个节点的Status值变成Ready）</p><p><br></p><p><br></p><h1>在k8s群集中部署ASP.NET Core应用程序</h1><p><br></p><p>我们已经有了一个公共可以访问的镜像，同时也有了一个容器的集群。下面就能看看怎么样让这个应用在k8s群集中部署和运行起来了。</p><p>实际上，很简单。（当然，这只是入门级的演示，每个命令都还有很多细节可以调整）</p><p><br></p><p>1.通过kubectl run 命令指定要拉取的镜像，并且通过设置一定的参数将其运行起来。k8s的术语将这个过程称为创建一个部署（deployment）</p><p>kubectl run mvcapp --image chenxizhang/mvcapp --env="ASPNETCORE_URLS=http://+:80"</p><p><br></p><p>2. 将这个部署通过某种方式暴露给外部可以访问</p><p>kubectl export deployments mvcapp --port=80 --type=LoadBalance</p><p><br></p><p>3.查看服务状态，直到EXTERNAL-IP有返回具体的值，这就表示容器已经创建并且运行起来了。</p><p>kubectl get svc</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070948071-814159977.png"><img width="686" height="98" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070948664-30085087.png" border="0"></a></p><p>4. 通过这个外部的IP地址就可以访问到你的应用</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070949039-1614652068.png"><img width="918" height="772" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070949524-359871653.png" border="0"></a></p><p><br></p><h1>其他有意思的信息和控制项</h1><p>如果将应用部署到ACS只是这样的功能，当然没有什么可以值得称赞的，实际上ACS的最大价值是提供了一个强大的容器运行平台，它可以帮助开发人员完成很多细节的工作，包括扩展和收缩容器规模等等。下面是一些有意思的信息和控制项</p><p>1. 通过kubectl get deploy可以查看关于每个部署的一些细节信息</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070949930-483326059.png"><img width="586" height="79" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070950289-1485187079.png" border="0"></a></p><p>2.通过kubectl get rs 可以获取到每个部署相关的复制集(replicas)</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070950930-1797326860.png"><img width="556" height="83" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070951430-1337027796.png" border="0"></a></p><p>3.通过kubectl scale 命令可以指定针对某个应用要运行几个容器</p><p>kubectl scale --replicas=3 rs/mvcapp-1456147153</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070951742-654623541.png"><img width="697" height="46" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170724070952211-2127140979.png" border="0"></a></p><p>备注：实际上在kubectl run的时候，就可以指定要同时运行的容器数量，同时，如果你愿意，也可以设置为autoscale（自动扩展）</p>]]></description></item><item><title>在Docker中运行asp.net core 跨平台应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/07/11/7148657.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 10 Jul 2017 22:33:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/07/11/7148657.html</guid><description><![CDATA[<p><br></p><h2>概述</h2><p>Docker已经热了有一两年了，而且我相信这不是一个昙花一现的技术，而是一个将深远影响我们日后开发和部署、运营应用系统的一种创新（很多人将其作为devops的一种非常重要的基石）。学习docker的最好方式，莫过于它的官方文档 ，有兴趣 的同学请参考 <a title="https://www.docker.com/what-docker" href="https://www.docker.com/what-docker">https://www.docker.com/what-docker</a>&nbsp;</p><p><br></p><blockquote><p>笔者最近在写一个Office 365的集成和扩展应用开发的系列文章（<a href="https://aks.ms/office365devguide">https://aks.ms/office365devguide</a>) ，其中的范例也将基于docker来部署。</p></blockquote><p><br></p><h2>准备</h2><p>为了进行后续的实验，请准备如下的环境</p><ol><li>基本条件</li><ol><li>Windows 10 Enterprise, Professional, or Education <li>64-bit Processor with Second Level Address Translation (SLAT). <li>CPU support for VM Monitor Mode Extension (VT-c on Intel CPU's). <li>Minimum of 4 GB memory.</li></ol><li>Docker for Windows&nbsp; 请参考 <a title="https://docs.docker.com/docker-for-windows/" href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a> 和&nbsp; <a title="https://docs.docker.com/docker-for-windows/install/" href="https://docs.docker.com/docker-for-windows/install/">https://docs.docker.com/docker-for-windows/install/</a>&nbsp;</li><li>Microsoft .NET Core SDK ，请参考 <a title="https://www.microsoft.com/net/core#windowscmd" href="https://www.microsoft.com/net/core#windowscmd">https://www.microsoft.com/net/core#windowscmd</a> （我安装的是最新的2.0 preview2）</li></ol><p><br></p><p><br></p><h2>动手实验</h2><ol><li>打开Powershell</li><li>创建dotnet core mvc应用程序&nbsp; dotnet new mvc –o mvcapp</li><li>切换到该目录&nbsp; cd mvcapp</li><li>还原包（如果是dotnet core 2.0,则可以跳过这个步骤）&nbsp; dotnet restore</li><li>发布应用程序&nbsp; dotnet publish –c release </li><li>在当前目录下面创建一个DOCKERFILE，内容如下 </li><ol><p>FROM microsoft/dotnet:2.0.0-preview2-sdk<p>WORKDIR /app<p>COPY bin/release/netcoreapp2.0/publish .<p>ENTRYPOINT ["dotnet", "mvcapp.dll"]</p></ol><li>生成docker镜像&nbsp; docker build –t mvcapp .</li><li>运行docker镜像&nbsp; docker run –p 8000:80 –e “ASPNETCORE_URLS=http://+:80” mvcapp</li></ol><p><br></p><blockquote><p>以上命令如果不熟悉，请大家自行查看帮助。例如 dotnet new mvc –h 或者 docker build -h</p><p><br></p></blockquote><p>如此这般之后，你就可以打开本机的浏览器，输入<a href="http://localhost:8000">http://localhost:8000</a> 进行访问了</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170711063247650-1277760636.png"><img width="1028" height="659" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170711063248322-912412678.png" border="0"></a></p>]]></description></item><item><title>如何使用PowerShell批量删除Office 365的用户</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/07/10/7144340.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 10 Jul 2017 01:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/07/10/7144340.html</guid><description><![CDATA[<h1>概述</h1><p>本文将演示如何在必要的时候（例如在测试环境），通过PowerShell脚本批量删除Office 365的用户，首先需要通过Get-MsolUser的命令（并且配合筛选条件）获取到符合条件的用户列表，然后通过Remove-MsolUser的命令将其删除。</p><p><br></p><p>注意，删除操作会将用户放入到回收站，你还可以从回收站中对其进行恢复。但是要恢复相关的邮件，以及OneDrive网站等个人相关数据，可能还需要一定的时间。请慎重操作。</p><p><br></p><h1>前提</h1><p>要想运行如上提到的两个命令，需要在Windows 10的机器上面，安装如下的几个组件</p><p>1. 下载安装官方提供的Microsoft Online Service Sign-in Assistant for IT Professionals <a href="https://go.microsoft.com/fwlink/p/?LinkId=286152">https://go.microsoft.com/fwlink/p/?LinkId=286152</a><p>2. 下载安装官方提供的Azure Active Directory Connection <a href="http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185">http://connect.microsoft.com/site1164/Downloads/DownloadDetails.aspx?DownloadID=59185</a><p>3.&nbsp; 请在本地用管理员身份打开PowerShell，并运行命令 Install-Module -Name AzureAD<p><br></p><p>进行后续操作之前，需要准备好Office 365 管理员账号，并且连接上MsolService，如下图所示</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170710093713775-705574714.png"><img width="1028" height="632" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170710093715181-1782534209.png" border="0"></a></p><h1> 操作</h1><p>首先，我们来看一下Get-MsolUser这个命令</p><p><a title="https://docs.microsoft.com/en-us/powershell/module/msonline/get-msoluser?view=azureadps-1.0" href="https://docs.microsoft.com/en-us/powershell/module/msonline/get-msoluser?view=azureadps-1.0">https://docs.microsoft.com/en-us/powershell/module/msonline/get-msoluser?view=azureadps-1.0</a>&nbsp;</p><p>这里的关键在于如何过滤出来我们想要操作的用户，这个命令带有几个有趣的参数</p><p>[-City &lt;String&gt;] [-Country &lt;String&gt;] [-Department &lt;String&gt;] [-DomainName &lt;String&gt;] [-EnabledFilter &lt;UserEnabledFilter&gt;][-SearchString &lt;String&gt;]</p><p>这些参数都可以用来作为过滤的条件，而且这个过滤是在服务器端发生的。</p><p><br></p><p>需要注意的是SearchString，只支持简单的模糊匹配，它会在displayname和alias中做匹配。</p><p><br></p><p>有时候，我们可能需要根据用户的创建时间进行筛选。目前没有看到这方面的参数。但可以通过下面的方式来解决</p><p>Where-Object {$_.WhenCreated –gt “6/16/2017”} </p><p>这个过滤是在本地过滤的，就是把所有用户读取到了本地缓存中，然后再过滤。上述表达式的意思是，找到6/16/2017后创建的用户。</p><p><a href="http://images2015.cnblogs.com/blog/9072/201707/9072-20170710093716103-845120381.png"><img width="1028" height="153" title="image" style="display: inline; background-image: none;" alt="image" src="http://images2015.cnblogs.com/blog/9072/201707/9072-20170710093717103-1469845615.png" border="0"></a></p><p><br></p><p>使用$users保存了这个用户列表后，可以进一步操作Remove-MsolUser命令来进行删除</p><p>$users | Remove-MsolUser –Force</p>]]></description></item><item><title>发布支持多线程的PowerShell模块 —— MultiThreadTaskRunner</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/06/03/6936666.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 03 Jun 2017 03:12:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/06/03/6936666.html</guid><description><![CDATA[<h2>应用场景</h2> <p>多线程在需要批量处理一些任务的时候相当有用，也更加有利于充分利用现有计算机的能力。所有主流的开发语言都支持多线程。</p> <p>默认情况下，PowerShell作为一个脚本语言，是不支持多线程操作的，虽然有所谓的后台任务，但实际上控制起来相当麻烦。</p> <p>&nbsp;</p> <h2>解决方案</h2> <p>我很喜欢PowerShell，所以为此专门写了一个自定义的模块，来实现多线程的功能。该模块使用C#编写，源代码可以在下面的地址访问到</p> <p><a title="https://github.com/chenxizhang/MultiThreadTaskRunner" href="https://github.com/chenxizhang/MultiThreadTaskRunner">https://github.com/chenxizhang/MultiThreadTaskRunner</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111128196-1236374799.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111129758-256980147.png" width="244" height="147"></a></p> <p>&nbsp;</p> <p>与此同时，这个模块已经打包发布到微软官方的PowerShell Gallery中</p> <p><a title="https://www.powershellgallery.com/packages/MultiThreadTaskRunner/1.0" href="https://www.powershellgallery.com/packages/MultiThreadTaskRunner/1.0">https://www.powershellgallery.com/packages/MultiThreadTaskRunner/1.0</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111130368-1585873006.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111130805-1383863805.png" width="244" height="208"></a></p> <p>&nbsp;</p> <h2>如何使用</h2> <p>要使用该模块，首先需要进行安装（请用管理员身份打开PowerSehll）</p> <p><code>Install-Module -Name MultiThreadTaskRunner </code> <h5>&nbsp;</h5> <h5>接下来，准备一个用来测试的脚本块</h5> <p>$script ={</p> <p>param($obj);</p> <p>Write-Host $obj</p> <p>}</p> <p>请注意，这里只是用最简单的代码做了实现，根据传入的一个参数，输出数据</p> <p>&nbsp;</p> <p>第三步，就可以进行快速使用了</p> <p>New-MultiTaskJob –Source 1..100 –Block $script –ThreadCount 10</p> <p>这个命令的意思是指，用10个并行的线程，处理传入的100个数字，实际上每个线程分配得到的数字是10个，然后使用此前定义好的脚本块执行它</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111131618-962552551.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201706/9072-20170603111132321-1279579116.png" width="244" height="134"></a></p> <p>请注意，你可以看到此时输出的结果并不是按照1到100的顺序进行，这个可以证明实际上这些数字是被不同的线程进行处理的。</p>]]></description></item><item><title>Microsoft Graph 概述</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/04/16/6720253.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 16 Apr 2017 14:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/04/16/6720253.html</guid><description><![CDATA[这个系列文章 已经进行到了实质的阶段，继上一篇介绍了如何搭建Office 365开发环境之后，我会通过这篇文章给大家介绍一个非常重要的概念：Microsoft Graph。它之所以重要，首先是因为它是未来Office 365对外的统一接口（甚至可以说是未来微软的云服务的对外统一接口），其次，Microsoft Graph对于不少Office 365开发人员来说是一个需要先跨过的门槛，这个关过去了，后续进行针对性的开发（Office Add-in，SharePoint Add-in，Office 365 Connector等）才更加得心应手。


Microsoft Graph的官方主页在https://developer.microsoft.com/zh-cn/graph/ 在这里也可以找到很多文章。
简单地说，Microsoft Graph是一套接口。它的名字经过了几次改变最终确定为Microsoft Graph，我想大致上是因为产品组确实将其定位于日后微软的云服务对外的统一接口层。Graph这个单词初看容易让人误会，但实际上学过算法的同学应该都知道这是指“图”的意思，而不是图片。


原文地址：https://chenxizhang.gitbooks.io/office365devguide/docs/microsoftgraphoverview.html]]></description></item><item><title>Office 365开发环境概览</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/26/6624236.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 26 Mar 2017 13:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/26/6624236.html</guid><description><![CDATA[>本文于2017年3月26日首发于LinkedIn，原文链接请参考[这里](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%A6%82%E8%A7%88-%E5%B8%8C%E7%AB%A0-%E9%99%88?published=t)

本系列文章已经按照既定计划在每周更新，此前的几篇文章如下

1. [Office 365 开发概览系列文章和教程](http://www.linkedin.com/pulse/office-365-%E5%BC%80%E5%8F%91%E6%A6%82%E8%A7%88%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%92%8C%E6%95%99%E7%A8%8B-%E5%B8%8C%E7%AB%A0-%E9%99%88)
1. [Office 365开发概述及生态环境介绍（一）](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%9F%E6%80%81%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%E4%B8%80-%E5%B8%8C%E7%AB%A0-%E9%99%88)
1. [Office 365开发概述及生态环境介绍（二）](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%9F%E6%80%81%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%E4%BA%8C-%E5%B8%8C%E7%AB%A0-%E9%99%88)

前面做了这么多铺垫，这一周终于要撸起袖子开干了。我将介绍如何搭建Office 365开发环境，本文将包括如下的两方面内容

1. 申请Office 365一年免费的开发者账号
1. 客户端开发环境介绍（Visual Studio Community，Code，Nodejs等）

## 申请Office 365一年免费的开发者账号

要进行Office 365开发，当然需要有完整的Office 365环境才可以。为了便于广大开发人员快速地启动这项工作，微软官方给所有开发人员提供了免费的一年开发者账号，申请地址如下 https://dev.office.com/devprogram
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAzDAAAAJGUwM2JjZWYyLWE4NmQtNDI2MC05M2FjLTJhNGM0MGNlYTY3OA.png)

申请的时候，需要提交一定的信息，然后很快会收到一个确认邮件，里面有一个注册链接（带有优惠码），请注意将这个链接在浏览器的私有模式下（Private Browser）打开，然后按照提示设置账号，如果不出意外的话，五分钟内，你将拥有一个完整的Office 365的环境。

> 这里建议链接在浏览器的私有模式下打开，是考虑到有不少朋友可能已经有正式在用的Office 365账号，如果不是在私有模式下，则会提示说账号已经存在，不能重复申请之类的信息。如果你有Office 365的账号，理论上已经可以开始开发，但本教程将要求大家申请这个一年的免费开发者账号，以获得一致性的体验。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAsEAAAAJDczNzM0MDQyLTBmYTctNGVmMC04YjNlLTIwYzMxNTQ2MmU0OQ.png)
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAuFAAAAJDI2M2ZlNGUzLTc0YmMtNDFmNi04Yjc5LWQ0NTBkMjU0NzYxMw.png)

值得注意的是，申请下来的这个环境其实带有5个Office 365 E3 Developer的License，也就是说，你甚至还可以邀请四位同事（或者朋友）组成一个团队进行开发测试。

> 请注意，这里申请的是国际版的Office 365 E3，绝大部分功能在国内版的Office 365 E3中是一致的，后续文章中，如果有涉及到功能不一致的地方，我会有所说明。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAz4AAAAJGUyY2YxZTljLWY5Y2YtNDgwYS05OWEzLWM5ZmJhMGMwODkwOA.png)

正如你所看到的那样，有了Office 365的账号，你就同时拥有了在多个设备安装Office 365 ProPlus的权利，同时还有很多有意思的服务。请自行安装，后续开发期间我们将不再对此进行赘述。

如果你对Office 365还不是很熟悉，欢迎通过下面的地址快速进行学习

https://support.office.com/learn/office365-for-business?ui=en-US&rs=en-US&ad=U



## 客户端开发环境介绍

介绍完了服务端的环境（Office 365），接下来给大家说明一下客户端开发的环境。

本系列文章将基于如下两个主要的开发环境进行介绍

1. Visual Studio 2017 Community (免费）
2. Visual Studio Code （免费，跨平台支持）

这个月初发布的Visual Studio 2017 家族，一如既往的豪华阵营，有Enterprise，Professional，Community这主要三个版本。值得注意的是，Community这个版本是免费的，而Office 365的开发是完全受Community版本支持的。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAzpAAAAJDQ3NDY3YTNhLTY4MmYtNGI2NS04N2E1LTRlZDJlOWNlNWEyNQ.png)

在Viusal Studio 2017中开发Office 365应用，一个明显的感觉就是方便，模板和向导做的非常到位，开发人员可以将主要的精力花在业务功能上面。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAxSAAAAJDQ2OTcxN2I5LTJjNjAtNDEwMy04NjU2LWZkMzYxMjgxMTgzMw.png)

另外，我要特别介绍的还有一个跨平台的免费开发工具，Visual Studio Code。所谓跨平台，是因为这个特殊的Visual Studio不仅仅可以在Windows上面运行，还可以在Mac，Linux上面运行，同时他能很好地支持开源的开发平台，例如NodeJS。

Visual Studio Code的下载地址是：http://code.visualstudio.com/
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAwpAAAAJDQ4OTg2NTdiLTYyMGEtNDRkOS1hYzcxLTE0OTgyMGNiNjY0OA.png)

我必须告诉你，Visual Studio Code是我非常喜欢的一款编辑器，而它对于Office 365 Add-ins开发的支持，让我感到非常意外的惊喜。在进行后续文章的学习之前，你需要先对Visual Studio Code的Office Add-in开发支持有基本的了解，http://code.visualstudio.com/docs/other/office

综上所述，我这里列出来所有客户端需要的软件环境

1. Windows 10 企业版或者专业版，推荐64位
2. Office 365 ProPlus完整安装
3. Visual Studio Community 完整安装
4. Visual Studio Code
5. Node ( 安装一些配套的npm模块，例如yo,gulp等）

值得一说的是，以我的经验，如果你能单独有一台开发的机器，将是更加理想的。我自己的做法是，在Azure里面申请了一台虚拟机来做本系列文章相关的演示代码的开发和调试。当然，如果你没有Azure的资源，那么在本地使用Hyper-V或者其他类似技术来实现也是可以的。

> Azure提供了一个Visual Studio Community 2017 on Windows 10 Enterprise的虚拟机模板，可以极大地方便开发人员快速搭建开发环境。使用云端的虚拟机的一个好处是随时随地都可以访问到它，当然这会有一定的费用，为了避免过高的费用，你可以只在使用的时候启动该虚拟机，用完即明确停止。]]></description></item><item><title>Office 365开发概述及生态环境介绍（二）</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/19/6580477.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 Mar 2017 06:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/19/6580477.html</guid><description><![CDATA[>本文于2017年3月19日首发于LinkedIn，原文链接在[这里](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%9F%E6%80%81%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%E4%BA%8C-%E5%B8%8C%E7%AB%A0-%E9%99%88)

在[上一篇](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%9F%E6%80%81%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%E4%B8%80-%E5%B8%8C%E7%AB%A0-%E9%99%88) 文章，我给大家回顾了Office发展过来的一些主要的版本（XP，2003,2007,2013等），以及在Office客户端中进行扩展开发的手段（主要提到了VBA和VSTO，这里没有提及SharePoint等服务器端开发，因为后续会有专门的四篇文章介绍）。承蒙大家抬举，我的这个系列文章除了首发在[LinkedIn](http://www.linkedin.com/in/chenxizhang)上面，同时会在[Github](http://github.com/chenxizhang/office365dev)和[cnblogs](http://www.cnblogs.com/chenxizhang/category/967796.html)以及以下两个公众号进行每周连载，如果有兴趣的朋友，请按需关注。

1. 微软中国Office 365官方公众号，mschinaoffice365
1. Excel之家ExcelHome，iexcelhome

言归正传，这一篇主要有两个话题，首先我会谈一谈在Office 365这个平台上面，支持的扩展开发手段以及应用场景；其次我会介绍一下我自己理解的Office 365所提供的全新的生态环境。

## Office 365开发概述

我想从下面几个角度来讲讲Office 365开发

1. Office 365是什么
1. Office 365的开发包括哪些场景
1. Office 365的开发有哪些技术手段

Office 365并不是Office的简单升级版本，我们以前的Office版本通常都是按照年份来编号（这个还将继续存在），而Office 365他提供了一个全新的服务模式——基于云的生产力平台。简单地说，**他（永远）包含了最新版本Office，同时还包括了在线及移动版的Office以及其他很多创新性的云服务，来真正帮助组织或者个人释放生产力，改善工作体验。**

Office 365的名称不会随着时间而变化，也就是说，不会有Office 366或者Office 360之类的叫法，他就叫Office 365（当时取这个名字，大意是希望让Office服务于我们的每一天）。据不完全统计，世界上大约有1/7的用户在使用Office，我们有这个荣幸。

从最基本的层面来看，Office 365可以像下面这样理解
![Office 365](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAqQAAAAJDM2Y2UwZjg4LTVlMjItNDA2OC05MzllLWJiZjg4ODU4ZGExYw.png)


与此同时，Office 365还在不断地创新，推出新的服务，很多都是免费提供给现有Office 365用户的。下面是目前国际版的截图。
![国际版](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAvtAAAAJDc5ZmIwZDNkLTBlZTktNDNhZC1iYTY3LTQ5NDVlYmZhZjIxYw.png)


Office 365是一个全球运营的服务，目前我们在全球38个不同的地区都有Office 365的数据中心，请参考 [http://o365datacentermap.azurewebsites.net/](http://o365datacentermap.azurewebsites.net/)。

![数据中心](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAqMAAAAJDE3NmFmNDQyLWEzNWMtNGJhMi1hYWQxLTg5ZmY3ZmFiMWQ1Mg.png)


与此同时，在中国我们有两个完全独立的数据中心（分别位于上海和北京），由世纪互联负责运营。请参考 http://www.21vbluecloud.com/office365。

> 除了全球统一的那个国际版之外，在世纪互联运营的这个版本，我们内部称之为Gallatin，大部分中国的客户都是购买这个版本，但也有一部分有海外业务的中国客户，会购买另外一个代号为Yellowstone的海外版本（特指数据中心在香港或新加坡的版本）。

![世纪互联](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA1EAAAAJGM4Mzk4ZTZmLTM0ZjktNDI2YS05OWQ1LTZlYmM0NGYyOGZhNw.png)

最后，Office 365是基于订阅进行授权的，用户可以按需订阅组件，按照具体使用的时间付费，而无需一次性购买。针对不同的组织或个人，Office 365提供了丰富多样的订阅选项。详情请参考 https://products.office.com/zh-cn/business/compare-more-office-365-for-business-plans

![购买计划](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAukAAAAJGY4ZGE4M2U2LWZhZDAtNDgyZS04ZTQxLWNlMDVkMGEyNzlkMA.png)

> 教育版和非营利组织版订阅费用极低，甚至免费。

世纪互联的授权计划大抵上跟国际版类似，但也有些细微的区别，有兴趣的请参考 http://www.21vbluecloud.com/office365/pricing.html。从功能角度来说，核心的功能都已经落地到Gallatin，但是确实有些新推出的服务，会有一定的部署周期。本系列文章后续提到这些服务的时候，会做出一定的说明。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAoiAAAAJDA1OTM4ZGNlLWQ1NDgtNGNjMS1hYzA1LTZlZWYzYThlYTA0ZA.png)

那么，在了解了Office 365的这些背景之后，我们再来看一下在Office 365 这个全新的生产力云平台上面，对于开发人员来说有哪些机会。

平心而论，Office 365 本身提供的功能和服务已经非常丰富，甚至强大到让我们的客户都觉得目不暇接，日常用到的功能可能也只有全部功能的一小部分。但是，Office 365毕竟是一个基础性的平台，我们的客户不会为了用Office 365而用Office 365，而肯定是为了解决他的业务需要而使用的。打个比方说，客户用Word，并不会是仅仅因为Word是一个世界一流的字处理软件，而是因为他（她）要编写一份自己想要的方案或者论文，而Word正好可以帮助到他。从这种层面上来说，客户的业务需求肯定是千奇百怪的，而且永远不会被完全满足，尤其不可能靠微软一家之力、靠Office 365的标准功能就能完全满足。

所以，Office 365继承了Office的一贯的优良传统，从设计的一开始，从架构上面来说就支持开发人员在其基础上，按照业务的需求进行定制和扩展，官方的Office开发中心清晰地展示了这方面的能力，具体来说可以有下面四个主要的场景

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAseAAAAJGYzOTVhNGU4LTIwNjctNDNlMy1iODU1LWI4ZmFjYjI1MDUzYw.png)

**Microsoft Graph**

通过Microsoft Graph，可以让你的自定义应用系统（不管是Web 应用，还是桌面应用，抑或是移动App）通过统一的、RESTful的接口访问到授权用户的Office 365的资源。稍微深入地展开一点来说，一方面你的应用可以使用Office 365提供的Identity 服务，简化和统一身份验证环节；第二方面，你将直接将Office 365的能力无缝地集成到你的应用中去，免费享受到微软强大的基础投资带来的好处。

下图提到的这个随办的应用，是目前国内做得很完善的与Office 365应用集成的成功案例，有兴趣可以参考

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAthAAAAJGJjNGMzZDkwLTFjODItNGFkOC05M2RkLTAyZjA1MDkzZTUyMg.png)

> 关于Microsoft Graph，我在本系列文章的第三篇将详细展开探讨，如果有兴趣的朋友，请先了解 https://developer.microsoft.com/en-us/graph/

**Office Add-ins**

Add-ins对于Office开发人员来说并不是新事物。上一篇文章我已经提到了VBA可以做Add-in（通常是通用的功能，不跟具体的文档有关，并且需要保存为特殊的格式——例如xlam或者xla这种才算，称之为Excel Add-in），VSTO也可以做Add-in（称之为COM Add-in）。

这两种Add-in，请姑且允许我将其称之为传统的Add-in。他们将需要在本地安装和部署，并且将出现在Office应用的如下界面中，可以按需要启用或者禁用。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAvbAAAAJDk1OTJlYWU1LTBjODEtNGQxMS05MjJjLTMyZWQ3N2FlN2IwZg.png)

这两种Add-in的优势和劣势在上一篇文章已经有详细的说明，这里不再赘述。Office 365的Add-in指的是基于新一代的Web技术推出的Add-in开发能力，我可以将他们称之为Web Add-in。

我这里同样不会过分地展开细节，因为本系列文章后续有五篇文章专门讲解这个内容。我只希望大家能够明白，为什么会推出Web Add-in这种新的开发模式？其实很简单：

第一我们希望提供给开发人员更好地分发Add-in的能力，如果要首先这一个目的，就最好不要依附在文档内部，不要在本地安装，不要再为版本更新操心费力，对用户来说实现一次订购处处可用。

第二，我们希望能够在移动设备也能使用这些Add-in，不必要为移动设备又单独做一次开发。

下面这个同样由随办团队出品的iOffice Add-in，可以安装在Outlook或者OWA中，这个目前是免费的Add-in，可以让随办的用户之间在Outlook中进行很多有意思的互动，包括查看联系人，分配微任务等。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAmuAAAAJDAxNmJiNTVhLWFhYTUtNDJiNy1iNGY3LTM3OGE2ZTc5ODE2Yw.png)

**SharePoint Add-ins**

之所以单独将SharePoint 的Add-ins拿出来，区别于Office Add-ins，是因为SharePoint指的是服务器端开发，在开发模式及要求的能力上面是不太一样的。但以我看来，SharePoint的开发人员，向Office 365转型会比传统Office开发人员向Office 365来的容易，原因在于，SharePoint的开发，虽然也经历过几种不同的历史阶段（例如最早的WSP，到后来的Farm Solution，到后来的Sandbox Solution，再到SharePoint 2013时代横空出世推出了App的模型），但本质上来说，其核心还是Web开发，所以有这种经验和基础的开发人员，在如今这种“移动优先、云优先”的大背景下，有着一些先天的优势，何况说，新的Add-in开发模式进一步标准化了，从逻辑上说应该还可能会更加容易一些。

目前在Office Store中有超过1163个SharePoint Add-in，占到全部Add-in的将近58%，足见其市场潜力。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAwnAAAAJGRhNGRhMzIwLWEzOWEtNGJmZC1hMzIyLTQwMjRkMGUxODlmOA.png)

**Office 365 Connectors**

Connector（直译过来是连接器）是一个全新的事物。它目前在Outlook Modern Groups以及最新发布的Microsoft Teams中起到连接外部应用系统或者信息源的作用。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAsvAAAAJGVkMjQ0NDlhLTMwOGEtNDczNS1iODM1LWUxODNjZTY1NzBkNg.png)

这个要讲起来，最根本的一点是大家要理解在企业内部协作的时候，最重要的是一个团队的概念，而在团队的一个共同的工作区中，我们称之为Group。在Group（Teams中称为Team）的日常协作过程中，可能有链接外部的应用系统或者信息源，以便在这些系统或者信息发生变化的时候，团队能以一种透明的方式得到通知。Connector就是做这个的。目前已经默认提供了超过50个标准的Connector，但开发人员可以根据自己需要进行定制。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAwwAAAAJDhkN2YyYjRhLWU2ZDktNDI1My05NTgxLTZlMGRkYjE3Y2I1Mg.png)

介绍完了Office 365开发的典型四大场景（Microsoft Graph，Office add-ins，SharePoint Add-ins，Office 365 Connectors），这里快速给大家提一下，作为开发人员可以使用哪些平台或工具来开展工作。

从下图可以看到，目前支持的开发平台除了ASP.NET，还有Android+iOS这种Native App平台，也有完全基于Javascript以及NodeJS的开发支持。这是一个开放是世界，Office 365的开发掀开了崭新的一页；对于开发人员来说，会有一定的挑战，但我相信机遇更加大。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA1UAAAAJDUwY2IwYzkwLWVhZDItNGEzYi04NDQzLThkNDgwODhhMmRhZQ.png)


## Office 365生态环境介绍

我很喜欢生态环境这个词，而且我自己对这个词很有感触是前些年看电视节目说到某些地区由于某个物种的恶意捕杀，导致了食物链上其他一批物种也相应地灭绝，让人触目惊心。从当前的经济全球化和扁平化的大背景来看，几乎所有的公司都不可能完全靠自己赢得一切，而如果是失败，也不可能仅仅是自身能力不够这么简单。我不是什么大领导，只是结合自己的经验来谈一下Office 365相关的生态环境及其建设。

我在“[风起云涌：西雅图技术培训见闻分享](http://www.linkedin.com/pulse/%E9%A3%8E%E8%B5%B7%E4%BA%91%E6%B6%8C%E8%A5%BF%E9%9B%85%E5%9B%BE%E6%8A%80%E6%9C%AF%E5%9F%B9%E8%AE%AD%E8%A7%81%E9%97%BB%E5%88%86%E4%BA%AB-%E5%B8%8C%E7%AB%A0-%E9%99%88)” 这篇文章中提到，我理解微软的成功法则是通过紧密团结和帮助客户和合作伙伴成功来获得成就。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAtoAAAAJDRiMDMzMWM2LWQ3YWItNGU4Yi1hOGFiLTg1MmVlMzkyNmFhZA.jpg)

这可能看起来有点抽象，我们谈点实际的。Office 365作为一个逐渐完善和成熟起来的全球性生产力云平台，他已经取得的一些成绩，以及将要进一步的发展，都完全离不开客户和合作伙伴的参与。

从客户这个角度来说，我们看到越来越多客户认识到Office 365所带来的全新价值，在自身的数字化转型过程中，利用Office 365提供的生产力解决方案（而不仅仅是产品）取得先机。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA3oAAAAJGRkYjIwNGUyLTEyZmQtNDNjYi1iYjVhLTI4ZWVjMGJlOTI1NA.png)

Facebook的选择让我们看到这种级别的科技企业的决断力，也许这正好是他能专注于业务创新的动力之一。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAyWAAAAJDkyZjBkN2Y0LTU1ZjctNDY4Ni1hYTZkLTU1NTE5M2Y2MWI2NA.png)

合作伙伴体系一直是微软的重要资产，在全球有数以百万计的各种规模的合作伙伴，这一点都不夸张。每年都有一次规模盛大的全球合作伙伴大会，今年的大会将在华盛顿举行，有意思的是，这一届又与时俱进地改了名字，希望进一步激励和启迪所有人在数字化转型的道路上锐意创新吧。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAq2AAAAJDI0ZDNkZWU1LTAxYjgtNDViMS05ZjUwLTY2OWI0MzMyNTM4Mw.png)

开发人员是Office 365生态中的重要力量，在微软内部研发工程师仍然占了大部分的比例，至少包括基础架构的开发团队，Office 365功能开发的团队，以及为Office 365设计接口的团队，还有一些特殊版本本地化的研发团队等。

对于合作伙伴的开发团队，最重要的是结合自身业务或者客户需求，选择合适的切入点和自己熟悉的技术，优势互补，利用Office 365平台提供的基础能力快速开展创新。

为了更好地建设围绕Office 365的中文用户社区，微软有多个部门都在积极努力，下面这篇文章我详细地介绍了这方面的信息，如果有兴趣的朋友请参考

[介绍Office 365 中文用户社区 4.0](http://www.linkedin.com/pulse/%E4%BB%8B%E7%BB%8Doffice-365-%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E7%A4%BE%E5%8C%BA-40-%E5%B8%8C%E7%AB%A0-%E9%99%88)]]></description></item><item><title>介绍Office 365 中文用户社区 4.0</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6576907.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 18 Mar 2017 15:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6576907.html</guid><description><![CDATA[> 本文于2017年3月18日首发于LinkedIn，原文链接在[这里](http://www.linkedin.com/pulse/%E4%BB%8B%E7%BB%8Doffice-365-%E4%B8%AD%E6%96%87%E7%94%A8%E6%88%B7%E7%A4%BE%E5%8C%BA-40-%E5%B8%8C%E7%AB%A0-%E9%99%88?trk=v-feed&lipi=urn%3Ali%3Apage%3Ad_flagship3_detail_base%3B5%2FAVddThkniSg%2FEmS4OwDg%3D%3D)

为了给广大用户提供一个可以自由交流、切磋技术的平台，微软和其他一些国际知名的大型软件公司一样，都有创建用户社区（Community，或者叫User Group）的传统。

有意思的是，不同的历史时期，用户社区会采用不同的形式，我总结为四个阶段，分别介绍如下

## 用户社区1.0：新闻组

在网络还不是很发达和普及的时候（应该是2005年前），微软的用户社区大多是通过一种叫做新闻组（Newsgroup）的形式存在的。我是新闻组的重（中）度（毒）用户之一，而且也是新闻组的版主（当年我负责Excel）。新闻组是要通过一款叫Outlook Express的软件来收取的，使用体验类似于邮件，我们可以在一个时间收下来某个版块的一些讨论问题，然后在离线的状态下进行回复，等到下次可以联网的时候，再一次性发出去即可。

![新闻组订阅](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA2NAAAAJDkyYTFkYzgyLTg3ZmMtNDI3MC04MzA5LTcxOTkxNmIyMGQwNw.gif)

关于如何使用新闻组，有兴趣的朋友，可以参考这个链接，今天再次回过头来看，还是满满的怀念啊。不过，时代总是在发展的，我们需要往前看。

## 用户社区2.0：在线论坛

在2005年左右，微软的用户社区全面升级为在线论坛，并且明确地分为两大分支

1. 针对开发人员的MSDN社区，访问地址是 https://social.msdn.microsoft.com/Forums/zh-cn/home
1. 针对IT专业人士的TechNet社区，访问地址是 https://social.technet.microsoft.com/Forums/zh-cn/home

![TechNet论坛](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAplAAAAJDM0ZjA1YzVjLTIxZWYtNDkyMS05ZDJlLWRkNjhjNTcwZjg2ZA.png)

目前这些论坛都还是活跃的，也仍然是一个可用的渠道之一。只是这些年微软的产品线和技术其实变化较大，这些论坛并没有提供最新的技术的版块，例如Office 365，Azure等。但是这个问题其实已经有所改善了，去年下半年，总部统一发布了全新一代在线技术论坛，访问地址是 https://techcommunity.microsoft.com



![微软技术论坛](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAyCAAAAJDRhMDcxNzgyLTkzYTQtNDgwOC1iZTFiLWM4ZDg5NDMxNDU4OA.png)
这个新的在线技术社区提供了最新的技术版块，唯一的美中不足就是，目前只有英文版，而且短期之内应该很难看到中文版。

值得一提的是，如果是具体到某个产品线，国内有不少优秀的中文社区，这是对官方资源的有益补充。例如，如果是Office相关，我推荐大家关注ExcelHome这个华语地区最大的中文技术社区，截止目前拥有超过300万的注册用户，他们的地址是 http://www.excelhome.net/

![ExcelHome](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA2iAAAAJDg4NTAzZTc0LWM3ODgtNGExNy05YmEyLTNkYjAyNzA2ZGI4NQ.png)


## 用户社区3.0：社交媒体

在线论坛的形式固然是很好的，但是随着社交网络和移动互联网的兴起，社交媒体一开始是做一个补充出现，逐渐慢慢地占据了更加主要的比重。

社交媒体最开始流行起来是微博，但微博这种形态不适合做社区，所以真正应用起来做用户社区是在QQ和微信里面，主要有几个形式

1. 订阅号和服务号，这两个公众号虽然多少有点区别，我还是将其归类为一种，他们都是微信中用来做自媒体的工具，很适合定时发布一些新闻或者文章，经过定制也可以支持一定的互动。
1. QQ群和微信群，这个目前应用非常广，他们的好处是可以有较好的互动性，尤其是有一些与时俱进的功能（例如发红包）等。

目前来说，针对Office 365，我们有一个官方公众号——“微软中国Office365”
![微软中国Office 365](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAwtAAAAJGM2NGUwYjI4LWFjMzEtNDllYy1hMjk0LWNlMzhjYzRiMjFiZQ.jpg)

> 上面提到过的ExcelHome也有一个官方公众号：iexcelhome

另外，我们还有一个目前国内最大的微信群——Office 365技术群（O萌），这个群由国内知名的技术专家盆盆老师创立，后由本人负责运营，目前聚集了超过260位国内关注Office 365的高级用户、技术专家、运营顾问等成员，并且于去年年底正式成立了教育分社（目前有将近40人）。
![Office技术群](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAn-AAAAJDVlMDZkZmEwLTdlNzYtNDVlNC04OWQyLTFmMTg4YjE3NTFlMA.jpg)

## 用户社区4.0：精准和安全的社交媒体

如果说1.0和2.0的时代，我主要是作为参与者，那么在3.0的时代，因为有了运营者的身份（虽然是业余的），会有很多不一样的体会和感触。例如，我自己有如下的思考

1. 微信群这种形式，有一些它的局限性。第一是人数限制（最多500人），第二，超过40人以上就必须由管理员或者现有成员添加进去，第三，如果放开不做审核，那么很容易就变成一个大市场；如果做审核，那么管理员实际上是很累的。
1. 微信过来的用户，都是个人身份，很难要求大家提供完整的信息，并且进行分类，提供针对性的内容和讨论。
1. 微信是一个私人生活应用，朋友圈其实也是基于熟人的前提，把工作和生活混在一块儿，虽然一开始是觉得方便，但一旦群多了，添加的人多了，非常容易造成打扰（工作时不专注，不工作时也被打扰）。
1. 微信群的消息是流式的，没有主题的。我们都有这样的体验，有时候一段时间不看手机，打开之后，会发现有一批一批的消息推送过来，这种情况下，实际上很难进行有一定深度的交流，也不可能会有知识的积累（连搜索都很难），更不要说极其容易说着说着就偏离话题，这都是我们不以为奇的现象了。

为此，我计划在3.0的基础上进行一定的改良——即在保持现有公众号和微信群的前提下，增加如下的设置

*增加基于Office 365提供的企业级社交网络Yammer 群的支持*。Yammer在加入微软Office 365产品家族之前就是业界顶尖的企业级社交网络平台，可以算得上是组织内部的Facebook。对于Office 365用户而言，本身就已经可以使用Yammer，而且它也有非常好的移动化支持。

![Yammer](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAxeAAAAJDJkMWFmMzRhLTVhZWQtNDFkNy1hMGJmLTdkZjcyZjhhYjMyYw.jpg)

有兴趣的朋友，可以填写如下的表单申请加入。请大家体谅，因为白天比较忙，我会在每天晚上统一处理请求，如果你填写信息完整，那么很快会收到邀请加入的邮件。

[https://aka.ms/joinoffice365community](https://aka.ms/joinoffice365community)

![申请表](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAqrAAAAJDQ5MzBjYWZkLWYwZTktNDIwYS04YTM3LWIxYTc4ZTZlYmM0Zg.png)


*进一步加大行业社群，专业技术社群的建设*，提供更加有针对性的讨论空间。

未来Office 365的用户社区，除了有一个最大的总群（所有人都在里面）之外，我会考虑如下是两个分支设置

1. 针对行业的专属社群。目前已经有教育分社，由教育界的专家直接运营。
1. 针对专业技术的社群。目前已经建立的有技术文档作者分社，在筹建的还有网络技术分社。

这是Office 365用户社区4.0的雏形，也是我们的愿景。实际上，我相信大家也能看得出来，从我的角度来说，虽然有幸能参与创建和运营这个社区，但长远的工作来说，我希望通过建立比较好的架构，并且找到每个行业或者专业技术领域的专家，以更加开放的形式提供更加有价值的服务，所有人为所有人，一起共建Office 365 用户社区。]]></description></item><item><title>学习一点Markdown的基本知识</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6575277.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 18 Mar 2017 09:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6575277.html</guid><description><![CDATA[![](http://m.c.lnkd.licdn.com/mpr/mpr/AAEAAQAAAAAAAAn7AAAAJGY0MTBlNTI5LWEzODgtNGIxYS05MzI4LWZhMDdlOTUxMTNkMA.png)

> 本文于2017年3月18日首发于LinkedIn，请参考[链接](http://www.linkedin.com/pulse/%E5%AD%A6%E4%B9%A0%E4%B8%80%E7%82%B9markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86-%E5%B8%8C%E7%AB%A0-%E9%99%88?published=t)

这个世界的进步是由一些“懒”的人推动的。今天讲的这个Markdown，其实也是因为一批厌倦了HTML的各种标签的语法，并且希望用更加简单语法来编写HTML文档的程序员想出来的。

Markdown的愿景是： HTML文档应该长成什么样，就应该怎么编写。所以实际上他要解决的问题是所见即所得，用文本编写HTML文档的问题。这听起来有点夸张，或者对于没有用过的朋友来说，可能是很难理解的。那么，我们对照一下下面两张图。

下面这一张图，是用Markdown语法编辑的“Office 365开发概览系列文章和教程”。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAzZAAAAJGUwMGNjM2IwLWY3Y2YtNGVlNy05MjhkLThmMTQwYzkxMjUzNQ.png)

如果同样的事情， 使用标准的HTML语法来编写，则可能是下面这个样子的。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAvpAAAAJGRkZTFiYWVjLWYyMzQtNDE3Mi1hM2M2LTM2NzRlN2UxY2NkZQ.png)

Markdown并不是用来取代HTML的，事实上，它的后缀名为MD的文件并不能直接显示在浏览器中，而是需要经过特殊的解析，转换为最终的HTML才能显示。

但是，它解决了一个很大的问题，就是编写HTML页面的难度——我们可以不借助任何复杂的编辑器，使用记事本的方式，实现所见即所得的网页编写体验。

Markdown定义了一些自己特定的标签，来映射到HTML中的语义。但它的标签常用的加起来不超过10个，非常容易上手，以及使用。

如果你有兴趣阅读官方的说明，请参考 http://daringfireball.net/projects/markdown/syntax

但是，我建议你直接看一下中文的版本（下面的链接是我认为最好的一个入门材料），快速了解一下即可

http://wowubuntu.com/markdown/#list

有了这些概念之后，最后我给大家介绍几块常见的Markdown的编辑器。注意，我前面提到过了，其实编写Markdown并不需要特定的编辑器，直接用记事本就可以了（如果用Notepad++，还可以实现代码高亮等功能），如果我就是编写一个简单的文件，我用记事本就可以了。但如果我想编写很多文章（而且文章内容都比较多的话），而且我希望在本地可以进行预览，以及可以结合Github进行版本的管理，我更加倾向于使用Visual Studio Code这块跨平台的轻量级代码编辑器。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAphAAAAJGI4ZTQ2NmQxLTE1NTMtNDg5MC1hYTIwLWIzYTBmZWZiNGQxZg.png)

我正在撰写的一个系列文章，除了发布在LinkedIn上面外，将同步发布到Github和cnblogs上面，后者都是支持Markdown的，所以我在Visual Studio Code建立一个项目，看起来的效果像上图所示。

如果想要较为深入地学习在Visual Studio Code中使用Markdown，请参考 https://code.visualstudio.com/Docs/languages/markdown]]></description></item><item><title>Office 365 开发概览系列文章和教程</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6573711.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 18 Mar 2017 06:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6573711.html</guid><description><![CDATA[<p>原文于2017年2月26日首发于LinkedIn，请参考<a href="http://www.linkedin.com/pulse/office-365-%E5%BC%80%E5%8F%91%E6%A6%82%E8%A7%88%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%92%8C%E6%95%99%E7%A8%8B-%E5%B8%8C%E7%AB%A0-%E9%99%88">链接</a><h1>引子</h1><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f4141454141514141414141414141795f414141414a47513059544a6859574d344c545979596d59744e474d774e793168595451784c54646b4f5467774e7a4d35593251334d.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f4141454141514141414141414141795f414141414a47513059544a6859574d344c545979596d59744e474d774e793168595451784c54646b4f5467774e7a4d35593251334d.jpg"></a><p>之前我在Office 365技术社群（O萌）中跟大家提到，3月初适逢Visual Studio 2017隆重发布以及20周年纪念，我想要发起一次与Office 365开发相关的活动，一方面也是向Visual Studio致敬；另一方面，我在加入微软之前，有相当长的一段时间都是从事与Office平台定制和应用系统开发的工作（最早是做VBA的开发，后来有做过VSTO，以及SharePoint开发），而以微软员工的身份跟很多客户以及合作伙伴打交道下来，我有一个深切的体会就是说Office 365这个平台不光是给客户带来了全新的体验、也给独立软件开发商（ISV）和广大的开发人员提供了前所未有的一些机会，但是这些潜力还没有完全地开发出来，我觉得有必要也有兴趣做一点这方面的分享，除了对我自己来说也是一个总结和思考的机会，如果还有幸对大家有所帮助，我将感到非常高兴。<p>我并不认为Office 365的平台就已经是完美的，事实上因为在全球有多个版本导致有些功能或接口并不完全统一，而且由于开发的技术（Web为主，结合了云的架构）与传统的Office开发有较大的差异，这些会给我们的开发人员带来一些困扰和挑战。我们在去年10月份的时候，在北京举办了第一届Office 365技术峰会暨开发马拉松大会，总部产品组来了将近20人的豪华团队，与中国的开发团队（或独立开发个人）做了深入广泛的交流，我们能看到大家的积极热情，也收到了不少实际的反馈意见。<blockquote><p>据我所知，同类活动今年仍然将择期举办，规模和深度可能都会有提升，敬请大家关注，并且可以早做些准备。</p></blockquote><p><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f4141454141514141414141414141314d414141414a474a6d4f446777596a45794c5455774e4445744e44517a4d7930354e4752694c5455354d6d59794e544a6a4d546c6c59.jpg"><img alt="" src="https://github.com/chenxizhang/office365dev/raw/master/docs/images/68747470733a2f2f6d656469612e6c6963646e2e636f6d2f6d70722f6d70722f4141454141514141414141414141314d414141414a474a6d4f446777596a45794c5455774e4445744e44517a4d7930354e4752694c5455354d6d59794e544a6a4d546c6c59.jpg"></a><p>但是，如果放长远一些眼光来看，Office 365目前采用敏捷开发模式，产品组也更加开放，我相信它本身会越来越完善；与此同时，作为一个全新的平台和全新的生态，我们也希望有更多的开发人员加入，并且做出自己的贡献。<h1>内容介绍</h1><p>言归正传，我准备用一个系列文章和配套课程（含代码示例）的形式进行分享。这个系列将包括目前Office 365所支持的开发模式的全面介绍，并且通过案例带领观众进行实践。目前初步规划将包括如下几个内容<p><br></p><ul><li><a href="https://github.com/chenxizhang/office365dev/blob/master/README.md">系列文章简介</a><li>Office 365开发概述及生态环境介绍
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365dev-overview-1.md">上篇</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365dev-overview-2.md">下篇</a></li></ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/office365devenv.md">Office 365开发环境搭建</a><li>Microsoft Graph
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftgraphoverview.md">Microsoft Graph 概述</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/graphexplorer.md">通过GraphExplorer体验Microsoft Graph</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/graph-tools.md">通过其他第三方工具体验Microsoft Graph</a><li>注册Microsoft Graph 应用程序
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/applicationregisteration.md">注册Azure AD 应用程序</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/applicationregisteration2.0.md">注册Azure AD 2.0 应用程序</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/chinaoffice365applicationregisteration.md">注册中国版Microsoft Graph应用程序</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/understandapplication.md">掀起Azure AD的盖头来——深入理解Microsoft Graph应用程序和服务权限声明</a></li></ol><li>开发Microsoft Graph 应用程序
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/desktopapplication.md">Microsoft Graph 桌面应用程序</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powershell-application.md">PowerShell脚本访问Microsoft Graph</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powershell-module.md">支持国内版Office 365的PowerShell模块现已发布</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/webapplication.md">Microsoft Graph Web应用程序极致开发体验</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/gettenantid.md">如何通过PowerShell获取Office 365 TenantID</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/deamonapplication.md">Microsoft Graph 服务应用程序</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/crossplatform.md">在ASP.NET Core MVC 应用程序中集成 Microsoft Graph</a></li></ol></li></ol><li>Office Add-ins 开发
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddins.md">Office Add-in 架构和入门</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddindev.md">在Visual Studio 中开发Office Add-in</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/vscodetoofficeaddin.md">在Visual Studio Code中开发Office Add-in</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddindesignguide.md">Office Add-in 设计规范与最佳实践</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/exceladdinsample.md">实战Excel Add-in的三种玩法(VBA,VSTO,Web Add-in)</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/exceladdinpractics.md">Office Web Add-in的技术原理和开发常见问题剖析</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddinmanifest.md">详解Office Add-in 清单文件</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddinpublish.md">在企业和应用市场发布Office Add-in</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeaddinsso.md">在Office Add-in中实现单点登陆（SSO）</a></li></ol><li>SharePoint Online 开发
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepoint.md">SharePoint 大局观</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepointaddin.md">SharePoint Add-in 开发</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepointpnp.md">SharePoint Patterns and Practices</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/sharepointframework.md">SharePoint Framework</a></li></ol><li>基于Office 365的业务和流程应用开发
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officebusinessapp.md">基于Office 365的随需应变业务应用平台</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md">PowerApps 入门篇</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsadv.md">PowerApps 进阶篇</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md">Microsoft Flow 概览</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/commondatamodel.md">Common Data Service 初探</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsconnector.md">为PowerApps和Flow开发自定义连接器</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/powerbi.md">观未见，行不止 —— Power BI 两周年技术和方案交流圆桌会议纪实</a></li></ol><li>Office 365 开发与人工智能
<ol><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/officeandai.md">人工智能背景下的Office 365现状和发展趋势</a><li><a href="https://github.com/chenxizhang/office365dev/blob/master/docs/botframeworkquickstart.md">Office 365 机器人（Bot）开发入门</a></li></ol></li></ul><p><br></p><h1>重要说明</h1><ul><li>需要特别声明一下，我将主要利用业余的时间来分享这个系列，所以更新的周期可能不是很有规律，但我想争取在6月底之前完整所有这个系列（包括文章和视频），如果有合适的朋友愿意参与这个系列，我非常欢迎，请私下跟我联系讨论。
<li>本系列文章和课程将主要以国际版Office 365 企业版E3 作为演示和开发环境，采用的开发工具是Visual Studio 2017 Enterprise。（如果有兴趣跟随一起做练习，请预先准备好相关环境，都可以申请试用版）。
<li>本系列文章将在<a href="http://www.linkedin.com/in/chenxizhang/">LinkedIn</a>和<a href="http://www.cnblogs.com/chenxizhang/category/967796.html">博客园</a>、<a href="https://github.com/chenxizhang/office365dev">Github</a> 三个平台同步连载，欢迎大家根据自己的喜好进行关注，并且进行交流。
<li>本文将同时在 <em>微软中国Office 365官方微信号</em> 连载，欢迎关注“ mschinaoffice365"，每周都会收到各种新功能介绍和实用技巧。
<li>本文将同时在 <em>Excel之家ExcelHome</em> 连载，欢迎关注“iexcelhome"，ExcelHome是华语地区最大的Office中文技术社区，拥有超过300万注册会员。
<li>本系列文章和课程所涉及到的案例代码，将全部在Github上面共享，欢迎大家参与。</li></ul>]]></description></item><item><title>Office 365开发概述及生态环境介绍（一）</title><link>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6573604.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 18 Mar 2017 05:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2017/03/18/6573604.html</guid><description><![CDATA[原文于2017年3月13日首发于LinkedIn，请参考[这个链接](http://www.linkedin.com/pulse/office-365%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%9F%E6%80%81%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D%E4%B8%80-%E5%B8%8C%E7%AB%A0-%E9%99%88)


离上一篇文章，很快又过去了两星期的时间。今天抓紧晚上的时间，开始了Office 365开发系列文章的第一篇，我会帮助大家回顾一下过去Office开发的一些场景，目前提供的一些能力，最后展望一下生态环境建设和未来的发展。

> 关于Office 365开发，这里的定义并不是指开发Office 365平台，或者接口（这两部分由微软数以万计的研发工程师们在负责），而是基于Office 365平台及其提供的接口，独立开发商（ISV）或者有一定能力的开发人员、高级用户针对Office 365的定制、扩展、集成等方面的开发。

## 回顾过去Office开发的基本情况

对于Office开发，我应该算起来是接触比较早的一批中国用户之一，所以如果大家愿意听，我很乐意分享一些Office开发的基本情况以供参考。

从Office 97开始，我使用过后面几乎所有的Office 版本，但是印象最深刻的有几个版本

### 1.Office XP

这个版本没有用年份来编号（实际上应该是Office 2002），原因估计是为了配合Windows XP的整体市场宣传定位。它的特殊之处在于有一个所谓的开发版（2000也有开发版，但在2002这个版本更加完善），有怀旧情结的同学，请移步这里进行围观。值得一提的是，虽然同样带有XP的光环，但Office XP远没有Windows XP那么风光（服役超过13年，甚至直到现在都还有用户对其念念不舍），因为它很快就被Office 2003取代了。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAp8AAAAJGIzMjM3NGQyLTdiOTEtNGMxZi05MmQyLWZmYWIyZTI2YjIxMg.jpg)


### 2. Office 2003

这是一个非常重要的版本，它代表中Office产品技术的一个巅峰时代——这个版本的Office功能非常强大，可以说是无所不包。我敢大胆地推测，正在看这篇文章的读者中绝大部分的朋友都用过这个版本吧。如果说Office XP是我用得比较全的一个版本（除了Outlook没有怎么用，其他组件基本都对照帮助文档摸了一遍，还用FrontPage做出了人生第一个奇丑无比的网站，但其实对那些所谓的开发完全是一知半解，半生不熟），那么Office 2003是我真正意义上开始较为深入使用的版本，尤其以Excel和Access这两个组件，结合当时的实际工作需要，我使用VBA开发了从简单到复杂的各种小应用。

学习Excel的VBA，我是完全认真的，一个佐证就是我在那个年月愿意花五十美金托人从国外辗转买来下面这样一本足有1000多页的书过来啃，而师从Mr.Spreadsheet——John Walkenbach，也算系出名门了。这本书以及John本人对我影响之大，很难用一两句讲清楚——在那个相对单纯的年代，我一头扎进Excel VBA的世界里，收获的可不仅仅是写代码带来的乐趣，还有在微软技术社区（那会儿叫新闻组）中认识的一大批朋友。事到如今，如果说我有什么遗憾的话，一是还没有见过John的真人，另外一个就是我虽然有心想把这本书传承给一位有缘人，但一直没有找到——它太厚了。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAzFAAAAJDBhYTkxNmQzLTczNDMtNGJhYS04YmMyLWIyY2EzOGFiNGYyNQ.jpg)


### 3.Office 2007

前面提到Office 2003是一个巅峰之作，那么Office 2007毫无疑问就是一个转型精品。表面上看，2007带来了全新的UI风格——Ribbon，这是一次大胆地尝试，因为谁都知道2003的菜单已经非常多了，以至于对于不少新手来说，经常发生找不到功能所在的位置。这种界面的创新带有一定的冒险（颠覆自己成熟的产品确实需要勇气），但事实证明是非常成功的。

除了界面上看到的变化，其实Office 2007的另外一个重要创新，是重新定义Office文档的格式——除了继续支持Office 2003及早期版本的二进制文件格式之外，还有一种全新的基于XML的文件格式（通常在默认的文件扩展名后面添加一个x以示区分，如Word 2003的格式是doc，而Word 2007虽然依然支持doc，但更推荐用户使用docx文件格式）。这个后来被正式命名为OpenXML的技术，微软在经过实践后将其贡献给ECMA，并被ISO和IEC等组织认定为开发文档格式的国际标准。如果对OpenXML的标准感兴趣，请参考https://en.wikipedia.org/wiki/Office_Open_XML 。

在开发的层面，Office 2007也有新的变化。首先，它当然继续支持VBA，但却规定所有包含代码的文件，与不包含代码的文件，从文件格式上就明确有所区分。例如，Excel 2007的标准文件格式为xlsx，而包含VBA代码的文件则必须重命名为xlsm（这里的m是指macro的意思，我后续会介绍这个概念）。其次，它开始支持使用Visual Studio 2005以及.NET Framework对其进行开发定制，这就引出了一个全新的开发工具VSTO——Visual Studio Tools for Office，这个传统也一直沿用至今。

> 针对.NET开发人员，微软还专门提供了OpenXML SDK，支持从自定义程序中通过OpenXML的标准操作Office文档（不要求本地安装有Office）。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAnPAAAAJDUxNjNiOGM3LWNkZDUtNDAzMi1hM2M0LTY2M2U1YzJiODg1Nw.jpg)

### 4.Office 2013

Office 2010相较2007来说，我感觉主要是一些界面细节的优化。但Office 2013是一个向云而生的版本，它有很多重要的创新，例如增强了与云端服务整合的能力、跨平台和设备的能力、协同编辑的能力等，还有一条对开发人员来说至关重要——它带来了一个所谓的App开发模式，而且这个模式是涵盖到了客户端和服务器端以及云端完整的产品线的。首先，这从根本上解决了开发人员部署应用程序的困扰，其次，它将通过Office Store建立一个全新的生态环境。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAr2AAAAJGM2ZGEwMmVkLTQ5NDQtNDMwYi05ZThiLWVhYTYyMmUyMzBlOA.png)


毫无疑问，我接下来要谈的将是Office 365。这样说，其实并不是说Office 2016不重要，虽然未来还将有Office 20xx这样按照年份编号的版本（我们称为本地版本），但Office 365将代表着微软对于广大Office用户的最终承诺，它已经有并且还将不断有各种创新，用技术的变革来推动生产力的进步。但在展开Office 365之前，请让我对此前的两种开发技术/模式——VBA和VSTO——进行一个归纳，向经典致敬。

### 1.VBA

VBA的全称是Microsoft Visual Basic for Applications。在多个Office客户端应用程序中都一直保留对这个编程方式的支持。Visual Basic，这个由微软公司于1991年推出的开发语言，直到现在都仍然保持着强大的活力（在编程语言排行榜单中名列前茅），除了它本身的易用性之外，我觉得它在Office产品家族中的嵌入式编程支持是非常关键的一个原因。由于VBA的巨大成功，甚至一些非微软产品（例如AutoCAD）中也支持VBA。

虽然理论上说VBA可以做很多事情，但它主要擅长的是对应用程序内部操作的自动化。例如，我需要根据Excel一个表格的数据，每一行生成一个表单，然后发送到打印机去打印出来。

你现在能找到的任何一个Office版本，你打开某个应用（例如Excel）后，按下ALT+F11键即可进入VBA的编辑器界面。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAA2HAAAAJGJmMWRjMWQyLTNmOTctNDYyNC04OTY1LWRhYWU4YjMxYjQxYg.png)


绝大部分应用程序的VBA编辑器都支持三类模块：首先是该应用本身的对象模块（通常跟该应用程序的行为——主要体现为事件——密切相关），然后是Forms（这是Visual Basic这个名称中Visual的意思，即可视化的编程），然后就是类模块。由于之前提到VBA主要是对Office的自动化，所以相当一部分VBA程序代码都集中在应用本身的对象模块中，而某些标准化较高的通用组件（例如我的偶像John的不朽杰作——Power Pack），则有大量代码在类模块或者Forms中。

我是工作之后才真正学习计算机编程的，所以实际上可以说，是VB/VBA带我进入了面向对象编程的大门。多少个抽着劣质香烟熬着的夜晚，我都是在跟下面这样的错误提示消息作战，直到多年以后的技术有了一定的提高，我也终于真正意义上找到了对象。
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAvNAAAAJDM0NDM3ODE5LTY1ZjItNDA2NS1hNTFkLWY1MmY2ZTEwNWYyYw.jpg)


学习VBA的首要工作就是要比较清楚地了解应用程序的对象模型，严格来说，这个并不难，微软提供了相当丰富详细的帮助文档（例如Excel的不完全对象模型如下），但是熟才能生巧，只有大量的实践才可能真正地得心应手。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAoCAAAAJDBiYjczN2ZkLWI3ZDMtNGQ5MS04OGI5LTZjZWRiYTc3Zjk1Yg.gif)

但是，一个好消息是，在Office应用程序中，都提供了录制宏的功能，也就是说，你可以先按照想法进行操作，然后录制工具会把相应的代码记录下来，通常这些代码直接就可以运行，但是理想情况下应该是略加修改才真正有实用价值。毫不避讳地说，这是我早年学习VBA的一个重要法宝。编程工具能做到这个层面，不光是业界良心，而且从技术上面说也是相当先进的。

> 宏——macro——是VBA中的一个重要概念，通常可以简单理解为一组代码。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAyyAAAAJDliMGQ3Y2IwLWE0M2QtNGVkOS1iYTk0LTgyMDg2MGQwYmRjNA.png)

VBA代码的部署一般分为两种，它可以作为Office文档的一部分存在（例如只是某个文件的特定功能的话），也可以单独存在（假定是一个通用的功能，尤其是希望在应用程序启动的时候就自动加载的话）。前者不消多说，现在一般就是通过带有m后缀的文件名保存即可（例如xlsm, docm等），后者有一个更加专用的格式（例如xlam）和叫法（加载宏）。

### 2.VSTO

VSTO的全称是Visual Studio Tools for Office，最早的版本出现在Visual Studio .NET 2003里面，但真正引起开发人员兴趣是在Visual Studio 2005，对应的Office版本是2007。

为什么会推出VSTO这套工具呢？我个人觉得一方面是因为Visual Studio 及.NET自身发展的需要，另一方面是Office及开发人员的需要。VBA很好，但它的局限性也比较明显——它主要适合做应用程序内部的自动化，很难便捷地跟外界系统或网络资源打交道，同时对于新版本Office的一些特殊功能（例如Ribbon或者Task Pane等）也缺乏支持。

最新版本的Visual Studio 2017中，采用了模块化的安装体验，如果选择了Office 开发这个模块，那么就可以在项目模板中看到一大堆VSTO的模板（针对不同的应用程序，还会有不同的模板），如下图所示
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAqtAAAAJDk3ZDFjMjRhLTMxYzAtNDdmNS1hNzIzLWM0OThjOTc3ZWY4Ng.png)

我选择了Excel Add-in这个模板，点击“Ok”后，会自动生成如下的代码
![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAtBAAAAJGIyMDY1YzRlLTllMTItNGRlYS1iYzMzLWZkM2M5MjE4YWE4Mw.png)

这里就是我们熟悉的.NET编程的体验，可以用到几乎所有.NET Framework的功能，目前VSTO支持的开发语言除了VB.NET，还有C#。

需要注意的是，VSTO相比VBA来说，在部署方面会更加复杂。首先，它要求目标运行的环境，不光是Office版本要一致（通常高版本可以向下兼容），而且必须有对应的.NET运行环境。

这种版本和运行环境的依赖性在某种程度上对VSTO的应用起到了一定的制约，尤其在云优先以及移动为先的时代，它与VBA在这方面的局限性进一步放大，考虑到需要进一步简化部署，更重要的是希望在不同的平台以及移动设备上面都能得到一致性的体验，从Office 2013开始，及至现在的Office 365家族，以Web技术为基础、以App为模型，微软为广大的开发人员提供了全新的开发支持，打开了一个新的视野。此为后话，且按住不表。

必须提出的是，微软对于VBA和VSTO的支持将继续保留，它们有自己的优势，尤其是对于Office 应用程序自有功能的自动化、快速开发、在本地使用的场景。如果大家有兴趣对VBA或者VSTO进行学习和交流，我推荐大家关注[ExcelHome](http://www.excelhome.net)，相信我，这是一个神奇的网站——“Excel教程下载和软件下载中心，Microsoft技术社区联盟成员，全球领先的Excel门户，Office技术培训的最佳社区”。

![](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAykAAAAJDYzOWJiMDk0LTczNjgtNDU0YS1iNTQyLTgwYWY4NDU3MDk4Mg.png)


> 本文将同时在 微软中国Office 365官方微信号连载，欢迎关注“ mschinaoffice365"，每周都会收到各种新功能介绍和实用技巧。


本文未完待续，请感兴趣的朋友们继续关注如下两个话题

+ 谈谈现在的Office 365开发能力
+ 展望Office 365的生态环境和未来发展]]></description></item><item><title>如何完全卸载OneDrive （Windows 10 64bit）</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/10/29/6011613.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 29 Oct 2016 11:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/10/29/6011613.html</guid><description><![CDATA[<p>原文参考 <a title="http://lifehacker.com/how-to-completely-uninstall-onedrive-in-windows-10-1725363532" href="http://lifehacker.com/how-to-completely-uninstall-onedrive-in-windows-10-1725363532">http://lifehacker.com/how-to-completely-uninstall-onedrive-in-windows-10-1725363532</a>&nbsp;</p> <p>&nbsp;</p> <p>To completely uninstall OneDrive: <ol> <li>Open Command Prompt in Administrator mode: Right-click on the Windows icon in the taskbar and select Command Prompt (Admin). <li>Type in <code>taskkill /f /im OneDrive.exe</code> to terminate any OneDrive processes and hit Enter.  <li>Then type in either <code>%SystemRoot%\System32\OneDriveSetup.exe /uninstall</code>if you’re using 32-bit Windows 10 or <code>%SystemRoot%\SysWOW64\OneDriveSetup.exe /uninstall</code> if you’re using 64-bit Windows 10 and hit Enter.</li></ol> <p>重新下载最新的OneDrive客户端并且安装</p> <p><a title="https://oneclient.sfx.ms/Win/Direct/17.3.6517.0809/OneDriveSetup.exe" href="https://oneclient.sfx.ms/Win/Direct/17.3.6517.0809/OneDriveSetup.exe">https://oneclient.sfx.ms/Win/Direct/17.3.6517.0809/OneDriveSetup.exe</a></p>]]></description></item><item><title>国内版Office 365和Azure AAD绑定的问题及解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/10/29/6010139.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 29 Oct 2016 02:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/10/29/6010139.html</guid><description><![CDATA[<p><b></b>&nbsp; <p><b>背景</b>： <p>1． 开发人员要做的事情，是希望在应用程序里面能调用Office 365 的API（Microsoft Graph）来动态添加Office 365账号 <p>2． 如果需要调用这些API，必须在该Office 365的AAD中注册一个Application（获得Client ID和Key） <p>3． 国内版的Office 365，没有办法直接管理AAD <p>4． 国内版的Azure，虽然可以管理AAD，但是它跟Office 365是不通的。 <p>&nbsp; <p><b>方案</b>：不能实现两个现有的Tenant绑定，但有如下两个方案 <p><b>先有Azure Tenant</b><b>，如何购买对应的Office</b><b>订阅，并且实现绑定</b> <p>1． 在portal.partner.microsoftonline.cn 上面，用azure的管理员账号登录，此时会得到一个空的Office 365 Tenant <p>2． 在这个空白的Office 365 Tenant中添加具体的订阅，例如Office 365 E3，接下来就是正常的创建用户，分配订阅 <p>&nbsp; <p><b>先有Office 365 Tenant</b><b>，如何购买对应的Azure</b><b>订阅，并且实现绑定</b> <p>1. 在azure.cn上传实名信息接收激活码，请注意上传实名信息后会直接跳转填写信息的界面，请直接关闭填写信息的界面，查看邮箱是否收到激活码。 <p>2. 拿到Azure激活码后打开页面:https://account.windowsazure.cn/subscriptions，使用您的Office365账号进行登录。 <p>3. 在同一个浏览器打开新的页面:https://www.azure.cn/zh-cn/pricing/enter-promo-code-form，输入您的激活码，并点击"提交"，就会跳转到支付界面，填写信息后使用银联或者支付宝进行支付，支付完成后您的Office365账号就拥有了Azure订阅。</p>]]></description></item><item><title>Office 365常见问题解答（第一期）</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/09/22/5894941.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 22 Sep 2016 01:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/09/22/5894941.html</guid><description><![CDATA[<p>前不久进行的一次网络调查中，有不少朋友反馈了一些对于Office 365的实际问题，这里集中地做一个解答，请大家参考</p>
<p>1. Office 365的UI样式是否有开源计划</p>
<p><strong>据我所知已经开源了：</strong>https://github.com/OfficeDev/office-ui-fabric-core</p>
<p>2. power app啥时候能在国内有</p>
<p><strong>暂时还没有准确的时间表，现在国际版也只是</strong><strong>Preview</strong><strong>的阶段</strong></p>
<p>3. 如何利用Office365节约公司资源成本，提高生产力。</p>
<p><strong>多用，我是认真的</strong></p>
<p>4. 能不能在 docx, pptx, xlsx中用C#替换内嵌的VBA？</p>
<p><strong>不能</strong></p>
<p>5. 如何在应用中集成Office 365？</p>
<p><strong>考虑学习</strong><strong>Microsoft Graph</strong><strong>，你需要的，都在这里</strong>https://graph.microsoft.io/en-us/</p>
<p>6. 国内版office365功能能不能尽可能快的与国际版同步？（<strong>世纪互联一直在努力</strong>）国内版exchange online发海外邮件经常被收件方认为是垃圾邮箱，这应如何处理？（<strong>这个问题后续我们会关注一下其他客户是否有类似反馈</strong>）</p>
<p>7. 能不能让 OneDrive 速度再快点，稳定性再好点</p>
<p><strong>简单地说，能</strong></p>
<p>8. 同一客户的21 V版与国际版上的GAL全局可用的实现方法</p>
<p><strong>中国区</strong><strong>Office 365技术团队有解决方案，目前在重点客户试用</strong></p>
<p>9. sfb什么时间支持电话</p>
<p><strong>国内版目前还在协调，暂时没有时间表</strong></p>
<p>10.怎么让中国用户接受o365，这群用户不懂计算机，甚至简单的操作都有困难。但他们却是公司的最终用户，是决策者，布道者，推动者和鼓励师。</p>
<p><strong>这个问题，我想先静一静再回答</strong></p>
<p>11.请问混合部署能否从技术层面再简化一点？（5位网络提到此问题）</p>
<p><strong>技术层面本身并不复杂，复杂的是企业现有的环境，如何跟云整合起来，并确保平滑过渡。针对混合部署的情况，建议由微软的合作伙伴协助。</strong></p>
<p>12.文件夹外部匿名共享</p>
<p><strong>首先，这个应该取决于公司的整体策略，在管理中心需要进行必要的设置，具体在使用的时候，可以参考</strong>https://support.office.com/en-us/article/Share-sites-or-documents-with-people-outside-your-organization-80e49744-e30f-44db-8d51-16661b1d4232?ui=en-US&amp;rs=en-US&amp;ad=US</p>
<p>13.更多的经验分享给我们，比如我们在企业内部推广</p>
<p><strong>请关注微软中国</strong><strong>Office产品网站（</strong><strong>https://products.office.com/</strong><strong> ），</strong><strong>O</strong><strong>ffice</strong><strong>365官方微信公众号（mschinaoffice365）,当前这个公众号（dev2db）, 关注Office365技术群，参与活动</strong></p>
<p>14.中国版Office 365的功能尽快与国际版同步。</p>
<p><strong>世纪互联一直在努力</strong></p>
<p>15.怎么才能让365快的飞起来？</p>
<p><strong>站在风口上</strong></p>
<p>16.要用一万年</p>
<p><strong>绝对是真爱啊</strong></p>
<p>17.Office365产品的优势</p>
<p><strong>请参考这里的介绍</strong><strong> https://www.microsoft.com/china/office365/&nbsp; </strong></p>
<p><strong>18.</strong>从国际版到国内版，有多远？</p>
<p><strong>不远，大陆到香港那么远</strong></p>
<p>19.word excel ppt的安卓版本能不能做的好点！</p>
<p><strong>能，必须能</strong></p>
<p><strong>客观地说，因为安卓系统的碎片化，而且各家定制过之后，在某些时候确实很难保证一致体验</strong></p>
<p>20.怎么卖o365</p>
<p><strong>可以参考</strong><strong>https://products.office.com/en-us/business/compare-more-office-365-for-business-plans</strong></p>
<p>21.移动终端能增强些吗？</p>
<p><strong>我们会不断改进移动端</strong><strong>App。如果你遇到具体问题，请补充。</strong></p>
<p>22.在中国通过公网访问全球的（不是中国的）O365平台，怎样才能快一点？当前访问速度那一个叫慢&hellip;无法忍受（3位网友提到类似问题）</p>
<p><strong>针对网络方面，虽然不是完全受我们控制，但微软方面一直努力通过各种手段来改善这个问题，包括不断加大数据中心建设（尽可能让你访问到离你最近的数据中心），提供专线服务，网络优化服务等。网络问题很难一两句话说清楚，如果贵公司遇到的问题比较严重，请不要客气，联系对应的客户经理。</strong></p>
<p>23.Skype for business在windows平台上集成，最佳解决方案是什么？用什么SDK最好？如果是网页上发起语音视频通话，怎样实现最好？</p>
<p><strong>请参考</strong><strong>SkypeDeveloper Platform </strong><strong>https://msdn.microsoft.com/en-us/skype/skypedeveloperplatform</strong></p>
<p>24.对于office全方位的培训</p>
<p><strong>有几个可能的选择</strong></p>
<p><strong>第一是产品入门培训</strong></p>
<p><strong>https://support.office.com/zh-cn/article/Office-%E5%9F%B9%E8%AE%AD%E4%B8%AD%E5%BF%83-b8f02f81-ec85-4493-a39b-4c48e6bc4bfb?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN</strong></p>
<p><strong>第二个是微软虚拟学院，里面有很多视频教程</strong></p>
<p><strong>https://mva.microsoft.com/search/SearchResults.aspx#!q=office%20365&amp;lang=1033</strong></p>
<p><strong>第三个选择是通过微软认证培训中心进行学习</strong></p>
<p>https://www.microsoft.com/china/learning/default.aspx</p>
<p>25.怎么能够直接联系国外技术组问问题？</p>
<p><strong>下面有两个微软的技术论坛</strong></p>
<p>http://answers.microsoft.com/en-us/msoffice/forum?sort=lastreplydate&amp;dir=desc&amp;tab=threads&amp;status=all&amp;mod=&amp;modAge=&amp;advFil=&amp;postedAfter=&amp;postedBefore=&amp;threadType=all&amp;tm=1474387154685</p>
<p>https://social.msdn.microsoft.com/Forums/office/en-US/home?forum=Office365forDevelopers</p>
<p>26.怎样快速提高办公效率</p>
<p><strong>使用</strong><strong>Office 365</strong></p>
<p>27.请介绍Office365与微信绑定</p>
<p><strong>首先你需要了解微信的开发（通常指的是公众号开发），可以参考</strong><strong>https://mp.weixin.qq.com/wiki</strong><strong> ，其次你需要了解Office 365的开发，可以参考 </strong><strong>http://dev.office.com/</strong><strong> ，接下来就是一个细致活了</strong></p>
<p><strong>其次可以关注一下龙门计划（</strong><strong>DragonGate）</strong><strong>http://mp.weixin.qq.com/s?__biz=MzAwNzA3NjAzNw==&amp;mid=303874258&amp;idx=1&amp;sn=0501478055be58b6c2107079deb135fc&amp;scene=1&amp;srcid=09210NRvFN7Pclj08RpiZll7#wechat_redirect</strong></p>
<p>28.什么时候可以降低授权费（啥时候免费）</p>
<p><strong>这个我说了真不算</strong></p>
<p>29.office365 现在在国内市场使用情况如何？有哪些企业？</p>
<p><strong>请参考</strong><strong>https://www.microsoft.com/china/office365/case.html</strong></p>
<p><strong>请注意，以上只是公开的一部分客户案例</strong></p>
<p>30.下面部分问题，因为不明确或者不够具体，所以暂时不便作答</p>
<p>1) 是否考虑包含Windows服务</p>
<p>2) 能不能定制页面</p>
<p>3) 下一步计划是什么</p>
<p>4) 应用场景</p>
<p>5) 稳定性问题</p>
<p>6) one drive保密性</p>
<p>7) oneDrive不好用</p>
<p>8) o365 dns功能</p>
<p>9) 兼容性提高，容易死机</p>
<p>10)Office365备份方案</p>
<p>11)工具统一性</p>
<p>12)手机端的Outlook何时可以和Skype绑定使用？</p>
<p>13) 如何更方便的操作在线office</p>
<p>14) What's after Delve andGraph?</p>
<p>15)什么时候能支持自有域名？</p>
<p>16)技术团队如何直接落地到合作伙伴做增值产品开发？</p>]]></description></item><item><title>Office 365使用情况调查不完全分析报告</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/09/22/5894936.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 22 Sep 2016 01:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/09/22/5894936.html</guid><description><![CDATA[<p>感谢大家参与了9月13日在Office 365技术群（O萌）中发起的一个关于Office 365使用情况的调查，在一天左右的时间内，我们一共收到了67份反馈，其中绝大部分是在3分钟内提交的。  <p>本次调查是通过Office 365的Forms服务定制和发起的，下面是Forms内置提供的分析图表，请大家参考。  <p><img src="https://mmbiz.qlogo.cn/mmbiz_png/icMCKgUnSibE6lxCIzJzSEvoFOu2ibIcBZKvmbqB4IWQTibsFpyvGQETURwLDrcBIs3kA2rXRMcqWqDuficgiajUP2fA/0?wx_fmt=png">  <p><img src="https://mmbiz.qlogo.cn/mmbiz_png/icMCKgUnSibE6lxCIzJzSEvoFOu2ibIcBZK9NuY8ib70JDqPU9YjdqVKdwRqPqq5AiaO8X6L6ZxUWN5RBcwFxs5wcicA/0?wx_fmt=png"><br><img src="https://mmbiz.qlogo.cn/mmbiz_png/icMCKgUnSibE6lxCIzJzSEvoFOu2ibIcBZKjI2icOI4wvUF9NEg62AN5ia4HOYqiagQsm6WEBhm5LLMIxXGJbTvcXHXQ/0?wx_fmt=png">  <p>另外，本次调查收到大家反馈的实际有效问题（或建议）有52个，占所有参与人数的78%。问题主要分为如下几类  <ol> <li> <p>部署问题，尤其是集中在如何混合部署，兼容性等等</p> <li> <p>使用问题，尤其是希望有更多的使用经验分享，普及型培训，移动端支持等</p> <li> <p>性能问题，尤其是网络性能，OneDrive问题比较突出</p> <li> <p>功能问题，大家非常希望国内版和国际版的功能能尽量保持一致，工具也尽量统一</p></li></ol> <p>完整的问题列表和对应的回答，我会在下一篇文章中提供。  <p><img src="https://mmbiz.qlogo.cn/mmbiz_png/icMCKgUnSibE6lxCIzJzSEvoFOu2ibIcBZK9GlFXUOj5zIlHPBwhDEkRZf12K8OMuDH0fUVt511F1HUdRMTw3MzKA/0?wx_fmt=png">  <p>再次感谢大家的积极反馈，本次调研活动结束，我们将抽出五名朋友，送出Office 365纪念礼品。（名单会在群里面和公众号里面公布，请尽快与我们取得联系）]]></description></item><item><title>如何设置文本文件的默认保存编码为UTF-8</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/29/5447538.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 29 Apr 2016 12:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/29/5447538.html</guid><description><![CDATA[<p>原文：<a title="http://answers.microsoft.com/en-us/windows/forum/windows_7-windows_programs/default-utf-8-encoding-for-new-notepad-documents/525f0ae7-121e-4eac-a6c2-cfe6b498712c?auth=1" href="http://answers.microsoft.com/en-us/windows/forum/windows_7-windows_programs/default-utf-8-encoding-for-new-notepad-documents/525f0ae7-121e-4eac-a6c2-cfe6b498712c?auth=1">http://answers.microsoft.com/en-us/windows/forum/windows_7-windows_programs/default-utf-8-encoding-for-new-notepad-documents/525f0ae7-121e-4eac-a6c2-cfe6b498712c?auth=1</a></p> <p>&nbsp;</p> <p>1. Right click -&gt; New -&gt; Text Document<br>2. Open "New Text Document.txt". Do NOT type anything!<br>3. Go to "File -&gt; Save As... " and choose UTF-8 under "Encoding:", press "Save" and overwrite existing file. Close the file.<br>4. Rename "New Text Document.txt" to "TXTUTF-8.txt"<br>5. Copy "TXTUTF-8.txt" to "C:\WINDOWS\SHELLNEW"<br>6. Go to "Start -&gt; Run..." and type<br>---------<br>regedit<br>---------<br>Press OK.<br>7. Navigate to<br>-------------------------------------------<br>HKEY_CLASSES_ROOT\.txt\ShellNew<br>-------------------------------------------<br>8. Right click in the right window -&gt; New -&gt; "String Value" and rename it to<br>-----------<br>FileName<br>-----------<br>9. Double click on "FileName" and put<br>----------------<br>TXTUTF-8.txt<br>----------------<br>into "Value data:" field and press OK.<br>10. It's finished.<br>11. Test it: Create new .txt document (Right click -&gt; New -&gt; Text Document). Open it and go to "File -&gt; Save As... " and see that encoding is set by default to UTF-8 . :-)</p>]]></description></item><item><title>在.NET开发面向Oracle数据库的应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/21/5415442.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 20 Apr 2016 23:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/21/5415442.html</guid><description><![CDATA[<p>其实这个不是一个什么新的话题。但是之前在多次项目中，总是遇到大家针对Oracle数据库的访问时，会有各种各样的问题，最基本的就是要在客户端安装各种client，版本不一样的话还有各种问题。</p> <p>静下心来看看，其实也没有那么难。我这里总结一下，如何在.NET应用程序中，简单优雅地使用Oracle数据库。</p> <h1>第一个原则：不要依赖</h1> <p>最好的情况就是，程序自己就可以完成数据访问，不需要额外地安装所谓的Oracle Client，那是一个很麻烦而且痛苦的事情。</p> <p>我们首先看看，如果不装任何东西，是否可以实现Oracle数据库访问？</p> <p>其实，.NET本身是自带了针对Oracle数据库访问的组件的，就是下面这个System.Data.OracleClient</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070157116-137859549.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070157554-168053377.png" width="244" height="170"></a></p> <p>我们的代码如下(这是最原始的ADO.NET代码，只是做演示）</p> <p>using System;<br>using System.Data.OracleClient;</p> <p>namespace ConsoleApplication<br>{<br>&nbsp;&nbsp;&nbsp; class Program<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var connectionString = "user id=system;password=password;data source=192.168.56.101:1521/orcl";</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var connection = new OracleConnection(connectionString))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var cmd = connection.CreateCommand();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd.CommandText = "select * from sys.dba_all_tables";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.Open();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var reader = cmd.ExecuteReader();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (reader.Read())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(reader.GetString(0));</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.Close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.Close();</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}<br></p> <p>&nbsp;</p> <p>看起来应该是没有问题的，运行起来却会报错</p> <p>Additional information: System.Data.OracleClient requires Oracle client software version 8.1.7 or greater.</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070157820-1380349516.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070158101-83948817.png" width="244" height="215"></a></p> <p>这里的提示就是说，需要有Oracle Client。</p> <p>这不是我们希望看到的结果。实际上原理上说，我们这么理解吧，可能是这个组件只是一个wrapper，它实际去操作数据库，还需要通过Oracle Client才能实现。</p> <p>&nbsp;</p> <h1>使用Oracle提供的组件</h1> <p>更好的建议就是，使用Oracle 官方提供的托管代码组件。Oracle.ManagedDataAccess.dll</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070158601-1716444418.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070159320-1481710430.png" width="244" height="116"></a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070159632-951092195.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070159960-127254913.png" width="241" height="244"></a></p> <p>只要添加了这个Nuget Package，代码几乎不需要任何改动，直接就可以复用。</p> <p>using System;<br>using Oracle.ManagedDataAccess.Client;</p> <p>namespace ConsoleApplication<br>{<br>&nbsp;&nbsp;&nbsp; class Program<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var connectionString = "user id=system;password=password;data source=192.168.56.101:1521/orcl";</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var connection = new OracleConnection(connectionString))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var cmd = connection.CreateCommand();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd.CommandText = "select * from sys.dba_all_tables";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.Open();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var reader = cmd.ExecuteReader();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (reader.Read())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(reader.GetString(0));</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.Close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.Close();</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}<br></p> <p>&nbsp;</p> <p>当然比较理想的情况是将连接字符串之类的，可以放在配置文件中去。这个很简单，这里就不说明了。</p> <p>&nbsp;</p> <h1>结合Entity Framework使用</h1> <p>Entity Framework 出来已经好多年了，几乎成了所有.NET应用程序中的标配（不管有没有用到）。现在的最新版本应该是 6.1.3 .同时，需要注意的是，以后会有一个所谓的Entity Framework Core ，而且开源了 <a title="https://github.com/aspnet/EntityFramework" href="https://github.com/aspnet/EntityFramework">https://github.com/aspnet/EntityFramework</a></p> <p>回到正题，之前的代码写法其实还是比较原始的，那么如何结合Entity Framework进行Oracle数据库方面的编程呢？</p> <p>首先，安装下面的这个组件：Oracle.ManagedDataAccess.EntityFramework</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070200429-1932203417.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070201070-907365402.png" width="244" height="109"></a></p> <p>然后，可以使用Code first的方式编写如下代码</p> <p>using System.ComponentModel.DataAnnotations;<br>using System.ComponentModel.DataAnnotations.Schema;<br>using System.Data.Entity;</p> <p>namespace ConsoleApplication<br>{<br>&nbsp;&nbsp;&nbsp; public class OracleContext : DbContext<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public OracleContext() : base("OracleDbContext")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DbSet&lt;Employee&gt; Employees { get; set; }</p> <p>&nbsp;&nbsp;&nbsp; }</p> <p>&nbsp;&nbsp;&nbsp; [Table("EMPLOYEES", Schema = "SYSTEM")]<br>&nbsp;&nbsp;&nbsp; public class Employee<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Key()]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Column("EMPLOYEEID")]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int EmployeeID { get; set; }</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Column("FIRSTNAME")]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string FirstName { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Column("LASTNAME")]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string LastName { get; set; }<br>&nbsp;&nbsp;&nbsp; }<br>}<br></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>这里的代码没有什么出奇的。配置文件需要有如下的设置（一般在添加Oracle.ManagedDataAccess.EntityFramework 这个组件的时候，会自动修改配置文件）</p> <p>&lt;?xml version="1.0" encoding="utf-8"?&gt;<br>&lt;configuration&gt;<br>&nbsp; &lt;configSections&gt;<br>&nbsp;&nbsp;&nbsp; &lt;section name="oracle.manageddataaccess.client" type="OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;!-- For more information on Entity Framework configuration, visit <a href="http://go.microsoft.com/fwlink/?LinkID=237468">http://go.microsoft.com/fwlink/?LinkID=237468</a> --&gt;<br>&nbsp; &lt;/configSections&gt;<br>&nbsp; &lt;startup&gt;<br>&nbsp;&nbsp;&nbsp; &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" /&gt;<br>&nbsp; &lt;/startup&gt;<br>&nbsp; &lt;oracle.manageddataaccess.client&gt;<br>&nbsp;&nbsp;&nbsp; &lt;version number="*"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dataSources&gt;<br><font color="#ff0000"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dataSource alias="oracle" descriptor="(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=192.168.56.101)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL))) " /&gt;</strong></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dataSources&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/version&gt;<br>&nbsp; &lt;/oracle.manageddataaccess.client&gt;<br>&nbsp;<strong><font color="#ff0000"> &lt;connectionStrings&gt;<br>&nbsp;&nbsp;&nbsp; &lt;add name="OracleDbContext" connectionString="user id=system;password=password;data source=oracle" providerName="Oracle.ManagedDataAccess.Client" /&gt;<br>&nbsp; &lt;/connectionStrings&gt;<br></font></strong>&nbsp; &lt;system.data&gt;<br>&nbsp;&nbsp;&nbsp; &lt;DbProviderFactories&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;remove invariant="Oracle.ManagedDataAccess.Client" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name="ODP.NET, Managed Driver" invariant="Oracle.ManagedDataAccess.Client" description="Oracle Data Provider for .NET, Managed Driver" type="Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/DbProviderFactories&gt;<br>&nbsp; &lt;/system.data&gt;<br>&nbsp; &lt;runtime&gt;<br>&nbsp;&nbsp;&nbsp; &lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependentAssembly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;publisherPolicy apply="no" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;assemblyIdentity name="Oracle.ManagedDataAccess" publicKeyToken="89b483f429c47342" culture="neutral" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;bindingRedirect oldVersion="4.121.0.0 - 4.65535.65535.65535" newVersion="4.121.2.0" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dependentAssembly&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/assemblyBinding&gt;<br>&nbsp; &lt;/runtime&gt;<br>&nbsp; &lt;entityFramework&gt;<br>&nbsp;&nbsp;&nbsp; &lt;defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;parameters&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;parameter value="v13.0" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/parameters&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/defaultConnectionFactory&gt;<br>&nbsp;&nbsp;&nbsp; &lt;providers&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;provider invariantName="Oracle.ManagedDataAccess.Client" type="Oracle.ManagedDataAccess.EntityFramework.EFOracleProviderServices, Oracle.ManagedDataAccess.EntityFramework, Version=6.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/providers&gt;<br>&nbsp; &lt;/entityFramework&gt;<br>&lt;/configuration&gt;</p> <p>后台数据库的表格设计也是很简单。</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070201382-620450752.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160421070202398-1259088466.png" width="244" height="185"></a></p> <p>需要注意的是，经过实验，我发现目前这个Entity Framework要求所操作的表必须要有主键，而且主键必须是一个identity column（即自己绑定一个序列，实现自动增长），否则会报错</p> <p>实际上后台会通过一个触发器来实现这个功能</p> <p>create or replace TRIGGER EMPLOYEES_TRG <br>BEFORE INSERT ON EMPLOYEES <br>FOR EACH ROW <br>BEGIN<br>&nbsp; &lt;&lt;COLUMN_SEQUENCES&gt;&gt;<br>&nbsp; BEGIN<br>&nbsp;&nbsp;&nbsp; IF INSERTING AND :NEW.EMPLOYEEID IS NULL THEN<br>&nbsp;&nbsp;&nbsp; <strong>&nbsp; SELECT EMPLOYEES_SEQ.NEXTVAL INTO :NEW.EMPLOYEEID FROM SYS.DUAL;<br></strong>&nbsp;&nbsp;&nbsp; END IF;<br>&nbsp; END COLUMN_SEQUENCES;<br>END;</p> <p>&nbsp;</p> <p>接下来在前端程序中就简单多了，下面是一个代码片段</p> <p>var ctx = new OracleContext();</p> <p>ctx.Employees.Add(new Employee() {FirstName = "ares", LastName = "chen" });<br>ctx.SaveChanges();</p> <p>var query = ctx.Employees.ToArray();<br>foreach (var item in query)<br>{<br>&nbsp;&nbsp;&nbsp; Console.WriteLine(item);<br>}</p> <p>&nbsp;</p> <p>需要注意的是，如果需要使用Entity Frmaework的Database first或Model first的功能，还是需要安装Oracle Client，或者准确地说应该是ODAC组件</p> <p><a title="http://www.oracle.com/technetwork/developer-tools/visual-studio/downloads/index.html" href="http://www.oracle.com/technetwork/developer-tools/visual-studio/downloads/index.html">http://www.oracle.com/technetwork/developer-tools/visual-studio/downloads/index.html</a></p>]]></description></item><item><title>解决Oracle SQL Developer无法连接远程服务器的问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/19/5410102.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 19 Apr 2016 13:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/19/5410102.html</guid><description><![CDATA[<p>在使用Oracle SQL Developer连接远程服务器的时候，出现如下的错误</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210006070-17148603.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210006804-178401229.png" width="244" height="121"></a></p> <p>在服务器本地是可以正常连接的。这个让人想起来，跟SQL Server的一些设计有些类似，服务器估计默认只在本地监听，不允许远程访问的，这是为了提高安全性。</p> <p>解决的方法是，添加一个监听地址</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210007288-188116371.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210007679-25648672.png" width="244" height="177"></a></p> <p>然后，重启服务</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210008101-1227910068.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160419210008570-928105790.png" width="244" height="111"></a></p>]]></description></item><item><title>[备忘] Automatically reset Windows Update components</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/09/5370445.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 08 Apr 2016 16:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/09/5370445.html</guid><description><![CDATA[<p>这两天遇到Windows 10的更新问题，官方有一个小工具，可以用来修复Windows Update的问题，备忘如下</p> <p><a title="https://support.microsoft.com/en-us/kb/971058" href="https://support.microsoft.com/en-us/kb/971058">https://support.microsoft.com/en-us/kb/971058</a></p> <p>To automatically reset Windows Update components, run the appropriate Windows Update diagnostic, and then follow the on-screen instruction. <h5>Windows 10</h5><a href="http://aka.ms/diag_wu">Click this link to download and run the Windows Update Troubleshooter</a>.]]></description></item><item><title>在ASP.NET MVC的Action中直接接受客户端发送过来的HTML内容片段</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/06/5358610.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 06 Apr 2016 03:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/06/5358610.html</guid><description><![CDATA[<p>出于安全的考虑，默认情况下，如果从客户端发送过来的数据中直接包括了HTML内容，ASP.NET会自动启动保护措施，你会收到下面的错误提示</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201604/9072-20160406114501922-264329797.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201604/9072-20160406114502359-1017963165.png" width="244" height="193"></a></p> <p>这当然是一个不错的设计，只不过在某些特殊的事情，如果我们确实需要接受客户端发送过来的HTML，那么就需要做出一些必要的修改了</p> <p>&nbsp;</p> <p>using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Web;<br>using System.Web.Mvc;</p> <p>namespace EMREditor.Controllers<br>{<br>&nbsp;&nbsp;&nbsp; public class HomeController : Controller<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // GET: Home<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //public ActionResult Index()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; return View();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //}</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [HttpPost]<br>&nbsp;<font color="#ff0000">&nbsp;&nbsp;&nbsp; </font><strong><font color="#ff0000">&nbsp;&nbsp; [ValidateInput(false)]</font><br></strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ActionResult Index()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var req = Request.Form;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Content(req["content"]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</p> <p>&nbsp;</p> <p>然后，在web.config中还需要配置</p> <p>&lt;system.web&gt;<br>&nbsp; &lt;compilation debug="true" targetFramework="4.5.2"/&gt;<br>&nbsp; &lt;httpRuntime targetFramework="4.5.2" <strong><font color="#ff0000">requestValidationMode="2.0"/</font></strong>&gt;<br>&lt;/system.web&gt;</p>]]></description></item><item><title>Rehosting the Workflow Designer</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/04/01/5343573.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 31 Mar 2016 23:20:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/04/01/5343573.html</guid><description><![CDATA[<h3>官方文档：<a title="https://msdn.microsoft.com/en-us/library/dd489451(v=vs.110).aspx" href="https://msdn.microsoft.com/en-us/library/dd489451(v=vs.110).aspx">https://msdn.microsoft.com/en-us/library/dd489451(v=vs.110).aspx</a></h3> <p>The Windows Workflow Designer can be rehosted in environments outside of Visual Studio 2012 for the purposes of creating, modifying, and monitoring workflows. <p>The <a href="https://msdn.microsoft.com/en-us/library/system.activities.presentation.workflowdesigner(v=vs.110).aspx">WorkflowDesigner</a> type is a wrapper of the canvas, property grid, and other elements, and exposes a basic programming model to handle the majority of designer rehosting scenarios. Hosting the <a href="https://msdn.microsoft.com/en-us/library/system.activities.presentation.workflowdesigner(v=vs.110).aspx">WorkflowDesigner</a> inside a Windows Presentation Foundation (WPF) application is a common rehosting scenario for Workflow Designer. <h4>In This Section</h4> <p><a href="https://msdn.microsoft.com/en-us/library/dd489414(v=vs.110).aspx">Task 1: Create a New Windows Presentation Foundation Application</a> <p><a href="https://msdn.microsoft.com/en-us/library/dd489407(v=vs.110).aspx">Task 2: Host the Workflow Designer</a> <p><a href="https://msdn.microsoft.com/en-us/library/dd489433(v=vs.110).aspx">Task 3: Create the Toolbox and PropertyGrid Panes</a> <p><a href="https://msdn.microsoft.com/en-us/library/jj205428(v=vs.110).aspx">Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer</a>]]></description></item><item><title>解决Onedrive经常无法访问的问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/03/28/5328555.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 28 Mar 2016 04:20:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/03/28/5328555.html</guid><description><![CDATA[<p>在国内经常因为各种原因访问不了OneDrive的访问，可以通过下面的方式解决</p> <p>添加两个DNS记录到hosts文件（C:\Windows\System32\drivers\etc）</p> <p>134.170.108.26 onedrive.live.com&nbsp; <br>134.170.109.48 skyapi.onedrive.live.com</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201603/9072-20160328121949894-735246551.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201603/9072-20160328121950363-1311392759.png" width="244" height="129"></a></p>]]></description></item><item><title>最好的简明NodeJS学习材料</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/03/21/5303936.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 21 Mar 2016 13:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/03/21/5303936.html</guid><description><![CDATA[<p><a title="http://www.nodebeginner.org/index-zh-cn.html" href="http://www.nodebeginner.org/index-zh-cn.html">http://www.nodebeginner.org/index-zh-cn.html</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201603/9072-20160321214151042-1155246839.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201603/9072-20160321214152011-715631077.png" width="244" height="132"></a></p> <p><a title="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb" href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201603/9072-20160321214155636-328316580.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201603/9072-20160321214157011-1917025090.png" width="244" height="132"></a></p>]]></description></item><item><title>最好的Python简明教程</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/03/20/5299472.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 20 Mar 2016 12:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/03/20/5299472.html</guid><description><![CDATA[<p><a href="http://images2015.cnblogs.com/blog/9072/201603/9072-20160320201657724-1270871814.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201603/9072-20160320202118959-283075757.png" width="244" height="132"></a></p> <p><a title="http://old.sebug.net/paper/python/index.html" href="http://old.sebug.net/paper/python/index.html">http://old.sebug.net/paper/python/index.html</a></p>]]></description></item><item><title>在Linux（ubuntu server）上面安装NodeJS的正确姿势</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/02/27/5222918.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 27 Feb 2016 06:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/02/27/5222918.html</guid><description><![CDATA[<h4>上一篇文章，我介绍了 <a href="http://www.cnblogs.com/chenxizhang/p/5222410.html">在Windows中安装NodeJS的正确姿势</a>，这一篇，我们继续来看一下在Linux上面安装和配置NodeJS。</h4> <p>为了保持一致，这里也列举三个方法</p> <h1>第一个方法：通过官网下载安装</h1> <p><a title="https://nodejs.org/en/download/" href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145447693-1785830721.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145449255-2094432872.png" width="244" height="132"></a></p> <p>这种方式的问题是我们需要自己去找网页，找到链接，然后下载</p> <p>&nbsp;</p> <h1>第二个方法：使用apt工具进行安装</h1> <p>&nbsp;</p> <p>默认情况下，在apt的源中只有比较老的版本（注意，需要先apt-get update)</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145450990-150777013.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145452927-919588545.png" width="244" height="126"></a></p> <p>例如，如果运行apt-get install nodejs，安装完之后，需要用Nodejs -v查看版本，（请注意，不是node -v）</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145453333-2135418229.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145453786-1697066779.png" width="244" height="36"></a></p> <p>这显然不是很让人高兴的一个事情（版本老，而且使用的方式都不一样）</p> <p>令人疑惑的是另外一个包，nodejs-legacy，安装完后，版本号也是0.10.25，但是运行方式则是node，而不是nodejs</p> <p>而nodejs-dev，使用的方式跟Nodejs是一样的，版本也是0.10.25</p> <p>&nbsp;</p> <p>所以关键的问题在于，apt的源里面没有最新的nodejs 这个package，那么怎么办呢？</p> <p><a title="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions" href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions">https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions</a> 这里提供了解决方法，node自己提供了源</p> <p>如果要安装5.x版本，那么可以运行下面两行命令</p><pre><code>curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -
sudo apt-get install -y nodejs</code></pre>
<p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145456161-1652133713.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145458443-900309723.png" width="244" height="155"></a></p>
<p>&nbsp;</p>
<h1>第三个方法：使用nvm进行安装和管理</h1>
<p>在ubuntu中安装nvm的方法有点特别，需要下载源代码，然后运行Install.sh</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145503099-1346619502.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227145504255-810020197.png" width="244" height="132"></a></p>
<p>可以用如下的一句命令完成最新版的安装（注意，github'上面安装说明是0.31这个版本的，但我想最好是能不要依赖这种具体的版本号，所以稍作了修改，可以每次都安装最新版本）</p>
<p>git clone <a href="https://github.com/chenxizhang/nvm.git">https://github.com/chenxizhang/nvm.git</a> &amp;&amp; ./nvm/install.sh &amp;&amp; . ~/.nvm/nvm.sh&nbsp; &amp;&amp; rm –rf ./nvm</p>
<p>&nbsp;</p>

<p>&nbsp;</p>
<h1>总结：</h1>
<p>目前来说，我仍然是推荐第三种方法。当然，我更加希望apt工具能更加简单地安装到最新版本。</p>]]></description></item><item><title>在Windows中安装NodeJS的正确姿势</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/02/27/5222410.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 27 Feb 2016 02:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/02/27/5222410.html</guid><description><![CDATA[<p>NodeJS已经非常流行了，而且可以预见他将继续受到追捧。这确实是一个不错的创举，想想看他现在能做什么吧</p> <p>1.服务器程序（典型的就是用来做网站或者restful服务，主打就是多线程，非阻塞，最后，一个字：快）</p> <p>2.客户端程序（而且可以跨平台，好好想一想吧）</p> <p>3.现在连移动app它也能开发了（nativescrpit，再好好想一想吧）</p> <p>应该还有其他很多应用场景，这里就不一一列出来了。</p> <p>&nbsp;</p> <p>好吧，既然如此，NodeJS确实是你需要学习和掌握的一门开发语言.那么如何安装和使用NodeJS呢？</p> <h2>第一种方法：通过官网进行安装</h2> <p><a title="https://nodejs.org/" href="https://nodejs.org/">https://nodejs.org/</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101814474-218005089.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101815615-911563437.png" width="244" height="132"></a></p> <p>这种方式最直接，也很好理解。一般都可以下载到msi安装程序，然后双击就可以完成安装。真正的Windows安装程序的风格。一般安装完之后，可以通过下面的命令验证</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101816911-1846035471.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101817615-2143675044.png" width="244" height="80"></a></p> <p>&nbsp;</p> <h1>第二种方法：通过chocolatey安装</h1> <p>chocolatey是一个神奇的工具！当然，准确地说它很类似于linux中的apt或yum工具，可以使得我们安装程序更加简便。以本文要讨论的问题为例，通过官网安装当然是可以的，但我们需要记住那些官方网址，而且去选择下载，然后安装，窃以为还是不太方便的。</p> <p>这种方法，首先需要安装chocolatey</p> <p><a title="https://chocolatey.org/" href="https://chocolatey.org/">https://chocolatey.org/</a>&nbsp;</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101823458-1903596001.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101825005-1878938164.png" width="244" height="132"></a></p> <p>一般只要通过下面这个命令就可以完成安装（如果在Windows7操作系统上面，需要用管理员身份打开命令行工具）</p> <p>@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</p> <p>完成之后，可以通过下面的命令验证</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101827068-34950753.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101828271-1398910613.png" width="244" height="176"></a></p> <p>然后就可以通过choco search命令搜索NodeJS了</p> <p>最后，通过choco install命令安装NodeJS</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101830849-415339232.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101832083-1583704152.png" width="244" height="176"></a></p> <p>choco install nodejs –version 5.7.0（如果不写版本，则默认安装最新版本）</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101834255-228109354.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101835349-1147424277.png" width="244" height="176"></a></p>      <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101837693-621009456.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101838818-2050433185.png" width="244" height="176"></a></p> <p>&nbsp;</p> <p>我的机器上其实安装了两个版本的NodeJS。这其实是很常见的一个场景，那么如何更好地管理这些不同的版本呢？</p> <p>&nbsp;</p> <h1>第三种方法：使用nvm安装和管理不同的版本</h1> <p>nvm的全称是NodeJS Version Manager，其实是Linux中的一个工具。不过，在Windows也有一个对应的版本</p> <p><br><a title="https://github.com/coreybutler/nvm-windows" href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101844661-1530480073.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101846396-372419822.png" width="244" height="132"></a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101850224-727705022.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101851052-383826536.png" width="244" height="132"></a></p> <p>使用nvm install latest可以安装最新版本</p>    <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101851630-1505077928.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160227101852193-1183033181.png" width="244" height="107"></a></p> <p>当然，也可以通过nvm install 4.1.0这样安装特定的版本</p> <p>&nbsp;</p> <h1>总结：</h1> <p>上面介绍了三种安装和配置NodeJS的方式，我个人倾向推荐第三种。当然，第二种，我建议大家也可以掌握起来，因为这种安装工具的方式确实是比较方便的。</p>]]></description></item><item><title>在Windows环境中开始Docker的学习和体验</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/02/26/5219150.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 25 Feb 2016 23:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/02/26/5219150.html</guid><description><![CDATA[<p>研究docker有一段时间了，当然我主要的使用环境还是在Linux中，确实很方便。</p> <p>但也有不少朋友希望使用Windows来工作学习，这里介绍一下在Windows中如何快速开始Docker的学习和体验吧</p> <p>注意：由于docker原生只支持linux，所以使用Mac的用户，也需要跟Windows用户一样，采用一些额外的配置过程</p> <p>注意：因为docker只支持64位的CPU，所以你的机器必须是64位的（而且要在BIOS里面启用虚拟化支持），Windows 7或者更高版本</p> <p>&nbsp;</p> <h1>1. 使用Docker Toolbox for Windows</h1> <p><a title="https://www.docker.com/products/docker-toolbox" href="https://www.docker.com/products/docker-toolbox">https://www.docker.com/products/docker-toolbox</a>&nbsp;</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072101880-865061212.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072102646-2125933284.png" width="244" height="132"></a></p> <p>实际上，这个Toolbox里面包含了VirtualBox这个虚拟机软件，以及一个基本的镜像(centos)，然后采用了docker-machine这个工具来创建和管理虚机，虚机里面装好了docker engine和docker compose等组件。</p> <p>完整的步骤，可以参考 <a title="https://docs.docker.com/windows/step_one/" href="https://docs.docker.com/windows/step_one/">https://docs.docker.com/windows/step_one/</a></p> <p>&nbsp;</p> <h1>2.自己使用docker-machine来配置</h1> <p>为了进一步搞清楚docker Toolbox到底是怎么工作的，其实我们也可以自己运行docker-machine这个组件来创建和管理虚拟机。当然前提条件是一样的：64位，启用虚拟化。不同的是，你需要手工地安装好virtualbox</p> <p>&nbsp;</p> <p>首先，需要安装git</p> <p>然后，启动git bash ,运行下面的命令</p> <p>$ if [[ ! -d "$HOME/bin" ]]; then mkdir -p "$HOME/bin"; fi &amp;&amp; \ curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-Windows-x86_64.exe &gt; "$HOME/bin/docker-machine.exe" &amp;&amp; \ chmod +x "$HOME/bin/docker-machine.exe"</p> <p>然后，通过docker-machine create命令创建虚拟机</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072103177-414817483.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072103771-2073185940.png" width="244" height="176"></a></p>  <p>通过docker-machine ls命令可以看到所有虚拟机的状态</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072104583-723097828.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072105146-675260558.png" width="244" height="52"></a></p> <p>通过docker-machine ssh命令可以登录进去</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072106193-1178873713.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072106599-262446733.png" width="244" height="76"></a></p>  <p>然后在里面进行的操作就是标准的docker操作了</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072107052-1552508555.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072107630-214847338.png" width="244" height="209"></a></p> <p>&nbsp;</p> <p>实际上，在Virtualbox中可以很清楚地看到这个虚拟机</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072108099-2091965197.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072108599-455129826.png" width="244" height="102"></a></p> <p>docker-machine还有其他的命令</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072109302-1018322247.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160226072110146-1787709877.png" width="244" height="135"></a></p> <p>&nbsp;</p> <p>docker-machine还可以直接连接云端的环境创建虚拟机，这相当于是一个简单的PaaS工具吧，可能不是很准确，但确实可以通过他调用底层IaaS层的资源，为开发运维提供便利。</p>]]></description></item><item><title>git与svn, tfs等源代码管理器的协同</title><link>http://www.cnblogs.com/chenxizhang/archive/2016/02/15/5190081.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 15 Feb 2016 02:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2016/02/15/5190081.html</guid><description><![CDATA[<p>简单地说，这三个都是业界知名的源代码管理器。他们是有区别的，根本的区别在于git是分布式源代码管理器（每个本地都有完整的代码，及历史），而svn和tfs是集中式源代码管理器（只有服务器才有完整的历史，客户端本地只有最新版本）。git的作者是linux的作者（liuns），他当年就是因为无法忍受svn的集中式源代码管理才发明了git。</p> <p>git风靡全球已经有些年头了，很多原先老项目的源代码管理，都在逐渐迁移到git。</p> <p>&nbsp;</p> <h1>git-svn</h1> <p>git内置了与svn的双向桥接 请参考<a title="http://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion" href="http://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion">http://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion</a></p> <p>常见的命令如下</p> <p>git svn init （初始化）</p> <p>git svn clone（克隆）</p> <p>git svn fetch （拉取代码）</p> <p>git svn dcommit （提交到svn）</p> <p>一般在提交之前，需要执行git svn rebase命令来获取最新</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>git-tfs</h1> <h4><a href="http://gitstack.com/how-to-migrate-from-tfs-to-git/">How to migrate from TFS to Git</a></h4> <p><a title="http://gitstack.com/how-to-migrate-from-tfs-to-git/" href="http://gitstack.com/how-to-migrate-from-tfs-to-git/">http://gitstack.com/how-to-migrate-from-tfs-to-git/</a>&nbsp;</p> <p>&nbsp;</p> <h2>1.安装gittfs工具</h2> <p>这个工具可以通过下面的地址下载到 <a title="https://github.com/spraints/git-tfs" href="https://github.com/spraints/git-tfs">https://github.com/spraints/git-tfs</a> （这里也有完整的介绍）</p> <p>但更好的安装方式应该是使用chocolatey <a title="https://chocolatey.org/" href="https://chocolatey.org/">https://chocolatey.org/</a>，这工具很像Linux中的apt-get工具</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104658251-626773456.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104658954-1478537616.png" width="244" height="172"></a></p> <h2>2.克隆代码</h2> <p>然后通过git tfs clone命令可以克隆某个TFS的源代码仓库</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104700017-645179488.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104700579-879129940.png" width="244" height="137"></a></p> <h2>3.查看版本历史</h2> <p><a href="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104708204-966092630.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201602/9072-20160215104709189-741690083.png" width="244" height="132"></a></p>    <p>&nbsp;</p> <p>&nbsp;</p> <h1>另外有几个有意思的链接</h1> <h3>基于GitStack搭建Git中心服务器 <a title="http://shanewfx.github.io/blog/2012/05/03/git-server-based-on-gitstack/" href="http://shanewfx.github.io/blog/2012/05/03/git-server-based-on-gitstack/">http://shanewfx.github.io/blog/2012/05/03/git-server-based-on-gitstack/</a></h3> <h3>迁移VSS版本库到Git <a title="http://shanewfx.github.io/blog/2012/05/09/migrate-from-vss-to-git/" href="http://shanewfx.github.io/blog/2012/05/09/migrate-from-vss-to-git/">http://shanewfx.github.io/blog/2012/05/09/migrate-from-vss-to-git/</a></h3>]]></description></item><item><title>有意思的Python：开发和部署一览</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/10/25/4909322.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 25 Oct 2015 11:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/10/25/4909322.html</guid><description><![CDATA[<p>我觉得在有时间的条件下，学习不同的开发语言，对于保持对技术的理解是有帮助的。</p> <p>Python是一门这样简单而且有趣的语言。网上资料已经比较多了。我这里主要对开发和部署环境所涉及的几个工具做些介绍。</p> <h1>1. 安装Python</h1> <p>这个相当于是一个运行环境，有些文档声称Python也有虚拟机机制（经过测试比较，它的运行速度其实和JAVA, C#编译的程序是同一个等级的，有时候甚至更慢一点），所以安装Python是第一步。</p> <p>如果是Windows环境，请下载安装包（<a title="http://python.org/" href="http://python.org/">http://python.org/</a>）</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191657192-742863913.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191700145-1806377358.png" width="244" height="132"></a></p> <p>如果是Linux环境（Ubuntu），则有可能已经内置包含了Python，或者通过 <strong>sudo apt-get install python </strong>进行安装即可</p> <p>Python有两个主要的大版本：以2.7为代表的2.x，以3.5为代表的3.x。而且根据文档中的介绍，Python Foundation出于快速开发（不背包袱）等方面的考虑，3.x并不向下兼容，这无疑是一个大胆的策略，但细想一下，也不无道理。</p> <p>&nbsp;</p> <h1>2.安装Python的包管理器（pip）</h1> <p>Python有一个很不错的生态圈，全世界的程序员都可以编写模块（用包的形式），给自己用，也可以给其他人用，所以有一个Python Package Index （pypi）：<a title="https://pypi.python.org/pypi" href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a> ，截止到今天，已经有<strong>68178 个。</strong></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191711192-1556698097.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191713177-429662676.png" width="244" height="132"></a></p> <p>要很好地使用这些包，最好是安装包管理器。Python有几个包管理器，我这里就不多比较了。现在比较主流的包管理器是：pip。<a title="https://pip.pypa.io/en/stable/installing/#install-pip" href="https://pip.pypa.io/en/stable/installing/#install-pip">https://pip.pypa.io/en/stable/installing/#install-pip</a></p> <p>在Windows环境下，应该使用如下的方式安装</p> <p>1.下载get-pip.py</p> <p><a title="https://bootstrap.pypa.io/get-pip.py" href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a>&nbsp;</p> <p>&nbsp;</p> <p>2.使用python get-pip.py 这样的命令安装它即可。如果在命令行中输入pip可以看到如下的输出，则表示安装成功了。pip的命令主要有install , search , list等</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191714958-905862738.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191715958-1542722731.png" width="244" height="149"></a><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191717442-182198965.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191718411-417535413.png" width="244" height="149"></a><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191720005-1784518091.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191720895-743802172.png" width="244" height="149"></a><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191722708-1514773902.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191723755-1519321718.png" width="244" height="149"></a></p> <p>&nbsp;</p> <p>在Linux环境下（Ubuntu中），则一如既往地简单</p> <p>sudo apt-get install python-pip</p> <p>&nbsp;</p> <h1>3.多版本管理</h1> <p>既然我们知道Python有多个版本，出于某些目的，我们确实会在一个电脑上面安装多个版本。那么如何更好地进行多版本管理（或者也可以说是版本隔离）。这个尤其是在服务器部署的时候，特别有用。最好的工具就是virtualenv。（<a title="https://pypi.python.org/pypi/virtualenv" href="https://pypi.python.org/pypi/virtualenv">https://pypi.python.org/pypi/virtualenv</a>）</p> <p>首先，通过pip安装virtualenv</p> <p>pip install virtualenv</p> <p>&nbsp;</p> <p>然后，通过virtualenv创建一个虚拟环境，例如dev27</p> <p>virtualenv dev</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191724302-1887779449.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191724958-551819752.png" width="244" height="38"></a></p> <p>它会建立一个隔离的python环境，使用Python 2.7，里面包含了Python的程序，也包含了pip，等其他一些工具</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191727474-1196572207.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191728333-2030197247.png" width="244" height="180"></a></p> <p>通过如下的命令可以激活这个环境</p> <p>进入dev27\Scripts目录，运行activate即可（在Linux中，可以用source命令调用activate）</p> <p>如果要退出当前环境，那么运行deactivate即可</p> <p>下面的命令则是创建一个基于Python3.4的虚拟环境</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191728958-661849856.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191729567-401941280.png" width="244" height="43"></a></p> <h1>4.开发环境</h1> <p>关于Python的开发工具，目前我自己用自带的IDLE觉得很不错</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191731208-543932433.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191732442-8101778.png" width="244" height="194"></a><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191734052-1877199131.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191734911-625781314.png" width="244" height="177"></a></p>             <p>当然，Visual Studio也有专门的Python Tools</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191737614-1668763117.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151025191739302-1348772806.png" width="244" height="150"></a></p>]]></description></item><item><title>node-mysql 在4.2.0的时候遇到的错误</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/10/18/4888882.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 18 Oct 2015 00:39:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/10/18/4888882.html</guid><description><![CDATA[<p>实际上这个问题折腾了几天。前一阵因为升级到了最新的4.2.0，发现mysql的应用就出错了，错误消息也比较奇怪</p> <h3>Handshake Inactivity Timeout - PROTOCOL_SEQUENCE_TIMEOUT</h3> <p>经过几次折腾查找，我最后意识到可能是跟版本有关系，切换了node的版本（到早期版本），果然是可以的。</p> <p>在github上面跟作者提了问题，确认最新的Node 4.2.1 已经不存在这个问题。</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151018083913163-1060336748.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151018083914179-328889163.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>node的最新版本change log，可以参考 <a title="https://nodejs.org/en/blog/release/v4.2.1/" href="https://nodejs.org/en/blog/release/v4.2.1/">https://nodejs.org/en/blog/release/v4.2.1/</a></p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">var</span> express = require(<span class="str">"express"</span>);
<span class="kwrd">var</span> mysql = require(<span class="str">"mysql"</span>);

<span class="kwrd">var</span> router = express.Router();

router.get(<span class="str">"/"</span>, <span class="kwrd">function</span> (req, res, next) {

    <span class="kwrd">var</span> connection = mysql.createConnection({
        host: <span class="str">"localhost"</span>,
        user: <span class="str">"nodejs"</span>,
        password: <span class="str">"nodejs"</span>,
        database: <span class="str">"nodejs"</span>,
        port: 3306
    });


    connection.query(<span class="str">"select * from employees"</span>, <span class="kwrd">function</span> (err, rows, fields) {
        <span class="kwrd">if</span> (err) <span class="kwrd">throw</span> err;
        console.log(rows);
        connection.end();

        res.send(rows);
    });
});


module.exports = router;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>配置putty自动登陆服务器</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/10/11/4869755.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 11 Oct 2015 10:44:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/10/11/4869755.html</guid><description><![CDATA[<p>putty是一款知名的SSH工具，可以用来登陆linux服务器，提供了终端。SSH是secure Shell的缩写。我之前也有一篇文章介绍这个话题：<a title="http://www.cnblogs.com/chenxizhang/p/4739090.html" href="http://www.cnblogs.com/chenxizhang/p/4739090.html">http://www.cnblogs.com/chenxizhang/p/4739090.html</a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184355940-1652011588.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184356706-1912165525.png" width="244" height="202"></a></p> <p>今天要谈的一个问题是，putty每次都需要我输入用户名和密码，总是觉得有些麻烦的，所以研究了一下实现了自动登陆。</p> <p>&nbsp;</p> <h1>第一步：生成密钥文件</h1> <p>chenxizhang@ubuntu:~$ <strong><font color="#ff0000">ssh-keygen -t rsa</font></strong><br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/chenxizhang/.ssh/id_rsa):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/chenxizhang/.ssh/id_rsa.<br>Your public key has been saved in /home/chenxizhang/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>90:e3:79:68:55:f3:01:3a:3f:8d:00:fb:60:95:3a:cf chenxizhang@ubuntu<br>The key's randomart image is:<br>+--[ RSA 2048]----+<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . ..+..&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =.o o .&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B.=&nbsp;&nbsp; .&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp; ooO + o&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =+S + .&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp; . .E&nbsp; .&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>+-----------------+<br></p> <p>这个步骤会生成两个文件，id_rsa是私钥文件，id_rsa.pub是公钥。</p> <h1>第二步：将id_rsa.pub文件修改为authorized_keys</h1> <p>cd .ssh</p> <p>mv id_rsa.pub authorized_keys</p> <p>注意，这个名称是固定的</p> <p>&nbsp;</p> <h1>第三步：将id_rsa这个私钥文件复制出来</h1> <p>我是用winscp这个工具来复制文件</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184357893-1321547276.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184359081-1677184454.png" width="244" height="132"></a></p> <p>&nbsp;</p> <h1>第四步：生成密钥</h1> <p>此时会用到另外一个puttygen的工具，根据现有的密钥，生成一个新的密钥</p> <p>选择“Conversions”==&gt;”import”菜单，选择刚才复制出来的那个id_rsa文件<br></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184359518-1789322335.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184359971-893400088.png" width="244" height="236"></a></p> <p>&nbsp;</p> <h1>第五步：将生成的公钥内容（上图中选中的部分），复制到服务器中的authorized_keys这个文件中</h1> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184400471-1003901335.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184401003-648600721.png" width="244" height="155"></a></p> <p>&nbsp;</p> <h1>第六步：保存私钥</h1> <p>在第四步的窗口中选择“Save private key”，选择一个文件，保存即可</p> <p>&nbsp;</p> <h1>第七步：配置putty自动登录</h1> <p>首先，将对应的session加载进来（load）</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184401534-1489453717.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184401971-852991982.png" width="244" height="235"></a></p> <p>然后，设置自动登陆的用户名</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184402487-79024459.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184402940-79294674.png" width="244" height="235"></a></p> <p>然后，指定要使用的私钥文件</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184403409-607620633.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184404049-90837504.png" width="244" height="235"></a></p> <p>&nbsp;</p> <p>一定不要忘记，要保存这些设置</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184404424-536006357.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184404846-1443975905.png" width="244" height="233"></a></p> <p>&nbsp;</p> <h1>第八步：测试自动登陆</h1> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184405378-1805713392.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184409784-1208664033.png" width="244" height="118"></a></p> <p>看起来不错</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>另外，还可以为特定的session建立一个快捷方式，这样就连每次打开putty的主窗口都不用了，一键就到达你想要的服务器</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184410331-295677090.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011184410940-2039080202.png" width="174" height="244"></a></p>]]></description></item><item><title>在ubuntu server中安装和配置docker</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/10/11/4869653.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 11 Oct 2015 09:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/10/11/4869653.html</guid><description><![CDATA[<p>经过一段时间针对不同版本的学习，现在总结当前最新的安装配置过程（应该也是比较简单的）</p> <p>如果不清楚什么是docker，请参考 <a title="https://www.docker.com/" href="https://www.docker.com/">https://www.docker.com/</a></p> <h1>准备工作</h1> <p>建议在安装之前运行下面的命令对ubuntu server进行更新</p> <p>sudo apt-get update</p> <p>sudo apt-get upgrade</p> <p>&nbsp;</p> <h1>安装docker</h1> <p>其实应该只要一句指令即可</p> <p>wget –qO- <a href="https://get.docker.com/">https://get.docker.com/</a> | sh</p> <p>请注意，这里的-q后面跟的是大写的O字母</p> <p>按理说是可以通过apt-get install docker.io这样的方式来安装的，但可能不是最新的，所以最保险的方式就是用上面的命令</p> <p>安装成功后，会显示出来下面的输出结果</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011174834612-1846815202.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011174835081-1959629043.png" width="244" height="132"></a></p> <p>&nbsp;</p> <h1>验证docker安装</h1> <p>通过docker version 检查版本，你可能会遇到下面的提示</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011174835393-691264339.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201510/9072-20151011174835612-593744421.png" width="244" height="56"></a></p> <p>这是因为当前用户的权限方面的问题，可以将当前用户加入docker这个group</p> <p>sudo gpasswd –a ${USER} docker</p> <p>例如下面这样</p>  <p><pre class="csharpcode">chenxizhang@ubuntu:~$ sudo gpasswd -a ${USER} docker
Adding user chenxizhang to group docker</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<br></p>
<p>然后重新启动docker 服务</p>
<p><pre class="csharpcode">chenxizhang@ubuntu:~$ sudo service docker restart
docker stop/waiting
docker start/running, process 10014</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<br></p>
<p>再次运行docker version,你可能还是会遇到刚才同样的错误</p>
<p><pre class="csharpcode">chenxizhang@ubuntu:~$ docker version
Client:
 Version:      1.8.2
 API version:  1.20
 Go version:   go1.4.2
 Git commit:   0a8c2e3
 Built:        Wed Oct  7 17:48:28 UTC 2015
 OS/Arch:      linux/amd64
Get http:<span class="rem">///var/run/docker.sock/v1.20/version: dial unix /var/run/docker.sock: permission denied.</span>
* Are you trying to connect to a TLS-enabled daemon without TLS?
* Is your docker daemon up and running?</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这时，你需要做的是重新启动服务器</p><pre class="csharpcode">sudo reboot</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>再次登陆的时候，就可以正常显示版本信息，表示一切都正常了</p><pre class="csharpcode">chenxizhang@ubuntu:~$ docker version
Client:
 Version:      1.8.2
 API version:  1.20
 Go version:   go1.4.2
 Git commit:   0a8c2e3
 Built:        Wed Oct  7 17:48:28 UTC 2015
 OS/Arch:      linux/amd64

Server:
 Version:      1.8.2
 API version:  1.20
 Go version:   go1.4.2
 Git commit:   0a8c2e3
 Built:        Wed Oct  7 17:48:28 UTC 2015
 OS/Arch:      linux/amd64
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>享受docker吧</h1>
<p><pre class="csharpcode">chenxizhang@ubuntu:~$ docker run hello-world
Unable to find image <span class="str">'hello-world:latest'</span> locally
latest: Pulling from library/hello-world
535020c3e8ad: Pull complete
af340544ed62: Pull complete
Digest: sha256:a68868bfe696c00866942e8f5ca39e3e31b79c1e50feaee4ce5e28df2f051d5c
Status: Downloaded newer image <span class="kwrd">for</span> hello-world:latest

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate <span class="kwrd">this</span> message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the <span class="str">"hello-world"</span> image from the Docker Hub.
 3. The Docker daemon created a <span class="kwrd">new</span> container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To <span class="kwrd">try</span> something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https:<span class="rem">//hub.docker.com</span>

For more examples and ideas, visit:
 https:<span class="rem">//docs.docker.com/userguide/</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style></p>]]></description></item><item><title>Visual Studio 2015无法进行Package Restore的原因和解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/09/20/4822891.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 20 Sep 2015 01:44:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/09/20/4822891.html</guid><description><![CDATA[<p>这篇文章是记录在我的当前电脑上面，安装Visual Studio 2015 Community Edition出现的无法进行Package Restore的问题，很可能在你的电脑上面无法重现。我的环境是</p> <p>1.Windows 7&nbsp; x64</p> <p>2.已经安装了Visual Studio 2013</p> <p>3.已经手工地安装过dnvm 和dnx </p> <p>&nbsp;</p> <h1>问题现象：</h1> <p>为了更好地了解和学习一下最新的ASP.NET 5 , MVC 6等一些特性，在当前电脑上面安装了Visual Studio 2015 Community Edition。安装之前，确认过它是可以与当前的Visual Studio 2013并行（Side by side）运行的。</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094315554-1253939678.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094316789-1551384027.png" width="244" height="166"></a></p> <p>按照默认的设置安装完成后，启动Visual Studio 2015，创建了一个最简单的应用程序，但是无法编译通过，查看输出窗口，得到如下的错误消息</p> <blockquote> <p>PATH=.\node_modules\.bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\Web Tools\External;%PATH%;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\Web Tools\External\git<br>C:\Users\chenxizhang\.dnx\runtimes\dnx-clr-win-x86.1.0.0-beta7\bin\dnx.exe "C:\Users\chenxizhang\.dnx\runtimes\dnx-clr-win-x86.1.0.0-beta7\bin\lib\Microsoft.DNX.PackageManager\Microsoft.DNX.PackageManager.dll" restore "c:\users\chenxizhang\documents\visual studio 2015\Projects\ConsoleApp1\src\ConsoleApp1" -s "C:\Program Files (x86)\Microsoft Web Tools\DNU"<br><font color="#ff0000"><strong>System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.DNX.PackageManager' or one of its dependencies. The system cannot find the file specified.<br></strong></font>File name: 'Microsoft.DNX.PackageManager'<br>&nbsp;&nbsp; at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)<br>&nbsp;&nbsp; at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)<br>&nbsp;&nbsp; at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark&amp; stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)<br>&nbsp;&nbsp; at System.Reflection.Assembly.Load(AssemblyName assemblyRef)<br>&nbsp;&nbsp; at Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)<br>&nbsp;&nbsp; at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)<br>&nbsp;&nbsp; at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)<br>&nbsp;&nbsp; at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)<br>WRN: Assembly binding logging is turned OFF.<br>To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.<br>Note: There is some performance penalty associated with assembly bind failure logging.<br>To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].</p></blockquote> <p>&nbsp;</p> <p>看这个错误提示，是因为找不到对应的dnx（运行时）中的Package Manager这个组件。果然如此吗？当前我的电脑上面，已经安装了好几个runtime（注意，这是我自己手工安装的，前期做其他的实验。Visual Studio 2015在安装的过程中也会自己安装dnvm和对应的dnx）</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094317789-618117051.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094318508-623302837.png" width="244" height="85"></a><br><br>Visual Studio 2015默认会调用最新版本的runtime（目前是1.0.0-beta 7），并且尝试用它进行Package Restore。我找到对应的目录中去看，确实没有Microsoft.DNX.PackageManager这个文件夹。</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094319633-574730562.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094320554-74785593.png" width="244" height="87"></a></p> <p>但是奇怪的是，稍早的版本（例如1.0.0-beta 5）确是存在这个目录和对应的DLL</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094322039-407972664.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094322883-117626409.png" width="244" height="65"></a></p> <p>&nbsp;</p> <h1>解决方案</h1>    <p>目前尚不清楚为什么beta7反而有这个问题，但要解决这个问题，暂时先用beta 5我觉得也是可以接受的</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094323773-451750287.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094324539-298127756.png" width="244" height="111"></a></p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094325195-1693725915.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094326179-675259211.png" width="244" height="83"></a></p> <p>&nbsp;</p> <p>为了简便起见，我们也可以将其他的runtime先删除掉，只留下beta5。这样就不需要每个项目都去设置了。</p> <p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094326976-168760204.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150920094327554-1060783488.png" width="244" height="42"></a></p> <p>当然，相信以后1.0.0正式发布之后，这些问题是可以解决掉的</p>]]></description></item><item><title>使用VS Code开发ASP.NET 5 应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/09/13/4805616.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 13 Sep 2015 13:04:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/09/13/4805616.html</guid><description><![CDATA[<p>本文简要地翻译了 <a title="https://code.visualstudio.com/Docs/runtimes/ASPnet5" href="https://code.visualstudio.com/Docs/runtimes/ASPnet5">https://code.visualstudio.com/Docs/runtimes/ASPnet5</a> 并结合我的实践做了一些说明。</p> <h1>准备工作</h1> <p>1.安装VS Code&nbsp; <a title="https://code.visualstudio.com/" href="https://code.visualstudio.com/">https://code.visualstudio.com/</a>&nbsp;</p> <p>2.安装NODEJS&nbsp; <a title="https://nodejs.org/en/" href="https://nodejs.org/en/">https://nodejs.org/en/</a>&nbsp;</p> <p>&nbsp;</p> <h1>安装DNVM</h1> <p>DNVM的全称是.NET Version Manager，它是用于对新一代的ASP.NET进行支持的一个基础工具，已经支持跨平台（Windows，Linux，Mac）。</p> <p><a title="https://github.com/aspnet/home#upgrading-dnvm-or-running-without-visual-studio" href="https://github.com/aspnet/home#upgrading-dnvm-or-running-without-visual-studio">https://github.com/aspnet/home#upgrading-dnvm-or-running-without-visual-studio</a></p> <p>在Windows下面运行cmd，然后执行下面的命令</p><pre><code>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "&amp;{$Branch='dev';iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1'))}"</code></pre><pre><code>为了检验是否安装成功，可以执行dnvm试试看，如果看到下面这样的输出，则表示你的安装是成功的</code></pre><pre><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210320309-888476103.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210321794-1915608956.png" width="232" height="244"></a></pre><pre>接下来安装必要的运行时（runtime）。dnvm就是用来管理不同的运行时的。目前支持两种不同类型得到runtime，一种是传统的.NET CLR，一种是精简版的CLR，目前微软定义的名称是CoreClr</pre>
<p>这个coreclr完全开源了，请参考 <a title="https://github.com/dotnet/coreclr" href="https://github.com/dotnet/coreclr">https://github.com/dotnet/coreclr</a></p>
<p>你可以使用下面的命令安装最新版的运行时（需要动态下载，可能需要一定的时间）</p>
<p>dnvm install latest -arch x64 -r clr&nbsp; 安装64位的最新版的clr运行时（目前是4.5.1）</p>
<p>dnvm install latest -arch x64 -r coreclr&nbsp; 安装64位的最新版的coreclr运行时</p>
<p>&nbsp;</p>
<p>安装成功后，可以使用如下的命令查看到所有的运行时</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210323715-1877889334.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210324278-117286437.png" width="244" height="110"></a></p>
<p>在下面的目录中，也可以看到对应的文件</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210325856-1693868415.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210326794-255377887.png" width="244" height="108"></a></p>
<p>&nbsp;</p>
<h1>安装必要的一些工具来生成ASP.NET 5的应用程序</h1><pre><code>npm install -g yo grunt-cli generator-aspnet bower</code></pre>
<p>这个命令是使用npm这个包管理器，安装了一系列的nodejs模块，如果你目前对他们还了解不多，请直接忽略他们。以后再研究。</p>
<p>&nbsp;</p>
<p>接下来就可以使用yo 这个工具，生成ASP.NET 5的应用程序了</p>
<p>输入 ：yo aspnet</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210328012-540726115.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210329137-843915462.png" width="244" height="110"></a></p>
<p>选择“Web Application Basic (Without Membership and authorization） ”，回车后，为他取一个名字，例如aspnet5web</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210331215-503888882.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210331950-1087908189.png" width="244" height="110"></a></p>
<p>很快就生成好了一个应用程序（实际上应该是一个模板生成的过程）</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210334247-808873819.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210335231-1819081278.png" width="244" height="176"></a></p>
<p>然后，我们要依次执行下面的命令</p>
<p>cd aspnet5web</p>
<p>dnu restore（这个命令是用来为项目加载依赖的包的，从nuget网站）</p>
<p>&nbsp;</p>
<h1>运行这个项目</h1>
<p>在cmd中运行dnx web 即可启用这个项目</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210336981-232398949.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210338044-808118664.png" width="244" height="176"></a></p>
<p>默认情况下，这个网站是在5000这个端口进行监听的，所以在浏览器中打开<a href="http://localhost:5000">http://localhost:5000</a>可以看到下面的效果</p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210342512-439337962.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210343481-716124184.png" width="244" height="132"></a></p>
<p>&nbsp;</p>
<h1>使用VS Code打开项目</h1>
<p>在命令行中输入code .&nbsp; </p>
<p><a href="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210349544-1257906058.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images2015.cnblogs.com/blog/9072/201509/9072-20150913210350856-1880324917.png" width="244" height="132"></a></p>
<p>这是一个我们熟悉又陌生的ASP.NET MVC项目，说熟悉，是因为它的基本项目结构我们还是比较了解的。说陌生，其实这个项目跟以前的MVC项目是有本质区别的，它是完全基于OWIN的，同时有很多脚本方面的特殊功能。据说视图语法也不一样了，我们找时间再研究研究吧</p>
<p>园子里面有“汤姆大叔”写了一个系列</p>
<p><a title="http://www.cnblogs.com/TomXu/p/4496545.html" href="http://www.cnblogs.com/TomXu/p/4496545.html">http://www.cnblogs.com/TomXu/p/4496545.html</a></p>]]></description></item><item><title>Rust初步（七）：格式化</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/27/4762975.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 27 Aug 2015 05:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/27/4762975.html</guid><description><![CDATA[<p>在Rust中，如果要进行屏幕输出，或者写入到文件中，需要对数据进行格式化。这一篇总结一下它所支持的几种格式化方式。</p> <p>这篇文章参考了以下官方文档，不过，按照我的风格，我还是会突出于C#语言的比较，这样可能更好懂一些。</p> <p><a title="http://rustbyexample.com/hello/print.html" href="http://rustbyexample.com/hello/print.html">http://rustbyexample.com/hello/print.html</a></p> <p><a title="http://doc.rust-lang.org/std/fmt/" href="http://doc.rust-lang.org/std/fmt/">http://doc.rust-lang.org/std/fmt/</a></p> <p><a title="http://rustbyexample.com/hello/print/print_debug.html" href="http://rustbyexample.com/hello/print/print_debug.html">http://rustbyexample.com/hello/print/print_debug.html</a></p> <p><a title="http://rustbyexample.com/hello/print/print_display.html" href="http://rustbyexample.com/hello/print/print_display.html">http://rustbyexample.com/hello/print/print_display.html</a></p> <p>&nbsp;</p> <p>首先，有三个常见的宏，可以用来做格式化</p> <ul> <li><strong><font color="#ff0000"><code>format!</code>:</font></strong> write formatted text to <a href="http://rustbyexample.com/std/str.html"><code>String</code></a>&nbsp; 这个宏可以将一个文本格式化成String类型（可变字符串，在堆上面分配空间），类似于C#中的String.Format方法。 <li><code><strong><font color="#ff0000">print!</font></strong></code>: same as <code>format!</code> but the text is printed to the console.&nbsp; 和format！这个宏功能一样，只不过是输出到屏幕上。类似于C#中的Console.Write方法。 <li><font color="#ff0000"><code>println!</code>:</font> same as <code>print!</code> but a newline is appended. 同上，只不过添加了换行符，类似于C#中的Console.WriteLine方法。</li></ul> <p>&nbsp;</p> <p>既然搞清楚了这三个宏，与C#中有关实现方式的关系，其实就很好理解了。一般这类方法，都可以比较方便地组合字符串，通过占位符这种东西。在C#中，用{0}表示第一个占位符，用{1}表示第二个占位符，依次类推。</p> <p><a title="https://msdn.microsoft.com/zh-cn/library/system.string.format(v=vs.110).aspx" href="https://msdn.microsoft.com/zh-cn/library/system.string.format(v=vs.110).aspx">https://msdn.microsoft.com/zh-cn/library/system.string.format(v=vs.110).aspx</a></p> <p><a title="https://msdn.microsoft.com/zh-cn/library/txafckwd(v=vs.110).aspx" href="https://msdn.microsoft.com/zh-cn/library/txafckwd(v=vs.110).aspx">https://msdn.microsoft.com/zh-cn/library/txafckwd(v=vs.110).aspx</a></p> <p>但是Rust提供了一些自己的创新做法,它可以直接用空的占位符 {}（这个在C#中不允许的），也可以用带序号的占位符 {0}，还直接带名称的占位符{name}，同样，也支持在占位符里面指定特殊格式化的符号，例如{:?} 。 这里有一篇详细的介绍<a title="http://doc.rust-lang.org/std/fmt/" href="http://doc.rust-lang.org/std/fmt/">http://doc.rust-lang.org/std/fmt/</a>&nbsp;</p><pre class="csharpcode">fn main() {
    <span class="rem">// In general, the `{}` will be automatically replaced with any</span>
    <span class="rem">// arguments. These will be stringified.</span>
    println!(<span class="str">"{} days"</span>, 31);

    <span class="rem">// Without a suffix, 31 becomes an i32. You can change what type 31 is,</span>
    <span class="rem">// with a suffix.</span>

    <span class="rem">// There are various optional patterns this works with. Positional</span>
    <span class="rem">// arguments can be used.</span>
    println!(<span class="str">"{0}, this is {1}. {1}, this is {0}"</span>, <span class="str">"Alice"</span>, <span class="str">"Bob"</span>);

    <span class="rem">// As can named arguments.</span>
    println!(<span class="str">"{subject} {verb} {predicate}"</span>,
             predicate=<span class="str">"over the lazy dog"</span>,
             subject=<span class="str">"the quick brown fox"</span>,
             verb=<span class="str">"jumps"</span>);

    <span class="rem">// Special formatting can be specified after a `:`.</span>
    println!(<span class="str">"{} of {:b} people know binary, the other half don't"</span>, 1, 2);

    <span class="rem">// It will even check to make sure the correct number of arguments are</span>
    <span class="rem">// used.</span>
    println!(<span class="str">"My name is {0}, {1} {0}"</span>, <span class="str">"Bond"</span>);
    <span class="rem">// FIXME ^ Add the missing argument: "James"</span>

    <span class="rem">// Create a structure which contains an `i32`. Name it `Structure`.</span>
    <span class="kwrd">struct</span> Structure(i32);

    <span class="rem">// However, custom types such as this structure require more complicated</span>
    <span class="rem">// handling. This will not work.</span>
    println!(<span class="str">"This struct `{}` won't print..."</span>, Structure(3));
    <span class="rem">// FIXME ^ Comment out this line.</span>
}</pre>
<p>知道了如何做格式化，下面要讨论一个问题：具体对象到底怎么实现自己的字符串表现形式的呢？其实，之前我已经略微介绍到了这个问题 </p>
<h4><a href="http://www.cnblogs.com/chenxizhang/p/4760087.html">Rust初步（四）：在rust中处理时间</a></h4>
<p>&nbsp;</p>
<p>从上面的例子中，我们知道，要将一个对象作为一个字符串输出的话，就需要对其进行转换。我们在C#中就是要实现ToString方法，在Rust里面，分别有两个方法Debug和Display方法。如果是元类型（Primitive Type），当然是没有问题的，基本上都已经实现了。</p>
<ul>
<li><code>fmt::Debug</code>: Uses the <code>{:?}</code> marker. Format text for debugging purposes.&nbsp; 如果我们的占位符使用{:?}，默认会调用对象的Debug方法，如果没有，则会报告错误
<li><code>fmt::Display</code>: Uses the <code>{}</code> marker. Format text in a more elegant, user friendly fashion.如果我们的占位符使用{},，默认会调用对象的Display方法，如果没有，则会报告错误</li></ul>
<p>注意，除了这两种形式，还有其他一些格式化输出方式</p>
<ul>
<li><em>unspecified</em> -&gt; <code>Display</code>
<li><code>?</code> -&gt; <code>Debug</code>
<li><code>o</code> –&gt; <code>Octal //8进制</code>
<li><code>x</code> –&gt; <code>LowerHex //16进制</code>
<li><code>X</code> -&gt; <code>UpperHex</code>
<li><code>p</code> –&gt; <code>Pointer </code>
<li><code>b</code> –&gt; <code>Binary //二进制</code>
<li><code>e</code> -&gt; <code>LowerExp</code>
<li><code>E</code> -&gt; <code>UpperExp</code></li></ul>
<p>下面考虑一个例子，来加深理解</p><pre class="csharpcode">
<span class="kwrd">struct</span> Point{ <span class="rem">//自定义一个结构体</span>
    x:i32,
    y:i32
}

fn main() {
    let p = Point{x:3,y:5};
    println!(<span class="str">"{}"</span>,p.x);<span class="rem">//打印x，这会成功</span>
    println!(<span class="str">"{:?}"</span>,p);<span class="rem">//直接打印整个结构体，因为没有实现Debug，会失败</span>
    println!(<span class="str">"{}"</span>,p);<span class="rem">//直接打印整个结构体，因为没有实现Display，会失败</span>
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这个例子连编译都不会通过</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/271259428129313.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/271259435313700.png" width="630" height="143"></a></p>
<p>那么，如何实现Debug和Display呢？</p>
<p>Debug相对来说很简单，只要声明一下即可</p><pre class="csharpcode">#[derive(Debug)]
<span class="kwrd">struct</span> Point{ <span class="rem">//自定义一个结构体</span>
    x:i32,
    y:i32
}

fn main() {
    let p = Point{x:3,y:5};
    println!(<span class="str">"{}"</span>,p.x);<span class="rem">//打印x，这会成功</span>
    println!(<span class="str">"{:?}"</span>,p);<span class="rem">//直接打印整个结构体，因为已经实现Debug，会成功</span>
    
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><font size="2" face="Consolas">那么，它是怎样输出的呢？</font></p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/271259439064514.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/271259444379843.png" width="619" height="88"></a></p>
<p>实际上就很类似于C#中所有Object的默认实现（ToString）</p>
<p>&nbsp;</p>
<p>相比而言，Display是需要手工来实现的，大致如下</p><pre class="csharpcode">use std::fmt;

#[derive(Debug)]
<span class="kwrd">struct</span> Point{ <span class="rem">//自定义一个结构体</span>
    x:i32,
    y:i32
}

impl fmt::Display <span class="kwrd">for</span> Point{
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
          write!(f, <span class="str">"x为{}，y为{}"</span>, self.x,self.y)
      }

}

fn main() {
    let p = Point{x:3,y:5};
    println!(<span class="str">"{}"</span>,p);<span class="rem">//直接打印整个结构体，因为已经实现Debug，会成功</span>

}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
输出结果如下</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/271259447505171.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/271259453759529.png" width="617" height="69"></a></p>]]></description></item><item><title>Rust初步（六）：在C#中使用Rust组件</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760674.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 26 Aug 2015 07:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760674.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/p/4760172.html">上一篇</a>文章，我们通过实例比较了一下C#和Rust的性能表现，应该说在Release模式下面，Rust进行计算密集型的运算还是有些比较明显的优势的。那么，我们有没有可能，在C#中做一些快速应用开发，而一些核心的算法用Rust来实现呢？答案是可以的。</p> <p>&nbsp;</p> <h1>编写Rust代码</h1> <p>下面这段代码，保存在lib.rs文件中</p><pre class="csharpcode">use std::thread;

#[no_mangle]
pub <span class="kwrd">extern</span> fn process(){
    let handles :Vec&lt;_&gt; =(0..10).map(|_|{
        thread::spawn(||{
            let mut x= 0;
            <span class="kwrd">for</span> _ <span class="kwrd">in</span> (0..5_000_000){
                x+=1
            }
            x
        })
    }).collect();


    <span class="kwrd">for</span> h <span class="kwrd">in</span> handles{
        println!(<span class="str">"Thread finished with count={}"</span>,h.join().map_err(|_| <span class="str">"Could not join a thread!"</span>).unwrap());
    }

    println!(<span class="str">"done!"</span>);
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这段代码的几个关键点在于</p>
<p>1.声明为pub，也就是说要让外部可以访问到</p>
<p>2.声明为extern，意思应该也是说希望外部可以访问</p>
<p>3.添加一个标记 #[no_mangle]，这个开关据说是阻止编译器在编译的时候，重命名函数。我也还不是很理解，先照这么做吧</p>
<p>&nbsp;</p>
<p>其他部分就是标准的Rust代码了</p>
<p>&nbsp;</p>
<h1>生成Rust的动态链接库</h1>
<p>默认情况下，Rust编译的库叫做静态链接库，如果我们需要编译动态链接库的话，需要在Cargo.toml文件中定义</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261556059533769.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556064693328.png" width="586" height="354"></a></p>
<p>然后，运行cargo build -- release命令生成动态链接库（dll）</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261556070003955.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556104069529.png" width="897" height="144"></a></p>
<p>我们在输出目录中，可以看到一个countlib.dll 的动态链接库文件</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261556108593602.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556117195731.png" width="729" height="355"></a></p>
<p>&nbsp;</p>
<h1>在C#中使用这个动态链接库</h1>
<p>你可以将countlib.dll放在C#编译输出目录的根目录下面</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Threading.Tasks;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.Threading;
<span class="kwrd">using</span> System.Runtime.InteropServices;


<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {

        <strong><font color="#ff0000">[DllImport(<span class="str">"countlib.dll"</span>,CallingConvention= CallingConvention.Cdecl)]
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">extern</span> <span class="kwrd">void</span> process();</font></strong>

        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            Stopwatch watch = <span class="kwrd">new</span> Stopwatch();
            watch.Start();

            <span class="rem">//Parallel.For(0, 10, i =&gt;</span>
            <span class="rem">//{</span>
            <span class="rem">//    var x = 0;</span>
            <span class="rem">//    for (int j = 0;  j&lt; 5000000; j++)</span>
            <span class="rem">//    {</span>
            <span class="rem">//        x += 1;</span>
            <span class="rem">//    }</span>
            <span class="rem">//    Console.WriteLine("线程:{0} 完成计数",Thread.CurrentThread.ManagedThreadId);</span>
            <span class="rem">//});</span>

            <strong><font color="#ff0000">process();<span class="rem">//调用Rust里面的程序process进行计算</span></font></strong>

            watch.Stop();
            Console.WriteLine(<span class="str">"耗时:{0}秒"</span>, watch.Elapsed.TotalSeconds);
            Console.Read();
        }
    }

}
</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">在Debug模式下面的耗时为 0.002秒（提升太明显了吧）</pre><pre class="csharpcode"><a href="http://images0.cnblogs.com/blog/9072/201508/261556127347674.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556136253346.png" width="681" height="281"></a></pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">在Release模式下面的耗时为0.002秒（基本上跟Debug模式不相上下，很神奇吗）</pre><pre class="csharpcode"><a href="http://images0.cnblogs.com/blog/9072/201508/261556146875005.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556155477134.png" width="681" height="265"></a></pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">那么，这个性能表现，几乎接近了直接使用Rust的性能，比原先用C#的方式提高了5倍。</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">如此说来，计算密集型（尤其是需要用到多线程，多核）的任务，可以用Rust来编写，然后在C#中调用。</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><font color="#ff0000">【特别注意】</font></pre><pre class="csharpcode">cargo build默认情况下会根据当前计算机的配置进行编译，例如我是64位的计算机，那么编译出来的dll也是64位的，在C#中用的时候，就需要同样设置为64位，否则就会出现错误</pre><pre class="csharpcode"><a href="http://images0.cnblogs.com/blog/9072/201508/261556181254121.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556199069165.png" width="244" height="130"></a></pre><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>



<p>那么，cargo build是否可以指定对应的平台进行编译呢？可以通过指定 --target参数来实现，可用的值主要有</p><pre><code>x86_64-pc-windows-gnu</code></pre><pre><code>i686-unknown-linux-gnu</code></pre><pre><code>x86_64-unknown-linux-gnu</code></pre><pre><code>详细可以参考 <a title="http://doc.crates.io/manifest.html" href="http://doc.crates.io/manifest.html">http://doc.crates.io/manifest.html</a></code></pre><pre><code>我用下面这样用就可以编译一个通用的dll（既能用于32位，也能用于64位——采用WOW模式）</code></pre><pre><a href="http://images0.cnblogs.com/blog/9072/201508/261556203901481.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556211094866.png" width="770" height="107"></a></pre><pre>&nbsp;</pre><pre>其实这个编译选项，类似于我们在Visual Studio中使用Any CPU进行编译</pre><pre><a href="http://images0.cnblogs.com/blog/9072/201508/261556247503511.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261556253757869.png" width="851" height="368"></a></pre>]]></description></item><item><title>Rust初步（五）：Rust与C#性能比较</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760172.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 26 Aug 2015 05:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760172.html</guid><description><![CDATA[<p>我学习Rust的目的并不是说期望用它来取代掉现有的开发平台或语言。相反，我认为当前绝大部分研发团队，都不可能只用一个平台或者一个语言。</p> <p>当组织增长，他们越来越依赖大量的编程语言。不同的编程语言有不同的能力和弱点，而一个多语言栈让你在某个特定的编程语言的优点起作用的时候能使用它，当它有缺陷时使用其他编程语言。</p> <p>Rust 主要擅长的领域是：数值计算和线程。</p> <p>我下面用一个实例来比较一下Rust和C#的性能方面表现。这个实例很简单，我们准备开启10个线程，然后在每个线程里面运行一个数值累加的工作任务（500万次。</p> <p>注意，以下测试的耗时，可能在各位的电脑上面会因为配置的不同而不同。我的配置如下</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261344532032800.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261344554063673.png" width="1055" height="689"></a></p> <h1>Rust的程序</h1><pre class="csharpcode"><span class="kwrd">extern</span> crate time;

use std::thread;
use time::*;

fn main(){


    let start = time::now();<span class="rem">//获取开始时间</span>

    let handles :Vec&lt;_&gt; =(0..10).map(|_|{
        thread::spawn(||{
            let mut x= 0;
            <span class="kwrd">for</span> _ <span class="kwrd">in</span> (0..5_000_000){
                x+=1
            }
            x
        })
    }).collect();
    <span class="kwrd">for</span> h <span class="kwrd">in</span> handles{
        println!(<span class="str">"Thread finished with count={}"</span>,h.join().map_err(|_| <span class="str">"Could not join a thread!"</span>).unwrap());
    }

    let end = time::now();<span class="rem">//获取结束时间</span>
    let duration = end - start;

    println!(<span class="str">"耗时:{}"</span>,duration);
}
</pre>
<p>&nbsp;</p>
<p>需要注意的是，为了做耗时统计，我们采用了time这个crate，如果有不清楚，请参考我之前的文章：
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h4><a href="http://www.cnblogs.com/chenxizhang/p/4760087.html">Rust初步（四）：在rust中处理时间</a></h4>
<p>&nbsp;</p>
<p>这个程序，在debug模式下运行的耗时大约是 0.55秒</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261344568758687.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261344592653319.png" width="557" height="227"></a></p>
<p>在release模式下运行的耗时大约是 0.002秒</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261345116877214.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261345295477271.png" width="612" height="226"></a></p>
<p>&nbsp;</p>
<h1>C#的程序：</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Threading.Tasks;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.Threading;


<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            Stopwatch watch = <span class="kwrd">new</span> Stopwatch();
            watch.Start();

            Parallel.For(0, 10, i =&gt;
            {
                var x = 0;
                <span class="kwrd">for</span> (<span class="kwrd">int</span> j = 0;  j&lt; 5000000; j++)
                {
                    x += 1;
                }
                Console.WriteLine(<span class="str">"线程:{0} 完成计数"</span>,Thread.CurrentThread.ManagedThreadId);
            });


            watch.Stop();
            Console.WriteLine(<span class="str">"耗时:{0}秒"</span>, watch.Elapsed.TotalSeconds);
            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>在Debug模式下面运行的耗时约为0.06秒</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261345494537984.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261345584226992.png" width="681" height="446"></a></p>
<p>在Release模式下运行的耗时约为0.012秒</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261346047654597.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261346099227972.png" width="681" height="446"></a></p>
<p>&nbsp;</p>
<p>汇总下来比较的结果如下</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261346172035262.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261346184843221.png" width="596" height="137"></a></p>
<p>应该说C#新版本中对多线程管理是有了很大的提升的（包括语法很简化）。在Release模式下还是比较慢，是因为Rust是没有运行时的，而C#是要经过CLR运行的。</p>
<p>不过，在Debug模式下，居然C#大幅度胜出了，我感到很意外。从数值上来说，只能说Rust在Debug模式下很慢（可能做了很多事情？）</p></td></tr>]]></description></item><item><title>Rust初步（四）：在rust中处理时间</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760087.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 26 Aug 2015 05:05:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4760087.html</guid><description><![CDATA[<p>这个看起来是一个很小的问题，我们如果是在.NET里面的话，很简单地可以直接使用System.DateTime.Now获取到当前时间，还可以进行各种不同的计算或者输出。但是这样一个问题，在rust里面，还是费了我一些时间的。当然，我觉得这种折腾也是有些益处的，从中可以更好地理解rust的一些内部原理。</p> <p>首先来看一下怎么做吧</p> <p>rust默认自带的std库，里面并没有针对时间的功能，如果我们要处理时间（获取当前时间，或者计算两个时间的间隔等等）的话，需要引入一个额外的库，名称就叫time</p> <p><a title="http://doc.rust-lang.org/time/time/index.html" href="http://doc.rust-lang.org/time/time/index.html">http://doc.rust-lang.org/time/time/index.html</a>&nbsp;</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261304403599862.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304412031520.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>我们要做的是修改Cargo.toml文件</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261304416872836.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304420476879.png" width="244" height="125"></a></p> <p>然后，在需要使用这个功能的具体代码文件（rs）中，通过下面的语句导入这个库</p> <p>extern <strong>crate</strong> time; //crate是一个很重要的概念，类似于是package（包）的概念</p> <p>rust有一个对应的crate.io的网站，就是可以给全世界的rust开发人员，搜索或者发布crate的地方</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261304424227693.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304432506878.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>然后使用use语句，完成类型导入</p> <p>use time::*;</p> <p>&nbsp;</p> <p>常用的几个方法如下</p> <p>time::now()，获取当前完整时间，包括日期</p> <p>time::get_time()，仅获取当前时间</p> <p>&nbsp;</p> <p>下面有一个实例，我为了统计某段代码运行的效率，在执行之前，获取了当前的时间，在执行完之后，再次获取当前的时间，然后两者的差就是耗时。</p><pre class="csharpcode"><span class="kwrd">extern</span> crate time;

use std::thread;
use time::*;

fn main(){

    
    let start = time::now();<span class="rem">//获取开始时间</span>

    let handles :Vec&lt;_&gt; =(0..10).map(|_|{
        thread::spawn(||{
            let mut x= 0;
            <span class="kwrd">for</span> _ <span class="kwrd">in</span> (0..5_000_000){
                x+=1
            }
            x
        })
    }).collect();
    <span class="kwrd">for</span> h <span class="kwrd">in</span> handles{
        println!(<span class="str">"Thread finished with count={}"</span>,h.join().map_err(|_| <span class="str">"Could not join a thread!"</span>).unwrap());
    }

    let end = time::now();<span class="rem">//获取结束时间</span>
    println!(<span class="str">"done!start : {:?},end :{:?},duration:{:?}"</span>,start,end,end-start);
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>




<p>最后运行的效果是这样的</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304441099008.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304445476309.png" width="244" height="78"></a></p>
<p>这个程序在debug模式下运行约需要0.55秒（nanos，是指纳秒，1纳秒=0.000 000 001秒）</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304450004680.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304453598723.png" width="244" height="87"></a></p>
<p>在release下面运行约需要0.001秒（相当于是1毫秒）</p>
<p>由这里可以看出，rust程序在debug模式和release模式的性能是差别很大的</p>
<p>&nbsp;</p>
<p>需要指出的一个地方是下面这句代码中的红色部分</p>
<p>println!(<span class="str">"done!start :<strong><font color="#ff0000"> {:?},</font></strong>end :<font color="#ff0000"><strong>{:?}</strong></font>,duration:{:?}"</span>,start,end,end-start); </p>
<p>通常来说，我们在向屏幕打印的时候，会用{} 这样的占位符，但是我在之前这样用的时候，发现无法编译通过。（事实上，是 linter-rust 这个插件帮助我们检查出来的语法错误，关于linter-rust及插件机制，有兴趣可以参考 <a title="http://www.cnblogs.com/chenxizhang/p/4759921.html" href="http://www.cnblogs.com/chenxizhang/p/4759921.html">http://www.cnblogs.com/chenxizhang/p/4759921.html</a>）</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304456875524.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304459844081.png" width="244" height="166"></a></p>
<p>这句话的意思是说time:Tm这个结构体（struct）没有实现fmt:: Display这个方法。我们去 <a title="http://doc.rust-lang.org/time/time/struct.Tm.html" href="http://doc.rust-lang.org/time/time/struct.Tm.html">http://doc.rust-lang.org/time/time/struct.Tm.html</a> 这里看，确实是没有实现Display</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304463129881.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304466098438.png" width="244" height="190"></a></p>
<p>但是它实现了Debug这个方法。这个其实也是可以用来做输出的。只不过，它要求的占位符是 {:?} </p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304494066426.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304527976230.png" width="244" height="132"></a></p>
<p>有两种实现形式</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261304531727044.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261304534534129.png" width="244" height="146"></a></p>
<p>&nbsp;</p>
<p>这让我陷入一定的思考。其实这个概念很类似于C#中所有类型的ToString方法。只不过C#中，因为所有类型都是继承自Object的，而Object的ToString方法有一个默认的实现（输出类型的完整限定名）。在特定的类型里面，我们会选择重写ToString方法实现自定义的输出。</p>
<p>这里有两个小疑问，我后续会再看看，抽时间写出来</p>
<p>1.怎么实现扩展方法？</p>
<p>2.能否继承并重写这个方法？</p>
<p>&nbsp;</p>
<p>另外，想到DateTime，其实在C#里面，也是一个结构体（Struct），并不是元类型（Primitive Type）</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/261305008901636.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261305016251792.png" width="244" height="128"></a></p>]]></description></item><item><title>Rust初步（三）：使用atom搭配racer进行rust编程</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4759921.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 26 Aug 2015 03:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/26/4759921.html</guid><description><![CDATA[<p>在rust.cc社区中有一个关于rust编辑器的讨论（话说很多人要学一个新语言，都会立即考虑编辑器的问题，包括我在内），主要关注的是，智能提示（这个真的太重要了）。大家讨论下来有几个选择</p> <p>&nbsp;</p> <p>1. eclipse</p> <p>2. vs code（我用过，目前支持语言高亮显示，但没有智能提示，还是不顺手）</p> <p>3.emacs （GNU的创始人作品，再次向开源致敬）</p> <p>4.SolidOak (我用过，体验很不好）</p> <p>5.atom （我最后选用了这个工具，是GitHub出品的，据说VS Code也是基于atom做的实现），配合racer做智能提示，还有linter-rust 做语法检查。整体使用体验是：很好，很强大</p> <p>&nbsp;</p> <p>最终的效果如下</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145501567958.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145510781874.png" width="244" height="143"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>首先肯定是要先安装atom，可以通过 <a title="https://atom.io/" href="https://atom.io/">https://atom.io/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145516097203.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145528596918.png" width="244" height="132"></a></p> <p>然后，按照下面的帮助进行安装配置</p> <p><a title="https://atom.io/packages/racer" href="https://atom.io/packages/racer">https://atom.io/packages/racer</a></p> <ol> <li>Ensure you have the Atom package <a href="https://atom.io/packages/language-rust">language-rust</a> installed and active.&nbsp; 安装一个package（language-rust)，这里又有一个有意思的package manager：apm ，参考 <a title="https://atom.io/packages/language-rust" href="https://atom.io/packages/language-rust">https://atom.io/packages/language-rust</a></li></ol> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145534842276.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145540788390.png" width="244" height="132"></a></p> <ol> <li>Ensure you have <a href="https://github.com/phildawes/racer">Racer</a> properly installed.&nbsp; 然后安装racer，参考 <a title="https://github.com/phildawes/racer" href="https://github.com/phildawes/racer">https://github.com/phildawes/racer</a>，有意思的是整个工具本来就是用rust写的，所以你可以下载源代码（使用git）后，使用cargo build 进行编译即可</li></ol> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145549371520.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145554222835.png" width="244" height="132"></a></p> <ol> <li>Ensure you have a copy of the <a href="http://www.rust-lang.org/install.html">rustc source code</a> extracted on your disk. 需要下载rustc的源代码，并且解压缩到本地磁盘。参考 <a title="https://www.rust-lang.org/install.html" href="https://www.rust-lang.org/install.html">https://www.rust-lang.org/install.html</a>和 <a title="https://github.com/rust-lang/rust" href="https://github.com/rust-lang/rust">https://github.com/rust-lang/rust</a>&nbsp;</li></ol> <p>我是直接用git获取了 <a title="https://github.com/rust-lang/rust" href="https://github.com/rust-lang/rust">https://github.com/rust-lang/rust</a>&nbsp; 然后保存到本地一个目录，例如</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145557973650.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145562345249.png" width="244" height="200"></a></p> <p>&nbsp;</p> <ol> <li>Install this package via Atom's package manager: 通过命令或者配置工具安装racer  <ul> <li>go to <code>Preferences &gt; Packages</code>, search for <code>racer</code>, and install it  <li><strong>OR</strong> use the command line <code><strong><font color="#ff0000">apm install racer</font></strong></code>).</li></ul></li></ol> <p>&nbsp;</p> <p>最后，要进行一些配置</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/261145565949293.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/261145570785906.png" width="244" height="190"></a></p>]]></description></item><item><title>你需要知道的包管理器（Package Manager）</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/19/4743721.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 19 Aug 2015 14:44:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/19/4743721.html</guid><description><![CDATA[<p>最近我花了一点时间关注了在不同系统之中所用到的包管理器（Package Manager) 。最开始的时候，我是在使用Linux操作系统时，对这种工具以及它背后的想法深深迷恋住了：这真是自由的软件世界。全世界所有的开发人员都可以将自己觉得有用的组件或者软件发布到一个共用的地方，其他的所有人都可以很方便地按需取用。</p> <p>让我们记住Richard Stallman 以及他提出并创立的GNU计划。<a title="http://baike.baidu.com/view/36272.htm" href="http://baike.baidu.com/view/36272.htm">http://baike.baidu.com/view/36272.htm</a>&nbsp;</p> <p>&nbsp;</p> <p>在Linux系统中，包管理器是如此强大，让人惊叹。据说这也是Linux之所以很安全的原因，因为几乎所有软件都可以免费地通过包管理器下载到，不需要东找西找（也就免去了中毒的可能性），甚至黑客们连去编写病毒的愿望都没有。</p> <p>闲话少说，我就从Linux中的包管理器说起吧</p> <h1>apt-get </h1> <p>Ubuntu中，默认采用apt-get 作为包管理器</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243103949916.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243130661633.png" width="244" height="156"></a></p> <p>常见的命令：</p> <ol> <li>apt-get update  <li>apt-get upgrade  <li>apt-get install  <li>apt-get uninstall  <li>apt-get source</li></ol> <p>&nbsp;</p> <h1>yum</h1> <p>CentOS中，默认使用yum作为包管理器，用法很类似，有兴趣的朋友可以参考 <a title="https://www.centos.org/docs/5/html/yum/" href="https://www.centos.org/docs/5/html/yum/">https://www.centos.org/docs/5/html/yum/</a></p> <p>我大部分时间不用CentOS，这里就不截图了。</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>Nuget Package Manager </h1> <p>这是微软提供的一个包管理器。他提供了可以用于.NET开发平台的各种组件包的托管及管理。</p> <p>【注意】它提供的只是组件，而且仅限于.NET开发平台用的。这些组件，通常是一些DLL，不能直接运行的，但可以用于我们在具体开发的项目中。</p> <p><a title="https://www.nuget.org/" href="https://www.nuget.org/">https://www.nuget.org/</a>&nbsp;</p> <p><a title="https://www.myget.org/" href="https://www.myget.org/">https://www.myget.org/</a> （这是一个新的站点，目的是想做一个统一的包源管理中心，Create NuGet feeds, npm, Bower and Vsix repositories with your own packages and those from other package sources such as NuGet.org or Npmjs.com.）</p> <p>如何安装</p> <p><a title="http://docs.nuget.org/consume/installing-nuget" href="http://docs.nuget.org/consume/installing-nuget">http://docs.nuget.org/consume/installing-nuget</a></p> <p>最好是集成在Visual Studio中，</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243185506106.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243224888010.png" width="244" height="150"></a></p> <p>除了图形化，也有命令行模式</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243247065654.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243257854084.png" width="244" height="80"></a></p> <p>还有独立的命令行工具（nuget.exe）</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243276754928.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243290819157.png" width="244" height="118"></a></p> <p>官方也提供一个独立的图形化界面</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243316919088.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243335819932.png" width="244" height="188"></a></p> <p>&nbsp;</p> <h1>chocolatey</h1> <p><a title="https://chocolatey.org/" href="https://chocolatey.org/">https://chocolatey.org/</a></p> <p>这个可以翻译为“巧克力”吗？呵呵。这个与nuget有本质的区别，nuget是提供了组件的包管理器（也就是说它提供的包，是包含了一些组件，本身是不能运行的），而chocolatey提供的是直接可以执行的程序，这一点是很类似于linux中的 apt-get 这个功能的</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243413004524.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243430198783.png" width="244" height="132"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243489103316.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243504561588.png" width="244" height="92"></a></p> <p>实际上，它是要基于.NET Framework 4.0和PowerShell才能运行的，也只能在Windows上面运行。</p> <p>安装好之后，随便启动一个命令行（需要用管理员身份），然后输入choco，就可以看到当前的版本信息</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243515975504.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243524562932.png" width="244" height="58"></a></p> <p>通过choco list命令可以获取到当前所有的包的列表</p> <p>通过choco install命令可以安装需要的包，例如choco install git</p> <p>&nbsp;</p> <h1>npm</h1> <h3>npm is the package manager for javascript. <a title="https://www.npmjs.com/" href="https://www.npmjs.com/">https://www.npmjs.com/</a>&nbsp;</h3> <p>这也是一个神奇的工具。它的背后是神奇的nodejs。<a title="https://nodejs.org/" href="https://nodejs.org/">https://nodejs.org/</a> ，所以简单地说，npm就是一个基于nodejs的包管理器，它管理的是javascript。</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/192243547532834.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/192243562062078.png" width="244" height="137"></a></p>]]></description></item><item><title>在ASP.NET Web API项目中使用Hangfire实现后台任务处理</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4740921.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Aug 2015 14:58:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4740921.html</guid><description><![CDATA[<p>当前项目中有这样一个需求：由前端用户的一个操作，需要触发到不同设备的消息推送。由于推送这个具体功能，我们采用了第三方的服务。而这个服务调用有时候可能会有延时，为此，我们希望将消息推送与用户前端操作实现异步执行，就是希望在后台自动执行，不阻塞前端用户的操作，而且最好能实现失败重试等功能。</p> <p>经过一些研究比较，我们发现使用Hangfire这个组件可以较好地实现这个需求。为了给大家做一个演示，我这里简化了代码，做一个范例程序。</p> <p>我在这里不准备详细介绍Hangfire的基本用法，有兴趣的同学们可以参考官方网站 <a title="http://hangfire.io/" href="http://hangfire.io/">http://hangfire.io/</a>&nbsp; 和文档 <a title="http://docs.hangfire.io/en/latest/" href="http://docs.hangfire.io/en/latest/">http://docs.hangfire.io/en/latest/</a>&nbsp;</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257410031570.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257415508469.png" width="244" height="132"></a><a href="http://images0.cnblogs.com/blog/9072/201508/182257419727939.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257430351982.png" width="244" height="132"></a></p> <p>&nbsp;</p> <h1>第一步：创建ASP.NET Web API项目</h1> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257435977409.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257441608538.png" width="244" height="150"></a><a href="http://images0.cnblogs.com/blog/9072/201508/182257445194494.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257452534338.png" width="244" height="183"></a></p> <p>&nbsp;</p> <h1>第二步：安装必要的nuget package </h1> <p>打开Nuget Package Manager Console</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257458002238.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257464727164.png" width="244" height="121"></a></p> <p>首先安装Hangfire组件（Core，MemoryStorage），注意，因为后者是依赖前者的，所以我们只需要运行下面的命令即可</p> <h2>Install-Package Hangfire.MemoryStorage</h2> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257469729078.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257476915692.png" width="244" height="131"></a></p> <p>Storage就是存储的意思，Hangfire的后台任务是需要一个地方保存起来，它默认支持SQL Server Storage和MemoryStorage。采用MemoryStorage无疑是最简单的（不需要有任何外部的依赖）。当然，最大的问题就是，因为是放在内存中的，万一网站出现问题重启，那么没有执行完的任务是会消失的。</p> <p>如果要使用SQL Server的话，可以参考 <a title="http://docs.hangfire.io/en/latest/configuration/using-sql-server.html" href="http://docs.hangfire.io/en/latest/configuration/using-sql-server.html">http://docs.hangfire.io/en/latest/configuration/using-sql-server.html</a> ，甚至还可以结合MSMQ来提高可用性 <a title="http://docs.hangfire.io/en/latest/configuration/using-sql-server-with-msmq.html" href="http://docs.hangfire.io/en/latest/configuration/using-sql-server-with-msmq.html">http://docs.hangfire.io/en/latest/configuration/using-sql-server-with-msmq.html</a>&nbsp;</p> <p>&nbsp;</p> <p>接下来为当前项目启用Owin的支持。关于什么是OWin，我这里也不准备多做说明，有兴趣的同学可以参考 ： <a title="http://www.cnblogs.com/dudu/p/what-is-owin.html" href="http://www.cnblogs.com/dudu/p/what-is-owin.html">http://www.cnblogs.com/dudu/p/what-is-owin.html</a>&nbsp; 和 <a title="http://owin.org/" href="http://owin.org/">http://owin.org/</a> 还有 <a title="http://www.asp.net/aspnet/overview/owin-and-katana/an-overview-of-project-katana" href="http://www.asp.net/aspnet/overview/owin-and-katana/an-overview-of-project-katana">http://www.asp.net/aspnet/overview/owin-and-katana/an-overview-of-project-katana</a>&nbsp;</p> <h2>Install-Package Microsoft.Owin.Host.SystemWeb</h2> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257479723906.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257484889049.png" width="244" height="72"></a></p> <p>&nbsp;</p> <h1>第三步：添加Owin Startup Class</h1> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182257490668705.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257493631149.png" width="244" height="150"></a></p> <p>修改Startup.cs为下面这样的代码</p><pre class="csharpcode"><span class="kwrd">using</span> Hangfire;
<span class="kwrd">using</span> Hangfire.MemoryStorage;
<span class="kwrd">using</span> Microsoft.Owin;
<span class="kwrd">using</span> Owin;


[assembly: OwinStartup(<span class="kwrd">typeof</span>(WebApplicationWebApiHangfireSample.Startup))]

<span class="kwrd">namespace</span> WebApplicationWebApiHangfireSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 演示Hangfire的配置</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> Startup
    {
        <span class="kwrd">public</span> <span class="kwrd">void</span> Configuration(IAppBuilder app)
        {
            <span class="rem">// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888</span>

            <span class="rem">//指定Hangfire使用内存存储后台任务信息</span>
            GlobalConfiguration.Configuration.UseMemoryStorage();
            <span class="rem">//启用HangfireServer这个中间件（它会自动释放）</span>
            app.UseHangfireServer();
            <span class="rem">//启用Hangfire的仪表盘（可以看到任务的状态，进度等信息）</span>
            app.UseHangfireDashboard();

        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1><font size="2" face="Consolas"></font>&nbsp;</h1>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>第四步：实现一个简单的Web API，启动后台任务</h1>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257496914348.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257501757734.png" width="244" height="170"></a></p><pre class="csharpcode"><span class="kwrd">using</span> Hangfire;
<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.Web.Http;

<span class="kwrd">namespace</span> WebApplicationWebApiHangfireSample.Controllers
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 用来公开给前端用户调用的API</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> MessageController : ApiController
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个是用来发送消息的静态方法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="message"&gt;&lt;/param&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Send(<span class="kwrd">string</span> message)
        {
            EventLog.WriteEntry(<span class="str">"EventSystem"</span>, <span class="kwrd">string</span>.Format(<span class="str">"这是由Hangfire后台任务发送的消息:{0},时间为:{1}"</span>, message, DateTime.Now));
        }

        <span class="kwrd">public</span> IHttpActionResult Post(<span class="kwrd">string</span> content)
        {
            <span class="rem">//这里可以做一些业务判断或操作</span>
            
            <span class="rem">//然后需要推送的时候，调用下面的方法即可</span>
            BackgroundJob.Enqueue(() =&gt; Send(content));
          
            <span class="rem">//最后返回（这里是立即返回，不会阻塞）</span>
            <span class="kwrd">return</span> Ok();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>









<h1>第五步：进行测试</h1>
<p>我使用Fiddler来模拟客户端调用</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257510508833.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257515669275.png" width="244" height="74"></a></p>
<p>我们可以很容易地发起大量的请求，例如下面这样</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257518784947.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257521756390.png" width="244" height="95"></a></p>
<p>很快就在Dashboard中看到任务状态（有1000个任务）</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257527228588.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257530507489.png" width="244" height="132"></a></p>
<p>但是很快（不到1秒钟的时间），这些任务就全部处理完了</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257533781689.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257537852631.png" width="244" height="132"></a></p>
<p>&nbsp;</p>
<p>我们可以在Windows事件日志中看到消息</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201508/182257542225330.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182257548945958.png" width="244" height="132"></a></p>
<p>以上就是我的简单演示例子。当然，如果还想要实现失败重试，或者更加有意思的一些功能（例如定时发送），可以继续参考官方文档。</p>
<p>这个范例代码可以通过这里下载&nbsp; <a title="http://files.cnblogs.com/files/chenxizhang/WebApplicationWebApiHangfireSample.zip" href="http://files.cnblogs.com/files/chenxizhang/WebApplicationWebApiHangfireSample.zip">http://files.cnblogs.com/files/chenxizhang/WebApplicationWebApiHangfireSample.zip</a></p>]]></description></item><item><title>在Linux客户机与Windows宿主机之间建立共享（VitrualBox）</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4740521.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Aug 2015 12:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4740521.html</guid><description><![CDATA[<p>VirtualBox中，如果客户机和宿主机都是Windows的话，共享相对是比较方便的。一般是通过<a href="file://\\vboxsvr\shared">\\vboxsvr\shared</a> 这样的路径访问即可。</p> <p>但是如果客户机是Linux的话，就略微麻烦一点（当然掌握了之后也很好理解）</p> <p>&nbsp;</p> <h1>第一步：安装VirtualBox Additioanl Tools</h1> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182032064566422.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182032071287051.png" width="244" height="100"></a></p> <p>&nbsp;</p> <h1>第二步：设置共享目录</h1> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182032076288964.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182032079721692.png" width="244" height="153"></a></p> <p>&nbsp;</p> <h1>第三步：创建一个特殊的设备目录（可选）</h1> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182032082856364.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182032086758778.png" width="244" height="57"></a></p> <h1>第四步：将共享目录mount（挂）到该设备目录</h1> <p><font color="#000000"><strong>sudo mount –t vboxsf data /mnt/shared</strong></font></p> <p>这样就可以象访问本地目录一样访问共享目录了</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/182032090666491.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/182032096609377.png" width="244" height="116"></a></p>]]></description></item><item><title>Rust初步（二）：使用Visual Studio Code编写Rust程序（猜猜看游戏）</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739535.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Aug 2015 07:31:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739535.html</guid><description><![CDATA[<p>我是照着下面这篇帮助文档,完成了第一个完整的Rust程序: 猜猜看 游戏</p> <p><a title="http://kaisery.gitbooks.io/rust-book-chinese/content/content/3.1.Guessing%20Game%20%E7%8C%9C%E7%8C%9C%E7%9C%8B.html" href="http://kaisery.gitbooks.io/rust-book-chinese/content/content/3.1.Guessing%20Game%20%E7%8C%9C%E7%8C%9C%E7%9C%8B.html">http://kaisery.gitbooks.io/rust-book-chinese/content/content/3.1.Guessing%20Game%20%E7%8C%9C%E7%8C%9C%E7%9C%8B.html</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530257224898.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181530269413426.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>我采用的开发工具是Visual Studio Code, 这应该是目前能找到的最"所见即所得"的编辑器了, 尤其对于我们这种重度Windows依赖症患者来说.</p> <p>不过需要提出的是,我是在Ubuntu中安装的Visual Studio Code进行开发。这得感谢微软最近一年多来的努力，Visual Studio正式支持Windows,Linux,Mac等不同平台了</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530318315066.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181530339888206.png" width="244" height="120"></a></p> <p>Visual Studio Code还在继续完善中，希望以后会更加方便吧</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530378166803.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181530392222574.png" width="244" height="132"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530462385597.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181530469883968.png" width="244" height="132"></a></p> <p>运行起来的效果如下</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530475663625.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181530493319052.png" width="244" height="145"></a></p> <p>&nbsp;</p> <p>需要指出的是，Rust程序是不需要运行时（Runtime）的，也就是说，只有在开发的机器上面需要安装Rust及相关工具（其实主要是三个工具rustc ,cargo ,rustdoc），在目标运行的机器上面，是可以直接运行的。通过cargo build命令可以生成我们需要的二进制代码文件</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181530586135717.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181531005812616.png" width="244" height="182"></a></p> <p>事实上我们只需要将guessing_game这个可执行文件，复制到其他的机器就可以直接运行</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181531024255786.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181531037067827.png" width="244" height="206"></a></p> <p>但需要注意的是，不同平台的可执行文件需要在对应的平台编译。也就是说，在Linux中编译的Rust程序，只能在Linux中运行。看起来还不是很完美，对吗？不能真正实现“一次编写，处处运行”吗？但其实这个问题很容易解决，如果你需要在Windows平台编译，只需要下载代码，运行相应的编译命令即可。</p> <p>例如，我做的这个猜猜看游戏，代码上传到了 </p> <p><a title="https://github.com/chenxizhang/rust_training" href="https://github.com/chenxizhang/rust_training">https://github.com/chenxizhang/rust_training</a></p> <p>&nbsp;</p> <p>你可以用git工具下载这些代码</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181531053639054.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181531116284708.png" width="244" height="143"></a></p> <p>然后，在Windows中也可以很简单地运行下面这样的命令进行编译和运行</p> <p>cargo build</p> <p>cargo run</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181531133786906.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181531152225375.png" width="244" height="125"></a></p> <p>&nbsp;</p> <p>需要注意的是，目前Windows XP及以下的版本是不支持rust编译出来的程序的（至少是有各种问题的），尝试运行上面编译出来的程序会遇到下面的错误</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181535307385614.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181535329567970.png" width="244" height="60"></a></p>]]></description></item><item><title>Rust初步（一）：介绍</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739105.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Aug 2015 04:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739105.html</guid><description><![CDATA[<p>最近在研究Rust这个新的语言。那么Rust是什么呢？</p> <blockquote> <p>Rust是一个注重安全与速度的<strong>现代系统编程语言</strong>，通过在<font color="#ff0000"><strong>没有垃圾回收</strong></font>的情况下<font color="#ff0000"><strong>保证内存安全</strong></font>来实现它的目标，这使它成为一个在很多其它语言不适合的用例中大展身手的语言：嵌入到其它语言中，在特定的时间和空间要求下编程，和编写底层代码，例如设备驱动和操作系统。它通过一系列的<font color="#ff0000"><strong>不产生运行时开销</strong></font>的编译时安全检查来提升目前语言所关注的领域，同时消除一切数据竞争。Rust同时也意在实现“零开销抽象”，即便在这些抽象看起来比较像一个高级语言的特性。即便如此，Rust也允许你像一个底层语言那样进行精确的控制。</p></blockquote> <p>Rust的核心卖点是：</p> <ol> <li><strong><font color="#ff0000">效率高</font></strong>（目标是超越C++，逼近C），这得益于它的“没有垃圾回收机制”，“没有运行时”</li> <li><font color="#ff0000"><strong>内存安全</strong></font>，这似乎和上面这一点相悖，但他声称做到了。还没有机会看代码，不知道他是怎么做到的。</li> <li><strong><font color="#ff0000">开源</font></strong>+社区支持 <a title="https://github.com/rust-lang/rust" href="https://github.com/rust-lang/rust">https://github.com/rust-lang/rust</a> ，生态平台 <a title="https://crates.io/" href="https://crates.io/">https://crates.io/</a></li></ol> <p>&nbsp;</p> <p>Rust有一定的学习曲线（不是很容易学），不过值得一试</p> <p>&nbsp;</p> <p>官方网站：<a title="https://www.rust-lang.org/" href="https://www.rust-lang.org/">https://www.rust-lang.org/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181254266758974.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181254274569101.png" width="244" height="132"></a></p> <p>官方社区 <a title="https://crates.io/" href="https://crates.io/">https://crates.io/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181301466606989.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181301475194859.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>中文的社区 <a title="http://rust.cc/" href="http://rust.cc/">http://rust.cc/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181254339725510.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181254344727424.png" width="244" height="132"></a></p> <p>&nbsp;</p> <p>官方的文档 <a title="https://doc.rust-lang.org/stable/book/" href="https://doc.rust-lang.org/stable/book/">https://doc.rust-lang.org/stable/book/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181254415812420.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181254421755306.png" width="244" height="132"></a></p> <p>中文的文档，有几本，但下面这本最好</p> <p><a title="http://kaisery.gitbooks.io/rust-book-chinese/content/" href="http://kaisery.gitbooks.io/rust-book-chinese/content/">http://kaisery.gitbooks.io/rust-book-chinese/content/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181254452694059.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181254459102931.png" width="244" height="132"></a></p>]]></description></item><item><title>通过SSH连接linux服务器</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739090.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Aug 2015 04:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/08/18/4739090.html</guid><description><![CDATA[<p>SSH 为 <a href="http://baike.baidu.com/view/2118359.htm">Secure Shell</a> 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为<a href="http://baike.baidu.com/view/59099.htm">远程登录</a>会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括<a href="http://baike.baidu.com/view/58963.htm">HP-UX</a>、<a href="http://baike.baidu.com/view/1634.htm">Linux</a>、<a href="http://baike.baidu.com/view/349664.htm">AIX</a>、<a href="http://baike.baidu.com/subview/329359/5113665.htm">Solaris</a>、<a href="http://baike.baidu.com/view/428214.htm">Digital</a> <a href="http://baike.baidu.com/view/8095.htm">UNIX</a>、<a href="http://baike.baidu.com/view/3373083.htm">Irix</a>，以及其他平台，都可运行SSH。</p> <p><a title="http://baike.baidu.com/subview/16184/5909252.htm" href="http://baike.baidu.com/subview/16184/5909252.htm">http://baike.baidu.com/subview/16184/5909252.htm</a>&nbsp;</p> <p>&nbsp;</p> <p>如果是要终端访问，用的最多的应该是putty（跨平台）</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244298637003.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244310503774.png" width="244" height="235"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244321443872.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244328317729.png" width="244" height="206"></a></p> <p>&nbsp;</p> <p>要传递文件的话，可以使用FileZallia这个软件（跨平台的）</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244362693912.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244370192283.png" width="244" height="199"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244406281882.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244410817809.png" width="244" height="126"></a></p> <p>在Windows上面的话，可以使用WinSCP</p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244421134394.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244457069762.png" width="244" height="165"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201508/181244501915759.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201508/181244506442687.png" width="244" height="132"></a></p>]]></description></item><item><title>使用Windows Service Wrapper快速创建一个Windows Service</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/07/30/4688051.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 29 Jul 2015 22:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/07/30/4688051.html</guid><description><![CDATA[<h1>前言</h1> <p>今天介绍一个小工具的使用。我们都知道Windows Service是一种特殊的应用程序，它的好处是可以一直在后台运行，相对来说，比较适合一些需要一直运行同时不需要过多用户干预的应用程序，这一类我们称之为“服务”吧</p> <p>编写Windows Service其实是不难的，尤其是如果有Visual Studio的话。但是仍然是有不少童鞋觉得略显繁琐，同时，如果有一些其他的程序，我们只拿到一个exe，或者一个bat，但又想让他象服务一样运行，怎么办呢</p> <p>答案就是可以使用如下的一个工具，它的名称就叫：Windows Service Wrapper，简称WSW。</p> <h1>wsw的基本使用</h1> <p>一般的使用步骤是：</p> <p>1. 下载wsw的最新版本，放在任意的位置，修改成你想要的任何名字</p> <p>2.编写一个同名的xml文件</p> <p>3.使用Install命令进行安装</p> <p>4.如果想要卸载，则使用Uninstall命令</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><a title="https://kenai.com/projects/winsw/pages/Home" href="https://kenai.com/projects/winsw/pages/Home">https://kenai.com/projects/winsw/pages/Home</a></p> <p>This project creates a wrapper executable that can be used to host any executable as an Windows service. <h3><a name="Download"></a>Download</h3> <p><a href="http://maven.dyndns.org/2/com/sun/winsw/winsw/">The binaries are available here</a> for download. <h3><a name="Usage"></a>Usage</h3> <p>During your development... <ol> <li>Take <code>winsw.exe</code> from the distribution, and rename it to your taste (such as <code>myapp.exe</code>)  <li>Write <code>myapp.xml</code> (see <a href="https://kenai.com/projects/winsw/pages/ConfigurationSyntax">Configuration Syntax</a> for more details)  <li>Place those two files side by side when you deploy your application, because that's how <code>winsw.exe</code> discovers its configuration.</li></ol> <p>At runtime... <ul> <li>To install a service, run <code>myapp.exe install</code> <li>To start a service, run <code>myapp.exe start</code> <li>To stop a service, run <code>myapp.exe stop</code> <li>To restart a service, run <code>myapp.exe restart</code> <li>To uninstall a service, run <code>myapp.exe uninstall</code></li></ul> <p>When there's a problem, these commands also report an error message to stderr. On a successful completion, these commands do no produce any output and exit with 0. <p>In addition, you can also run <code>myapp.exe status</code> to have it print out the current status of the service to stdout. Again, any error encountered during the processing would cause output to be reported to stderr. <p>All these commands use the same set of <a href="https://kenai.com/projects/winsw/pages/ExitCode">exit code</a> to indicate its result. <h4><a name="Deferred_File_Operations"></a>Deferred File Operations</h4> <p>To support self updating services, winsw offers a mechanism to perform file operations before a service start up. This is often necessary because Windows prevents files from overwritten while it's in use. <p>To perform file operations, write a text file (in the UTF-8 encoding) at <code>myapp.copies</code> (that is, it's in the same directory as<code>myapp.xml</code> but with a different file extension), and for each operation add one line: <ul> <li>To move a file, write "src&gt;dst". If the 'dst' file already exists it will be overwritten.</li></ul> <p>The success or failure of these operations will be recorded in the event log. <h3><a name="Contributions_Welcome"></a>Contributions Welcome</h3> <p>If you are interested in joining the project, let me know. I'm always interested in more committers. <p>&nbsp; <p>&nbsp; <p>配置文件的格式请参考：<a title="https://kenai.com/projects/winsw/pages/ConfigurationSyntax" href="https://kenai.com/projects/winsw/pages/ConfigurationSyntax">https://kenai.com/projects/winsw/pages/ConfigurationSyntax</a>&nbsp; <p>我的一个例子如下 <p><a href="http://images0.cnblogs.com/blog/9072/201507/300642185173049.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/300642210951361.png" width="244" height="200"></a> <p>运行install后，在services.msc中可以看到这个服务</p> <p><a href="http://images0.cnblogs.com/blog/9072/201507/300642235951931.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/300642254548330.png" width="244" height="180"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201507/300642270486044.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/300642289231971.png" width="217" height="244"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>相关知识</h1> <p>在Windows系统里面，还有一类特殊的服务，他们都是用一个特殊的程序启动的（svchost），如下</p> <p><a href="http://images0.cnblogs.com/blog/9072/201507/300642303455268.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/300642324548125.png" width="217" height="244"></a></p> <p>那么，这又是怎么一回事情呢？有兴趣的童鞋可以参考&nbsp; <a title="http://www.howtogeek.com/howto/windows-vista/what-is-svchostexe-and-why-is-it-running/" href="http://www.howtogeek.com/howto/windows-vista/what-is-svchostexe-and-why-is-it-running/">http://www.howtogeek.com/howto/windows-vista/what-is-svchostexe-and-why-is-it-running/</a></p> <p>&nbsp;</p> <p>在Linux系统上面，也有一个类似的工具（而且更加强大），supervisor，有兴趣的童鞋可以参考</p> <p><a title="http://supervisord.org/introduction.html" href="http://supervisord.org/introduction.html">http://supervisord.org/introduction.html</a></p>]]></description></item><item><title>在ubuntu上面配置nginx实现反向代理和负载均衡</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/07/29/4687290.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 29 Jul 2015 12:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/07/29/4687290.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/p/4684260.html">上一篇</a>文章（<a title="http://www.cnblogs.com/chenxizhang/p/4684260.html" href="http://www.cnblogs.com/chenxizhang/p/4684260.html">http://www.cnblogs.com/chenxizhang/p/4684260.html</a>），我做了一个实验，就是利用Visual Studio，基于Nancy框架，开发了一个自托管（Self-hosting）的应用程序，然后将其部署到了一台Ubuntu的虚拟机上面，通过mono将其顺利地运行了起来，这样也就实现了.NET应用程序在Liunx系统上面的移植。</p> <p>这一篇要讲解的是进一步的实验，我们都知道Nginx这款服务器，它可以用来做反向代理服务器，也可以做负载均衡。</p> <p>关于nginx(要读成 engine x)，有兴趣的朋友可以多看一下官方网站：<a title="http://nginx.org/" href="http://nginx.org/">http://nginx.org/</a>&nbsp;</p> <h1>通过Nginx做反向代理</h1> <p>首先，需要安装nginx</p><pre><code>sudo apt-get install nginx</code></pre><pre><code>然后，需要对Nginx进行配置</code></pre><pre><code></code><code>cd /etc/nginx/sites-available/</code></pre><pre><code>这个目录下面默认会有一个default的配置文件，内容如下</code></pre><pre><a href="http://images0.cnblogs.com/blog/9072/201507/292049111571189.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049118291817.png" width="244" height="132"></a></pre><pre>它是在80端口进行监听。你可以直接修改这个文件，例如我上图中其实已经设置了将所有请求转发（proxy_pass）到之前我们启动的那个网站（8888端口）。</pre><pre>我们也可以自己创建一个独立的配置文件，另外指定一个端口</pre>
<p>cat &gt; nancydemo</p>
<p>然后输入如下的内容</p>
<p>&nbsp;</p>
<p>server {<br>&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#ff0000">81;</font><br>&nbsp;&nbsp;&nbsp; server_name&nbsp; yourdomainname.com;<br>&nbsp;&nbsp;&nbsp; root /var/www/nancydemo;</p>
<p>&nbsp;&nbsp;&nbsp; location /Content/ {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias /var/www/nancydemo/Content/;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location ~*&nbsp; \.(jpg|jpeg|png|gif|ico|css|js|ttf)$ {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expires 365d;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; location / {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://127.0.0.1:8888<a href="http://;">;</a><br>&nbsp;&nbsp;&nbsp; }<br>}<br></p>
<p>按下CTRL +D保存这个文件，然后重新加载一下配置信息，就可以在81端口访问到原先8888端口的内容了</p>
<p>sudo /etc/init.d/nginx reload</p>
<p>&nbsp;</p>
<p>有童鞋可能会问了，为什么要这么麻烦呢？用户直接访问8888端口不就好了吗？通过访问81然后再访问8888端口，这样会不会有性能下降呢？</p>
<p>其实呢，这个问题的关键在于你要理解什么叫反向代理。反向代理一方面隐藏了真正的服务器信息（例如地址），另外，还可能带来更加快的访问速度。</p>
<p><br>&nbsp;</p>

<h1>直接访问（端口8888）以及通过代理（端口81）访问的压力测试结果</h1>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/292049127983888.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049135016272.png" width="244" height="153"></a></p>
<p>&nbsp;</p>
<h1>启用两台Web服务器，通过nginx做负载均衡</h1>
<p>nginx不仅仅可以作为反向代理服务器，而且也是一款很出色的负载均衡服务器。为了做这个实验，我在服务器端分别用之前写好的程序，启动了两个网站，端口分别为8888和9999。</p>
<p>接下来介绍一下，如何配置nginx使其可以实现负载均衡。方法很简单，我们需要编辑nancydemo这个配置文件（请注意红色标出的部分）</p>
<p><br><strong><font color="#ff0000">upstream xizhang{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server 127.0.0.1:8888;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server 127.0.0.1:9999;</font></strong></p>
<p><strong><font color="#ff0000">}</font></strong><br>server {<br>&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 81;<br>&nbsp;&nbsp;&nbsp; server_name&nbsp; yourdomainname.com;<br>&nbsp;&nbsp;&nbsp; root /var/www/nancydemo;</p>
<p>&nbsp;&nbsp;&nbsp; location /Content/ {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias /var/www/nancydemo/Content/;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location ~*&nbsp; \.(jpg|jpeg|png|gif|ico|css|js|ttf)$ {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expires 365d;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; location / {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><font color="#ff0000">proxy_pass </font></strong><a href="http://xizhang;"><strong><font color="#ff0000">http://xizhang;</font></strong></a><br>&nbsp;&nbsp;&nbsp; }<br>}<br><br></p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/292049140954457.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049147353328.png" width="244" height="163"></a></p>
<p>配置完成之后，我们需要重新加载一下配置信息</p>
<p><strong><font color="#ff0000">sudo /etc/init.d/nginx reload</font></strong></p>
<p>&nbsp;</p>
<p>测试结果表明每秒请求数明显上升</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/292049160328598.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049175958853.png" width="244" height="147"></a></p>
<p>我们可以在服务器中看到有两个nginx进程，以及mono的进程。</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/292049215178422.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049223296009.png" width="244" height="132"></a></p>



<p>关于使用nginx实现负载均衡，还有一些细节，有兴趣可以参考 <a title="http://nginx.org/en/docs/http/load_balancing.html" href="http://nginx.org/en/docs/http/load_balancing.html">http://nginx.org/en/docs/http/load_balancing.html</a></p>
<p>&nbsp;</p>
<p>nginx还可以作为静态资源服务器，实现动静分离（并且可以缓存起来），进一步提高Web服务器的性能和吞吐量。这个话题就不过多展开了，有兴趣的朋友们可以参考官方的文档</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/292049240323222.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/292049253601249.png" width="244" height="135"></a></p>]]></description></item><item><title>在Linux中运行Nancy应用程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/07/28/4684260.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 28 Jul 2015 12:31:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/07/28/4684260.html</guid><description><![CDATA[<p>最近在研究如何将.NET应用程序移植到非Windows操作系统中运行，逐渐会写一些文章出来。目前还没有太深的研究，所以这些文章大多主要是记录我的一些实验。</p> <p>这篇文章记录了我如何利用NancyFx编写一个自托管（Self-host）的应用程序，并且将其发布到Linux系统中。</p> <p>&nbsp;</p> <h1>什么是NancyFx？</h1> <p>简单地说，这真是一个神奇的框架。它给自己的定义是：lightweigh web framework for .NET。不用不知道，一用吓一跳哈</p> <p><a title="http://nancyfx.org/" href="http://nancyfx.org/">http://nancyfx.org/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201507/282031087031238.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031092191679.png" width="244" height="132"></a></p> <p>与微软官方的ASP.NET MVC或者ASP.NET Web API这种框架来比较，它确实是轻量级的。简单易用，而且基于模块化的设计，也确实有些自己的 特点。它实现了OWIN，所以可以托管在IIS，或者其他任何的程序里面。</p> <p>闲话少说，我们可以快速开发一个范例程序。</p> <h1>创建一个自托管的Web应用程序</h1> <p>我这里使用的是Visual Studio 2013，创建了一个最简单的Console Application，命令为 ConsoleApplicationNancy </p> <p>添加两个包的引用</p><pre><code>Install-Package Nancy.Hosting.Self
Install-Package Mono.Posix</code></pre><pre><code>在Program.cs文件的Main方法中添加如下代码</code></pre><pre class="csharpcode"><span class="kwrd">using</span> Mono.Unix;
<span class="kwrd">using</span> Mono.Unix.Native;
<span class="kwrd">using</span> Nancy.Hosting.Self;
<span class="kwrd">using</span> System;

<span class="kwrd">namespace</span> ConsoleApplicationNancy
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            var uri = <span class="str">"http://localhost:8888"</span>;
            Console.WriteLine(<span class="str">"Nancy on :"</span> + uri);
            var host = <span class="kwrd">new</span> NancyHost(<span class="kwrd">new</span> Uri(uri));
            host.Start();

            <span class="kwrd">if</span> (Type.GetType(<span class="str">"Mono.Runtime"</span>) != <span class="kwrd">null</span>)
            {
                UnixSignal.WaitAny(<span class="kwrd">new</span>[]{
                   <span class="kwrd">new</span> UnixSignal(Signum.SIGINT),
                   <span class="kwrd">new</span> UnixSignal(Signum.SIGTERM),
                   <span class="kwrd">new</span> UnixSignal(Signum.SIGQUIT),
                   <span class="kwrd">new</span> UnixSignal(Signum.SIGHUP)
                });
            }
            <span class="kwrd">else</span>
            {
                Console.Read();
            }

            Console.WriteLine(<span class="str">"Stopping Nancy"</span>);
            host.Stop();
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<font face="Courier New"></font></p>
<p><font face="Courier New">这段代码的意思是指，要在本地机器上面的8888端口启动一个NancyHost进行监听，并且如果检测到Mono运行环境的话，还要添加一些特的监听信号的功能。</font></p>
<p>接下来我们需要添加一个具体处理清楚的模块，NancyFx中的模块就是一个最普通的class文件，只要继承NancyModule就可以了。而且每个模块可以注册自己的路径解析规则。</p><pre class="csharpcode"><span class="kwrd">using</span> Nancy;

<span class="kwrd">namespace</span> ConsoleApplicationNancy
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloModule:NancyModule
    {
        <span class="kwrd">public</span> HelloModule()
        {
            Get[<span class="str">"/"</span>] = parameters =&gt; <span class="str">"Hello,Nancy......"</span>;
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>现在就可以按下F5进行调试了。请注意，要将VisualStudio用管理员身份打开，因为这里涉及到了端口监听。</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031095782337.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031100165035.png" width="244" height="161"></a></p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031105311179.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031110946605.png" width="244" height="126"></a></p>
<p>很神奇的，不是吗？ 如果我们希望这个程序可以在非Windows操作系统（如Linux）中运行，是不是更有意思呢？</p>
<p>&nbsp;</p>
<h1>在Linux中运行Nancy应用程序</h1>
<p>我这里做实验用的是Ubuntu 15.04 LTS。</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031115478235.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031120638676.png" width="244" height="155"></a></p>
<p>&nbsp;</p>
<p>为了在Linux中运行.NET的应用程序，目前需要首先安装Mono（很佩服这个项目组）。目前微软自己也在开发.NET Core，但还没有全部完成。</p>
<p>使用下面的命令可以很方便地安装mono（一句一句地执行）</p><pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
sudo apt-get update
sudo apt-get install mono-complete</code></pre>
<p>通过mono –V 可以查看当前安装的mono的版本</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031125943348.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031136566390.png" width="244" height="155"></a></p>
<p>&nbsp;</p>
<p>接下来就是要将我们编译好的程序上传到我的服务器上面去了</p>
<p>首先，我在服务器上面创建了一个目录 /var/www/nancydemo，并且分配了必要的权限（可写入，可执行）</p>
<p>然后通过winSCP这个工具，将编译结果上传到该目录</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031143287018.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031149229904.png" width="244" height="132"></a></p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031155168088.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031161888716.png" width="244" height="155"></a></p>
<p>通过mono ConsoleApplicationNancy.exe 这样的指令就可以基于mono框架启动我们的应用程序了</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031167193387.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031170942573.png" width="244" height="155"></a></p>
<p>然后，我们就可以通过以下的方式进行访问了</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031175632730.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031181887372.png" width="244" height="126"></a></p>
<p>看起来确实很不错，不是吗？没想到.NET应用程序可以这么简单地迁移到Linux中来运行吧？这个得感谢mono。没想到网站可以这么容易编写吧？这个得好好研究Nancy啊</p>
<p>不过，这样启动应用程序有一个问题，就是只要我的控制台被关闭，那么网站也就关闭了。有没有什么办法让这个程序一直运行呢？</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031187667029.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031191882200.png" width="244" height="126"></a></p>
<h1></h1>
<h1>使用supervisor将这个程序一直在后台执行</h1>
<p>首先，使用下面的命令安装supervisor</p><pre><code>apt-get install supervisor</code></pre><pre><code>创建一个配置文件 /etc/supervisor/conf.d/nancydemo.conf  </code></pre><pre><code>在文件中输入如下的内容，并保存</code></pre><pre><code></code><code>[program:nancydemo]
command=mono ConsoleApplicationNancy.exe  -d
user=www-data
stderr_logfile = /var/log/supervisor/nancydemo-err.log
stdout_logfile = /var/log/supervisor/nancydemo-stdout.log
directory=/var/www/nancydemo/</code></pre>
<p>然后，使用下面的命令切换到supervisor命令行</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031196106371.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031199692328.png" width="244" height="155"></a></p>
<p>最后，启动nancydemo这个应用程序吧</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031205476686.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031213286813.png" width="244" height="155"></a></p>










<p>这样的话，就算我们的控制台被关闭了，网站将一直在后台运行</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031219066470.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031224381141.png" width="244" height="126"></a></p>
<p>&nbsp;</p>
<p>如果什么时候想要停止nancydemo这个应用，可以使用下面的方式</p>
<p><a href="http://images0.cnblogs.com/blog/9072/201507/282031227971799.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201507/282031233443997.png" width="244" height="155"></a></p>]]></description></item><item><title>医疗行业信息化学习资源</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/07/16/4651038.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 16 Jul 2015 05:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/07/16/4651038.html</guid><description><![CDATA[<p>这是我经过一段时间摸索和总结出来一个学习资源列表，可以作为医疗行业信息化工作者参考，对于想要进入这个行业的朋友来说，应该是会帮助的</p> <p>陈希章&nbsp; 2015年7月16日</p> <p>&nbsp;</p> <h1>网站</h1> <blockquote> <p>1. A+医学百科<a href="http://www.a-hospital.com/w/%E9%A6%96%E9%A1%B5">http://www.a-hospital.com/w/%E9%A6%96%E9%A1%B5</a> <p>2. 论文搜索 <a href="http://lib.cqvip.com/ZK/search.aspx">http://lib.cqvip.com/ZK/search.aspx</a> <p>3. 中国数字医疗网 <a href="http://www.hc3i.cn/">http://www.hc3i.cn/</a> <p>4. HIT专家网<a href="http://www.hit180.com/">http://www.hit180.com/</a> <p>5. 健康界<a href="http://www.cn-healthcare.com/">http://www.cn-healthcare.com/</a> <p>6. 丁香园论坛<a href="http://www.dxy.cn/bbs/index.html">http://www.dxy.cn/bbs/index.html</a></p></blockquote> <h1>微信公众号</h1> <blockquote> <p>1. 丁香园 <p>2. HC3i中国数字医疗网 <p>3. 医疗人脉 <p>4. 中国信息界e医疗</p></blockquote> <h1>书籍</h1> <p><b> <hr align="left" size="2" width="100%"> </b> <h2>技术类</h2> <blockquote> <p>1. 普通高等教育医药类院校"十二五"规划•信息技术类:医院信息系统教程 <p>2. 实用医学信息学</p></blockquote> <h2>管理类</h2> <blockquote> <p>1. 揭秘美国医疗制度及其相关行业 <p>2. 撬动医院的杠杆:经营管理的变革与创新 <p>3. 公共卫生硕士(MPH)系列教材•医院管理理论与方法 <p>4. 现代医院服务流程与质量评价 <p>5. 现代医院门诊流程管理 <p>6. 《绩效革命》大型医院绩效改革全案 <p>7. 医院管理学:人力资源管理分册(第2版)</p></blockquote> <h2>人文类</h2> <blockquote> <p>1. 日瓦戈医生 (二十世纪外国文学精选)  <p>2. 做生命的旁观者:蒙田随笔 <p>3. 医学是科学吗:医学人文对话录 <p>4. 医学是什么 (未名·自然科学是什么) <p>5. 因为是医生 <p>6. 大医院 (悬疑世界系列图书)  <p>7. 中国人的病与药:来自北大医学部的沉思 <p>8. 魔山（托马斯.曼） <p>9. 鼠疫（阿尔贝.加缪） <p>10. 妞妞：一个父亲的札记 <p>11. 死屋手记 <p>12. 一个中国人在中国的遭遇</p></blockquote> <h2>其他类</h2> <blockquote> <p>1. 医改，正在进行时 (景惠医院管理书系)  <p>2. 医改为什么这么难 <p>3. 定位:有史以来对美国营销影响最大的观念 (特劳特经典丛书)  <p>4. 移动医疗 <p>5. 企业架构:价值网络时代企业成功的运营模式 <p>6. 互联网思维独孤九剑 <p>7. 我的互联网方法论</p></blockquote> <h2>开发工具书</h2> <blockquote> <p>1. PowerBuilder数据库开发经典实例精解（陈永强，李茜，詹红霞，机械工业出版社） <p>2. PowerBuilder高级编程及其项目应用开发（陈刚，董威，李存斌，中国水利水电出版社） <p>3. Oracle 8i数据库高级应用开发技术（袁鹏飞，人民邮电出版社） <p>4. Oracle 8i数据库开发技术与技巧（Scherer.D，机械工业出版社） <p>5. Visual C#网络编程（郑阿奇，电子工业出版社） <p>6. jQuery实战（Bear Bibeault,人民邮电出版社） <p>7. Javascript和jQuery实战手册（David Sawyer McFarland，机械工业出版社） <p>8. 基于三层架构的ASP.NET项目实战教程（密君英，中国电力出版社） <p>9. ASP.NET 4.0从入门到精通（张正礼，清华大学出版社） <p>10. C#高级编程，第七版（Christian Nagel，清华大学出版社） <p>11. Oracle数据库精讲与疑难解析（赵振平，电子工业出版社） <p>12. PowerBuilder实用教程（郑阿奇，电子工业出版社） <p>13. 软件体系结构（张友生，清华大学出版社） <p>14. 软件工程（张海藩，清华大学出版社）</p></blockquote>]]></description></item><item><title>Windows Live Writer 的昨日荣光</title><link>http://www.cnblogs.com/chenxizhang/archive/2015/06/22/4593014.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 22 Jun 2015 02:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2015/06/22/4593014.html</guid><description><![CDATA[<p>今天这一篇文章，想写一写Windows Live Writer这款博客编辑器（最早的一个版本是2007年发布的）。毫不夸张地说，这是为数不多的几款所见即所得的编辑器之一，当然，它的运行速度慢也是一个众所周知的问题。作为一个程序员（如果能这么自称的话），我一直不理解，为什么这么一款工具不能做得更好一些，尤其是以微软这样的实力来说。</p> <p>【备注】我的大部分博客文章都是用Windows Live Writer写成的，可以说是有很深的感情的呢</p> <p><a href="http://images0.cnblogs.com/blog/9072/201506/221058311276437.png"><img title="Untitled" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Untitled" src="http://images0.cnblogs.com/blog/9072/201506/221058320805279.png" width="244" height="205"></a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201506/221058371272405.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201506/221058383306703.png" width="244" height="132"></a></p> <p>这是一个基于.NET编写的工具。难不成微软是想证明.NET编写的工具就是慢么？当然不应该是这样的。原因可能只有一个，就是：不重视。随便举个例子，Fiddler是另外一款用.NET编写的神器，无论从用户体验，还是性能方面来说，都是一流的。</p> <p><a href="http://images0.cnblogs.com/blog/9072/201506/221058401749873.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201506/221058408773259.png" width="244" height="161"></a></p> <p>&nbsp;</p> <p>今年的6月，有一个消息说是微软准备将这个工具开源</p> <p><a title="http://winsupersite.com/software-development/microsoft-open-source-windows-live-writer" href="http://winsupersite.com/software-development/microsoft-open-source-windows-live-writer">http://winsupersite.com/software-development/microsoft-open-source-windows-live-writer</a></p> <p>我觉得这当然是不坏的消息，下面有一个网络帖子，在收集大家的签名，表示要让Windows Live Writer活下来</p> <p><a title="http://www.petitionbuzz.com/petitions/dontkillwlw" href="http://www.petitionbuzz.com/petitions/dontkillwlw">http://www.petitionbuzz.com/petitions/dontkillwlw</a></p> <p>其实，如果是好产品，应该更加主动地拥抱用户，主动地改变，希望微软在这方面能做出更大的努力。开源也好，不开源也罢，这不是关键。目前也还能用，虽然是凑合。</p> <p>&nbsp;</p> <p>最后，我想说作为资深的用户，提示大家两点</p> <p>1. 安装完之后，可以设置一些Ping服务器，以便你的博客文章更快地通知到有关的搜索引擎或者内容网站</p> <p><a title="https://grafikdesign.wordpress.com/2009/11/10/pinging/" href="https://grafikdesign.wordpress.com/2009/11/10/pinging/">https://grafikdesign.wordpress.com/2009/11/10/pinging/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201506/221058436116056.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201506/221058455491199.png" width="242" height="244"></a></p> <p>2. 我最常用的一个插件Insert code</p> <p><a title="http://insertcode.codeplex.com/" href="http://insertcode.codeplex.com/">http://insertcode.codeplex.com/</a></p> <p><a href="http://images0.cnblogs.com/blog/9072/201506/221058472052425.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images0.cnblogs.com/blog/9072/201506/221058479396567.png" width="225" height="244"></a></p>]]></description></item><item><title>读书笔记：李叔同，说佛（上），为人十训</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/09/12/3968248.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 12 Sep 2014 05:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/09/12/3968248.html</guid><description><![CDATA[<p>
 </p><p>李叔同 (2012-11-23). 说佛（上） (Kindle Locations 628-630).  . Kindle Edition.
</p><p>
 </p><p><span style="font-size:24pt"><strong>为人十训
</strong></span></p><p><strong>这是我在车上看书印象比较深刻的一段，我不敢说对佛学有多了解，但对于书中所提到的理念，则深以为然。如能做到如下十点，是自在人也。做不到全部的，也可以参考这样的标准约束自己，实现境界的提高。
</strong></p><p>
 </p><p>1、 <span style="color:red"><strong>虚心</strong></span>　常人不解善恶，不畏因果，决不承认自己有过，更何论改？但古圣贤则不然。今举数例：孔子曰："五十以学易，可以无大过矣。"又曰："闻义不能徙，不善不能改，是吾忧也。"蘧伯玉为当时之贤人，彼使人于孔子。孔子与之坐而问焉，曰："夫子何为？"对曰："夫子欲寡其过而未能也。"圣贤尚如此虚心，我等可以贡高自满乎！ 
</p><p>
 </p><p>2、 <span style="color:red"><strong>慎独</strong></span>　吾等凡有所作所为，起念动心，佛菩萨乃至诸鬼神等，无不尽知尽见。若时时作如是想，自不敢胡作非为。曾子曰："十目所视，十手所指，其严乎！"又引《诗》云："战战兢兢，如临深渊，如履薄冰。"此数语为余所常常忆念不忘者也。 
</p><p>
 </p><p>3、 <span style="color:red"><strong>宽厚</strong></span>　造物所忌，曰刻曰巧。圣贤处事，惟宽惟厚。古训甚多，今不详录。 
</p><p>
 </p><p>4、 <span style="color:red"><strong>吃亏</strong></span>　古人云："我不识何等为君子，但看每事肯吃亏的便是。我不识何等为小人，但看每事好便宜的便是。"古时有贤人某临终，子孙请遗训，贤人曰："无他言，尔等只要学吃亏。" 
</p><p>
 </p><p>5、 <span style="color:red"><strong>寡言</strong></span>　此事最为紧要。孔子云："驷不及舌。"可畏哉！古训甚多，今不详录。 
</p><p>
 </p><p>6、 <span style="color:red"><strong>不说人过</strong></span>　古人云："时时检点自己且不暇，岂有功夫检点他人。"孔子亦云："躬自厚而薄责于人。"以上数语，余常不敢忘。 
</p><p>
 </p><p>7、 <span style="color:red"><strong>不文己过</strong></span>　子夏曰："小人之过也必文。"我众须知文过乃是最可耻之事。 
</p><p>
 </p><p>8、 <span style="color:red"><strong>不覆己过</strong></span>　我等倘有得罪他人之处，即须发大惭愧，生大恐惧。发露陈谢，忏悔前愆。万不可顾惜体面，隐忍不言，自诳自欺。 
</p><p>
 </p><p>9、 <span style="color:red"><strong>闻谤不辩</strong></span>　古人云："何以息谤？曰：无辩。"又云："吃得小亏，则不至于吃大亏。"余三十年来屡次经验，深信此数语真实不虚。
</p><p>
 </p><p>10、 <span style="color:red"><strong>不瞋</strong></span>　瞋习最不易除。古贤云："二十年治一怒字，尚未消磨得尽。"但我等亦不可不尽力对治也。《华严经》云："一念心，能开百万障门。"可不畏哉！
</p>]]></description></item><item><title>使用Expression Tree构建动态LINQ查询</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3916630.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 16 Aug 2014 09:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3916630.html</guid><description><![CDATA[<p>这篇文章介绍一个有意思的话题，也是经常被人问到的：如何构建动态LINQ查询？所谓动态，主要的意思在于查询的条件可以随机组合，动态添加，而不是固定的写法。这个在很多系统开发过程中是非常有用的。
</p><p>我这里给的一个解决方案是采用Expression Tree来构建。
</p><p>其实这个技术很早就有，在.NET Framework 3.5开始引入。之前也有不少同学写过很多不错的理论性文章。我自己当年学习这个，觉得最好的几篇文章是由"装配脑袋"同学写的。【有时间请仔细阅读这些入门指南，做点练习基本就能理解】
</p><p><a href="http://www.cnblogs.com/Ninputer/archive/2009/08/28/expression_tree1.html" target="_blank"><h2><span style="color:#cc0000; font-family:微软雅黑; font-size:13pt; text-decoration:underline">Expression<span style="color:#600090"> Tree上手指南 （一） - <span style="color:#cc0000">装配脑袋<span style="color:#600090"> - 博客园</span></span></span></span></h2></a><h2><span style="color:#333333; font-family:微软雅黑; font-size:13pt">
			</span></h2></p><p><a href="http://kb.cnblogs.com/a/1557160/" target="_blank"><h2><span style="color:#cc0000; font-family:微软雅黑; font-size:13pt; text-decoration:underline">Expression<span style="color:#600090"> Tree 上手指南 （二） - <span style="color:#cc0000">装配脑袋<span style="color:#600090"> - 博客园</span></span></span></span></h2></a><h2><span style="color:#333333; font-family:微软雅黑; font-size:13pt">
			</span></h2></p><p><a href="http://www.cnblogs.com/Ninputer/archive/2009/09/08/1562425.html" target="_blank"><h2><span style="color:#cc0000; font-family:微软雅黑; font-size:13pt; text-decoration:underline">Expression<span style="color:#600090"> Tree 上手指南 （三） - <span style="color:#cc0000">装配脑袋<span style="color:#600090"> - 博客园</span></span></span></span></h2></a><h2><span style="color:#333333; font-family:微软雅黑; font-size:13pt">
			</span></h2></p><p>
 </p><p>我下面给出的这个实例，希望能帮助大家更加深入理解这个技术，并且结合常见的LINQ to SQL来实现动态的查询。
</p><p>下面这个查询，大家应该都很眼熟
</p><p><img src="http://images.cnitblog.com/blog/9072/201408/161736446397432.png" alt=""/>
	</p><p>如果我们的条件是固定的，例如上例中，一共有两个条件，而且条件的逻辑判断也都是确定的，那么上面这样写很容易就能得到我们的结果。
</p><p>但，问题是，如果我们的条件不是固定的呢？如果你需要根据用户的选择，然后动态构造一个查询呢？
</p><p>我看过很多人做的一些通用查询界面，为了应对用户希望自主选择条件的这个需求，他们的做法往往就是用"拼接查询字符串"的做法来实现。这种方法勉强能实现要求，但性能和可维护性方面都相当差。
</p><p>如果你了解了Expression Tree，那么上面这个查询可以修改为下面这样：
</p><p><img src="http://images.cnitblog.com/blog/9072/201408/161736455454576.png" alt=""/>
	</p><p>
 </p><p>由此可见，掌握了这个技术的话，那么以后写动态查询应该会如虎添翼，至少多了一种很好的思路。
</p><p>顺便说一下，这个技术和反射有点类似，属于比较底层的技术，掌握了将对大家的编程能力会有所提升。
</p><p>值得一说的是，就算是我们第一种写法，内部的实现也是使用Expression Tree来实现的，有兴趣的同学可以看看如下的IL代码。
</p><p><span style="font-family:Consolas; font-size:10pt">IL_0001:  <span style="color:blue">ldarg.0    </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0002:  <span style="color:blue">call       </span>
			<span style="color:teal">LINQPad.User.TypedDataContext.get_Employees</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0007:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">LINQPad.User.Employees</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_000C:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Type.GetTypeFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0011:  <span style="color:blue">ldstr      </span>
			<span style="color:#dc1414">"x"</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0016:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Parameter</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_001B:  <span style="color:blue">stloc.1    </span>
			<span style="color:#008800">// CS$0$0000</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_001C:  <span style="color:blue">ldloc.1    </span>
			<span style="color:#008800">// CS$0$0000</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_001D:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">LINQPad.User.Employees.EmployeeID</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0022:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Reflection.FieldInfo.GetFieldFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0027:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Field</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_002C:  <span style="color:blue">ldc.i4.5   </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_002D:  <span style="color:blue">box        </span>
			<span style="color:teal">System.Int32</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0032:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">System.Int32</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0037:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Type.GetTypeFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_003C:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Constant</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0041:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.GreaterThan</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0046:  <span style="color:blue">ldloc.1    </span>
			<span style="color:#008800">// CS$0$0000</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0047:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">LINQPad.User.Employees.Title</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_004C:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Reflection.FieldInfo.GetFieldFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0051:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Field</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0056:  <span style="color:blue">ldstr      </span>
			<span style="color:#dc1414">"Sales Representative"</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_005B:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">System.String</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0060:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Type.GetTypeFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0065:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Constant</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_006A:  <span style="color:blue">ldc.i4.0   </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_006B:  <span style="color:blue">ldtoken    </span>
			<span style="color:teal">System.String.op_Equality</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0070:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Reflection.MethodBase.GetMethodFromHandle</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0075:  <span style="color:blue">castclass  </span>
			<span style="color:teal">System.Reflection.MethodInfo</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_007A:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Equal</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_007F:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.AndAlso</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0084:  <span style="color:blue">ldc.i4.1   </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0085:  <span style="color:blue">newarr     </span>
			<span style="color:teal">System.Linq.Expressions.ParameterExpression</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008A:  <span style="color:blue">stloc.2    </span>
			<span style="color:#008800">// CS$0$0001</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008B:  <span style="color:blue">ldloc.2    </span>
			<span style="color:#008800">// CS$0$0001</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008C:  <span style="color:blue">ldc.i4.0   </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008D:  <span style="color:blue">ldloc.1    </span>
			<span style="color:#008800">// CS$0$0000</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008E:  <span style="color:blue">stelem.ref </span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_008F:  <span style="color:blue">ldloc.2    </span>
			<span style="color:#008800">// CS$0$0001</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0090:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Expressions.Expression.Lambda</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_0095:  <span style="color:blue">call       </span>
			<span style="color:teal">System.Linq.Queryable.Where</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_009A:  <span style="color:blue">stloc.0    </span>
			<span style="color:#008800">// query</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_009B:  <span style="color:blue">ldloc.0    </span>
			<span style="color:#008800">// query</span>
		</span></p><p><span style="font-family:Consolas; font-size:10pt">IL_009C:  <span style="color:blue">call       </span>
			<span style="color:teal">LINQPad.Extensions.Dump</span>
		</span></p><p>
 </p>]]></description></item><item><title>读书笔记：季羡林关于如何做研究学问的心得</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3916063.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 16 Aug 2014 01:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3916063.html</guid><description><![CDATA[<p><span style="font-family:宋体">以下的内容摘自：</span>
	</p><p><span style="font-family:宋体">季羡林</span> (2010-02-01). <span style="font-family:宋体">牛棚杂忆</span>(<span style="font-family:宋体">季羡林作品珍藏本</span>)(<span style="font-family:宋体">图文版</span>) (Kindle Locations 2701-2706).  . Kindle Edition.
</p><p>
 </p><p><span style="font-family:宋体">我记得，鲁迅先生在一篇文章中讲了一个笑话：一个江湖郎中在市集上大声吆喝，叫卖治臭虫的妙方。有人出钱买了一个纸卷，层层用纸严密裹住。打开一看，妙方只有两个字：勤捉。你说它不对吗？不行，它是完全对的。但是说了等于不说。我的经验压缩成两个字是勤奋。再多说两句就是：争分夺秒，念念不忘。灵感这东西不能说没有，但是，它不是从天上掉下来的，而是勤奋出灵感。</span>
	</p><p>
 </p><p><span style="font-family:宋体">上面讲的是精神方面的东西，现在谈一点具体的东西。我认为，要想从事科学研究工作，应该在四个方面下工夫：<span style="color:red"><strong>一，理论；二，知识面；三，外语；四，汉语</strong></span>。唐代刘知几主张，治史学要有才、学、识。我现在勉强套用一下，理论属识，知识面属学，外语和汉语属才，我在下面分别谈一谈。</span>
	</p><p>
 </p><ol style="margin-left: 40pt"><li><div><span style="font-family:宋体">理论</span>
			</div><p><span style="font-family:宋体">现在一讲理论，我们往往想到马克思主义。这样想，不能说不正确。但是，必须注意几点。一，马克思主义随时代而发展，决非僵化不变的教条。二，不要把马克思主义说得太神妙，令人望而生畏，对它可以批评，也可以反驳。我个人认为，马克思主义的精髓就是唯物主义和辩证法。唯物主义就是实事求是。把黄的说成是黄的，是唯物主义。把黄的说成是黑的，是唯心主义。事情就是如此简单明了。哲学家们有权力去作深奥的阐述，我辈外行，大可不必。至于辩证法，也可以作如是观。看问题不要孤立，不要僵死，要注意多方面的联系，在事物运动中把握规律，如此而已。我这种幼儿园水平的理解，也许更接近事实真相。除了马克思主义以外，古今中外一些所谓唯心主义哲学家的著作，他们的思维方式和推理方式，也要认真学习。我有一个奇怪的想法：百分之百的唯物主义哲学家和百分之百的唯心主义哲学家，都是没有的。这就是和真空一样，绝对的真空在地球上是没有的。中国古话说："智者千虑，必有一失。"就是这个意思。因此，所谓唯心主义哲学家也有不少东西值得我们学习的。我们千万不要像过去那样把十分复杂的问题简单化和教条化，把唯心主义的标签一贴，就"奥伏赫变"。</span>
			</p></li><li><div><span style="font-family:宋体">知识面</span>
			</div><p><span style="font-family:宋体">要求知识面广，大概没有人反对。因为，不管你探究的范围多么窄狭，多么专门，只有在知识广博的基础上，你的眼光才能放远，你的研究才能深入。这样说已经近于常识，不必再做过多的论证了。我想在这里强调一点，这就是，我们从事人文科学和社会科学研究的人，应该学一点科学技术知识，能够精通一门自然科学，那就更好。今天学术发展的总趋势是，学科界限越来越混同起来，边缘学科和交叉学科越来越多。再像过去那样，死守学科阵地，鸡犬之声相闻，老死不相往来，已经完全不合时宜了。此外，对西方当前流行的各种学术流派，不管你认为多么离奇荒诞，也必须加以研究，至少也应该了解其轮廓，不能简单地盲从或拒绝。</span>
			</p></li><li><div><span style="font-family:宋体">外语</span>
			</div><p><span style="font-family:宋体">外语的重要性，尽人皆知。若再详细论证，恐成蛇足。我在这里只想强调一点：从今天的世界情势来看，外语中最重要的是英语，它已经成为名副其实的世界语。这种语言，我们必须熟练掌握，不但要能读，能译，而且要能听，能说，能写。今天写学术论文，如只用汉语，则不能出国门一步，不能同世界各国的同行交流。如不能听说英语，则无法参加国际学术会议。情况就是如此地咄咄逼人，我们不能不认真严肃地加以考虑。</span>
			</p></li><li><div><span style="font-family:宋体">汉语</span>
			</div><p><span style="font-family:宋体">我在这里提出汉语来，也许有人认为是非常异议可怪之论。"我还不能说汉语吗？""我还不能写汉文吗？"是的，你能说，也能写。然而仔细一观察，我们就不能不承认，我们今天的汉语水平是非常成问题的。每天出版的报章杂志，只要稍一注意，就能发现别字、病句。我现在越来越感到，真要想写一篇准确、鲜明、生动的文章，决非轻而易举。要能做到这一步，还必须认真下点工夫。我甚至想到，汉语掌握到一定程度，想再前进一步，比学习外语还难。只有承认这一个事实，我们的汉语水平才能提高，别字、病句才能减少。</span>
			</p></li></ol><p>
 </p><p><span style="font-family:宋体">我在上面讲了四个方面的要求。其实这些话都属于老生常谈，都平淡无奇。然而真理不往往就寓于平淡无奇之中吗？这同我在上面引鲁迅先生讲的笑话中的"勤捉"一样，看似平淡，实则最切实可行，而且立竿见影。我想到这样平凡的真理，不敢自秘，便写了出来，其意不过如野叟献曝而已。</span>
	</p>]]></description></item><item><title>XML序列化的时候如何支持Namespace</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3915960.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 15 Aug 2014 23:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/08/16/3915960.html</guid><description><![CDATA[<p>我曾经不止一次（当然不仅仅是我意识到这个问题）说到过，XML标准中的Namespace的设计其实是一个较为失败的设计，它有它的优点，但缺点更多。
</p><p><a href="http://zzk.cnblogs.com/s?w=blog%3Achenxizhang+xml+%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;t">http://zzk.cnblogs.com/s?w=blog%3Achenxizhang+xml+%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;t</a>= 
</p><p>这里又有一个范例。我们需要在XML序列化的时候，更加小心地注意namespace的问题。
</p><p>下面有一个例子程序
</p><ol><li><div>数据实体模型（这个类是通过xsd工具自动生成的，具体用途这里就不做展开了
</div><p>//------------------------------------------------------------------------------
</p><p>// &lt;auto-generated&gt;
</p><p>//     This code was generated by a tool.
</p><p>//     Runtime Version:4.0.30319.18444
</p><p>//
</p><p>//     Changes to this file may cause incorrect behavior and will be lost if
</p><p>//     the code is regenerated.
</p><p>// &lt;/auto-generated&gt;
</p><p>//------------------------------------------------------------------------------
</p><p> 
 </p><p>using System.Xml.Serialization;
</p><p> 
 </p><p>// 
</p><p>// This source code was auto-generated by xsd, Version=4.0.30319.33440.
</p><p>// 
</p><p> 
 </p><p> 
 </p><p>/// &lt;remarks/&gt;
</p><p>[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.33440")]
</p><p>[System.SerializableAttribute()]
</p><p>[System.Diagnostics.DebuggerStepThroughAttribute()]
</p><p>[System.ComponentModel.DesignerCategoryAttribute("code")]
</p><p>[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/office/infopath/2003/myXSD/2014-08-15T22:37:24")]
</p><p>[System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/office/infopath/2003/myXSD/2014-08-15T22:37:24", IsNullable=false)]
</p><p>public partial class myFields {
</p><p>    
 </p><p>    private string titleField;
</p><p>    
 </p><p>    private System.Xml.XmlAttribute[] anyAttrField;
</p><p>    
 </p><p>    /// &lt;remarks/&gt;
</p><p>    public string Title {
</p><p>        get {
</p><p>            return this.titleField;
</p><p>        }
</p><p>        set {
</p><p>            this.titleField = value;
</p><p>        }
</p><p>    }
</p><p>    
 </p><p>    /// &lt;remarks/&gt;
</p><p>    [System.Xml.Serialization.XmlAnyAttributeAttribute()]
</p><p>    public System.Xml.XmlAttribute[] AnyAttr {
</p><p>        get {
</p><p>            return this.anyAttrField;
</p><p>        }
</p><p>        set {
</p><p>            this.anyAttrField = value;
</p><p>        }
</p><p>    }
</p><p>}<span style="color:gainsboro">
				</span></p><p>
 </p></li><li><div>实际对应的XML文档应该是下面这样的。注意，下面有一个my的命名空间。
</div><p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;?mso-infoPathSolution solutionVersion="1.0.0.3" productVersion="15.0.0" PIVersion="1.0.0.0" href="file:///C:\Users\chenxizhang\AppData\Local\Microsoft\InfoPath\Designer4\46fec1056ed24f25\manifest.xsf" ?&gt;&lt;?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.4"?&gt;&lt;my:myFields <span style="color:red"><strong>xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2014-08-15T22:37:24"</strong>
				</span>xml:lang="en-us"&gt;
</p><p>    <strong><span style="color:red">&lt;my:Title&gt;test&lt;/my:Title&gt;</span>
				</strong></p><p>&lt;/my:myFields&gt;
</p></li><li><div>为了使得XML序列化的时候，正常地生成这样的一份文档。我们需要做如下的特殊设计
</div><p>
 </p><p>using System;
</p><p>using System.IO;
</p><p>using System.Xml.Serialization;
</p><p> 
 </p><p>namespace ConsoleApplication1
</p><p>{
</p><p>    class Program
</p><p>    {
</p><p>        static void Main(string[] args)
</p><p>        {
</p><p>            
 </p><p>            //1.<span style="font-family:宋体">准备数据</span>
			</p><p>            var data = new myFields() { Title = "CEO" };
</p><p>            //2.<span style="font-family:宋体">准备命名空间</span>
			</p><p><strong>            var ns = new XmlSerializerNamespaces();
</strong></p><p><strong>            ns.Add("my", "http://schemas.microsoft.com/office/infopath/2003/myXSD/2014-08-15T22:37:24");
</strong></p><p>            //3.<span style="font-family:宋体">准备序列化器</span>
			</p><p>            var serializer = new XmlSerializer(typeof(myFields));
</p><p>            //4.<span style="font-family:宋体">准备用来接收的内存流</span>
			</p><p>            var ms = new MemoryStream();
</p><p>            //5.<span style="font-family:宋体">执行序列化</span>
			</p><p>            <strong>serializer.Serialize(ms, data, ns);
</strong></p><p> 
 </p><p>            //6.<span style="font-family:宋体">将内容读取出来</span>
			</p><p>            var reader = new StreamReader(ms);
</p><p>            ms.Position = 0;
</p><p>            Console.WriteLine(reader.ReadToEnd());
</p><p>            //7.<span style="font-family:宋体">关闭流</span>
			</p><p>            reader.Close();
</p><p>            ms.Close();
</p><p> 
 </p><p>            Console.Read();
</p><p>        }
</p><p>    }
</p><p>}
</p><p>
 </p></li></ol><p>不太难，但是确实是多了些步骤，不是吗</p>]]></description></item><item><title>ASP.NET MVC 4中如何为不同的浏览器自适应布局和视图</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/07/13/3840733.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 13 Jul 2014 00:51:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/07/13/3840733.html</guid><description><![CDATA[<p>在ASP.NET MVC 4中，可以很简单地实现针对不同的浏览器自适应布局和视图。这个得归功于MVC中的"约定甚于配置"的设计理念。
</p><h1>默认的自适应
</h1><p>MVC 4自动地为移动设备浏览器和PC设备浏览器进行自适应。针对布局页面，默认的文件名为_Layout.cshtml，这个默认会被所有的浏览器使用。但如果我们希望在移动设备上面，呈现一个不同的布局，只需要添加一个名称为_Layout.Mobile.cshtml的布局页面就可以了。同样的规则，也适用于普通的视图页面。例如Index.cshtml默认是被所有的浏览器使用的，但如果添加了Index.Mobile.cshtml，则在移动设备上面，会自动使用这个新的视图进行呈现。如下图所示
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850363956346.png" alt=""/>
	</p><p>那么，为什么会能够自动实现这样的功能呢？或者我们该问问，怎么样才能区分移动设备浏览器呢？其实，这个说起来是不难的
</p><p>下面这个文章介绍了关于浏览器检测的一些基本概念<a href="http://msdn.microsoft.com/zh-cn/library/x3k2ssx2(v=vs.100).aspx">http://msdn.microsoft.com/zh-cn/library/x3k2ssx2(v=vs.100).aspx</a>
	</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850375827416.png" alt=""/>
	</p><p>在ASP.NET MVC中，是在什么位置，通过什么样的方式来进行这个检测，并且据此进行布局或视图的选择的呢？
</p><p>通过分析源代码（<a href="http://aspnetwebstack.codeplex.com/">http://aspnetwebstack.codeplex.com/</a> ），我们可以在下面的代码中发现端倪
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850378641332.png" alt=""/>
	</p><p>所以，这个功能是在DisplayModeProvider这个类型中实现的。它默认注册了两个所谓的DefaultDisplayMode，其中第一个是有条件判断的，根据IsMobileDevice属性判断是不是移动设备浏览器，如果是，则使用一个固定的前缀Mobile。这个DefaultDisplayMode类型，会自动做路径的Transform。
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850382548044.png" alt=""/>
	</p><p>
 </p><h1>自定义适应规则
</h1><p>
 </p><p>如果理解了上面的原理，我们就可以根据需要添加自己的规则。例如，我们可以为iPhone设备添加一个特定的显示模型，可以修改global.asax中的代码。
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850385822244.png" alt=""/>
	</p><p>
 </p><p>这样的话，只要添加下面的布局或者视图页面的话，就可以很简单地实现针对iPhone设备的呈现了。
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/130850389422902.png" alt=""/></p>]]></description></item><item><title>关于AJAX跨域调用ASP.NET MVC或者WebAPI服务的问题及解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/07/03/3821703.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 03 Jul 2014 01:48:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/07/03/3821703.html</guid><description><![CDATA[<p style="text-align: center">
 </p><p>作者：陈希章
</p><p>时间：2014-7-3
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/030947396525634.png" alt=""/>
	</p><p><strong>问题描述
</strong></p><p>当跨域（cross domain）调用ASP.NET MVC或者ASP.NET Web API编写的服务时，会发生无法访问的情况。
</p><p><strong>重现方式
</strong></p><ol><li><div>使用模板创建一个最简单的ASP.NET Web API项目，调试起来确认能正常工作
</div><p><img src="http://images.cnitblog.com/blog/9072/201407/030947402159206.png" alt=""/>
			</p></li><li><div>创建另外一个项目，仅仅包含一个HTML页面，发起AJAX的调用
</div><p><img src="http://images.cnitblog.com/blog/9072/201407/030947407304064.png" alt=""/>
			</p></li><li><div>在浏览器中打开这个网页，我们会发现如下的错误（405：Method Not Allowed）
</div><p><img src="http://images.cnitblog.com/blog/9072/201407/030947411528892.png" alt=""/>
			</p><p>
 </p><p>【备注】同样的情况，也发生在ASP.NET MVC中。某些时候，MVC也可以直接用来开发服务，与WebAPI相比各有优缺点。下面是一个利用MVC开发的服务的例子
</p><p><img src="http://images.cnitblog.com/blog/9072/201407/030947414341679.png" alt=""/>
			</p></li></ol><p>
 </p><p><strong>原因分析
</strong></p><p>跨域问题仅仅发生在Javascript发起AJAX调用，或者Silverlight发起服务调用时，其根本原因是因为浏览器对于这两种请求，所给予的权限是较低的，通常只允许调用本域中的资源，除非目标服务器明确地告知它允许跨域调用。
</p><p>所以，跨域的问题虽然是由于浏览器的行为产生出来的，但解决的方法却是在服务端。因为不可能要求所有客户端降低安全性。
</p><p>
 </p><p><strong>解决方案
</strong></p><p>针对ASP.NET MVC和ASP.NET Web API两种项目类型，我做了一些研究，确定下面的方案是可行的。
</p><p>针对ASP.NET MVC，只需要在web.config中添加如下的内容即可
</p><p>  &lt;system.webServer&gt;
</p><p><span style="color:red"><strong>    &lt;httpProtocol&gt;
</strong></span></p><p><span style="color:red"><strong>      &lt;customHeaders&gt;
</strong></span></p><p><span style="color:red"><strong>        &lt;add name="Access-Control-Allow-Origin" value="*" /&gt;
</strong></span></p><p><span style="color:red"><strong>        &lt;add name="Access-Control-Allow-Headers" value="Content-Type" /&gt;
</strong></span></p><p><span style="color:red"><strong>        &lt;add name="Access-Control-Allow-Methods" value="GET, POST, PUT, DELETE, OPTIONS" /&gt;
</strong></span></p><p><span style="color:red"><strong>      &lt;/customHeaders&gt;
</strong></span></p><p><span style="color:red"><strong>    &lt;/httpProtocol&gt;
</strong></span></p><p>    &lt;handlers&gt;
</p><p>      &lt;remove name="ExtensionlessUrlHandler-Integrated-4.0" /&gt;
</p><p>      &lt;remove name="OPTIONSVerbHandler" /&gt;
</p><p>      &lt;remove name="TRACEVerbHandler" /&gt;
</p><p>      &lt;add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" /&gt;
</p><p>    &lt;/handlers&gt;
</p><p>  &lt;/system.webServer&gt;
</p><p>
 </p><p>
 </p><p>针对ASP.NET Web API,除了上面这样的设置，还需要添加一个特殊的设计，就是为每个APIController添加一个OPTIONS的方法，但无需返回任何东西。
</p><p>        public string Options()
</p><p>        {
</p><p>            return null; // HTTP 200 response with empty body
</p><p>        }
</p><p>
 </p><p>【备注】这个功能也可以进行一些研究，设计成Filter的形式可能就更好了。
</p>]]></description></item><item><title>如何为自己的博客文章自动添加移动版本（目前仅支持博客园）</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/05/10/3720166.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 10 May 2014 02:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/05/10/3720166.html</guid><description><![CDATA[<h1>前言</h1> <p>从2005年开始撰写第一篇技术博客，我也算是国内最早的一批技术博客作者之一了。其中中断过一段时间，但2008年重新启用之后，这个习惯一直保留到现在，目前已经累积的文章数量已经达到1226篇。这些文章绝大部分都是原创的，转载的有特别注明，文章内容大多是自己实际工作中遇到的问题和解决方案，或者我为企业做顾问服务、培训服务时解决的问题，我尤其喜欢在解决问题后做一点总结，并整理成一篇博客文章分享出来，一来是对思路的重新梳理，同时也希望也许日后能对其他人也有所帮助。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048248704699.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048270735572.png" width="244" height="206"></a></p> <p>这些年随着移动互联网逐渐占据主流，我也参与一些移动Web开发的实践中，有几次都想过这样一个问题：如何让这些博客文章更好地在移动设备上进行阅读呢？从技术上说，PC版本的浏览器，因为屏幕较宽，所以更加易于阅读博客文章，而同样的网页在手机上面来看，效果就会差很多。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048281514002.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048294179487.png" width="171" height="244"></a></p> <p>大家可以看到，如果不做任何地处理，那么手机浏览器只会简单地将页面按照比例缩小。这样的结果往往就是字体很小，阅读困难。但如果像下面这样，是不是会更加好一些呢？</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048303079860.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048316352834.png" width="170" height="244"></a></p> <p>从这些年的实践来看，我总结出来移动化Web页面应该有几个特点</p> <p>1.字体要略大一些，内容上应该要有所过滤，去除干扰元素，让用户可以专注内容</p> <p>2.布局上面要适应移动设备的宽度和高度</p> <p>3.交互方式，应该考虑到用户是用触摸，而不是用鼠标。链接和按钮要醒目。</p> <p>4.不要过多地让用户输入内容</p> <p>&nbsp;</p> <p>所以说，网站的移动化其实涉及到页面布局的重新设计。而可喜的是，在移动化Web 开发方面，已经有一些较好的框架。我很推荐的是jquerymobile。请参考官方的网站：</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048326671548.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048348702421.png" width="244" height="206"></a></p> <p>&nbsp;</p> <h1>解决方案</h1> <p>今天早上起来花了一点时间，做了一个功能，能够直接将博客文章转换为手机的版本。使用方式是这样的：</p> <p>1. 找到你要转换的博客文章地址，例如 <a title="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html" href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html">http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html</a>&nbsp;</p> <p>在PC版浏览器看起来是下面这样的</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048357768564.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048374175865.png" width="244" height="206"></a></p> <p>2. 通过在这个地址前面添加一段前缀( <a href="http://webfeed.azurewebsites.net/home/displayonlineblog?url">http://webfeed.azurewebsites.net/home/displayonlineblog?url</a>=) ,也就是说，完整的地址是：<a href="http://webfeed.azurewebsites.net/home/displayonlineblog?url=http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html">http://webfeed.azurewebsites.net/home/displayonlineblog?url=<a title="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html" href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html">http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html</a></a>。 如果有做过MVC开发的朋友一看就知道，这个是我设计的一个特别的Action。里面的功能其实也不难，就是先下载博客原文的内容，然后再结合框架进行重新格式化。</p> <p>【重要】需要注意的是，我做的这个功能，是会自动识别浏览器的，如果你仍然是用PC版浏览器打开上面提到的地址，那么看到的界面将是下面这样</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048383541253.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048391673666.png" width="244" height="206"></a></p> <p>但如果你真的使用移动设备，例如手机来访问，就会看到下面的效果</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048400574040.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048406985168.png" width="170" height="244"></a></p> <p>值得一说的是，我并不是简单地改了部署，对其中的内容元素也会有些特殊的处理。例如针对图片，我会添加一个样式表，让他们能自动适应手机屏幕尺寸。（哪怕实际上它的宽度是很大的）。同时，对于博客文章一些内部链接（链接到博客园的任意其他文章），会自动将链接地址换成移动化版本的），细心的朋友可以从下图中看到实际上里面的链接地址是换掉了。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048412134727.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048420883627.png" width="244" height="206"></a></p> <p>&nbsp;</p> <p>上面说到的这个方法，很简单实用，你可以不受任何限制地使用这个地址格式，为你的博客文章自动“生成”一个移动的版本，你可以将这些链接分享给你的朋友，让他们在移动设备上面可以更好地浏览你的文章。</p> <p>&nbsp;</p> <p>【备注】大家可以会对webfeed.azurewebsites.net这个网站感兴趣，这是我最近的一个企业培训练习项目（大家还没有完全做完），这个网站分别演示了如何整合PC版浏览器和移动版浏览器（上面说到过了，他们会有不同的布局和交互功能），使用的技术是ASP.NET MVC 4 + jQuery Mobile + Knockoutjs 等。这个网站是托管在微软的Microsoft Azure中的，当前我使用的是免费模式，可能有时候比较慢。请见谅。</p> <p>【备注】我将一直会保留这个网站。</p> <p>&nbsp;</p> <h1>改进的解决方案</h1> <p>我很快意识到，上面那个地址有点复杂，让你去每次拼接地址似乎有点麻烦。所以我想了一个办法，能不能让这些网页打开的时候，就自动地生成好移动化版本的链接呢？感谢javascript，我们能做到。</p> <p>首先，你可以进入你的博客管理后台</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048424634442.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048429481056.png" width="244" height="128"></a></p> <p>你可以将下面这一段脚本引用放在任何你想要的位置</p> <p>&lt;script src="<a href="http://webfeed.azurewebsites.net/mobilelink.js&quot;">http://webfeed.azurewebsites.net/mobilelink.js"</a>&gt;&lt;/script&gt;</p> <p>例如，我是放在页面顶部的</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048432136071.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048439637700.png" width="244" height="121"></a></p> <p>&nbsp;</p> <p>保存设置后，在任何博客文章显示出来后，就会在顶部自动显示一个链接，如下图所示</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048442454785.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048444792557.png" width="244" height="126"></a></p> <p>【备注】你的博客首页，因为不是文章，所以实际上点击之后，不会产生具体的内容</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048449633872.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048453858700.png" width="244" height="124"></a></p> <p>如果你打开了具体的博客文章，则那个链接就会有作用了。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048467131674.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048487455559.png" width="244" height="208"></a></p>             <p>&nbsp;</p> <p>&nbsp;</p> <p>顺便提一下，如果大家希望更好地搜索我所有的博客文章，可以直接访问<a href="http://webfeed.azurewebsites.net">http://webfeed.azurewebsites.net</a> </p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048493079132.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048508381634.png" width="244" height="145"></a></p> <p>在手机端访问的效果是下面这样的</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/101048512132449.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/101048515731791.png" width="165" height="244"></a></p> <p>这个网站甚至已经整合到了微信里面，如果有兴趣，可以添加 dev2db 这个微信公众号，直接在里面可以搜索博客文章，详情请参考下面这个文章</p> <p><a title="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=200117429&amp;idx=1&amp;sn=239ab455e80f4bfe1ac5bdeb9c94d41b#rd" href="http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=200117429&amp;idx=1&amp;sn=239ab455e80f4bfe1ac5bdeb9c94d41b#rd">http://mp.weixin.qq.com/s?__biz=MjM5ODEyNjE5OA==&amp;mid=200117429&amp;idx=1&amp;sn=239ab455e80f4bfe1ac5bdeb9c94d41b#rd</a></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>以上，希望对大家有所帮助，抛砖引玉，如果大家有更好的做法，也欢迎分享。</p>]]></description></item><item><title>条形码扫描枪数据读取的问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/05/07/3712957.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 06 May 2014 21:34:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/05/07/3712957.html</guid><description><![CDATA[<p>最近做的一个程序，客户端是使用条形码扫描枪，读取到数据后，要根据规则跳转到对应的网址。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/070534094178258.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/070534133384392.png" width="244" height="130"></a></p> <p>&nbsp;</p> <p>在调试的时候发现，跳转地址时会出现错误，观察地址格式，发现多出来几个特殊的字符%0D%0A</p> <p>找了一下原因，这是因为扫描枪传递过来的数据，尾部带有回车换行符（\r\n）所导致的，浏览器在做导航的时候，会自动将其编码为%0D%0A.</p> <p>所以解决方法就是，使用正则表达式 \S+ 这样的规则，只提取数据中的字符，而不包含换行符之类的。</p>]]></description></item><item><title>坑爹的网址引起的尴尬</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/05/06/3712178.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 06 May 2014 10:26:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/05/06/3712178.html</guid><description><![CDATA[<p>我经常使用一个在线教程的网站（<a href="http://w3school.com.cn">w3school.com.cn</a>），而且很多时候都会给大家推荐。</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/061825147763167.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/061825153235267.png" width="244" height="184"></a></p> <p>&nbsp;</p> <p>但不知道怎么回事，今天在IE中尝试输入这个网址的时候，自动跳到了下面这个网址</p> <p>http://www.w3school<font color="#ff0000"><strong>s</strong></font>.com.cn/</p> <p>请注意，这个域名多了一个s，不注意看真的分不出来，当然也让人感到很愕然和尴尬。</p> <p>这个网站的内容是下面这样的</p> <p><a href="http://images.cnitblog.com/blog/9072/201405/061825161353383.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201405/061825170884541.png" width="244" height="147"></a></p> <p>有时候还有一些什么儿童不宜的广告链接。</p> <p>&nbsp;</p> <p>这些别有用心的域名申请者，是不会顾及到给用户造成的麻烦和尴尬的。</p>]]></description></item><item><title>ASP.NET MVC 4.0中选择Windows 验证默认出错拒绝访问的原因和解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/04/21/3679059.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 21 Apr 2014 11:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/04/21/3679059.html</guid><description><![CDATA[<p>在VS 2012或者2013 中，根据模板创建一个ASP.NET MVC 4.0的应用程序，选择下面的模板</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921010455702.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921021703258.png" width="244" height="170"></a></p> <p>然后选择Intranet Application</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921031543857.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921042325427.png" width="244" height="221"></a></p> <p>不对源代码做任何修改，直接按下F5调试，会遇到如下的错误</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921056078440.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921064662012.png" width="205" height="244"></a></p> <p>这个问题的原因是在于Visual Studio自带的Web Server或者IIS Express没有配置支持Windows验证。选中项目，然后按下F4，查看属性</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921117634594.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921155457205.png" width="149" height="244"></a></p> <p>所以解决方案就是启用Windows验证，禁用匿名登陆，如下</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921161236861.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921168735232.png" width="244" height="159"></a></p> <p>然后，整个世界就清静了</p> <p><a href="http://images.cnitblog.com/blog/9072/201404/211921185608216.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201404/211921199203702.png" width="205" height="244"></a></p>]]></description></item><item><title>WebAPI 2.x中如何扩展Identity Store</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/03/16/3603011.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 16 Mar 2014 01:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/03/16/3603011.html</guid><description><![CDATA[<p>ASP.NET WebAPI 中引入了新的一套身份验证和授权的机制，官方的叫法是ASP.NET Identity，有关这个概念的细节，感兴趣的同学可以参考 <a title="http://www.asp.net/identity" href="http://www.asp.net/identity">http://www.asp.net/identity</a></p> <p>这套新的机制，默认还是使用SQL Server来做身份保存的，但更多的是提供了灵活性，包括与外部验证系统（OAuth）的整合。但在一些较为简单的场合下，我们可能希望简化这个部分，例如我们不需要外部整合，而且我们的用户数也相对有限，不希望用数据库来实现。</p> <p>本文提供了一个实例，我是使用XML文件的方式来保存用户信息的，该文件的格式大致如下</p> <p><a href="http://images.cnitblog.com/blog/9072/201403/160900217938368.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201403/160900230741410.png" width="1427" height="310"></a></p> <p>&nbsp;</p> <p>然后，我编写了一个自定义的类型，实现了一些主要的方法</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">class</span> XmlUserStore : IUserStore&lt;ApplicationUser&gt;,IUserPasswordStore&lt;ApplicationUser&gt;,IRoleStore&lt;IdentityRole&gt;
    {

        <span class="kwrd">private</span> <span class="kwrd">string</span> filePath = HttpContext.Current.Server.MapPath(<span class="str">"~/app_data/users.xml"</span>);


        <span class="kwrd">public</span> Task CreateAsync(ApplicationUser user)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        <span class="kwrd">public</span> Task DeleteAsync(ApplicationUser user)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        <span class="kwrd">public</span> Task&lt;ApplicationUser&gt; FindByIdAsync(<span class="kwrd">string</span> userId)
        {
            <span class="kwrd">return</span> FindByNameAsync(userId);
        }

        <span class="kwrd">public</span> Task&lt;ApplicationUser&gt; FindByNameAsync(<span class="kwrd">string</span> userName)
        {

            var doc = XDocument.Load(filePath);
            var found = doc.Root.Elements(<span class="str">"user"</span>).FirstOrDefault(x =&gt; x.Attribute(<span class="str">"name"</span>).Value == userName);
            ApplicationUser user = <span class="kwrd">null</span>;
            <span class="kwrd">if</span> (found != <span class="kwrd">null</span>)
            {
                user = <span class="kwrd">new</span> ApplicationUser()
                {
                    UserName = userName,
                    Id = userName,
                    PasswordHash = found.Attribute(<span class="str">"password"</span>).Value
                };
            }

            <span class="kwrd">return</span> Task&lt;ApplicationUser&gt;.FromResult(user);
        }

        <span class="kwrd">public</span> Task UpdateAsync(ApplicationUser user)
        {
            <span class="kwrd">return</span> Task.FromResult(0);
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose()
        {
        }

        <span class="kwrd">public</span> Task&lt;<span class="kwrd">string</span>&gt; GetPasswordHashAsync(ApplicationUser user)
        {
            var result = <span class="kwrd">string</span>.Empty;
            <span class="kwrd">if</span> (user != <span class="kwrd">null</span>)
                result = user.PasswordHash;

            <span class="kwrd">return</span> Task&lt;<span class="kwrd">string</span>&gt;.FromResult(result);
        }

        <span class="kwrd">public</span> Task&lt;<span class="kwrd">bool</span>&gt; HasPasswordAsync(ApplicationUser user)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        <span class="kwrd">public</span> Task SetPasswordHashAsync(ApplicationUser user, <span class="kwrd">string</span> passwordHash)
        {
            var doc = XDocument.Load(filePath);
            var found = doc.Root.Elements(<span class="str">"user"</span>).FirstOrDefault(x =&gt; x.Attribute(<span class="str">"name"</span>).Value ==user.UserName);

            <span class="kwrd">if</span>(found!=<span class="kwrd">null</span>)
            {
                found.Attribute(<span class="str">"password"</span>).Value = passwordHash;
                doc.Save(filePath);

                <span class="kwrd">return</span> Task.FromResult(1);
            }

            <span class="kwrd">return</span> Task.FromResult(0);
        }


        <span class="kwrd">public</span> Task CreateAsync(IdentityRole role)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        <span class="kwrd">public</span> Task DeleteAsync(IdentityRole role)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        Task&lt;IdentityRole&gt; IRoleStore&lt;IdentityRole&gt;.FindByIdAsync(<span class="kwrd">string</span> roleId)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        Task&lt;IdentityRole&gt; IRoleStore&lt;IdentityRole&gt;.FindByNameAsync(<span class="kwrd">string</span> roleName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }

        <span class="kwrd">public</span> Task UpdateAsync(IdentityRole role)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> System.NotImplementedException();
        }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>接下来，我们要在AccountController中使用这个新的UserStore的类型。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201403/160900233405394.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201403/160900236218309.png" width="803" height="311"></a></p>]]></description></item><item><title>我的微信号</title><link>http://www.cnblogs.com/chenxizhang/archive/2014/03/01/3574911.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 01 Mar 2014 04:08:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2014/03/01/3574911.html</guid><description><![CDATA[<p> <p>大家好，我在维护一个公众微信账号，dev2db，将不定时地分享对于软件的理解、应用，以及数据库、数据分析在现实工作中的一些经验，心得，欢迎大家关注参与讨论</p></p> <p><a href="http://images.cnitblog.com/blog/9072/201403/011207409851880.jpg"><img title="公众微信" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="公众微信" src="http://images.cnitblog.com/blog/9072/201403/011207413885235.jpg" width="244" height="244"></a></p>]]></description></item><item><title>一个奇怪的无法上网问题及解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/12/19/3481398.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 18 Dec 2013 22:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/12/19/3481398.html</guid><description><![CDATA[<p>昨天在酒店入住后，接入他们提供的网线，一直无法上网，而他们的工程来排查，却发现他们的电脑能够上网，线路应该是通的。</p> <p>早上起来，在查看网页的属性中，无意中看到有一个设置，Link speed &amp; Duplex ，将其调整了一下就可以了。</p> <p>&nbsp;</p> <p><a href="http://images.cnitblog.com/blog/9072/201312/19065543-6749984d545d4fe6a829d9c139fbc1b5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201312/19065544-01695399ab66495d831b5e1ed9b96e44.png" width="195" height="244"></a></p> <p>点击上图中的“Configure”按钮</p> <p><a href="http://images.cnitblog.com/blog/9072/201312/19065544-36ede14d1a77432cb55c1e198c1137b5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201312/19065544-1699b35d911d4409b4251dbe14c64ed7.png" width="220" height="244"></a></p> <p>这个设置本身应该是自动检测的，我明确设置为10Mbps之后，很快就连接上了。</p> <p>原因应该是他们的交换机有做限速，例如他们限制最快10Mbps，导致我的网卡无法与其匹配。</p> <p>另外，也看到一篇文章讲这个问题</p> <p><a href="http://yaoshou.blog.163.com/blog/static/415896242008112895156446/">http://yaoshou.blog.163.com/blog/static/415896242008112895156446/</a></p>]]></description></item><item><title>如何创建支持64位的安装程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/11/01/3401210.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 01 Nov 2013 02:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/11/01/3401210.html</guid><description><![CDATA[<p>这里说的安装程序指的是Visual Studio 2010中的一个项目模板，它默认是针对X86（即32位）的。如果我们的来源程序，设置了目标平台为x64，例如</p> <p><a href="http://images.cnitblog.com/blog/9072/201311/01104445-70a1a192e18f4c8da117d8385c17155a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201311/01104445-d7fdbfee4b084ce9b04fa17868e481fe.png" width="244" height="96"></a></p> <p>则在编译的时候，会遇到下面的错误</p> <p><a href="http://images.cnitblog.com/blog/9072/201311/01104446-16f4baa1775340a4bdd752ad7b4401e0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201311/01104447-806eff9902ff4813a31ce3d944c64188.png" width="244" height="66"></a></p> <p>&nbsp;</p> <p>要解决这个问题，可以选中你的安装项目，然后按下F4, 在属性窗口中将安装项目的目标平台也设置为x64</p> <p><a href="http://images.cnitblog.com/blog/9072/201311/01104448-2e19a19288a140089c5f59ae8e6efad4.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201311/01104448-ac062ab2b73249228501a8db427ca851.png" width="244" height="167"></a></p> <p>&nbsp;</p> <p>然后重新编译，整个世界清净了</p>]]></description></item><item><title>SharePoint Server 2013开发之旅（四）：配置工作流开发和测试环境</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/10/30/3397711.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 30 Oct 2013 12:48:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/10/30/3397711.html</guid><description><![CDATA[<p>工作流这个功能，在SharePoint Server 2013中做了很大的改动。我们可以从微软官方的文档中了解一下大概的情况</p> <p><a title="http://technet.microsoft.com/zh-cn/library/jj658588.aspx" href="http://technet.microsoft.com/zh-cn/library/jj658588.aspx">http://technet.microsoft.com/zh-cn/library/jj658588.aspx</a></p> <p>总结起来说，有如下几个大的变动</p> <ol> <li>SharePoint Server 2013的工作流，是需要单独安装和配置的（Workflow Manager）。而且在SharePoint Foundation上面是不支持的（它继续支持SharePoint 2010工作流）。</li> <li>SharePoint Server 2013的工作流主要的优势在于它使用Workflow Foundation 4.0，而不在是3.0（3.5），同时有专门对工作流进行管理的后台服务，提高了稳定性和可管理性。</li></ol> <p>如果你希望使用SharePoint Server 2010版本的工作流，只需要在网站集功能中启用即可，默认就安装可用。</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204734-2d803ee682c340c99837860f760b3bcb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204735-6e2cc513620c4306b0c53c9ae9212dd4.png" width="244" height="16"></a></p> <p>如果你希望使用SharePoint Server 2013版本的工作流，则需要按照下面的步骤进行安装和配置。下面的步骤很重要，建议你完全按照步骤做。同时，我发现只有在我最新安装的这个服务器环境（Windows Server 2012+SQL Server 2012 SP1）中一切都是顺利的，之前的Windows Server 2008 R2+SQL Server 2008 R2的环境，总是遇到一些奇怪的问题，而且一直也无法完全解决。</p> <p>【备注】以下的安装过程，都需要在线下载安装程序，请确认网络畅通。</p> <h1>第一步：安装Web Platform Installer</h1> <p>虽然官方并没有建议你这样安装，但我自己总结出来，用这种方式安装是最方便的。Web Platform Intaller提供的一个很好的小工具，可以帮助我们快速进行安装。你可以通过下面的地址下载到这个工具</p> <p><a title="http://www.microsoft.com/web/downloads/platform.aspx" href="http://www.microsoft.com/web/downloads/platform.aspx">http://www.microsoft.com/web/downloads/platform.aspx</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204736-6bda26eb14fc4d1f83f9232dd3504231.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204737-611762d6c9904d0c9a01d136931e9864.png" width="244" height="168"></a></p> <h1>第二步：安装Workflow Manager 1.0</h1> <p>打开Web Platform Installer, 搜索“workflow” 关键字，首先安装Workflow Manager 1.0</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204739-44b07cdbd63f4de38d8ec2a984b72c54.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204739-1b2e7a9cb3f543fb87e86c18efeb22e6.png" width="244" height="168"></a></p> <p>这个步骤会同时安装Service Bus 1.0这个组件的</p> <h1>第三步：安装Workflow Manager 1.0 Cumulative Update 1</h1> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204741-253cb73696844ed081eefc1bd23047ce.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204741-93546da39d234d2e982eb3cf199721f8.png" width="244" height="166"></a></p> <h1>第三步：安装Service Bus 1.0 Cumulative Update 1</h1> <p>搜索“service bus”关键字，然后安装Service Bus 1.0 Cumulative Update 1</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204743-f4d6ae303f324d3781387a1291b58440.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204743-0419953bbeea4181acd59c9c33bf8c60.png" width="244" height="167"></a></p> <h1>第四步：运行Workflow Manager Configuration</h1> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204743-6de95832a62949ba9cbcb05562e5ba4c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204744-c043261903ce434a978d14b6cb0bb8e3.png" width="244" height="112"></a></p> <p>我们可以选择推荐的一个配置选项(这个配置步骤最少）</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204745-b93648c800c94210835ab61fb0314cfb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204745-f95539b697194c3e915f82f7cb196536.png" width="244" height="221"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204746-d9d85a9bbc7746ab87ae1398bd255df9.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204747-ae42b3312946406fb6a972183adda643.png" width="244" height="223"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204748-735543a591694ca9b39ca8eb1c34e7bf.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204749-61cd347f990a49aebe6e27ab1306d6ad.png" width="244" height="213"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204750-36f58a15fb264b5380f9fa08d37d82bc.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204750-60f898754f564136bbf19933d6196753.png" width="244" height="222"></a></p> <h1>第五步：设置SharePoint Server与Workflow Manager的关联</h1> <p>由于Workflow Manager是一个独立的服务器，所以要在SharePoint Server中使用它，需要建立与他的关联。</p> <p>一般通过如下的命令来建立关联即可（假定安装Workflow Manager的服务器本身就是属于SharePoint FARM的一部分的话）</p> <p><code>Register-SPWorkflowService –SPSite <a href="http://moss2013">http://moss2013</a> –WorkflowHostUri "http://moss2013:12291" –AllowOAuthHttp</code></p> <p><code>如果你的Workflow Manager不是安装在SharePoint服务器上面，或者你希望用SSL进行通讯（真有这个必要吗），那么具体的关联配置请参考 <a title="http://technet.microsoft.com/zh-cn/library/jj658588.aspx" href="http://technet.microsoft.com/zh-cn/library/jj658588.aspx">http://technet.microsoft.com/zh-cn/library/jj658588.aspx</a></code></p> <p><code></code>&nbsp;</p> <h1><code>验证安装</code></h1> <p><code>经过如上的五个步骤，我们可以来验证一下是否安装和配置成功了。我们可以打开SharePoint Designer，尝试建立一个简单的工作流。</code></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204750-4b74f2a89c0a46a58ce8c1f87f46fcd9.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204751-f15db5571c714c5e8117c127f7b78a4b.png" width="244" height="165"></a></p> <p>【备注】如果你看到这里的Platform Type可以选择SharePoint 2013 Workflow，应该大致知道是配置成功了</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204752-6a59a220d2f44abc8a7c4210be5351e3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204753-d102dfcfd33f4d358ab5566c00d9e0c1.png" width="244" height="141"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/30204754-7e4f72ecde294cf4ad571d946977d304.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30204754-aa91252dbee94779815086f865eb98b5.png" width="244" height="122"></a></p>]]></description></item><item><title>SharePoint Server 2013开发之旅（三）：为SharePoint Server配置App开发、部署、管理环境</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/10/30/3397543.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 30 Oct 2013 11:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/10/30/3397543.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/p/3395046.html">上一篇</a>我讲解了如何利用微软提供的Office 365开发人员网站，进行在线的SharePoint App开发，这当然是不错的一个选择，因为你可以快速地进行开发和调试。（仅仅针对App开发而言）。但是，你可能会想到一个问题，假设我们在企业中已经有了一组SharePoint Server服务器，那么如何让他们也能用来进行App开发、部署并且最终用来统一管理所有的App呢？这一篇文章我们将揭开这个面纱。</p> <p>关于这个配置过程，微软官方也有一个文档（<a title="http://msdn.microsoft.com/en-us/library/fp179923(office.15).aspx" href="http://msdn.microsoft.com/en-us/library/fp179923(office.15).aspx">http://msdn.microsoft.com/en-us/library/fp179923(office.15).aspx</a>），我下面总结的方法可能与官方的文档有些不一样。但这是我验证下来有效的方法。但我建议你也将官方的文档看一遍。</p> <p>&nbsp;</p> <h1>第一步：配置泛域名解析，并且禁用回环检查</h1> <p>为什么要配置这个域名解析呢？上一篇我已经提到了App最终使用的时候，有一个很特殊的地址，例如</p> <p><a href="https://xizhangdev-ece5e3f97ecd25.sharepoint.com/SharePointAppSample/Pages/Default.aspx?SPHostUrl=https%3A%2F%2Fxizhangdev%2Esharepoint%2Ecom&amp;SPLanguage=zh%2DCN&amp;SPClientTag=0&amp;SPProductNumber=16%2E0%2E2120%2E1226&amp;SPAppWebUrl=https%3A%2F%2Fxizhangdev%2Dece5e3f97ecd25%2Esharepoint%2Ecom%2FSharePointAppSample">https://<strong>xizhangdev</strong>-ece5e3f97ecd25.<strong>sharepoint.com</strong>/<strong>SharePointAppSample</strong>/Pages/Default.aspx?SPHostUrl=https%3A%2F%2Fxizhangdev%2Esharepoint%2Ecom&amp;SPLanguage=zh%2DCN&amp;SPClientTag=0&amp;SPProductNumber=16%2E0%2E2120%2E1226&amp;SPAppWebUrl=https%3A%2F%2Fxizhangdev%2Dece5e3f97ecd25%2Esharepoint%2Ecom%2FSharePointAppSample</a>  <p>也就是说，所有的App，其实都是共用了一个域名 sharepoint.com。但有一个特殊的前缀（你的站点标识，一个App序列号），并且有一个特殊的后缀（App的名称）。  <p>如果我们希望配置自己的服务器也能实现这样的功能，就需要用到一个泛域名解析的功能。也就是说，不管App具体的序列号是多少，我们都解析到同一个地址。  <p>要实现这样的功能，请登录到你配置的DNS服务器，在正向查找区域中添加一个主机名  <p><a href="http://images.cnitblog.com/blog/9072/201310/30195109-fcf42f1093884501a7e798f054f1cc4f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195109-010e4819c8894080bd0e8e0df4ad92f3.png" width="244" height="201"></a>  <p>用*（星号）作为主机名，IP地址写127.0.0.1，就是让它指向本地服务器。  <p><a href="http://images.cnitblog.com/blog/9072/201310/30195111-413a6c399a404c64bc988f18b8eb58ff.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195112-ec417cf5cb64454fa2646d3fb11849d2.png" width="244" height="195"></a>  <p>如何验证这个功能是否生效呢？很简单，我们开一个命令行提示符。随便ping两个域名，分别用apps和my作为前缀，我们看到都能ping通，而且他们返回的地址都是127.0.0.1  <p><a href="http://images.cnitblog.com/blog/9072/201310/30195112-c807fa6688f94397b18def2d8f89b3a4.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195113-91cc885b595d416797b5237070c19b96.png" width="244" height="162"></a>  <p>&nbsp; <p>修改两个注册表选项，来禁止环回检查  <p>1. 启动注册表编辑器 (Regedt32.exe)。  <p>2. 在注册表中找到并单击以下项：<b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanmanServer\Parameters</b>  <p>3. 在<b>编辑</b>菜单上，单击<b>添加数值</b>，然后添加以下注册表值：<br>数值名称：DisableStrictNameChecking<br>数据类型：REG_DWORD<br>基数：十进制<br>数值： 1  <p>&nbsp; <p>2. 在注册表编辑器中，找到并单击下面的注册表项：<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa</b>  <p>3. 右键单击“Lsa”，指向“新建”，然后单击“DWORD 值”。  <p>4. 键入 <b>DisableLoopbackCheck</b>，然后按 Enter。  <p>5. 右键单击 <b>DisableLoopbackCheck</b>，然后单击<b>“修改”</b>。  <p>6. 在“数值数据”框中，键入 <b>1</b>，然后单击“确定”。  <p>7. 退出注册表编辑器，然后<strong><font color="#ff0000">重新启动您的计算机</font></strong>。  <p>&nbsp; <h1>第二步：配置SharePoint服务和服务应用程序</h1> <p>请将如下的代码保存为一个ps1文件，例如命令为enableappscript.ps1,放在c:\scripts目录中,红色字体部分可能需要修改为你的域名</p><pre class="csharpcode">$appManagementService = Get-SPServiceInstance | <span class="kwrd">where</span> {$_.TypeName -like <span class="str">'App Management Service'</span>}
<span class="kwrd">if</span>($appManagementService.Status -ne <span class="str">'Online'</span>) {
Write-Host <span class="str">'Starting App Management Service'</span>
Start-SPServiceInstance $appManagementService | Out-Null
}
<span class="kwrd">else</span>{
Write-Host <span class="str">'App Management Service was already started'</span>
}
# wait <span class="kwrd">for</span> App Management Service to start”
<span class="kwrd">while</span> ($service.Status -ne <span class="str">'Online'</span>) {
# delay 5 seconds then check to see <span class="kwrd">if</span> service has started sleep 5
$service = Get-SPServiceInstance | <span class="kwrd">where</span> {$_.TypeName -like <span class="str">'App Management Service'</span>}
}

$subscriptionSettingsService = Get-SPServiceInstance | <span class="kwrd">where</span> {$_.TypeName -like <span class="str">'Microsoft SharePoint Foundation Subscription Settings Service'</span>}
<span class="kwrd">if</span>($subscriptionSettingsService.Status -ne <span class="str">'Online'</span>) {
Write-Host <span class="str">'Starting Subscription Settings Service'</span>
Start-SPServiceInstance $subscriptionSettingsService | Out-Null
}
<span class="kwrd">else</span>{
Write-Host <span class="str">'Subscription Settings Service was already started'</span>
}
<span class="kwrd">while</span> ($service.Status -ne <span class="str">'Online'</span>) {
# delay 5 seconds then check to see <span class="kwrd">if</span> service has started sleep 5
$service = Get-SPServiceInstance | <span class="kwrd">where</span> {$_.TypeName -like <span class="str">'Microsoft SharePoint Foundation Subscription Settings Service'</span>}
}

$appManagemetnServiceApplicationName = <span class="str">'App Management Service'</span>
$appManagementServiceApplication = Get-SPServiceApplication | <span class="kwrd">where</span> {$_.Name -eq $appManagemetnServiceApplicationName}
# create an instance App Management Service Application and proxy <span class="kwrd">if</span> they <span class="kwrd">do</span> not exist
<span class="kwrd">if</span>($appManagementServiceApplication -eq $<span class="kwrd">null</span>) {
Write-Host <span class="str">'Creating App Management Service Application'</span>
$pool = Get-SPServiceApplicationPool <span class="str">'SharePoint Web Services Default'</span>
$appManagementServiceDB= <span class="str">'Sharepoint_AppManagementServiceDB'</span>
$appManagementServiceApplication = New-SPAppManagementServiceApplication `
-ApplicationPool $pool `
-Name $appManagemetnServiceApplicationName `
-DatabaseName $appManagementServiceDB
Write-Host <span class="str">'Creating App Management Service Application Proxy'</span>
$appManagementServicApplicationProxy = New-SPAppManagementServiceApplicationProxy `
-ServiceApplication $appManagementServiceApplication
}
<span class="kwrd">else</span>{
Write-Host <span class="str">'App Management Service Application already exist'</span>
}

$subscriptionSettingsServiceApplicationName = <span class="str">'Subscription Settings Service Application'</span>
$subscriptionSettingsServiceApplication = Get-SPServiceApplication | <span class="kwrd">where</span> {$_.Name -eq $subscriptionSettingsServiceApplicationName}
# create an instance Subscription Service Application and proxy <span class="kwrd">if</span> they <span class="kwrd">do</span> not exist
<span class="kwrd">if</span>($subscriptionSettingsServiceApplication -eq $<span class="kwrd">null</span>) {
Write-Host <span class="str">'Creating Subscription Settings Service Application'</span>
$pool = Get-SPServiceApplicationPool <span class="str">'SharePoint Web Services Default'</span>
$subscriptionSettingsServiceDB= <span class="str">'Sharepoint_SiteSubscriptionSettingsServiceDB'</span>
$subscriptionSettingsServiceApplication = New-SPSubscriptionSettingsServiceApplication `
-ApplicationPool $pool `
-Name $subscriptionSettingsServiceApplicationName `
-DatabaseName $subscriptionSettingsServiceDB
Write-Host <span class="str">'Creating Subscription Settings Service Application Proxy'</span>
$subscriptionSettingsServicApplicationProxy = New-SPSubscriptionSettingsServiceApplicationProxy `
-ServiceApplication $subscriptionSettingsServiceApplication
}
<span class="kwrd">else</span>{
Write-Host <span class="str">'Subscription Settings Service Application already exist'</span>
}
Set-SPAppDomain <span class="str"><strong><font color="#ff0000">'apps.corp.contoso.com'</font></strong></span> -Confirm:$<span class="kwrd">false</span>

Set-SPAppSiteSubscriptionName -Name <span class="str">'app'</span> -Confirm:$<span class="kwrd">false</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnitblog.com/blog/9072/201310/30195113-f68b779555454082a938790a41bd9d7c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195113-9ddaf51a88f543aa8684d7725eeb2e81.png" width="244" height="113"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195114-1061fda91caf4acd923a8568ce12f0d1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195114-060b5abf2fc6440ebc61fcdba9cb3018.png" width="244" height="56"></a></p>
<p>上面的代码其实说复杂也不复杂，它会检查两个服务的状态，如果没有启动，则会启动他们</p>
<ol>
<li>App Management Service 
<li>Microsoft SharePoint Foundation Subscription Settings Service</li></ol>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195116-dd196db8973141b98ac185e25bc7ea14.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195117-4fe3c696c0874764ad928887665bce25.png" width="244" height="129"></a></p>
<p>然后，它会检查是否存在下面两个服务应用程序，如果不存在，则会创建并且启动他们</p>
<ol>
<li>App Management Service Application 
<li>Subscription Settings Service Application</li></ol>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195120-8ebbba88f4fb4b2e95233e0f4c631c9f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195120-fb90fde6f29c449680deed24d83c8b96.png" width="244" height="167"></a></p>
<p>然后，它会注册一个域名（apps.corp.contoso.com）和地址前缀（app）。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195121-5d66a4bd6f734e7083b324c9a655dd01.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195121-5207318b0a4c4dcdae2b4232c54e0c4b.png" width="244" height="147"></a></p>
<h1>第三步：创建App Catalog</h1>
<p>接下来我们要做的是创建一个所谓的App Catalog，这个相当于是一个存储App的具体位置。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195122-924ba30f94384984a2064d1e84b0ea42.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195122-7c3957bcd62e406087bbe84bf9572844.png" width="244" height="178"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195124-ce44226cee4c4b4f9b833fe48d61cfd3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195124-1c4cbbfc9377400ebb79bb840b5c9302.png" width="244" height="120"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195125-5fc1c3bd54b04bae9792e8a55b6fc01b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195126-74ce389177054d568fe4b3428daa33a1.png" width="244" height="175"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195127-3e0eb99bf7d94174ba7a8c529ebed3e8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195127-fb7cb4a61e30449fa0a56ee5894618ec.png" width="244" height="123"></a></p>
<p>&nbsp;</p>
<p>经过上面三个步骤，我们就能通过Visual Studio来测试开发一个简单的App，并且看看部署起来的效果了</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195128-88762dc616d94626962950fcd4611c30.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195128-d0f70dfba95541af88f2eb06dcd1caac.png" width="244" height="170"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195129-29b1f3912a6d41c1b9807030198ddbd7.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195129-9fe80bff1bfc427a9ef62a027317ff69.png" width="244" height="179"></a></p>
<p>默认生成的项目结构中有一些脚本文件，CSS文件，并且还有一个aspx页面。【备注：具体App的开发细节以后会有文章介绍，这里不做展开】</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195133-6145485f414042f8b23fb5d85806c708.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195134-7d13a05c69004f5fa946eaf367dd2ad2.png" width="244" height="119"></a></p>
<p>我这里不准备对其做任何修改，直接选择解决方案，然后选择“部署解决方案”即可，如果不出意外的话，你应该能部署成功。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195136-a5341d68bce3470cb9ccf88d4092b7bc.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195136-b616c24d26a242e4bf7328dd7e29078b.png" width="244" height="154"></a></p>
<p>【备注】如果你直接使用安装SharePoint Farm的账号打开Visual Studio ，创建App项目并且部署，你会发现其实是部署不了的，错误消息如下。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195138-c32f253dba3b4118821db71f140d9791.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195138-69e0ff35aa1f45ddaa27c75c55570f69.png" width="244" height="44"></a></p>
<p>解决方法就是再创建一个账号，用这个账号登陆来做开发，并且将这个账号添加为Farm Administrator，默认网站集的Site collection administrator，并且在数据库服务器中，将其添加为sysadmin这个角色。</p>
<p>&nbsp;</p>
<p>如果完成了部署，你可以打开默认的站点，在左侧导航区域会出现刚刚你建立和部署的App的链接。点击这个链接，可以运行这个App（其实是打开了其中的Default.aspx页面）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195139-8bdcc1391fa643bdb5289a35da65653f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195139-9c96f51e470448b0807aa6929a6f6c57.png" width="244" height="118"></a></p>
<p>【备注】实际上，你如果第一次打开的话，可能会要求你输入用户名和密码。我是通过设置了IE选项，而避免了每次输入用户名和密码的。</p>
<p>首先，我将*.apps.corp.contoso.com添加到了信任站点</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195139-fdd3af4eb3de4f6580790191bf207896.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195140-190e3c72b5f842c496b16792078bc322.png" width="244" height="218"></a></p>
<p>然后，我设置了信任站点的安全选项，让它自动地以当前用户的身份登陆。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201310/30195141-c9a45936a3794ccf87ece1553aeccab2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/30195142-fc55fba8db264e4ea5cbff0a8e450051.png" width="244" height="147"></a></p>]]></description></item><item><title>SharePoint Server 2013开发之旅（二）：使用在线的开发人员网站进行SharePoint App开发</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/10/29/3395046.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 29 Oct 2013 12:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/10/29/3395046.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/p/3394652.html">上一篇</a>我已经介绍了新版本的SharePoint Server提供了四种主要的开发场景，其中一个全新的App开发模型让我们眼前一亮。这一篇我将介绍如何在线进行SharePoint App开发。</p> <p>谈到SharePoint开发，有些经验的开发人员都会感慨要搭建一个开发环境并非易事，因为以前我们如果需要做这方面的开发，不仅仅需要安装专业的开发工具（主要是指Visual Studio），而且还必须安装SharePoint Server。结果嘛，你懂的。</p> <p>现在针对App的开发，可能将改变这个状况。也就是说，如果你仅仅需要做App的开发，那么你根本就不需要在开发环境中安装SharePoint，你只需要安装Visual Studio 2012以及一个小插件即可，甚至连这些都不要，完全在线开发。</p> <p>下面我还是分步骤地来说明一下这个环境如何配置吧</p> <p>&nbsp;</p> <h1>第一步（必须）：你需要申请Office 365开发人员账号</h1> <p>既然不想自己安装和部署完整的SharePoint环境，现在可以使用微软提供的office 365开发人员网站来进行App的开发（包括SharePoint App,也包括Office App），所以首先你必须申请一个Office 365账号。微软官方的文档请参考这里:<a title="http://msdn.microsoft.com/en-us/library/fp179924.aspx" href="http://msdn.microsoft.com/en-us/library/fp179924.aspx">http://msdn.microsoft.com/en-us/library/fp179924.aspx</a>&nbsp;</p> <p>很高兴地给大家介绍，微软为所有的开发人员都提供免费的试用版（为期1个月），而且申请试用版没有任何的条件，也无需提供信用卡等信息。如果想一直使用，则可以以$99/年的费用购买。开发人员网站是只能用于自己开发的</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201147-e9fd9f104d6c42bf849954cf3d7502c7.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201148-ec44350749b948e388204a32199f6a4e.png" width="244" height="206"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201149-ea75298dac4b490fbe1e2cec9c37bd75.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201150-dac0b4fa197346c68717badfe3c7a4fa.png" width="244" height="227"></a></p> <p>账号申请之后，你会进入一个管理页面</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201154-b208c033fa8f4be8a10b4e1c44b39b4f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201154-ff0934496c1a4f9b94896512c3be9d0f.png" width="244" height="164"></a></p> <p>在确认所有服务的状态都是“没有问题”的前提下，可以点击顶部的“构建应用”链接，进入专门提供的“开发人员网站”</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201159-6b2a50a0d27848539ddd5f90e9781f74.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201159-4f0beb9f87a544528547b856a452b93f.png" width="244" height="181"></a></p> <p>这样的话，服务端的SharePoint Online就准备好了。</p> <p>&nbsp;</p> <h1>第二步（可选）：安装Visual Studio 2012和有关的插件</h1> <p>Visual Studio一直是作为SharePoint的专业开发工具。针对SharePoint Server 2013，必须使用Visual Studio 2012专业版或者更高版本进行开发。</p> <p>默认情况下，Visual Studio 2012在安装的时候，并没有针对SharePoint Server 2013的有关模板，而是仅仅包含SharePoint Server 2010的有关模板（仅针对解决方案开发）。你需要安装下面这个插件，以便进行SharePoint Server 2013开发（包括App开发和传统的解决方案开发）</p> <p><a href="http://aka.ms/OfficeDevToolsForVS2012">http://aka.ms/OfficeDevToolsForVS2012</a> <p>安装好之后，就可以看到有关SharePoint Server 2013的一些模板 <p><a href="http://images.cnitblog.com/blog/9072/201310/29201201-8431881e5d5c4dc08d01adb278a48bc6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201201-a9beeb16b0e342999bee6a08f8d43f93.png" width="244" height="170"></a> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201204-c000d274e67247d5b85e1c7a0bba2de5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201204-a1ae180ffbdf411ca129552f75d4e6b5.png" width="244" height="170"></a> <p>下面我演示一个最简单的App开发和部署的过程（关于App开发的细节，典型的场景等等以后会有专门的文章介绍） <p>首先，创建一个新的项目 <p><a href="http://images.cnitblog.com/blog/9072/201310/29201208-4442f19da88b4cc798fee73f1309a398.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201208-9a0e91d45b3b4d19974b63e9a2a44917.png" width="244" height="170"></a> <p>在接下来的窗口中输入你申请到的Office 365开发人员网站的地址，托管类型选择“SharePoint-host”，并且点击Validate，此时会有一个登录的页面，请输入你的账号和密码 <p><a href="http://images.cnitblog.com/blog/9072/201310/29201209-782506e6191f49da97a322bcbec2bfff.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201210-0f036d70947641efb7810b49f6b9005b.png" width="244" height="179"></a> <p>验证成功后，点击“Finish” 按钮，在Visual Studio中会得到下面这样一个项目结构 <p><a href="http://images.cnitblog.com/blog/9072/201310/29201212-4dd8b96596d747c39e44a00e3d84e3ab.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201213-e4cbc564826c4cbeaecda672ba7976ea.png" width="244" height="174"></a> <p>App开发的典型场景之一就是以页面形式进行开发，结合了HTML5和Javascript的技术，实现与SharePoint Server和内容的交互。（具体功能以后我们会讨论）。 <p>我们先不对这个项目做任何的修改，直接部署起来看看效果如何。选中解决方案，然后在右键菜单中选择“Deploy Solution”菜单，如果不出意外的话，很快就能部署成功。（这方面Visual Studio做得很到位） <p>然后我们回到开发人员网站，会看到一个新部署的App <p><a href="http://images.cnitblog.com/blog/9072/201310/29201216-be3622c641a8417486fd2f8ed797eb16.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201217-d7c6339afd144c85a49360ed04fe48d4.png" width="244" height="237"></a> <p>如果我们去点击这个App，就会打开一个新的页面，如下图所示 <p><a href="http://images.cnitblog.com/blog/9072/201310/29201219-be18b79283f24d33a7ec6511f40b63b0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201219-f77d0ea164104353b7f8f78c77d70c08.png" width="244" height="164"></a> <p>这样我们的App就运行起来了。 <p>【注意】这里我们可以留意一下地址栏中的那个地址，是很特殊的格式，大家先有一个印象，下一篇我们在配置自己的App服务器的时候，有一步是跟这个地址有关系。 <p><a title="https://xizhangdev-ece5e3f97ecd25.sharepoint.com/SharePointAppSample/Pages/Default.aspx?SPHostUrl=https%3A%2F%2Fxizhangdev%2Esharepoint%2Ecom&amp;SPLanguage=zh%2DCN&amp;SPClientTag=0&amp;SPProductNumber=16%2E0%2E2120%2E1226&amp;SPAppWebUrl=https%3A%2F%2Fxizhangdev%2Dece5e3f97ecd25%2Esharepoint%2Ecom%2FSharePointAppSample" href="https://xizhangdev-ece5e3f97ecd25.sharepoint.com/SharePointAppSample/Pages/Default.aspx?SPHostUrl=https%3A%2F%2Fxizhangdev%2Esharepoint%2Ecom&amp;SPLanguage=zh%2DCN&amp;SPClientTag=0&amp;SPProductNumber=16%2E0%2E2120%2E1226&amp;SPAppWebUrl=https%3A%2F%2Fxizhangdev%2Dece5e3f97ecd25%2Esharepoint%2Ecom%2FSharePointAppSample">https://<strong><font color="#ff0000">xizhangdev</font></strong>-ece5e3f97ecd25.<strong><font color="#ff0000">sharepoint.com</font></strong>/<font color="#0000ff"><strong>SharePointAppSample</strong></font>/Pages/Default.aspx?SPHostUrl=https%3A%2F%2Fxizhangdev%2Esharepoint%2Ecom&amp;SPLanguage=zh%2DCN&amp;SPClientTag=0&amp;SPProductNumber=16%2E0%2E2120%2E1226&amp;SPAppWebUrl=https%3A%2F%2Fxizhangdev%2Dece5e3f97ecd25%2Esharepoint%2Ecom%2FSharePointAppSample</a> <p>也就是说，所有的App，其实都是共用了一个域名 sharepoint.com。但有一个特殊的前缀（你的站点标识，一个App序列号），并且有一个特殊的后缀（App的名称）。 <p>&nbsp; <p>&nbsp; <h1>第三步（可选）：在开发网站中启用Napa这个工具进行在线的开发</h1> <p>我们已经看到在Visual Studio中可以很方便地进行开发和部署，但如果你不想安装这个工具，现在也有一个更加简单的选择。你可以直接使用开发网站中集成的一个Napa的工具进行在线的开发。</p> <p>首先，在开发网站中，选择“添加应用程序”</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201223-0d952c7af0a64438bb1b392c63bfa154.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201224-1110709ad4354de59090bf129b0e02b1.png" width="244" height="164"></a></p> <p>在接下来的页面中选择“SharePoint 应用商店”</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201228-c7b5fe1a10f743ceae53dbc472b90beb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201228-53256585d7bc4849b4e65e274d73b5d3.png" width="244" height="205"></a></p> <p>请注意选择一个语言，然后点击“Napa” Office 365 Development Tools…”这个App</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201234-063a92b7d0094b8d8cc064b96655bfd3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201235-a87b3b35eb3c4bc48648ee292408ea98.png" width="244" height="150"></a></p> <p>然后就可以添加这个App了</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201238-7f6f652e72104346a81352ca946b1ca1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201239-604c770f30c445b99d097de1d9ef580f.png" width="244" height="166"></a></p> <p>接下来我们看看如何利用Napa进行简单的App开发和部署。（同样的，一些技术细节并不会出现在这里，以后会有专门的文章）</p> <p>我们回到开发人员网站的首页，刚才添加的Napa开发工具会出现在导航区域中</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201241-43bced56bfcc4b0dbd8d8f92d9bbc648.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201242-77b5ee1f1de14e62a8fec74eeb97ecbc.png" width="244" height="197"></a></p> <p>点击这个链接，就可以打开Napa开发的页面</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201244-ce41785c5ef14c79b5592ae30ef32d92.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201245-d9f091b3bdda46a4a97bd175df7beb7d.png" width="244" height="164"></a></p> <p>添加新项目</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201247-48452c83cf7b4f7eae99e03a68b29535.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201248-57efb80d8c9d4a97b4d860601bc65f98.png" width="244" height="164"></a></p> <p>我们可以看到和Visual Studio中差不多的一个项目结构，以及一个在线的编辑器</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201253-e7112ecdc8da411692ca2d45342ce65a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201254-a29419ddf2654159a0cc34ef6778d0f1.png" width="244" height="164"></a></p> <p>Napa项目会默认提供对jquery的支持，而且有智能感知</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201257-859fe39229574d48951de731825f6acd.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201258-26ae585a0f52411db132d8856a3203e6.png" width="244" height="164"></a></p> <p>在这里我不准备对网页内容进行任何的修改，直接点击左侧的Run Project按钮</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201303-3b82bd3dfecf42749891e21b62f7d574.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201305-b22b4df16dd243218f1e9f7cc513d74d.png" width="244" height="196"></a></p> <p>部署成功之后，会自动打开这个App，如下图所示</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29201306-75c88bf5421f416d99a2bf4958b748dd.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29201306-3f936504c1254cf2aac527c409ecabc6.png" width="244" height="193"></a></p>      <p>&nbsp;</p> <p>&nbsp;</p> <p>到这里为止，我介绍了如何结合Office 365开发人员网站进行SharePoint App开发的步骤和简单效果。细节的功能开发后续我们再讨论。下一篇将介绍如何在企业内部的SharePoint服务器配置App开发环境。</p>]]></description></item><item><title>SharePoint Server 2013开发之旅（一）：新的开发平台和典型开发场景介绍</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/10/29/3394652.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 29 Oct 2013 09:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/10/29/3394652.html</guid><description><![CDATA[<p>我终于开始写这个系列文章，实际上确实有一段时间没有动笔了。最近重新安装了一套SharePoint Server 2013的环境，计划利用工作之余的时间为大家写一点新的东西。</p> <p>SharePoint Server 2013发布后，现在已经有一些企业客户在评估甚至在考虑升级到这个新的版本了。从我的感受来说，我觉得这个版本改进还是挺大的，尤其是体现在用户友好性等一些方面。而深入地去看，后台的一些架构也发生了较大的变化。我觉得这样一个产品，它后续的发展趋势一定是这两个方面：对用户越来越简单，而对于架构和服务层来说，应该是越来越强大或者灵活。</p> <p>要进行本系列文章的学习，你最好能自己安装一个环境。对于安装和配置，SharePoint Server 2013和之前的版本（尤其是2010）是类似的，基本上都可以通过一个安装向导全部完成。但是，我要提醒大家一个问题，最好使用Windows Server 2012，以及配合SQL Server 2012 SP1进行安装。我曾经在这个环境配置上也花了很多的时间（在Windows Server 2008 R2上面能安装配置成功，但可能会有一些不确定性的问题，而且很难解决），最终我总结出来这样的经验，希望大家不要走弯路。</p> <p>要安装这样的一个环境，你还得确保有足够好的硬件。我觉得最起码CPU应该是双核或者四核，而内存应该至少8GB，硬盘最好也能快一点。如果有条件，建议用物理机安装，而不是虚拟机。（除非你跟我一样，有16G的内存，而且足够多的CPU可以分配给虚拟机）</p> <p>下面是SharePoint Server 2013安装配置好之后默认的团队网站的界面，扁平化的设计体验，这是目前最流行的，不是吗？（关于如何使用，配置等方面的内容，这里不做具体的展开，我可能会在另外一个系列中去谈，这个系列专门讲开发方面的内容）</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170053-5e7ebf98f84045ab80a9b6042584b33e.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170053-d7ff86d8b9f745019de454fc12d69000.png" width="244" height="185"></a></p> <p>另外，安装好之后，建议你根据我的另外一篇文章，采用脚本的方式对其进行预热。<a title="http://www.cnblogs.com/chenxizhang/p/3271990.html" href="http://www.cnblogs.com/chenxizhang/p/3271990.html">http://www.cnblogs.com/chenxizhang/p/3271990.html</a></p> <p>好的，那么我们言归正传吧，SharePoint Server 2013带来了一些新的开发模型，进一步扩充了开发定制的能力和多样性，为开发人员以及最终用户提供了更好的体验。</p> <p>首先，我要说一下的是，现在的SharePoint不仅仅是可以安装在公司内部的服务器上面（这当然是最强大的，但同时也是最昂贵的解决方案），在公网上面，在微软提供的Windows Azure平台上也有可以按照使用付费的在线版本。这个在线版本是属于Office 365（<a title="http://www.microsoft.com/china/office365/" href="http://www.microsoft.com/china/office365/">http://www.microsoft.com/china/office365/</a>）这个产品范畴的。和Windows Azure的很多服务一样，你可以免费注册Office 365的试用版了解和评估。</p> <p>下图是我自己的一个订阅的截图</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170054-07c26864757040c8a4f72cfc8f5b9901.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170055-d6ac63ea2ee847f596a01c44dfd89cfa.png" width="244" height="201"></a><a href="http://images.cnitblog.com/blog/9072/201310/29170100-98a1aa404b2a48f6bc653bdf164f9a30.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170101-1d30a692935f427da6ab7657cb2d1f74.png" width="244" height="183"></a></p> <p>这两种部署和使用的方式，既为用户提供了更好的选择，也为开发人员提供了更好的空间，这将为开发人员的智慧成果提供了更加广阔的分发可能性。</p> <p>总的来说，SharePoint Server 2013为我们现在提供的开发平台更加丰富了，我们可以选择的开发场景主要包括下面几种</p> <h1>1. 全新的App开发</h1> <p>App是这几年炙手可热的一个概念，自从在iPhone中被成功引入之后，它改变了人们的生活，也改变了很多开发人员的思维方式。是的，现在是时候，让SharePoint的开发人员也打开一种新的思维方式了，因为从这个版本开始，你的智慧成果，可以通过App这样的方式，更加简单和方便地分发到任何地方，不管是公司内部安装的SharePoint Server，还是仅仅在线使用的SharePoint服务。</p> <p>你将会有两种不同的开发工具，一种是你已经很熟悉的Visual Studio （要求是VS2012,而且必须安装额外的插件）</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170102-84c4037e8ca6449a9167673ca7aee087.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170102-03c7aebd3b3041e6a3b5c77d2560e2ad.png" width="244" height="170"></a></p> <p>或者你如果申请了Office 365的服务，则可以直接在线使用网页的方式进行开发。这个工具名叫Napa</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170106-7e25636f02e54db7a52a949188c6036a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170109-fac6fed12249488baff974734d409f6e.png" width="244" height="183"></a></p> <p>你开发的App，可以直接部署到企业的SharePoint服务器中，像下面这样</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170110-3b6f6564a02943429f0176ab0b15f182.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170110-c9c18a975881460a85bdf0b9fc7e1cea.png" width="244" height="161"></a></p> <p>实际上，如果你做的是一个可以公开的商业应用（App），最好的部署方式，是将其发布到SharePoint App Marketplace中去。前提是你需要有Office Developer的账号（你可以通过这里了解更多 <a title="http://msdn.microsoft.com/en-US/office/apps" href="http://msdn.microsoft.com/en-US/office/apps">http://msdn.microsoft.com/en-US/office/apps</a>）</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170114-3cb7342f8fb546fbb4cba6483b70d338.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170115-b3b1440b97f5432898a7a0eda4c71a0e.png" width="244" height="181"></a></p> <p>然后，对于用户来说，App的概念会逐渐被接受，因为在SharePoint Server 2013中，任何要添加的新内容其实都是所谓的App，列表是App，文档库也是App，其他的也是App</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170117-85b7ba5efc3a449384bed4f18eb3f91f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170117-a1460ba0d1d7438a93073387e0fe739a.png" width="244" height="161"></a><a href="http://images.cnitblog.com/blog/9072/201310/29170122-8cd41607536a4e44ace2333248a5b03a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170126-5196fb54acd8466e9cb0a17306be78c4.png" width="244" height="162"></a></p> <p>【备注】关于如何配置本地或者在线的App开发环境，后续有专门的文章介绍</p> <p>&nbsp;</p> <h1>2. 传统的解决方案开发</h1> <p>App席卷而来，带来了很多新的气息和面貌，但并不是对于传统解决方案的彻底颠覆。我相信二者共存的局面不会被打破，因为解决方案可以开发一些特殊的应用，包括在整个服务器场运行的解决方案，以及定时运行的作业等等。</p> <p>应该说，解决方案开发是最强大、最完整的一种开发方式，从Visual Studio 所提供的模板就可以可见一斑了</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170127-9e52f931bedc41d5958b5978c7af2fcc.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170129-73d1e2dd1edd4d5e970da3880f3400c2.png" width="244" height="169"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170134-2a52bec68e734737a858016f115be616.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170135-b229df1559a9486eb32ee3cbc765222d.png" width="244" height="201"></a></p> <p>和以前一样，解决方案开发仍然支持两种模式：场解决方案和沙箱解决方案</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170135-05637b9a75444cf0a453442cef202943.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170136-1ecfff6e0e3f4cc3b6bbe2a80e3b8e50.png" width="244" height="177"></a></p> <p>【备注】关于如何配置解决方案开发和调试环境，后续有专门的文章介绍</p> <p>&nbsp;</p> <h1>3. 增强的基于声明的无代码开发</h1> <p>除了以上的专业开发之外，SharePoint其实一直支持基于声明的无代码开发这种手段。主要将使用的开发工具是SharePoint Designer。</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170139-58042a030de545da8e89aa8072443a33.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170140-f10d7c6392cb4b32bfd63ac5c2c9e47a.png" width="244" height="154"></a></p> <p>在新版本中，主要的改变是对工作流的开发，有了新的设计器和工作路管理器，并且支持最新的Workflow Foundation 4.0</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170140-ee8de1c9f5c94270b341143772656f9a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170141-0c058795a6da499caf34ca2d4ba0abfb.png" width="244" height="162"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170141-cc695d43656e41e5b8966e05c1e9c668.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170142-4df932c028b34785b3551222c316393b.png" width="244" height="122"></a></p> <p>&nbsp;</p> <p>【备注】关于如何配置工作流开发和调试环境，后续有专门的文章介绍</p> <h1>4. 全新的网站设计定制和打包</h1> <p>SharePoint Server 2013对于网站架构做了一些优化，并且也为网站定制和打包做了改进，以便设计人员可以更加容易定制网站的布局（包括母版页，布局页）和风格（包括主题），并且这些定制成果可以更好地分发。</p> <p>现在多了一个工具，叫做Design Manager，打开来之后看起来是下面这样的</p> <p><a href="http://images.cnitblog.com/blog/9072/201310/29170143-7392991e77cb4c0d80e0cae4e968f0c0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201310/29170143-3cfc15730d3243f6a023caee5c6e748a.png" width="244" height="115"></a></p> <p>【备注】关于如何启用Design Manager，以及如何使用，后续有专门的文章介绍</p> <p>&nbsp;</p> <p>好的，这一篇文章是开了一个头，希望大家能对SharePoint开发有一个大局的认识，后续我们将逐渐地展开讨论。如果大家有比较感兴趣的话题，或者疑问，可以直接留言让我知道。</p>]]></description></item><item><title>在WPF应用程序中利用IEditableObject接口实现可撤销编辑的对象</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/26/3281910.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 26 Aug 2013 01:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/26/3281910.html</guid><description><![CDATA[<p>这是我辅导的一个项目开发中的例子，他们是用WPF做界面开发，在学习了如何使用MVVM来实现界面与逻辑的分离，并且很好的数据更新之后，有一个疑问就是，这种双向的数据更新确实很不错，但如果我们希望用户可以撤销修改怎么办呢？其实这个功能，很早就有，甚至在原先的Windows Forms里面也可以实现。秘密就是实现IEditableObject这个接口。</p> <p>关于这个接口的官方文档在这里：<a href="http://msdn.microsoft.com/zh-cn/library/vstudio/system.componentmodel.ieditableobject.aspx">http://msdn.microsoft.com/zh-cn/library/vstudio/system.componentmodel.ieditableobject.aspx</a></p> <p>&nbsp;</p> <p>我做了一个小的例子，帮助大家来理解。该例子使用了MVVM这种设计模式，如果你对此不熟悉，请先参考：<a href="http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html">http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html</a></p> <p>这个例子，你可以通过 <a title="http://files.cnblogs.com/chenxizhang/WpfApplicationBindingSample.zip" href="http://files.cnblogs.com/chenxizhang/WpfApplicationBindingSample.zip">http://files.cnblogs.com/chenxizhang/WpfApplicationBindingSample.zip</a> 进行下载</p> <h1>Model：Employee</h1><pre class="csharpcode"><span class="kwrd">using</span> System.ComponentModel;

<span class="kwrd">namespace</span> WpfApplicationBindingSample.Models
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 业务实体(Business Entity)</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">class</span> Employee : INotifyPropertyChanged,IEditableObject
    {
        <span class="kwrd">private</span> <span class="kwrd">string</span> _firstName;

        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName
        {
            get { <span class="kwrd">return</span> _firstName; }
            set
            {
                <span class="kwrd">if</span> (_firstName != <span class="kwrd">value</span>)
                {
                    _firstName = <span class="kwrd">value</span>;
                    <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                    {
                        PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(<span class="str">"FirstName"</span>));
                        PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(<span class="str">"FullName"</span>));
                    }
                }
            }
        }

        <span class="kwrd">private</span> <span class="kwrd">string</span> _lastName;
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName
        {
            get { <span class="kwrd">return</span> _lastName; }
            set
            {
                <span class="kwrd">if</span> (_lastName != <span class="kwrd">value</span>)
                {
                    _lastName = <span class="kwrd">value</span>;
                    <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                    {
                        PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(<span class="str">"LastName"</span>));
                        PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(<span class="str">"FullName"</span>));
                    }
                }
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">string</span> FullName
        {
            get
            {
                <span class="kwrd">return</span> FirstName + <span class="str">","</span> + LastName;
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">private</span> Employee backup;<span class="rem">//用这个字段来保存一个备份数据</span>
        <span class="kwrd">public</span> <span class="kwrd">void</span> BeginEdit()
        {
            <span class="rem">//开始编辑，此时将当前的状态保存起来，以便后续可以根据情况提交或者撤销更改</span>
            backup = <span class="kwrd">this</span>.MemberwiseClone() <span class="kwrd">as</span> Employee;<span class="rem">//通过克隆的方式直接地复制一份数据</span>
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> CancelEdit()
        {
            <span class="rem">//撤销编辑，此时将对象状态恢复到备份的状态</span>
            <span class="kwrd">this</span>.FirstName = backup.FirstName;
            <span class="kwrd">this</span>.LastName = backup.LastName;
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> EndEdit()
        {
            <span class="rem">//结束编辑，这里可以不做任何事情，也可以添加一些额外的逻辑</span>
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>ViewModel:</h1><pre class="csharpcode">
<span class="kwrd">using</span> GalaSoft.MvvmLight;
<span class="kwrd">using</span> GalaSoft.MvvmLight.Command;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> WpfApplicationBindingSample.Models;

<span class="kwrd">namespace</span> WpfApplicationBindingSample.ViewModels
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 视图模型：专门用来为界面（视图）来服务的，这里用来包含一些业务逻辑</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">class</span> MainWindowViewModel : ViewModelBase
    {

        <span class="kwrd">public</span> MainWindowViewModel()
        {
            CurrentEmployee = <span class="kwrd">new</span> Employee()
            {
                FirstName = <span class="str">"ares"</span>,
                LastName = <span class="str">"chen"</span>
            };
        }

        <span class="kwrd">public</span> Employee CurrentEmployee { get; set; }
        <span class="kwrd">public</span> RelayCommand EditCommand {
            get {
                <span class="kwrd">return</span> <span class="kwrd">new</span> RelayCommand(() =&gt; {
                    <span class="rem">//将该员工设置为开始编辑</span>
                    CurrentEmployee.BeginEdit();
                });
            }
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 使用命令的机制代替了事件</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> RelayCommand SubmitCommand
        {
            get
            {<span class="rem">//使用匿名方法</span>
                <span class="kwrd">return</span> <span class="kwrd">new</span> RelayCommand(() =&gt;
                {
                    <span class="rem">//结束编辑，让更改生效</span>
                    CurrentEmployee.EndEdit();

                    MessageBox.Show(CurrentEmployee.FullName);
                });
            }
        }

        <span class="kwrd">public</span> RelayCommand CancelCommand
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">new</span> RelayCommand(() =&gt;
                {
                    CurrentEmployee.CancelEdit();<span class="rem">//取消编辑，此时可以看到FullName那个标签的文本恢复到原来的值</span>
                });
            }
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>View:</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationBindingSample.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">xmlns:vm</span><span class="kwrd">="clr-namespace:WpfApplicationBindingSample.ViewModels"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--绑定数据上下文--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">vm:MainWindowViewModel</span><span class="kwrd">&gt;&lt;/</span><span class="html">vm:MainWindowViewModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="3"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="TextBox"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="Width"</span>
                    <span class="attr">Value</span><span class="kwrd">="200"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="HorizontalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Left"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="Button"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="Width"</span>
                    <span class="attr">Value</span><span class="kwrd">="100"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="HorizontalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Left"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">StackPanel</span> <span class="attr">Margin</span><span class="kwrd">="10"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">FontSize</span><span class="kwrd">="30"</span>
                   <span class="attr">Text</span><span class="kwrd">="编辑员工"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="姓氏"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBox</span> <span class="attr">Text</span><span class="kwrd">="{Binding CurrentEmployee.FirstName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--匈牙利命名法--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="名称"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBox</span> <span class="attr">Text</span><span class="kwrd">="{Binding CurrentEmployee.LastName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="全称"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="{Binding CurrentEmployee.FullName}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">Content</span><span class="kwrd">="编辑"</span>
                <span class="attr">Command</span><span class="kwrd">="{Binding EditCommand}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">Content</span><span class="kwrd">="提交"</span>
                <span class="attr">Command</span><span class="kwrd">="{Binding SubmitCommand}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">Content</span><span class="kwrd">="取消"</span>
                <span class="attr">Command</span><span class="kwrd">="{Binding CancelCommand}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>]]></description></item><item><title>一个在ASP.NET中利用服务器控件GridView实现数据增删改查的例子</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/26/3281833.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 26 Aug 2013 00:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/26/3281833.html</guid><description><![CDATA[<p>备注：这是我辅导的一个项目开发组的一个例子，用文章的方式分享出来，给更多的朋友参考。其实我们这几年的项目中，都不怎么使用服务器控件的形式了，而是更多的采用MVC这种开发模式。但是，如果项目的历史背景是用服务器控件的，也不妨继续沿用，以免变动太大，对项目的整体开发不利。</p> <p>很多企业业务程序的页面，其实本质上都是对数据的操作，诸如增加、删除、修改和查询（简称：增删改查），如果有可能在一个页面中完整地实现（不需要几个页面转来转去），对于用户来说可能体验较好。</p> <p>ASP.NET在2.0中开始提供多种数据控件，并且采用了模板的机制，使得我们上面的需求变得可能。今天要讲的就是号称ASP.NET中最复杂的控件：GridView的使用。它可以完整实现增删改查。</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/26084050-72bb0dba032e4da3876d26990c461b8f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/26084050-9e386915f3cb41da870cf1bcb372ea54.png" width="244" height="95"></a><a href="http://images.cnitblog.com/blog/9072/201308/26084050-91d14f336f234ecdaee67d20ce898917.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/26084051-a365af972d9d45e59acbc389c2e673de.png" width="244" height="95"></a><a href="http://images.cnitblog.com/blog/9072/201308/26084051-80808d57567b407fa2f3cfca5abcd6b8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/26084052-91bce288f6974368a6c05efddd18dd9d.png" width="244" height="95"></a><a href="http://images.cnitblog.com/blog/9072/201308/26084052-c4d61eff75b3487fa5b1cc6bde9bce98.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/26084052-7ac937e8fe06457db76ff4301f550e01.png" width="244" height="109"></a></p> <p>&nbsp;</p> <p>页面：</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplicationSample.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:GridView</span> <span class="attr">ID</span><span class="kwrd">="gvData"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">OnRowDeleting</span><span class="kwrd">="gvData_RowDeleting"</span> <span class="attr">OnRowUpdating</span><span class="kwrd">="gvData_RowUpdating"</span> <span class="attr">OnRowCancelingEdit</span><span class="kwrd">="gvData_RowCancelingEdit"</span> <span class="attr">OnRowEditing</span><span class="kwrd">="gvData_RowEditing"</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="true"</span> <span class="attr">AutoGenerateDeleteButton</span><span class="kwrd">="true"</span> <span class="attr">AutoGenerateEditButton</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>

               <span class="asp">&lt;%</span>--&lt;Columns&gt;
                    &lt;asp:CommandField HeaderText=<span class="str">"操作"</span> UpdateText=<span class="str">"保存"</span> CancelText=<span class="str">"取消"</span> DeleteText=<span class="str">"删除"</span> ShowDeleteButton=<span class="str">"true"</span> ShowEditButton=<span class="str">"true"</span> EditText=<span class="str">"编辑"</span> /&gt;
                &lt;/Columns&gt;--<span class="asp">%&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">asp:GridView</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">asp:Button</span> <span class="attr">ID</span><span class="kwrd">="btAddNew"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">="添加新记录"</span> <span class="attr">OnClick</span><span class="kwrd">="btAddNew_Click"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    

    <span class="kwrd">&lt;</span><span class="html">script</span><span class="kwrd">&gt;</span>
        <span class="rem">//这里为所有删除按钮都处理一个事件，请用户确认</span>
        <span class="kwrd">var</span> links = document.links;<span class="rem">//获取所有的链接</span>
        <span class="kwrd">for</span> (<span class="kwrd">var</span> i <span class="kwrd">in</span> links) {<span class="rem">//循环他们</span>
            <span class="kwrd">var</span> a = links[i];<span class="rem">//取得当前这个链接</span>
            <span class="kwrd">if</span> (a.text == <span class="str">"Delete"</span> || a.text==<span class="str">"删除"</span>) {<span class="rem">//如果是删除按钮的话</span>
                <span class="kwrd">var</span> o = a.href;<span class="rem">//获取这个链接的地址（默认会生成一个执行javascript的地址的）</span>

                a.href = <span class="str">"#"</span>;<span class="rem">//将这个地址删除掉，就是不要让他执行默认的行为</span>
                a.addEventListener(<span class="str">"click"</span>, <span class="kwrd">function</span> () {<span class="rem">//添加一个新的事件注册</span>
                    <span class="kwrd">var</span> result = window.confirm(<span class="str">"你是否真的要删除?"</span>);<span class="rem">//向用户确认是否要删除</span>
                    <span class="kwrd">if</span> (result == <span class="kwrd">true</span>)<span class="rem">//如果用户确定</span>
                        eval(o);<span class="rem">//执行原先默认的那个方法（去服务器删除数据）</span>
                    <span class="kwrd">return</span> <span class="kwrd">false</span>;
                });
            }
        }
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>代码：</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Web.UI.WebControls;

<span class="kwrd">namespace</span> WebApplicationSample
{


    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 这个实例主要演示了如何使用GridView进行数据的增、删、改、查。</span>
    <span class="rem">/// 更多有关于该控件的知识，可以参考 http://msdn.microsoft.com/zh-cn/library/vstudio/system.web.ui.webcontrols.gridview.aspx （请仔细阅读）</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Default : System.Web.UI.Page
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这是我们定义的一个业务实体类，用来保存界面上的列表数据，为了保存，必须支持序列化</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [Serializable]
        <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
        {
            <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
            <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
        }


        <span class="kwrd">private</span> List&lt;Employee&gt; data = <span class="kwrd">new</span> List&lt;Employee&gt;();<span class="rem">//这是用来保存那个列表数据的字段</span>
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 重写这个方法来保存视图状态。因为每次页面刷新的时候，默认情况下，data都会被清空，如果希望在多次回发的过程中保存数据，则重写该方法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">object</span> SaveViewState()
        {
            var obj = <span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="kwrd">base</span>.SaveViewState(), data };
            <span class="kwrd">return</span> obj;
        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 重写该方法，是与上面这个方法配套，在回发回来之后加载并还原</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="savedState"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> LoadViewState(<span class="kwrd">object</span> savedState)
        {
            var obj = savedState <span class="kwrd">as</span> <span class="kwrd">object</span>[];

            <span class="kwrd">base</span>.LoadViewState(obj[0]);
            data = obj[1] <span class="kwrd">as</span> List&lt;Employee&gt;;
        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 页面初始化的时候执行该代码</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">if</span> (!IsPostBack)
            {<span class="rem">//这里只是一个示例，默认给页面添加一个初始的员工，实际在做的时候，可以不加</span>
                data = <span class="kwrd">new</span> List&lt;Employee&gt;(){
                    <span class="kwrd">new</span> Employee(){FirstName =<span class="str">"ares"</span>,LastName =<span class="str">"chen"</span>}
                };

                gvData.DataSource = data;
                gvData.DataBind();
            }
        }


        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 添加新的员工时执行该代码</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> btAddNew_Click(<span class="kwrd">object</span> sender, EventArgs e)
        {
            data.Add(<span class="kwrd">new</span> Employee());<span class="rem">//创建一个空的对象</span>
            gvData.DataSource = data;<span class="rem">//设置数据源</span>
            gvData.EditIndex = data.Count - 1;<span class="rem">//设置当前这个对象为编辑状态</span>
            gvData.DataBind();<span class="rem">//绑定数据</span>

        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 当用户决定要删除某一行数据时执行该代码</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> gvData_RowDeleting(<span class="kwrd">object</span> sender, GridViewDeleteEventArgs e)
        {
            <span class="rem">//删除某一行</span>
            data.RemoveAt(e.RowIndex);
            gvData.DataSource = data;
            gvData.EditIndex = -1;
            gvData.DataBind();
        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 当用户要保存修改时执行该代码</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> gvData_RowUpdating(<span class="kwrd">object</span> sender, GridViewUpdateEventArgs e)
        {
            var index = e.RowIndex;<span class="rem">//获取当前编辑行当索引号</span>
            var row = gvData.Rows[index];<span class="rem">//获取当前用户编辑的这一行</span>

            var firstName = (row.Cells[1].Controls[0] <span class="kwrd">as</span> TextBox).Text;<span class="rem">//获取用户输入的数据</span>
            var lastName = (row.Cells[2].Controls[0] <span class="kwrd">as</span> TextBox).Text;<span class="rem">//获取用户输入的数据</span>


            var emp = data[index];<span class="rem">//找到这个对象</span>
            emp.FirstName = firstName;
            emp.LastName = lastName;

            gvData.DataSource = data;
            gvData.EditIndex = -1;<span class="rem">//退出编辑状态</span>
            gvData.DataBind();
        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 当用户要取消编辑的时候</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> gvData_RowCancelingEdit(<span class="kwrd">object</span> sender, GridViewCancelEditEventArgs e)
        {
            gvData.DataSource = data;
            gvData.EditIndex = -1;
            gvData.DataBind();
        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 当用户要进行编辑的时候</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">void</span> gvData_RowEditing(<span class="kwrd">object</span> sender, GridViewEditEventArgs e)
        {
            gvData.DataSource = data;
            gvData.EditIndex = e.NewEditIndex;
            gvData.DataBind();
        }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>关于未捕获异常的处理(WPF)</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/25/3280947.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 25 Aug 2013 08:39:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/25/3280947.html</guid><description><![CDATA[<p>这一篇文章来谈谈对于WPF应用程序开发中的未捕获异常的处理。</p> <p>首先，我们当然是要求应用程序开发人员，尽可能地在程序可能出现异常的地方都去捕捉异常，使用try…catch的方式。但是总是有一些意外的情况可能会发生，这就导致会出现所谓的“未捕获异常（UnhandledException）”。对于这一类异常，如果我们没有一个合适的策略进行处理，则当其发生的时候，会给用户带来不太好的使用体验。例如下面这样</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/25163859-e0afb8d3ceb64592b8c666af97942f8d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25163859-f5ec67cfaf6b4cb8919194c2fb7ce019.png" width="244" height="163"></a></p> <p>备注：这个截图是在Windows 8上面做的，其他操作系统看到的界面可能略有不同。</p> <p>用户看到这个窗口的时候，其实一般只能点击Close the prograrm按钮。也就是说，这种情况下会导致用户无法继续使用这个程序，而且他们还得不到任何具体的消息：到底发生了什么事情了？除非他们去查看Windows的事件日志。（但一般的用户是不太会这个操作的）</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/25163902-6e54b952bfd54e79836b9229b05f7b4c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25163903-eeb2a4a89fcd414dad67fc25266cf7b9.png" width="244" height="171"></a></p> <p>我们可以看到在Windows事件日志中，会有两个具体的事件。首先是一个.NET Runtime的事件</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/25163905-d6733c3ac8fa4f658c4e7184e0646c7f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25163906-76a0e7a65bf6408cbd86afa46199773d.png" width="244" height="171"></a></p> <p>然后是一个Application Error的事件</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/25163911-1f6b90c53069450d9609935a4e1382be.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25163911-0614f80b2e9b4d5d8d3bfa12fc40888a.png" width="244" height="171"></a></p> <p>通常来说，这样的用户体验有值得改进的地方。我们虽然不能防止异常的产生，但是当意外发生的时候，我们应该要以更好地方式地通知到用户，或者尽可能地不要影响用户当前的操作。</p> <p><strong></strong>&nbsp;</p> <p>在WPF这种应用程序中，会有两大类未处理异常：一类是在UI线程抛出来的，例如点击了用户界面上面的某个控件，然后执行某个代码的时候，遇到了异常；另一类是非UI线程跑出来的，例如在一个多线程的程序里面，工作线程的代码遇到了异常。</p> <p>对于UI线程的未处理异常，我们可以通过监控下面这个事件来处理</p> <p>Application.Current.DispatcherUnhandledException&nbsp;&nbsp; <a href="http://msdn.microsoft.com/en-us/library/system.windows.application.dispatcherunhandledexception.aspx">http://msdn.microsoft.com/en-us/library/system.windows.application.dispatcherunhandledexception.aspx</a></p> <p>一个参考代码如下：</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> WpfApplicationExceptionSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for App.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> App : Application
    {
        <span class="kwrd">public</span> App()
        {
            Application.Current.DispatcherUnhandledException += Current_DispatcherUnhandledException;
        }


        <span class="kwrd">void</span> Current_DispatcherUnhandledException(<span class="kwrd">object</span> sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)
        {
            MessageBox.Show(<span class="str">"我们很抱歉，当前应用程序遇到一些问题，该操作已经终止，请进行重试，如果问题继续存在，请联系管理员."</span>, <span class="str">"意外的操作"</span>, MessageBoxButton.OK, MessageBoxImage.Information);<span class="rem">//这里通常需要给用户一些较为友好的提示，并且后续可能的操作</span>

            e.Handled = <span class="kwrd">true</span>;<span class="rem">//使用这一行代码告诉运行时，该异常被处理了，不再作为UnhandledException抛出了。</span>
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>运行的效果大致如下</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/25163912-3504c9a8d4b8468c9755ed55303c1a91.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25163912-58ba7e24cbb84c50905aab69e7fe40fd.png" width="244" height="87"></a></p>
<p>&nbsp;</p>
<p>对于非UI线程抛出的未处理异常，我们需要监控另外一个事件来处理</p>
<p>AppDomain.CurrentDomain.UnhandledException&nbsp; <a href="http://msdn.microsoft.com/en-us/library/system.appdomain.unhandledexception.aspx">http://msdn.microsoft.com/en-us/library/system.appdomain.unhandledexception.aspx</a>&nbsp;</p>
<p>一个参考代码如下</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> WpfApplicationExceptionSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for App.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> App : Application
    {
        <span class="kwrd">public</span> App()
        {
            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
        }

        <span class="kwrd">void</span> CurrentDomain_UnhandledException(<span class="kwrd">object</span> sender, UnhandledExceptionEventArgs e)
        {
            MessageBox.Show(<span class="str">"我们很抱歉，当前应用程序遇到一些问题，该操作已经终止，请进行重试，如果问题继续存在，请联系管理员."</span>, <span class="str">"意外的操作"</span>, MessageBoxButton.OK, MessageBoxImage.Information);
        }


    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>令人不解的是，这个事件中没有和前面那个事件一样的e.Handled参数，就是说，虽然这样是可以捕捉到非UI线程的异常，而且也可以进行相应的处理，但是应用程序还是会退出，也就是说这个异常还是被当作是未处理异常继续汇报给Runtime。</p>
<p>为了改进这一点，我们可以通过修改配置文件来实现。</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
<strong>  <span class="kwrd">&lt;</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">legacyUnhandledExceptionPolicy</span> <span class="attr">enabled</span><span class="kwrd">="1"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">runtime</span><span class="kwrd">&gt;</span></strong>
  <span class="kwrd">&lt;</span><span class="html">startup</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">supportedRuntime</span> <span class="attr">version</span><span class="kwrd">="v4.0"</span> <span class="attr">sku</span><span class="kwrd">=".NETFramework,Version=v4.5"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">startup</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这里的<span class="html">legacyUnhandledExceptionPolicy，如果enabled=1的话，用意是使用早期版本的异常处理策略。</span></p>
<p><span class="html"></span></p>]]></description></item><item><title>牛刀小试：使用Reactive Extensions（Rx），对短时间内多次发生的事件限流</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/25/3280459.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 25 Aug 2013 01:54:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/25/3280459.html</guid><description><![CDATA[<p>我之前有一篇文章介绍到了Reactive Extension这个组件，请参考下面的文章，其中有一些基本的概念和相关的链接 </p> <h4><a href="http://www.cnblogs.com/chenxizhang/archive/2012/09/19/2694062.html">牛刀小试：使用Reactive Extensions（Rx），一行代码实现多线程任务执行规定时间后自动停止</a></h4> <p>&nbsp;</p> <p>Rx 目前还没有直接整合到.NET Framework 中，仍然是作为单独的组件存在。至于以后会不会，谁知道呢？我个人希望是可以整合进去。</p> <p>不管怎么样，我今天还是以实例来讲解这个组件的使用，如果以后有更多有意思的场景，我也会用文章分享出来。</p> <h2>我们要解决的问题</h2> <p>在.NET应用程序开发期间，我们会大量地使用到事件，而且很多事件可能会不止一次地发生，例如TextChanged事件，KeyPress事件，MouseDown事件等等。</p> <p>由于这些事件会多次发生，在某些场景下，如果每次都进行响应可能有负面的一些问题，例如性能问题。一个典型的案例是：假如我们需要根据TextChanged的事件去调用一个外部的服务，我们知道用户可以在一个很短的时间内（例如1秒内）快速输入很多的字符，同时还可能会删除字符，该事件会在每次发生更改的时候触发，如果按照传统的做法，每次都去调用服务，显然是不合适的，这样会有很多的服务请求。所以，我们可能希望，在某个时间范围内（例如1秒），只触发一次。</p> <p>为了做这个演示，我做了如下的一个界面（WPF）</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBox</span> <span class="attr">Name</span><span class="kwrd">="txtInput"</span>
                 <span class="attr">TextChanged</span><span class="kwrd">="txtInput_TextChanged"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">RichTextBox</span> <span class="attr">Name</span><span class="kwrd">="txtOutput"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">RichTextBox</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<p>后台代码我简单地做了一个处理（我并没有真的去调用服务，而是做一个结果打印）</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> txtInput_TextChanged(<span class="kwrd">object</span> sender, TextChangedEventArgs e)
        {
            txtOutput.AppendText(txtInput.Text+<span class="str">"\r"</span>);
        }
    }
}
</pre>
<p>运行起来可以看到如下的效果
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/25095359-2d7a0748fb48452699838316fc9ee523.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25095359-9583f89222f841f39aab6a38bb3b95b8.png" width="244" height="164"></a></p>
<p>&nbsp;</p>
<h2>传统的方案</h2>
<p>针对这样的一种需求，我们按照传统的思路该如何实现呢？说实在的，很难做到。这里面有一个比较复杂的逻辑，也就是说，当一个事件发生了，我们不能马上处理，而是要等待一点时间看看（例如1秒），如果还有新的事件发生（可能会多个），则以1秒内最后那个事件为准。但是，这里还有一个例外情况，如果在1秒内没有其他事件发生，则这个唯一的事件就要被处理。</p>
<p>大家可以自己尝试想想看，要做到这样的逻辑判断实在不那么容易。</p>
<p>&nbsp;</p>
<p>
<h2>使用Rx的方案</h2>
<p>而使用Rx的方案，则相对来说很简单，或者可以说是很直白。</p>
<p>首先，我们可以安装Reactive Extensions</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/25095403-9085d9c3180f4c69aa176b1c7321dc2f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25095405-f4981ed08e154034b476592e3e16f484.png" width="244" height="150"></a></p>
<p>然后，我们通过如下的方式来监听这个事件，而不是在xaml中直接定义。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Reactive.Linq;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;


<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();

            Loaded += MainWindow_Loaded;
        }


        <span class="kwrd">void</span> MainWindow_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            Observable.FromEventPattern&lt;TextChangedEventArgs&gt;(<span class="kwrd">this</span>.txtInput, <span class="str">"TextChanged"</span>).Throttle(TimeSpan.FromSeconds(1)).Subscribe(x =&gt;
                <span class="kwrd">this</span>.Dispatcher.Invoke(() =&gt;
                {
                    txtOutput.AppendText(txtInput.Text + <span class="str">"\r"</span>);
                }));
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>注意，我们在这里用了一个Throttle的方法，它可以设置一个时间间隔，在这个时间间隔里面发生的事件，应该只处理一次（最后一个为准），所以运行起来看的效果如下</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/25095405-f373d9000a7a44fd98d1a5d751b5319a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/25095405-51b8171c18dd4fbc90cf032251d234ad.png" width="244" height="164"></a></p>
<p>这里显示的结果取决于你输入的速度。</p>
<p>&nbsp;</p>
<p>值得一提的是，在WPF中如果应用双向绑定的技术，结合MVVM来做开发的话，对于此类事情的处理，可能会有一个简单的做法（不需要用到额外的组件），这是由于在WPF 4.5中，对于绑定数据的更新，有多了一个选项：Delay</p>
<p>有兴趣的朋友可以参考<a href="http://msdn.microsoft.com/zh-cn/library/vstudio/system.windows.data.bindingbase.delay.aspx">http://msdn.microsoft.com/zh-cn/library/vstudio/system.windows.data.bindingbase.delay.aspx</a></p>]]></description></item><item><title>如何对SharePoint网站进行预热(warmup)以提高响应速度</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/21/3271990.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 21 Aug 2013 02:07:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/21/3271990.html</guid><description><![CDATA[<h1>问题描述</h1> <p>SharePoint Server是一个易于使用的协作平台，目前在越来越多的企业中被应用开来。SharePoint Server是通过网站的形式向最终用户提供服务的，而这个网站是基于ASP.NET 的技术实现的。由于ASP.NET技术的特点，网站启动之后，页面在第一个用户第一次访问的时候，会需要进行所谓的JIT 编译，而这个时间，对于该用户来说，可能会显得有点长。这也是大家普遍反映的问题，为什么第一次要比较慢，而以后就较快了。</p> <p>另外，由于ASP.NET网站会使用到应用程序池的技术，而应用程序池会定时或者不定时地进行回收。回收之后的网站，如果再次访问，那么又会发生JIT编译。这就是为什么有些用户反映说，为什么之前都比较快，而突然第二天又慢了，然后又快了。</p> <p>&nbsp;</p> <h1>解决方案</h1> <p>对于SharePoint网站的优化，如果从系统角度来说，是有很多方面的。我在以前的一篇文章中（<a href="http://www.cnblogs.com/chenxizhang/archive/2011/11/13/2246958.html">http://www.cnblogs.com/chenxizhang/archive/2011/11/13/2246958.html</a>）提到过几点建议（请参考该文的结尾处）。但我今天要谈一下的是，如何在不改变网站结构和设计的前提下，采用一些辅助手段，对网站进行预热（warm up)，以便能达到提高响应速度的目的。</p> <p>预热的原理，其实很简单，既然说ASP.NET的页面第一次的JIT编译是无法避免的，那么能否在第一个用户第一次访问之前，就通过某种方式去请求这个页面，使得其编译过程提前发生，这样在用户真正来访问的时候，由于页面已经编译好了，所以就能直接使用。</p> <p>有这样的思路之后，我们就会想怎么来做到呢？</p> <h2><font style="font-weight: bold">第一个方案是通过脚本的方式来实现</font></h2> <p>请参考下面这篇文章，作者介绍了一个Powershell脚本，用来对网站</p> <h3>SharePoint 2007, 2010 or 2013 Application Warm-up Script</h3> <h3><a href="http://gallery.technet.microsoft.com/office/SharePoint-2007-2010-or-d1884b4b">http://gallery.technet.microsoft.com/office/SharePoint-2007-2010-or-d1884b4b</a></h3> <p>&nbsp; <p>使用这个脚本的方式，你可以将脚本保存为一个ps1文件，例如如果你是使用SharePoint 2010，则可以将下面这段保存为一个文件<pre class="csharpcode">cls 
 
<span class="kwrd">function</span> get-webpage([string]$url,[System.Net.NetworkCredential]$cred=$null) 
{ 
$wc = new-object net.webclient 
<span class="kwrd">if</span>($cred <span class="preproc">-eq</span> $null) 
{ 
$cred = [System.Net.CredentialCache]::DefaultCredentials; 
} 
$wc.credentials = $cred; 
<span class="kwrd">return</span> $wc.DownloadString($url); 
} <span class="rem"># end Function </span>
 

<span class="kwrd">foreach</span> ($WebApp <span class="kwrd">in</span> (Get-SPWebApplication -IncludeCentralAdministration)) 
{ 
    $sites = $WebApp | Get-SPSite | get-spweb -Limit 15   
     <span class="kwrd">foreach</span>($site <span class="kwrd">in</span> $sites) 
     { 
     write-host <span class="str">"Warming up "</span> $site.Url 
     $html= get-webpage -url $site.Url -cred $cred  
     $site.Dispose(); 
     }    <span class="rem"># end loop for each sites </span>
 
 }    <span class="rem"># end foreach web app </span>
  </pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后打开SharePoint 2010 Management Shell，运行这个ps1文件（注意，是ps1，而不是psl）</p>
<p>我这边运行的效果如下</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100650-3baf11c5a8594e079d5b0d267d9b917f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100650-7f9d3b7f367346afae2ace25a78c901a.png" width="244" height="161"></a></p>
<p>该脚本运行之后，我再去访问上面列出的网站，就几乎无需等待，马上可以看到页面。</p>
<p>&nbsp;</p>
<p>上面提到的方式是手工地运行脚本，那是否有办法定时自动地运行这个脚本呢？当然可以，只要你稍微掌握一些Powershell的概念，我们可以结合Windows自带的“任务计划”组件来实现自动化调度。</p>
<p>首先，我们需要在这个脚本的顶部添加一句脚本：</p>
<p>Add-PsSnapin Microsoft.SharePoint.PowerShell</p>
<p>这句话的作用是将SharePoint的管理命令添加到Powershell。</p>
<p>然后，在控制面板中的任务计划中，添加一个定时的任务</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100653-2bc2fe182e494fb8bc282db6069c13ad.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100654-73102668d7404717822288da3224e232.png" width="244" height="145"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100655-d29b016c67bb447bb52b8bb9d5e95622.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100655-92ca6c006e41428093f1fe01421a3743.png" width="244" height="171"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100656-138cd51d2240496fa828d370b2ba664e.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100657-0d783a5dcd8549af8320b449a15589b0.png" width="244" height="171"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100658-33ab9534219c46468d34cb7b37efd37d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100658-9747829424a042fc8521068f9a30a06c.png" width="244" height="171"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100659-a400bfdd9411495caf3378cd649916dc.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100659-ad33158beb7642dda11a50f618456791.png" width="244" height="171"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100700-3ec3fd8958114c2f800a15431282dd91.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100701-7064407658d8408c95b6d8bde22b8ea7.png" width="244" height="171"></a></p>
<p>【备注】这里的Program路径如下，请替换掉红色部分&nbsp; C:\WINDOWS\System32\WindowsPowerShell\v1.0\PowerShell.exe -Version 2&nbsp;&nbsp; "<strong><font color="#ff0000">d:\training\moss2010\warmup.ps1</font></strong>"</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100702-694c10438b684da79804240c81b0f70a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100703-c41842c35e8546a0a849e1c7d519c408.png" width="244" height="171"></a></p>
<p>另外，由于该任务是自动运行的，请将下面两个选项选中</p>
<p><a href="http://images.cnitblog.com/blog/9072/201308/21100705-1bdbc78f40114eb994c0bb9e12bde80d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/21100705-5962b33c9ceb497097b5226b1818b872.png" width="244" height="184"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><font style="font-weight: bold">第二个方案是结合IIS 的一个新模块来实现</font></h2>
<p>&nbsp;</p>
<p>上面这种用脚本的方式看起来很不错，不是吗？除此之外，我们还有一种服务器端的解决方案。因为SharePoint网站是被宿主在IIS这个服务器里面的，微软也针对我们提到的这类问题改进了IIS。</p>
<h3>在IIS 7(7.5)中，需要单独安装一个模块</h3>
<h3>Warm up your SharePoint Web Applications on Windows 2008 R2 using the IIS 7.5 Application Warm-Up module</h3>
<p><a href="http://sharepointgeorge.com/2010/warm-sharepoint-web-applications-windows-2008-r2-iis-75-application-warmup-module/">http://sharepointgeorge.com/2010/warm-sharepoint-web-applications-windows-2008-r2-iis-75-application-warmup-module/</a></p>
<p>&nbsp;</p>
<p>如果使用IIS 8.0，则这个模块已经内置在IIS中了，关于如何使用，请参考</p>
<h3>IIS 8.0 Application Initialization</h3>
<p><a href="http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-application-initialization">http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-application-initialization</a></p>
<p>&nbsp;</p>
<p>需要注意的是，虽然我们这篇文章讨论的是关于SharePoint网站的预热，但实际上以上两个方案对于其他网站也是适用的。</p>]]></description></item><item><title>如何创建自定义的文件类型关联</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/08/14/3256692.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 14 Aug 2013 02:54:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/08/14/3256692.html</guid><description><![CDATA[<h1>什么叫文件类型关联</h1> <p>所谓文件类型关联，就是在Windows操作系统中，我们为某种文件类型（通过文件扩展名来识别）定义有关的操作关联应用程序。例如，默认情况下，我们双击一个.xls文件，就会自动地打开计算机中安装的Excel这个软件；双击.doc文件，就会自动打开计算机安装的Word这个软件。以此类推。</p> <p>很显然，文件类型关联是很重要的一项基础功能，很多软件在安装的时候，都会自动地注册与这个软件有关的文件类型。例如我们上面提到的.xls这种文件类型，通常就是在安装Excel这个软件的时候，自动地完成注册的。</p> <p>&nbsp;</p> <h1>由用户手工定义文件类型关联</h1> <p>文件类型是可以自动关联（本文后续会讨论），但如果没有自动地进行关联，那么Windows在我们尝试打开该文件的时候，就会弹出一个对话框，让用户选择要使用哪一个应用程序来打开。例如下面这样</p> <h1><a href="http://images.cnitblog.com/blog/9072/201308/14105405-94664f1cc52046baab99ebc63188e006.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105405-3cdea61e686a473590aeeff79cf9bee5.png" width="199" height="244"></a></h1> <p>备注：这个截图是在Windows 8中的效果，在Windows 7或者更早点版本中，界面可能略有不同。</p> <p>用户可以自己选择一个应用程序，然后就可以用该应用程序打开该文件（如果确实可以的话）；而如果用户选择了“Use this app for all .xxxx&nbsp; files”的话，那么以后此类文件都会直接使用该应用程序打开，而无需再选择了。</p> <p>那么，这到底是如何实现的呢？一定是在某个地方记录好了这个信息，对吧？确实是如此的，Windows会通过注册表的形式记录好这种文件类型关联信息，同时为了让用户查看方便，用户可以在控制面板中，通过如下的界面看到所有的文件类型关联信息。</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/14105405-8cea9528cabc4956b3dd30000c98c083.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105406-5488dd6955854c398bcf81f6841104ae.png" width="244" height="145"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201308/14105407-518093db0c18454f9f524cf17f3a8a37.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105408-09b15343950a451cb23b536e55dec789.png" width="244" height="145"></a></p> <h1><a href="http://images.cnitblog.com/blog/9072/201308/14105410-d6874f61a3cb44bd88fb3a8f039252da.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105411-e1bc74af88f24dae9a0cf48e703ae49a.png" width="244" height="145"></a></h1> <p>这里既可以看到现有的关联信息，但也可以修改。</p> <p>&nbsp;</p> <h1>通过安装项目新建文件类型关联</h1> <p>现在回过来，虽然用户确实可以手工地进行关联设置，但如果我们在部署应用程序的时候，能够自动地完成这种关联，当然是很好的。在Visual Studio 2010或者早期版本中，我们可以通过在安装程序中添加文件类型注册，这种功能来实现。</p> <p>你可以通过如下的链接来了解如何操作：</p> <p><a href="http://msdn.microsoft.com/zh-cn/library/vstudio/s3a0ddk6(v=vs.100).aspx">http://msdn.microsoft.com/zh-cn/library/vstudio/s3a0ddk6(v=vs.100).aspx</a></p> <p><a href="http://msdn.microsoft.com/zh-cn/library/vstudio/93c8y383(v=vs.100).aspx">http://msdn.microsoft.com/zh-cn/library/vstudio/93c8y383(v=vs.100).aspx</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201308/14105414-9836dd4556fc45ac8c69d4fc2f1c0c06.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105414-e7318680c4f146f8a3aba4f062bd08f4.png" width="244" height="151"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201308/14105418-f3834192f6684266bd5adac44a5f447d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105418-2790dce133de40a6b3a91756947b0aa8.png" width="244" height="191"></a></p> <h1>通过代码实现文件类型关联</h1> <p>上面这种通过安装程序的做法，是很方便的，可以全方位地定义文件类型关联，包括图标，以及各种操作（新建，打开，编辑等等）。但是很遗憾的是，在Visual Studio 2012中，这个“安装程序”项目模板已经被移除了。那么，如果我们想实现自定义的文件类型关联，有没有比较简单的做法呢？</p> <p>其实是有的，我之前就提到了，不管怎么样，这些关联信息是需要保存在注册表中的。那么，如果我们觉得有必要的话，就可以通过代码的形式来创建这些注册表项。</p> <p>在注册表中，有两个区域可以保存这些信息。</p> <p>如果你希望某个文件关联，只影响当前用户的话，则可以在下面的注册表位置进行注册：HKEY_CURRENT_USER\Software\Classes</p> <p>如果你希望某个文件关联，影响到当前计算机上面所有用户的话，则可以在下面的注册表位置进行注册：HKEY_LOCAL_MACHINE\SOFTWARE\Classes</p> <p>那么，具体应该如何注册呢？</p> <p>Windows Registry Editor Version 5.00</p> <p>[HKEY_CURRENT_USER\Software\Classes\.test] //首先为希望注册的扩展名，新建一个Key</p> <p>[HKEY_CURRENT_USER\Software\Classes\.test\shell] //然后再新建一个shell的Key</p> <p>[HKEY_CURRENT_USER\Software\Classes\.test\shell\open]&nbsp; //然后再新建一个open的Key（open对应了打开操作）</p> <p>[HKEY_CURRENT_USER\Software\Classes\.test\shell\open\command] //然后再新建一个command的Key<br>@="D:\\temp\\TestApplication\\TestApplication\\bin\\Debug\\TestApplication.exe %1"&nbsp;&nbsp; //为command这个Key默认设置为你的自定义应用程序，其中的%1是一个占位符，表示当前的文件路径。</p> <p>看起来是下面这样的</p> <p><a href="http://images.cnitblog.com/blog/9072/201308/14105420-facf25482df64fc4a0dc0911a012f770.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201308/14105421-24b8a1e0585d4fbcbfac0b101e8e1d29.png" width="244" height="137"></a><br>既然我们搞清楚这个后台的数据结构，那么通过如下的代码可以很容易地完成上述注册。（事实上，你看到只需要1行代码）</p><pre class="csharpcode">
<span class="kwrd">using</span> Microsoft.Win32;
<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {


            Registry.SetValue(<span class="str">@"HKEY_CURRENT_USER\Software\Classes\.test\shell\open\command"</span>, <span class="str">""</span>, <span class="str">"D:\\temp\\TestApplication\\TestApplication\\bin\\Debug\\TestApplication.exe %1"</span>);

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>那么，在目标的应用程序中，如何接收该文件信息呢？其实很简单，%1就是那个文件的完整路径，我们可以在Main方法的参数列表中得到这个信息，然后根据这个信息实现自定义的程序逻辑即可。</p>]]></description></item><item><title>如何配置Hyper-V的虚拟机通过主机网络上网 (NAT)</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/07/13/3188005.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 13 Jul 2013 06:29:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/07/13/3188005.html</guid><description><![CDATA[<h1>前言</h1> <p>最近开始在Windows 8 上面直接使用Hyper-V的技术来建立虚拟环境进行开发和测试，这样免去了再安装额外软件的需要。在实际使用的时候，尤其是配置网络共享的时候，遇到些问题，与其他一些虚拟机软件不同。特此记录一下这个典型的配置场景（虚拟机通过主机网络上网，类似于NAT的一种做法）</p> <p>【备注】NAT是在其他的虚拟机软件中的说法，Hyper-V中没有这个说法</p> <p>关于Windows 8中的Hyper-V的功能，以及如何启用此功能，如果不清楚，请参考 <a href="http://technet.microsoft.com/en-us/library/hh857623.aspx">http://technet.microsoft.com/en-us/library/hh857623.aspx</a></p> <p>&nbsp;</p> <h1>配置步骤</h1> <h2>第一步：添加一个虚拟交换机（Virtual Switch )</h2> <p>【备注】其实我觉得这里翻译为虚拟交换机可能并不恰当，但是在中文版中的菜单确实是这样称呼的，所以我就不另外翻译，以免产生歧义。</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142805-294ec3921f454c9b976a8e6021508c04.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142805-a595e347ddf64e5ab564c78d9015a2f3.png" width="244" height="139"></a></p> <p>在接下来出来的对话框中，选择“New virtual network switch”,并且选择 “Extenal” 这种类型</p> <p>，然后点击“Create Virtual Switch”</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142807-b39e14f15b174fc0b78e2a6681a70202.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142807-2391e430ad8e44dbb72be86239f59113.png" width="244" height="230"></a></p> <p>在接下来的对话框中，设置Extenal network连接到主机的某个网卡</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142811-a76096b9973e41e6b5126eac1ed6eaf5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142811-830f97c472d447ff844eff8a6b0db4ea.png" width="244" height="230"></a></p> <p>【注意】请选择你当前正在用于上网的网卡名称（可能是有线网卡，也可能是无线网卡）</p> <p>点击“Apply”之后，会有一个处理过程，而且你当前主机的网络会暂时断开。实际上，Hyper-V会建立一个虚拟网卡，并且让它与你现有的上网的那个网卡做一个桥接。</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142812-b18812e63ff94a349e8db668b5a94d2f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142812-565ed4cf0aa540daa4188e37fc9fd627.png" width="244" height="54"></a></p> <p>&nbsp;</p> <h2>第二步：在虚拟机中使用该虚拟网卡</h2> <p>在虚拟机的属性中，选择添加硬件</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142816-828cc7ade7944ce4ac4ac7af4666a4d9.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142816-c2058ea9cfb3444ca581b3d09166eefc.png" width="244" height="230"></a></p> <p>接着在界面中选择你之前添加到虚拟网卡即可</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142822-f7b28fbe8a934d9f9765ba77dce9ac8f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142823-df330df9f61f434982cdece8d89453ee.png" width="244" height="230"></a></p> <p>&nbsp;</p> <p>通常这样做了就可以了。但也许你运行起来虚拟机之后发现网络还是不通，具体症状就是可能会收到一个IP地址冲突的错误。这个时候，你可以手工地设置IP地址来解决。</p> <p>在设置之前，你可以先在主机上面，通过ipconfig /all 这个命令，查看一下虚拟网卡的地址（因为你要设置一个与它不同的地址），Subset mask 和 Default Gateway、DNS Servers 要设置成一样。</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/13142827-ef1d855cb71c4ce884bc607a178d68ec.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/13142828-9335f2cfb49b4e3b9217902de52bb063.png" width="244" height="146"></a></p> <p>&nbsp;</p> <p>希望对大家有些帮助</p>]]></description></item><item><title>如何在记录异常日志的时候包含源代码文件名和行号等信息</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/07/12/3185702.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 12 Jul 2013 02:12:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/07/12/3185702.html</guid><description><![CDATA[<h1>前言</h1> <p>作为一个程序员，你的相当一部分时间可能会用在调试。不知道大家是否同意，异常处理(Exception Handling)是一个看似简单，但是又极难做好的工作。当然，现在已经有一些业界经验以及框架（例如Enterprise Library中的Exception Handling Application Block）可供参考和使用，这些框架可以帮助我们较为灵活地配置，处理或者记录异常。我今天要跟大家分享的一个话题是，如何在记录异常的时候，包含源代码文件名和行号等有用信息。如果有这些信息，我们将能更加简单地定位到问题所在。</p> <p>&nbsp;</p> <h1>案例演示</h1> <p>为了讲解这个内容，我准备了一个简单的项目来做演示，如下所示</p> <p><a href="http://images.cnitblog.com/blog/9072/201307/12101207-ce199f4c847c4af18ceeceeb124c6cae.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101208-29e7dbf1f9144a00a2b61fe183613ac3.png" width="244" height="153"></a></p> <p>实际上，这个Solution中有两个项目，一个是作为组件的ClassLibrarySample</p> <div class="csharpcode"><pre><span class="lnum">   1:  </span><span class="kwrd">using</span> System;</pre><pre><span class="lnum">   2:  </span>&nbsp;</pre><pre><span class="lnum">   3:  </span><span class="kwrd">namespace</span> ClassLibrarySample</pre><pre><span class="lnum">   4:  </span>{</pre><pre><span class="lnum">   5:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> Test</pre><pre><span class="lnum">   6:  </span>    {</pre><pre><span class="lnum">   7:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> MyMethod(<span class="kwrd">int</span> a, <span class="kwrd">int</span> b) {</pre><pre><span class="lnum">   8:  </span>            <span class="kwrd">try</span></pre><pre><span class="lnum">   9:  </span>            {</pre><pre><span class="lnum">  10:  </span>                Console.WriteLine(b/a);</pre><pre><span class="lnum">  11:  </span>            }</pre><pre><span class="lnum">  12:  </span>            <span class="kwrd">catch</span> (Exception ex)</pre><pre><span class="lnum">  13:  </span>            {</pre><pre><span class="lnum">  14:  </span>                Console.WriteLine(ex.Message);</pre><pre><span class="lnum">  15:  </span>            }</pre><pre><span class="lnum">  16:  </span>        }</pre><pre><span class="lnum">  17:  </span>    }</pre><pre><span class="lnum">  18:  </span>}</pre></div>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<pre class="csharpcode">&nbsp;</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>另一个是作为调用程序的ConsoleApplicationSample</p>
<div class="csharpcode"><pre><span class="lnum">   1:  </span><span class="kwrd">using</span> System;</pre><pre><span class="lnum">   2:  </span>&nbsp;</pre><pre><span class="lnum">   3:  </span><span class="kwrd">namespace</span> ConsoleApplicationSample</pre><pre><span class="lnum">   4:  </span>{</pre><pre><span class="lnum">   5:  </span>    <span class="kwrd">class</span> Program</pre><pre><span class="lnum">   6:  </span>    {</pre><pre><span class="lnum">   7:  </span>        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)</pre><pre><span class="lnum">   8:  </span>        {</pre><pre><span class="lnum">   9:  </span>            var t = <span class="kwrd">new</span> ClassLibrarySample.Test();</pre><pre><span class="lnum">  10:  </span>            t.MyMethod(0, 1);<span class="rem">//这个调用会出错，因为会发生除零错误</span></pre><pre><span class="lnum">  11:  </span>            Console.Read();</pre><pre><span class="lnum">  12:  </span>        }</pre><pre><span class="lnum">  13:  </span>    }</pre><pre><span class="lnum">  14:  </span>}</pre></div>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这个程序运行起来肯定就是会报告异常，然后被捕捉到，我们在主程序上面可以看到如下的输出</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101208-67399773ad3c4faaa08ca4ca6680d2d0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101209-5df4516cafc14dc082fb6c1ee9c04232.png" width="244" height="43"></a></p>
<p>我们都知道，这样的异常消息可能对我们帮助不是很大，尤其是如果源文件中代码有成百上千行，那么如果不能快速定位到可能是哪一行出了这个异常，那么看起来调试和排错都会很难。</p>
<p>那么是否有办法在异常消息中，得到源代码文件的一些信息呢？事实上是可以做到的，你只要像下面这样修改即可：使用了<a href="http://msdn.microsoft.com/zh-cn/library/vstudio/system.diagnostics.stacktrace.aspx">StackTrace</a>这个类型</p>
<div class="csharpcode"><pre><span class="lnum">   1:  </span><span class="kwrd">using</span> System;</pre><pre><span class="lnum">   2:  </span><span class="kwrd">using</span> System.Diagnostics;</pre><pre><span class="lnum">   3:  </span>&nbsp;</pre><pre><span class="lnum">   4:  </span><span class="kwrd">namespace</span> ClassLibrarySample</pre><pre><span class="lnum">   5:  </span>{</pre><pre><span class="lnum">   6:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> Test</pre><pre><span class="lnum">   7:  </span>    {</pre><pre><span class="lnum">   8:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> MyMethod(<span class="kwrd">int</span> a, <span class="kwrd">int</span> b) {</pre><pre><span class="lnum">   9:  </span>            <span class="kwrd">try</span></pre><pre><span class="lnum">  10:  </span>            {</pre><pre><span class="lnum">  11:  </span>                Console.WriteLine(b/a);</pre><pre><span class="lnum">  12:  </span>            }</pre><pre><span class="lnum">  13:  </span>            <span class="kwrd">catch</span> (Exception ex)</pre><pre><span class="lnum">  14:  </span>            {</pre><pre><span class="lnum">  15:  </span>                Console.WriteLine(ex.Message);</pre><pre><span class="lnum">  16:  </span>                <span class="rem">//通过如下代码来记录异常详细的信息</span></pre><pre><span class="lnum">  17:  </span>                var trace = <span class="kwrd">new</span> StackTrace(ex, <span class="kwrd">true</span>).GetFrame(0);</pre><pre><span class="lnum">  18:  </span>                Console.WriteLine(<span class="str">"文件名:{0},行号:{1},列号:{2}"</span>, trace.GetFileName(), trace.GetFileLineNumber(), trace.GetFileColumnNumber());</pre><pre><span class="lnum">  19:  </span>            }</pre><pre><span class="lnum">  20:  </span>        }</pre><pre><span class="lnum">  21:  </span>    }</pre><pre><span class="lnum">  22:  </span>}</pre></div>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这样一来，我们再进行调试的时候，就可以看到更加详细的信息了。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101209-a5aa538c1d07433b9738aa48d55e1c5d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101209-ddf7c7d3771c4328bb020c7e6ed6049c.png" width="244" height="82"></a></p>
<p>大家可能会很好奇，这个信息是怎么给我们的呢？其实，要想实现这个功能，必须满足一个前提条件，就是必须有ClassLibrarySample这个组件对应的调试符号文件(pdb)。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101210-bdbf8ecbec9b404e8539384fc472e901.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101211-ef6f0bb931c342c39cba894d7c44664e.png" width="244" height="72"></a></p>
<p>如果我将这个文件删除掉，会怎么样呢？</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101211-08760fdfe9cf4186a0f1c3775978c93f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101212-5b9dd3edf7f64774b164dc6ed9181e7d.png" width="244" height="82"></a></p>
<p>我们看到，如果没有pdb文件，则输出的信息是空白的。<br></p>
<p>所以，<strong><font color="#ff0000">如果你想使用这个技术来记录这些与源代码有关的详细信息，需要确保在部署应用程序的时候，将有关组件的pdb文件也一起部署</font></strong>。</p>
<p>如果是私有部署的话，那么要做到这一点是不难的，打包的时候，将pdb文件一起包含进去就可以了。但如果这个组件是公有部署（部署到GAC) 的话，就需要额外的一些步骤。</p>
<p>为了将程序集部署到GAC，我们首先需要对其进行强名称签名。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101212-b7d2ebcc9fc447bbbcb34873b56a45bc.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101212-b71588cbe45946fd8f235edd238d5a2c.png" width="244" height="142"></a></p>
<p>然后，通过gacutil这个命令行工具，可以手工地将其添加到GAC中</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101214-f55b501748fe41b398118c883c9231f0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101215-6919035b98c944e0a112e53a3ce93369.png" width="244" height="77"></a></p>
<p>接下来，为了让主程序使用GAC中这个组件，而不是程序根目录下面的那个。我们需要对引用做一个设置：Copy local设置为false</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101215-a96efbd97eef47899d774950564e629b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101216-3f554c55d8e14ebabed3744463d50a4f.png" width="231" height="244"></a></p>
<p>再次运行主程序的话，我们会得到如下的输出</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101216-b8211a6d843c4d3eac02908700a87e96.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101216-96886d5cb6a64358b5a0e54425785ce6.png" width="244" height="82"></a></p>
<p>还是没有与源代码有关的详细信息，这是因为注册到GAC的程序集默认都是没有pdb文件的。他们一般在下面这样的目录里面</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101216-520f9b9d23ba4da9a8000d6153973a72.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101217-bb5cb1474c2848e684a3d5b3d02c0442.png" width="244" height="50"></a></p>
<p>【备注】.NET Framework 4.0这个版本中对于GAC的路径做了调整，不再是原先的c:\windows\assembly目录了</p>
<p>所以，如果需要的话，你可以将pdb文件，手工（或者通过脚本）复制到这个目录，例如</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101217-0cf877e661ae4d02bbc33aeebbb87c54.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101217-7d9ebf7ce01041ddb0b3b2d8b68c6994.png" width="244" height="58"></a></p>
<p>这样的话，就可以在运行主程序的时候，得到与源代码有关的详细信息了。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201307/12101217-c4dcdc9ab6704238b76974ac1e5b347d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201307/12101217-11cba03c01764bd89463fcca95d36763.png" width="244" height="161"></a></p>]]></description></item><item><title>在构建期间处理需求变更</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/07/12/3185468.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 11 Jul 2013 23:52:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/07/12/3185468.html</guid><description><![CDATA[<h1>前言
</h1><p>这是我在重读《代码大全》这本书的第二版的时候做的笔记（红色部分是我的评注）。这一段对于需求的描述以及如何处理需求变更很有帮助，希望也给大家一些参考。我自己做过的项目中，也遇到过几乎下面提到的所有问题（甚至真的有项目到了要取消的地步），所以还是挺有感触的。
</p><h1>稳定需求的神话
</h1><p><span style="color:red"><strong>"一旦客户接受了一份需求文档，就再也不做更改"是一个美好的愿望</strong></span>。然而，对一个典型的项目来说，在编写代码之前，客户无法可靠地描述他们想要的是什么，问题并不在于客户是低级生物。就如同你做这个项目的时间越长，对这个项目的理解也就越深入一样，客户参与项目的时间越长，他们对项目的理解也就能越深入。开发过程能够帮助客户更好地理解自己的需求，这是需求变更的主要来源。计划严格依照需求办事，实际上就是计划不对客户端要求做出回应。
</p><p>典型情况下需求会有多少改动？IBM和其他公司的研究发现，平均水平的项目在开发过程中，需求会有25%的变化。在典型的项目中，需求变更导致的返工占到返工总量的75%～85%。【<span style="color:red"><strong>在做项目规划的时候，对于这个比例有所了解将有助于你更好地安排日程和计划</strong></span>】
</p><h1>如何在构建期间处理需求变更
</h1><p>在构建期间，要最好地应对需求变更，有以下一些可以采用的方式。
</p><h2>评估需求质量。
</h2><p>如果需求不够好，那么就停止工作，退回去，先把它做好，再继续前进。当然，因为在此期间你会停止编码，所以感觉似乎进度会落后。不过，假设你正开车从芝加哥到洛杉矶，突然看到纽约的路牌，那么停下来查看路线图是浪费时间吗？当然不是，如果没有对准正确的方向，那就要停下来检查一下路线。【<span style="color:red"><strong>这个隐喻太形象，太棒了，记得当你提出要评估需求时遇到反对意见的时候，讲这个隐喻给他们听听。当然我知道，你可能会遇到一些两难境地，软件项目的复杂性是很高的，但至少你遇到问题的时候，要去权衡，而不是将错就错，因为那肯定是到不了终点的</strong></span>】
</p><h2>确保每一个人都知道需求变更的代价
</h2><p>客户只要想到一个新功能就会很兴奋。在兴奋时血液会涌向大脑，人会晕头晕脑，他会把所有你们开过的讨论需求的回忆、签字仪式、以及已经完成的需求文档统统抛诸脑后。最简单的对付这种新功能中毒症患者的办法是说："咦，这听起来是一个很不错的主意。不过由于它不是需求文档中的内容，我会整理一份修订过的进度表和成本估计表，这样你可以决定是现在实施，还是过一阵子再说。"   进度和成本这两个字眼闭咖啡和洗冷水澡都要提神，许多"必须要有/must have"很快会变成"有就最好/nice to haves"。【<span style="color:red"><strong>这是一个很好的沟通方式，我觉得。掌握这个方法的前提是，你必须能让人信任地估算进度和成本，我的意思是，你所说的最好不是信口开河。由于不信任导致的沟通问题可能会更加严重。</strong></span>】
</p><h2>建立一套变更控制程序
</h2><p>如果你的客户激情不减，那就要考虑建立一个正式的变更控制委员会，评审提交上来的更改方案。客户改变他们的想法，认识到他们需要更多的功能，这不是坏事。问题是他们提交更改方案太频繁了，让你跟不上进度。如果有一套固定的变更控制程序，那么大家就会很愉快——你知道自己只需在特定时候处理变更；而客户知道你打算处理他们的提议。【<span style="color:red"><strong>变更控制程序，在我们的实际工作中，可能就是要有一个需求变更单，以及一定的审核流程，这样可以促使用户提出新的想法的时候，经过讨论和确认，而不至于随意。同时，在开发管理过程中，区分需求、任务、Bug，并且对它们进行清晰的管理是很必要的。</strong></span>】
</p><h2>使用能适应变更的开发方法
</h2><p>某些开发方法让你"对需求变更做出响应"的能力最大化。演进原型法能让你在投入全部精力建造系统之前，先探索系统的需求。演进交付是一种分阶段交付系统的方法。你可以建造一小块、从用户获得一点反馈、调整一点设计、做少量改动、再多建造一小块。关键在于缩短开发周期，以便更快地响应用户的要求。【<span style="color:red"><strong>采用迭代的开发方式，应该已经成为目前开发系统或者软件的事实标准了，尤其是在互联网应用以及移动应用的情况下。</strong></span>】
</p><h2>放弃这个项目
</h2><p>如果需求特别糟糕，或者极不稳定，而上面的建议没有一条能奏效，那就取消这个项目。即使你无法真的取消这个项目，也设想一下取消它之后会是怎样的情况。在取消它之前想想它有可能变得多糟糕。假如在某种情况下你可以放弃这个项目，那么至少也要问问自己，目前的情况和你所设想的那种情况有多大距离。【<span style="color:red"><strong>有时候很难，真的</strong></span>】
</p><h2>注意项目的商业案例
</h2><p>在提到实施这个项目的商业理由的时候，许多需求事项就会从你眼前消失。有些需求作为功能特色来看是很不错的想法，但是当你评估"增加的商业价值"时就会觉得它是一个糟透了的主意。【<span style="color:red"><strong>技术发烧友容易犯的毛病，尤其是新技术狂热者。</strong></span>】
</p><p>
 </p>]]></description></item><item><title>SharePoint Server 2013发现之旅系列文章的概述和相关资源</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/26/3100195.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 26 May 2013 09:35:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/26/3100195.html</guid><description><![CDATA[<p>SharePoint 2013这个新的版本推出也有一段时间了，期间我自己做了研究和学习，并且也给一些感兴趣的客户做了有关的培训。和之前的几次升级一样，这个版本毫无疑问也带来了不少令人眼前一亮、赏心悦目的新功能，目前已经有部分客户已经在进行升级工作（从SharePoint 2010），总体来说，这个升级过程还是比较平稳的。</p> <p>我计划花一些时间写这个系列文章，以便更多的朋友作为参考。这些文章虽然不可能面面俱到，但至少能给出一些框架，以及相关的资源，当然同时也有我的一些经验和见解。</p> <p>需要说明的是，微软官方也提供了很多学习资源，无需避讳，我们自己也是通过这些资源进行了学习和研究。我推荐给大家两个很好的资源：</p> <ol> <li>针对IT 专业人士的视频 <a href="http://technet.microsoft.com/en-US/sharepoint/fp123606">http://technet.microsoft.com/en-US/sharepoint/fp123606</a></li> <li>针对开发人员的视频 <a href="http://msdn.microsoft.com/en-US/office/apps/fp123626">http://msdn.microsoft.com/en-US/office/apps/fp123626</a>&nbsp;</li></ol> <p>这个系列文章也将主要从管理运维角度以及解决方案开发这两个角度（但是内容并不是完全和官方的视频一样），带领大家对这个新版本的基础架构、管理维护、开发、部署等方面做些讲解。</p> <p>为了跟随这个系列文章的学习，也为了你能够亲自体验这个新版本的特性，你可能需要安装一个自己的实验环境，你可以参考下面的资源</p> <ol> <li>安装程序 <a href="http://technet.microsoft.com/en-us/evalcenter/hh973397.aspx">http://technet.microsoft.com/en-us/evalcenter/hh973397.aspx</a> （180天试用版，含密钥）</li> <li>软硬件要求 <a href="http://technet.microsoft.com/library/cc262485(office.15).aspx">http://technet.microsoft.com/library/cc262485(office.15).aspx</a></li></ol> <p>SharePoint 2013的安装过程与2010基本类似（但是进度更简单，时间更短），首先需要安装一些基础组件，然后会有一个安装向导，作为实验学习的目的，你可以将所有组件都安装在一个机器上。</p> <p>为了较为全面地使用SharePoint，你可能还需要安装如下的一些软件或者工具</p> <ol> <li>SharePoint Designer 2013 <a href="http://www.microsoft.com/en-us/download/details.aspx?id=35491">http://www.microsoft.com/en-us/download/details.aspx?id=35491</a></li> <li>Visual Studio 2012 <a href="http://www.microsoft.com/visualstudio/chs/downloads#d-2012-editions">http://www.microsoft.com/visualstudio/chs/downloads#d-2012-editions</a></li> <li>Office 2013 Plus <a href="http://technet.microsoft.com/en-us/evalcenter/jj192782.aspx">http://technet.microsoft.com/en-us/evalcenter/jj192782.aspx</a></li></ol> <p>【备注】值得一说的是，在我们自己以及帮助我们的客户实施这个新版本的时候，和其他一些客户一样，我们也发现它存在一些细节方面的小问题。微软已经提供了这方面的问题列表，并且给出了一些相应的解决方案，请参考 </p> <ol> <li>SharePoint Server 2013 已知问题列表 <a href="http://office.microsoft.com/zh-cn/sharepoint-server-help/HA102919021.aspx">http://office.microsoft.com/zh-cn/sharepoint-server-help/HA102919021.aspx</a>&nbsp;</li> <li>SharePoint Foundation 2013 已知问题列表 <a href="http://office.microsoft.com/zh-cn/help/HA102919008.aspx?CTT=5&amp;origin=HA102919021">http://office.microsoft.com/zh-cn/help/HA102919008.aspx?CTT=5&amp;origin=HA102919021</a></li></ol> <p>最后，访问SharePoint 网站虽然对浏览器的兼容性已经越来越好了，但如果你能安装IE 9或更高版本，我相信将获得更加好的浏览体验。</p> <p>那么，就让我们开始吧，下面这个截图是安装配置好之后，建立的默认网站界面。祝你好运，希望你也看到了这个页面。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/26173450-17481b5b68f945d298d0aa72a3cc53d7.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/26173451-724a893f4eaa444d9dce7fab11655802.png" width="244" height="182"></a></p>]]></description></item><item><title>优化网站设计系列文章总结和导读</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 20 May 2013 02:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088196.html</guid><description><![CDATA[<h1>概述</h1>
<p>其实想写这方面的文章由来已久，这个系列文章的想法是参照<a href="http://developer.yahoo.com/performance/rules.html">雅虎团队提供的35条性能优化的最佳实践</a>（其实最早的时候是14条），再结合我自己多年的实际工作经验，结合具体的开发平台（ASP.NET），为读者提供既有理论知识、又有实践指导的参考资料，对于优化而言，本身是一个长期细致的工作（没有所谓的银弹），并且重在权衡利弊，选择最适合自己项目情况的解决方案。而要达到这样的目标，就需要对网站设计优化有较为系统的认识，知其然、也知其所以然，然后才可以熟练地运用它们。</p>
<p>我从4月30日开始写这个系列，到今天（5月20日）已经全部写完，主要利用了假日、周末以及晚上的时间），虽然比较辛苦，但自认为这个系列写的质量算是我迄今为止最好的，并且毫无疑问，我有理由借此机会对我的家人的支持表示感谢。</p>
<p>在这个过程中，我也对有关的知识温故而知新，所以说个人收获已经很大了，如果能对阅读者也能有所帮助，那是再好不过的了。</p>
<h1>导读</h1>
<p>这个系列的内容组织保持了雅虎团队当年所提出的35条原则的结构，以便大家对照起来进行学习。值得一说的是，这些文档虽然参照了原文，但不是对原文的翻译，更多的是加入了我的一些见解以及演绎，有些地方可能还与原文有不太一样的说明。</p>
<ol>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html">优化网站设计（二）：使用CDN</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html">优化网站设计（三）：对资源添加缓存控制</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html">优化网站设计（四）：对资源启用压缩</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053216.html">优化网站设计（五）：在顶部放置样式定义</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053299.html">优化网站设计（六）：在文档底部放置脚本定义或引用</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053439.html">优化网站设计（七）：避免在CSS中使用表达式</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053562.html">优化网站设计（八）：将脚本文件和样式表作为外部文件引用</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3053996.html">优化网站设计（九）：减少DNS查找的次数</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html">优化网站设计（十）：最小化JAVASCRIPT和CSS</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3060804.html">优化网站设计（十一）：避免重定向</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3061004.html">优化网站设计（十二）：删除重复脚本</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/11/3072898.html">优化网站设计（十三）：配置ETags</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073690.html">优化网站设计（十四）：使AJAX调用尽可能利用缓存特性</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073836.html">优化网站设计（十五）：尽可能早地发送缓冲区内容</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073891.html">优化网站设计（十六）：为AJAX请求使用GET方法</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3081941.html">优化网站设计（十七）：延迟或按需加载内容</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3082402.html">优化网站设计（十八）：预加载内容</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083162.html">优化网站设计（十九）：减少DOM元素的数量</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083509.html">优化网站设计（二十）：使用多个主机来平衡负载</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083788.html">优化网站设计（二十一）：尽量少用iframe</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3084052.html">优化网站设计（二十二）：避免404错误</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/18/3085712.html">优化网站设计（二十三）：减小Cookie的体积</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086514.html">优化网站设计（二十四）：通过使用不同的主机减少对cookie的使用</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086546.html">优化网站设计（二十五）：避免对DOM元素进行过多操作</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086643.html">优化网站设计（二十六）：设计&ldquo;智能&rdquo;的事件处理程序</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086725.html">优化网站设计（二十七）：使用link而不是@import导入样式表</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086817.html">优化网站设计（二十八）：避免使用Filters(滤镜)</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086865.html">优化网站设计（二十九）：优化图片</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086895.html">优化网站设计（三十）：优化CSS sprites</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086912.html">优化网站设计（三十一）：不要在页面中缩放图片</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087965.html">优化网站设计（三十二）：使favicon.ico文件尽可能小并且可以缓存</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087983.html">优化网站设计（三十三）：尽量使单个内容体积小于25KB</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087997.html">优化网站设计（三十四）：将组件直接打包到页面</a></h4>
</li>
<li>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088007.html">优化网站设计（三十五）：避免将img的src属性设置为空白</a></h4>
</li>
</ol>
<h4>&nbsp;</h4>
<h1>权衡</h1>
<p>我多次提到权衡这个词，就好比一个架构师被问到&ldquo;什么才是最好的架构？&rdquo;这样的问题的时候，最合理的回答可能真的是&ldquo;这个得看情况&rdquo;（虽然这样的回答可能显得有点像外交辞令），因为技术是很多的，架构也很多，没有哪个架构对所有业务场景都是合适的。</p>
<p>同理，我们提到了很多原则，这些原则各自有它的侧重点。很显然，他们可能还互相有冲突。那么，这能说明什么呢？这难道说明这些原则不合理吗？当然不是，正好相反，这才是合理的。</p>
<p>为了帮助大家更好地了解这些原则之间的关系，抑或是互斥的、抑或是互补的，我整理了一个表格如下，给大家参考。</p>
<p>&nbsp;</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/20105317-b34b340ddb57410f88028e232968923c.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/20105554-eb4684a095dd448a87aeffc8a44aae70.png" alt="image" width="726" height="581" border="0" /></a></p>
<p>图中红色标识出来的原则就是或多或少会有互斥的。遇到这些原则，你需要兼顾到其他的原则，两害相权取其轻，做出最适合于你的实际情况的选择。</p>
<p>没有标识颜色的，标识这些原则是有互补性的，或者至少不冲突。</p>
<p>&nbsp;</p>
<h1>工具</h1>
<p>我在编写本系列文章的时候，用到如下的工具</p>
<ol>
<li>开发工具：Visual Studio 2012。我用的是2012，但如果想要跟着做练习，有2010也就可以了。
<ul>
<li><a href="http://www.microsoft.com/visualstudio/chs/downloads">http://www.microsoft.com/visualstudio/chs/downloads</a></li>
</ul>
</li>
<li>调试工具：<ol>
<li>Fiddler: ：<a href="http://fiddler2.com/home">http://fiddler2.com/home</a> 这是一个独立的网络测试和调试工具。</li>
<li>IE 自带的开发工具（通过F12调出）：我用的是IE 10，最好你至少有 IE 9. <a href="http://msdn.microsoft.com/en-us/library/ie/gg589507(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/ie/gg589507(v=vs.85).aspx</a></li>
<li>Chrome自带的开发工具（通过F12调出）：使用最新版本即可。<a href="https://developers.google.com/chrome-developer-tools/">https://developers.google.com/chrome-developer-tools/</a></li>
<li>Chrome中安装的Yslow插件：<a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>
<ul>
<li>关于Yslow的详细信息（包括计分规则等）请参考：<a href="http://yslow.org/ruleset-matrix/">http://yslow.org/ruleset-matrix/</a></li>
<li>Google自己也开发了一个类似的插件(功能很像)：Page speed insights <a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli">https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli</a></li>
</ul>
</li>
</ol></li>
</ol>
<p>&nbsp;</p>
<p>最后，希望这个系列文章对大家有些帮助！</p>]]></description></item><item><title>优化网站设计（三十五）：避免将img的src属性设置为空白</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088007.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 20 May 2013 01:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3088007.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十五条原则：<a href="http://developer.yahoo.com/performance/rules.html#emptysrc">Avoid Empty Image src</a> （避免将img的src属性设置为空白）。 <p>雅虎的团队指出，如果你将img的src留空，可能你的本意是暂时不要显示任何图片，但在不同的浏览器其实还是会有一些额外的请求发生。例如 <ul> <li><b>Internet Explorer</b> makes a request to the directory in which the page is located.  <li><b>Safari and Chrome</b> make a request to the actual page itself.  <li><b>Firefox</b> 3 and earlier versions behave the same as Safari and Chrome, but version 3.5 addressed this issue<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=444931">[bug 444931]</a> and no longer sends a request.  <li><b>Opera</b> does not do anything when an empty image src is encountered.</li></ul> <p>据我的观察，现在的这些浏览器都不再发送额外的请求了。这也算是浏览器自身的改进吧，为什么要对一个空白的img去发起额外的请求呢？ <p>但既然以前早期的版本有可能发生这样的事情，如果你无法确保你的用户都使用最新的现代浏览器，那么请简单地遵守这条原则：总是给img的src设置值，而且是一个合法的值。 <p>作为开发者，我理解有的时候，你想将src留空的原因在于，页面加载的时候，你想快速完全加载，这些图片你可能想后期再根据实际情况再加载。如果真的是这样，你应该参考一下另外一个讨论：<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3081941.html">优化网站设计（十七）：延迟或按需加载内容</a>。 <p>或者很简单地，你可以将初始图片设置为一个很小的默认图片（这个图片设置永不过期），而不是留空。</p>]]></description></item><item><title>优化网站设计（三十四）：将组件直接打包到页面</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087997.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 20 May 2013 00:58:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087997.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十二条原则：<a href="http://developer.yahoo.com/performance/rules.html#multipart">Pack Components Into a Multipart Document</a> （将组件直接打包到页面）。  <p>这是一个特殊的技术，它在一个我们耳熟能详的互联网应用中使用很广泛：邮件和邮件附件。我们可以在一个邮件中包含一个或者多个附件，这些附件（虽然本身是独立的文档）可以作为邮件正文的一部分，直接嵌入到邮件中。这样做的好处就是用户收取邮件的时候，其实只需要一个连接（一次请求）就可以完成，而不需要先用一个请求得到邮件，然后再分别用多个请求去得到附件。  <p>【备注】邮件中还可以直接插入图片，这种图片也是作为正文的一部分被编码进去的，无需单独用一个请求去获得。 <p>这个理念用到网页中也具有一定的意义，正如我们之前讨论到的那条原则：<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a> 。  <p>网站开发中也确实有这样的技术来对这种需求进行支持，例如我们可以使用Data:url这种做法将某些小数据（图片，样式表，脚本）直接嵌入到网页中。可以参考 <a href="http://en.wikipedia.org/wiki/Data:_URL">http://en.wikipedia.org/wiki/Data:_URL</a>。  <p>常见的几个用法如下：  <ul> <li>可以在Html的Img对象中使用，例如&nbsp; &lt;img src="<em>data:</em>image/x-icon;base64,<em>AAABAAEAEBAAAAAAAABoBQAAF...</em>" /&gt;  <li>可以在Css的background-image属性中使用，例如</li></ul> <blockquote><pre>div.image {<br>  width:100px;<br>  height:100px;<br>  background-image:url(<em>data:</em>image/x-icon;base64,<em>AAABAAEAEBAAAAAAAABoBQAAF...</em>);<br>}</pre></blockquote>
<ul>
<li>可以在Html的Css链接处使用，例如</li></ul>
<blockquote><pre>&lt;link rel="stylesheet" type="text/css"<br>  href="<em>data:</em>text/css;base64,<em>LyogKioqKiogVGVtcGxhdGUgKioq...</em>" /&gt;</pre></blockquote>
<ul>
<li>可以在Html的Javascript链接处使用，例如</li></ul>
<blockquote><pre>&lt;script type="text/javascript"<br>  href="<em>data:</em>text/javascript;base64,<em>dmFyIHNjT2JqMSA9IG5ldyBzY3Jv...</em>"&gt;&lt;/script&gt;</pre></blockquote>
<p>这里的一个小的难点，就是如何将图片、样式表、脚本生成为base64的字符串。好在有一些不错的工具，例如： 
<ol>
<li><a href="http://www.greywyvern.com/code/php/binary2base64">http://www.greywyvern.com/code/php/binary2base64</a></li></ol>
<p>&nbsp;</p>
<p>将组件直接打包到页面的好处是减少了请求数，但它的问题就是增加了页面体积，同时可能存在一定的浏览器兼容性问题（这个问题现在已经较为不严重了）。</p>
<p>所以事情是相对的，当这些组件较小的时候（而且重用机会不大的话），可以考虑将它们打包进网页。反之，就应该单独用一个文件来保存他们，然后在网页中进行引用。这个做法就好比，所有邮箱对于附件大小都是有所限制的，如果你要传输很大的附件，就只能采取将附件先放在网络上一个位置，然后在邮件中提供下载链接。（QQ邮箱在这方面做得相当的不错）。</p>]]></description></item><item><title>优化网站设计（三十三）：尽量使单个内容体积小于25KB</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087983.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 20 May 2013 00:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087983.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十三条原则：<a href="http://developer.yahoo.com/performance/rules.html#under25">Keep Components Under 25 KB</a> （尽量使单个内容体积小于25KB）。 <p>这一条原则主要是与当下最热的移动互联网有关。我们之前探讨过“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html">优化网站设计（三）：对资源添加缓存控制</a>”，当越来越多的用户接受并且开始使用智能手机浏览你的网站的时候，你就需要考虑这个问题：如何提高内容在这些智能手机上面的缓存率。 <p>例如雅虎团队当年在写下这个原则的时候指出，iPhone里面缓存的内容体积为25KB，而且这个尺寸是未压缩时候的。所以，<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html">优化网站设计（十）：最小化JAVASCRIPT和CSS</a> 就显得尤为重要。 <p>如果你的网站中的脚本要超过25KB，那么请考虑优化它们。 <p>其他的一些智能手机在这方面的表现和横向比较，还可以参考 <ol> <li><a href="http://article.yeeyan.org/view/150661/115771">http://article.yeeyan.org/view/150661/115771</a></li> <li><a href="http://cncc.bingj.com/cache.aspx?q=iphone+cache+component+size&amp;d=4990740111428747&amp;mkt=zh-CN&amp;setlang=zh-CN&amp;w=LyrgxwkFlSbdhvyCtMaX5tjQzPGgYcae">http://cncc.bingj.com/cache.aspx?q=iphone+cache+component+size&amp;d=4990740111428747&amp;mkt=zh-CN&amp;setlang=zh-CN&amp;w=LyrgxwkFlSbdhvyCtMaX5tjQzPGgYcae</a></li></ol> <p>&nbsp;</p> <p>当然我相信，随着时间的推移，这些智能设备中的浏览器对于缓存的支持终将进一步提升（以后甚至可能达到与桌面机器或者笔记本相似的表现），以便改善性能。</p>]]></description></item><item><title>优化网站设计（三十二）：使favicon.ico文件尽可能小并且可以缓存</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087965.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 23:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/20/3087965.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十二条原则：<a href="http://developer.yahoo.com/performance/rules.html#favicon">Make favicon.ico Small and Cacheable</a> （使favicon.ico文件尽可能小并且可以缓存）。  <p>在“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3084052.html">优化网站设计（二十二）：避免404错误</a>”文中，我提到了favicon.ico文件，但并没有更详细地展开。通常每个网站都应该有这个文件，这个文件主要用来显示在浏览器地址栏中,或者收藏之后的图标. 如下图所示  <p><a href="http://images.cnitblog.com/blog/9072/201305/20073738-5f39245ee7d944d1a194ff9614abc164.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/20073744-a6c59230d81d4fe086e61d5fb88e57d1.png" width="244" height="203"></a>  <p>关于这个文件的详细信息，有兴趣的朋友可以参考<a href="http://zh.wikipedia.org/zh-cn/Favicon">http://zh.wikipedia.org/zh-cn/Favicon</a>，我整理总结如下： <ol> <li>每个网站都应该有该文件，浏览器在访问任何页面的时候，总是会尝试去请求这个文件（如果本地没有的话）。</li> <li>该文件通常应该命名为favicon.ico ，如果希望使用别的名称或者格式（例如PNG），则需要在页面的头部(Head)中定义引用（下面两句中的第一句是必须的）</li> <ul> <li>&lt;link rel="shortcut icon" href="http://example.com/favicon.ico" type="image/vnd.microsoft.icon"&gt;</li> <li>&lt;link rel="icon" href="http://example.com/favicon.ico" type="image/vnd.microsoft.icon"&gt;</li></ul> <li>该文件可以直接放在网站根目录，但也可以放在其他的主机，或者你想要的任何位置。如果不在默认的根目录下面，也是需要通过上面所提到的引用方式定义。</li></ol> <p>&nbsp;</p> <p>由于该文件的这些特性，所以我们有三条优化的建议</p> <ol> <li>使它尽量在1KB左右。想比较其他的格式（PNG,GIF等），该文件默认的格式为ico，这种文件通常较小，强烈建议使用。要创建favicon.ico文件,我推荐大家使用 <a href="http://www.favicon.cc/">http://www.favicon.cc/</a> 提供的在线免费服务.</li> <li>使它能够缓存. 由于该文件使用很频繁, 所以缓存显得很重要. 关于这一点,可以参考 <a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html">优化网站设计（三）：对资源添加缓存控制</a> 的详细介绍. 对于这个文件而言,可以设置永不过期(或者过期时间长一些).</li> <li>将该文件放在单独的主机中,例如 images.mydomain.com . 这样可以避免在请求该文件时发送cookie. 关于这一点,请参考 <a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086514.html">优化网站设计（二十四）：通过使用不同的主机减少对cookie的使用</a></li></ol> <p>我们可以来看一个综合的例子,仍然以博客园为例.</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/20074115-5763fb63079f4b73b032775b0df7e698.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/20074120-fb38a0db89654bf2a2cfdae8d6a189ba.png" width="244" height="145"></a></p> <ol> <li>他们采用的是favicon.ico这种文件格式, 目前的体积为:5430字节,相当于5KB左右。这一点是有优化空间的。</li> <li>他们为该文件设置了缓存策略：Cache-Control: max-age=2592000 ，这个相当于是30天（近似一个月）。这个文件其实更改的机会很小的，缓存时间应该可以更长。</li> <li>他们将该文件放在了static.cnblogs.com ，这样可以避免发送cookie。</li></ol>]]></description></item><item><title>优化网站设计（三十一）：不要在页面中缩放图片</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086912.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 08:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086912.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十一条原则：<a href="http://developer.yahoo.com/performance/rules.html#no_scale">Do Not Scale Images in HTML</a> （不要在页面中缩放图片）。 <p>老实说，这个错误的设计其实在我早些年做网页设计的时候，也经常会犯（原因在于很多时候，我们都有懒散的心理，图一时的方便）。 <p>有时候，我能得到的图片尺寸并不那么合乎要求（我说过了，我通常不太会自己做图片），但为了在网页中显示出我希望的尺寸，我会很自然地想到通过如下的方式来图片进行缩放：<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">img</span> <span class="attr">width</span><span class="kwrd">="100"</span> <span class="attr">height</span><span class="kwrd">="100"</span> <span class="attr">src</span><span class="kwrd">="mycat.jpg"</span> <span class="attr">alt</span><span class="kwrd">="My Cat"</span> <span class="kwrd">/&gt;</span> <style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style></pre>
<p>缩放的意思其实是说：</p>
<p>不管mycat.jpg这个图片原始尺寸是多少，我通过明确地设置图片宽度和高度，要求它最终显示出来的尺寸是100px * 100px.</p>
<p>很显然，浏览器下载到原始图片之后，如果原始尺寸与目标尺寸不符，就会需要对图片进行缩放（拉伸或者缩小），以便实现刚才所提到的目的。</p>
<p>&nbsp;</p>
<p>所以，请记住并遵守这条原则：你需要在网页中显示什么尺寸的图片，就请图片设计人员提供什么尺寸的图片，而不是在网页中进行缩放。</p>]]></description></item><item><title>优化网站设计（三十）：优化CSS sprites</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086895.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 08:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086895.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第三十条原则：<a href="http://developer.yahoo.com/performance/rules.html#opt_sprites">Optimize CSS Sprites</a> （优化CSS Sprites)。  <p>CSS Sprite(由于很难做中文翻译，所以保留英文）是这样一种技术：  <p>如果我们的多个页面元素需要使用不同的图片（例如作为背景）,常规的做法可以为每个元素定制一个CSS，每个CSS中通过<a href="http://www.w3school.com.cn/css/pr_background-image.asp">background-image</a>属性来设置不同的图片。这样做是可以实现功能的，但会带来的一个问题就是可能需要下载多个图片。为了改善这一点，CSS的设计者考虑了一种新的做法：可以将这些图片合并为一个大图片，然后在CSS中不仅仅设置<a href="http://www.w3school.com.cn/css/pr_background-image.asp">background-image</a>属性，同时还设置<a href="http://www.w3school.com.cn/css/pr_background-position.asp">background-position</a>属性来决定要显示的图片区域。这样一来，既实现同样的效果，又减少了图片下载的数量。  <p>这个技术，在“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a>”这篇文章中，我已经提到过了。不过也要注意一下，这种技术可能会带来一些额外的工作或者麻烦：  <ol> <li>手工地合并这些图片，并要去测量相应的像素位置，是比较繁琐的。不过，现在可以通过一些工具来帮助简化工作。</li> <ul> <li><a href="http://spritegen.website-performance.org/">http://spritegen.website-performance.org/</a> <li>&nbsp;<a href="http://csssprites.com/">http://csssprites.com/</a></li></ul> <li>额外的维护工作。如果其中某个图片修改了，不光要生成新的图片，而且可能涉及到很多CSS的修改。 <li>CSS Sprites一般只能使用到固定大小的盒子（box）里，这样才能够遮挡住不应该看到的部分。</li></ol> <p>本文提到的几个优化建议，主要如下</p> <ol> <li>尽可能地使用横向组合图片，这比纵向组合图片通常体积更小一些。</li> <li>尽量使图片具有接近的色系，这样最终组合出来的图片也会小一些。</li> <li>尽量使用小一些的图片，并且图片之间的间隙尽量也小一些，目的还是为了最终组合出来的图片体积更小。</li></ol> <p>【备注】就像上一篇文章提到的那样，我对图片并不特别在行，但这也有一个好处，我通常对于自己并不怎么在行的内容，都会毫不犹豫地选择遵从专业人士所提供的最佳实践和原则，例如上面提到的三条建议。</p>]]></description></item><item><title>优化网站设计（二十九）：优化图片</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086865.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 07:03:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086865.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十八条原则：<a href="http://developer.yahoo.com/performance/rules.html#opt_images">Optimize Images</a> （优化图片）。  <p>我必须承认，我对图片的设计并不在行，研究也不深入。所以对于这一条原则，我主要是翻译一下原文的内容，并没有太多要演示的。  <p><font color="#000000" size="3">You can check the GIFs and see if they are using a palette size corresponding to the number of colors in the image. Using </font><a href="http://www.imagemagick.org/"><font color="#000000" size="3">imagemagick</font></a><font color="#000000" size="3"> it's easy to check using<br><code>identify -verbose image.gif</code><br>When you see an image using 4 colors and a 256 color "slots" in the palette, there is room for improvement. </font></p> <p><font color="#000000" size="3"><strong>你可以使用</strong></font><a href="http://www.imagemagick.org/"><font color="#000000" size="3"><strong>ImageMagick</strong></font></a><font color="#000000" size="3"><strong>这个工具对gif图片进行检查，以确认它们是否还有优化的空间。这个工具如此强大，以至于它的使用可以用一本书的篇幅来写。而且事实上，确实有两本专门针对这个工具的书。这真是一个神奇的工具。</strong></font></p> <p><font color="#000000" size="3">Try converting GIFs to PNGs and see if there is a saving. More often than not, there is. Developers often hesitate to use PNGs due to the limited support in browsers, but this is now a thing of the past. The only real problem is alpha-transparency in true color PNGs, but then again, GIFs are not true color and don't support variable transparency either. So anything a GIF can do, a palette PNG (PNG8) can do too (except for animations). This simple imagemagick command results in totally safe-to-use PNGs:<br><code>convert image.gif image.png</code><br>"All we are saying is: Give PiNG a Chance!" </font></p> <p><strong><font color="#000000" size="3">尝试使用PNG取代GIF图片。通常情况下，同等质量的图片，PNG会比GIF小一些。早些时候，可能因为部分浏览器的支持问题，PNG得不到推广，但这个问题显然目前已经不存在了。PNG唯一取代不了GIF的地方是动画，因为PNG不支持动画。这又何妨呢？使用GIF来做些简单的动画吧，而PNG来支持其他的图片（包括透明图片，这方面PNG应该比GIF更强一些）。</font></strong></p> <p><font color="#000000" size="3">Run </font><a href="http://pmt.sourceforge.net/pngcrush/"><font color="#000000" size="3">pngcrush</font></a><font size="3"><font color="#000000"> (or any other PNG optimizer tool) on all your PNGs. Example:<br><code>pngcrush image.png -rem alla -reduce -brute result.png</code></font></font></p> <p><code><strong><font color="#000000" size="3">如果你已经决定了采用PNG这种图片格式，那么在发布PNG图片之前，可以采用 pngcrush 这个工具对其进行优化。</font></strong></code></p> <p><font size="3"><font color="#000000">Run jpegtran on all your JPEGs. This tool does lossless JPEG operations such as rotation and can also be used to optimize and remove comments and other useless information (such as EXIF information) from your images.<br><code>jpegtran -copy none -optimize -perfect src.jpg dest.jpg</code></font></font></p> <p><code><strong><font color="#000000" size="3">好吧，最后得说说JPG(JPEG)格式的图片了。这种格式其实目前在网页中已经用得不太多，因为可以使用PNG格式。JPG(JPEG)格式的优点，在于它不仅仅是一个图片，它里面其实有很多附加的信息，以便支持很多特殊的操作（例如记录相片基本信息的EXIF，可以支持</font><a href="http://cn.bing.com/search?q=c%23+jpg+exif"><font color="#000000" size="3">API进行读取</font></a><font color="#000000" size="3">），但也正是因为如此，它的体积通常较大，所以在网页中的使用已经日趋减少（可以考虑转换为PNG格式）。如果你一定要用，也建议使用jpegtran这个工具去除掉这些附加的信息，因为在网页中这些信息的作用基本是不存在的。</font></strong></code></p> <blockquote> <p><code><strong><font color="#ff0000"></font></strong></code></p></blockquote>]]></description></item><item><title>优化网站设计（二十八）：避免使用Filters(滤镜)</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086817.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 06:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086817.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow&nbsp; <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十八条原则：<a href="http://developer.yahoo.com/performance/rules.html#no_filters">Avoid Filters</a> (避免使用滤镜）。 <p>和上一条原则（<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086725.html">优化网站设计（二十七）：使用link而不是@import导入样式表</a>）一样，这一条原则也是关于标准化设计的问题。滤镜这个功能也是IE当年为了提供更加丰富的一些页面效果而设计的（相应的也会有代价）。 <p>IE 所支持的滤镜列表，可以参考下面这个链接 <p><a href="http://msdn.microsoft.com/en-us/library/ms532853(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/ms532853(v=vs.85).aspx</a> <p>其实不仅仅是别的浏览器可能不支持，IE 从9.0版本开始也放弃了这方面的支持。 <p>我们可以期待的是，CSS 3.0作为后续的一个版本，会为网页的特殊效果提供一个标准的支持。如果对CSS 3.0有兴趣，希望预先做些学习的话，可以参考 <p><a href="http://www.w3school.com.cn/css3/index.asp">http://www.w3school.com.cn/css3/index.asp</a> <p>与之前滤镜很相似的一些功能可以参考 <ol> <li><a href="http://www.w3school.com.cn/css3/css3_text_effect.asp">http://www.w3school.com.cn/css3/css3_text_effect.asp</a></li> <li><a href="http://www.w3school.com.cn/css3/css3_2dtransform.asp">http://www.w3school.com.cn/css3/css3_2dtransform.asp</a></li> <li><a href="http://www.w3school.com.cn/css3/css3_3dtransform.asp">http://www.w3school.com.cn/css3/css3_3dtransform.asp</a></li> <li><a href="http://www.w3school.com.cn/css3/css3_transition.asp">http://www.w3school.com.cn/css3/css3_transition.asp</a></li> <li><a href="http://www.w3school.com.cn/css3/css3_animation.asp">http://www.w3school.com.cn/css3/css3_animation.asp</a></li></ol> <p>目前IE 在新标准的支持还处于比较靠后的位置，我们希望IE能对此作出更快的支持。</p>]]></description></item><item><title>优化网站设计（二十七）：使用link而不是@import导入样式表</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086725.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 04:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086725.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow&nbsp; <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十七条原则：<a href="http://developer.yahoo.com/performance/rules.html#csslink">Choose &lt;link&gt; Over @import</a> （使用link而不是@import导入样式表）。 <p>这个原则很简单，在需要引入外部样式表的时候，应该使用更加标准的<a href="http://www.w3school.com.cn/tags/tag_link.asp">link标记</a>，而不是使用IE专用的<a href="http://msdn.microsoft.com/en-us/library/ie/ms530768(v=vs.85).aspx">@import</a>语句。 <p>现在已经不是IE独霸天下的时代了，尤其是在移动互联网兴起的浪潮中，<strong><font color="#ff0000">遵守标准逐渐成为一个共识，尽量少用与某个特定浏览器有关的特性</font></strong>，很重要。 <p>当然，如果哪一天真的做到所有浏览器都统一了，那真是一个幸福的事情。这一天会很远吗？ ]]></description></item><item><title>优化网站设计（二十六）：设计“智能”的事件处理程序</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086643.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 03:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086643.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; （ <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>），同时，他们还发布了一个相应的测试工具Yslow&nbsp; <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十六条原则：<a href="http://developer.yahoo.com/performance/rules.html#events">Develop Smart Event Handlers</a> （设计“智能”的事件处理程序）。 <p>我故意给“智能”两个字打上了双引号，意思是说，其实这也算不上智能，我们需要了解DOM元素的事件工作机制，就能正常地写出更好的事件处理程序。 <p>对于DOM的事件机制，你可能自认为相当了解了，例如你能熟悉地报出不少事件的名称（例如load,unload,click,change,focus,blur等），记住他们当然是很好的，但这可不是全部。有兴趣的朋友可以看看W3C的标准文档：<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow">http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow</a>。这个标准文档中提到了事件流的概念（Event-flow），并且提到一种所谓的“冒泡（Bubbing）”机制。 <p>那么，什么是“冒泡”机制呢？我们可以通过一个简单的实例来讲解。 <p>下面是一个简单的页面定义，里面有很多个按钮，我们希望用户点击每个按钮的时候，都能弹出一个对话框，并显示当前按钮的文本。<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebApplication4.WebForm1" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="testdiv"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 1"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 2"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 3"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 4"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 5"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 6"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 7"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"input[type=button]"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                alert(<span class="str">"Button Clicked : "</span> + $(<span class="kwrd">this</span>).val());
            });
        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这样做当然是没有问题的，这是最直接和“正常”的用法。但如果细想一下的话，上述的代码，其实是为每个按钮控件都绑定了一个处理程序。如果按钮有很多（例如100个），那么就需要产生100个事件的绑定。过多的事件绑定会对性能有所影响。
<p>利用DOM事件的冒泡机制，我们可以将代码改写成下面这样：<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebApplication4.WebForm1" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="testdiv"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 1"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 2"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 3"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 4"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 5"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 6"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 7"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
<strong><font color="#ff0000">            $(<span class="str">"#testdiv"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                <span class="kwrd">var</span> bt = $(<span class="kwrd">event</span>.target);
                alert(<span class="str">"Div Clicked : "</span> + bt.val());

            });</font></strong>
        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre><pre class="csharpcode">我们看到，在这个改进的版本中，没有直接对按钮进行事件绑定，而是为它们的容器控件（DIV)做了一个事件绑定。如果你运行起来，实际上的效果和之前那一次是一样的：点击每个按钮，分别会弹出一个对话框，显示当前按钮的文本。</pre><pre class="csharpcode">这是怎么回事呢？总结起来说，DOM元素的<strong><font color="#ff0000">一些事件（例如click)</font></strong>会按照下面的方式运作的：<br></pre>
<ol>
<li><pre class="csharpcode">用户点击了按钮，首先会去查找按钮上面有没有直接绑定事件处理程序，如果有的话，先执行这个事件处理程序；</pre></li>
<li><pre class="csharpcode">然后会尝试查找按钮的上层元素是否有绑定相应的事件处理程序，如果有，则也会执行。</pre></li>
<li><pre class="csharpcode">再往上查找，只要有相应的事件注册，都会被执行，直到最顶层的BODY为止。</pre></li></ol><pre class="csharpcode">这就是“冒泡”的意思。同时，这种事件机制还有一种叫法：<a href="http://www.bing.com/search?q=javascript+%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86&amp;go=&amp;qs=n&amp;form=QBLH&amp;pq=javascript+%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86&amp;sc=0-11&amp;sp=-1&amp;sk=">事件代理</a>。</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">一个附加的问题是：如果我们既在按钮上面订阅了事件，而且也在DIV上面订阅了事件，那么会不会同时都会被触发了。</pre><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebApplication4.WebForm1" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="testdiv"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 1"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 2"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 3"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 4"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 5"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 6"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 7"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"input[type=button]"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                alert(<span class="str">"Button Clicked : "</span> + $(<span class="kwrd">this</span>).val());
            });

            $(<span class="str">"#testdiv"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                <span class="kwrd">var</span> bt = $(<span class="kwrd">event</span>.target);
                alert(<span class="str">"Div Clicked : "</span> + bt.val());

            });
        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<font size="2" face="Consolas">答案是：他们都会被执行。</font></p>
<p><font size="2" face="Consolas"></font>&nbsp;</p>
<p><font size="2" face="Consolas">那么，如果我想在某些情况下，只触发按钮直接订阅的事件，而不触发DIV订阅的事件（阻止将事件冒泡），行不行呢？当然是可以的，你可以添加下面这样的代码</font></p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebApplication4.WebForm1" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="testdiv"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 1"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 2"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 3"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 4"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 5"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 6"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">value</span><span class="kwrd">="button 7"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"input[type=button]"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                alert(<span class="str">"Button Clicked : "</span> + $(<span class="kwrd">this</span>).val());

<strong><font color="#ffc000">  </font><font color="#ff0000">              window.<span class="kwrd">event</span>.cancelBubble = <span class="kwrd">true</span>;</font></strong>
            });

            $(<span class="str">"#testdiv"</span>).click(<span class="kwrd">function</span> (<span class="kwrd">event</span>) {
                <span class="kwrd">var</span> bt = $(<span class="kwrd">event</span>.target);
                alert(<span class="str">"Div Clicked : "</span> + bt.val());

            });
        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><font size="2" face="Consolas"></font>&nbsp;</p>
<p><font size="2" face="Consolas">所以，通过本文，我们了解到事件远非我们看到的那么简单。通过理解“冒泡”或者“事件代理”，我们可以将事件处理得更加合理。</font></p>
<p><font size="2" face="Consolas">值得一说的是，在桌面开发的WPF和Silverlight中，很多事件也同样采用了“冒泡”这样的策略，有兴趣的朋友可以参考 ： <a href="http://msdn.microsoft.com/en-us/library/ms742806.aspx">http://msdn.microsoft.com/en-us/library/ms742806.aspx</a><br></font></p><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>优化网站设计（二十五）：避免对DOM元素进行过多操作</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086546.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 02:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086546.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 <a href="http://yslow.org/ruleset-matrix/">Yslow</a> 这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十五条原则：<a href="http://developer.yahoo.com/performance/rules.html#dom_access">Minimize DOM Access</a> （避免对DOM元素进行<font color="#ff0000"><strong>过多</strong></font>操作，具体来说，这个话题是如何善用Javascript的） <p>HTML网页的基础是DOM，我在“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083162.html">优化网站设计（十九）：减少DOM元素的数量</a>”中已经提到过应该尽可能地减少DOM元素的数量，以便减小网页的体积，提高加载的速度。在之前的那篇文章的结尾处，我已经提到一个话题： <blockquote> <h4>正确地使用JQuery</h4> <h4></h4> <p>本文的最后部分，我要特别说明：我在之前的很多演示中都用到过jquery。（目前为止，它确实也是最好的一个javascript库，没有之一），但是对于jQuery，越来越多的人在学习，越来越多的人在滥用。这确实也是一个趋势。 <p>关于如何正确地使用jQuery,国外和国内都有热心的网友做了总结，请参考 <ol> <li><a href="http://www.cnblogs.com/huyh/archive/2009/03/30/1422976.html">http://www.cnblogs.com/huyh/archive/2009/03/30/1422976.html</a> （国内的，翻译文档）  <li><a href="http://www.cnblogs.com/huyh/archive/2009/03/31/1425430.html">http://www.cnblogs.com/huyh/archive/2009/03/31/1425430.html</a> （国内的，翻译文档）  <li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/10-ways-to-instantly-increase-your-jquery-performance/">http://net.tutsplus.com/tutorials/javascript-ajax/10-ways-to-instantly-increase-your-jquery-performance/</a> （国外的）</li></ol></blockquote> <p>这至少我的个人经验和体会：由于现在有了很多强大的javascript框架和库，网页开发人员拥有了前所未有的能力和热情——通过javascript为网页添加各种各样的效果，甚至完全可以从零开始构造一个文档。这在以往是不能想象的。话说，<a href="http://en.wikipedia.org/wiki/JavaScript">javascript</a> 这个有点“古老”语言这几年重新焕发了青春，甚至有一发不可收拾的趋势，原先的Javascript只是编写客户端的脚本，现在也可以编写<a href="http://nodejs.org/">服务器脚本</a>，甚至还可以编写<a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh465037.aspx">桌面程序</a>，<a href="http://msdn.microsoft.com/en-us/library/jj220082.aspx">Office程序</a>。Javascript这是要占领地球了吗？</p> <p>但是，无论如何，<font color="#ff0000"><strong>不恰当地使用javascript可能对网页造成不利的影响</strong></font>，例如：</p> <ol> <li><a href="http://www.bing.com/search?setmkt=en-US&amp;q=javascript+%E5%81%87%E6%AD%BB">http://www.bing.com/search?setmkt=en-US&amp;q=javascript+%E5%81%87%E6%AD%BB</a></li> <li><a href="http://203.208.46.147/search?q=javascript+hang">http://203.208.46.147/search?q=javascript+hang</a></li> <li><a href="http://203.208.46.147/search?newwindow=1&amp;q=javascript+performance+issue&amp;oq=javascript+performance+issue&amp;gs_l=serp.3...22831.26712.0.26948.21.12.0.0.0.0.0.0..0.0...0.0...1c.1.14.serp.ChKDsafzFUI">http://203.208.46.147/search?newwindow=1&amp;q=javascript+performance+issue&amp;oq=javascript+performance+issue&amp;gs_l=serp.3...22831.26712.0.26948.21.12.0.0.0.0.0.0..0.0...0.0...1c.1.14.serp.ChKDsafzFUI</a></li></ol> <p>为了帮助大家更加清晰地了解，并且避免常见的一些问题，我这里整理列举一些通用的技巧（部分翻译来自上述提到的几个文档）</p> <ol> <li>永远使用最新的JQuery版本。可以参考：<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html">优化网站设计（二）：使用CDN</a></li> <li>合并并最小化脚本。可以参考：<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a>&nbsp;&nbsp; <a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html">优化网站设计（四）：对资源启用压缩</a>&nbsp;&nbsp;&nbsp; <a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html">优化网站设计（十）：最小化JAVASCRIPT和CSS</a></li> <li>尽量使用for，而不是each。</li> <li>尽量使用ID去访问，而不是class。</li> <li>如果有可能，通过提供上下文，缩小查找范围。例如 $(expression, context)。</li> <li><strong>对一个元素的多次访问（尤其在循环里面），可以考虑先用一个变量将其缓存起来，而不是每次都重新查找它</strong>。应该尽可能使用到jQuery的链式选择方法。</li> <li>在可能的情况下，尽量减少动态插入、添加、删除元素。（我知道你很多时候做不到这一条）</li> <li>对于要拼接大量字符串的情况，可以考虑使用join方法，而不是concat函数，或者+= 这样的运算符。</li> <li>为所有事件的处理函数都返回false。</li></ol> <p>&nbsp;</p> <p>最后，<strong><font color="#ff0000">不要满足于一些较高层的技巧</font></strong>，我建议大家如果有时间的话，对Javascript做一次较为系统的回顾：<a href="http://w3school.com.cn/b.asp">http://w3school.com.cn/b.asp</a> ，我的经验是，即便你写过很多的脚本，找个时间做一次这样的回顾也将是你收获很多。</p>]]></description></item><item><title>优化网站设计（二十四）：通过使用不同的主机减少对cookie的使用</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086514.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 May 2013 01:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/19/3086514.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十四条原则：<a href="http://developer.yahoo.com/performance/rules.html#cookie_free">Use Cookie-Free Domains for Components</a> （通过使用不同的主机减少对cookie的使用） <p>我们之前讨论过“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083509.html">优化网站设计（二十）：使用多个主机来平衡负载</a>”，例如 <ol> <li>使用images.mydomain.com 专门处理图片请求</li> <li>使用scripts.mydomain.com 专门处理脚本请求</li> <li>使用<a href="http://www.mydomain.com">www.mydomain.com</a> 专门处理网页请求</li></ol> <p>当时我们提到的原因是：</p> <ol> <li>提高了下载的并行度</li> <li>由于可以使用多个服务器，所以可以提高服务器的响应能力</li></ol> <p>&nbsp;</p> <p>其实这种做法还有一个附加的奖励，以上的三个主机中，应该只有www主机才可能需要保存cookie（它对于图片和脚本来说是没有意义的），我们知道cookie会自动地发送给当前域的所有请求，我们通过将图片和脚本单独放在一个主机, 所有与www主机关联的cookie不会发送到images主机或者scripts主机，这样就可以大大地节省网络流量。</p> <p>通过下图可以更加清楚地看到这个效果</p> <p>下图是我访问淘宝商城的一个页面（属于vipservice.taobao.com这个主机），我们可以看到这个请求需要发送大量的cookie。（淘宝会确实跟踪我们很多信息）</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/19091956-22345d3417bf40df8e075c264996a23c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/19092000-289443b022784f4e8ef9ba333c65e217.png" width="244" height="100"></a></p> <p>该页面用到了很多图片，但由于这些图片是单独放置另外一个主机（img04.taobaocdn.com，如果细心的话，你还可以看到好几个不同的image主机，这是另外一个层面的技术了)，所以对这些图片的请求，是不需要发送很多cookie的。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/19092003-6a7aa8b2f26b4b81baadc585d8e01923.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/19092005-a56a2b5949d843ea9e44ee3d6a411ac8.png" width="244" height="85"></a></p>   <p>实际上，对于图片或者脚本（或者其他一些静态资源，例如样式表，Flash等），是不需要发送任何的cookie的。但是上图中，我们看到有一个cookie，名称为DNT ，值为1。这个cookie是干什么用的呢？如果有兴趣，可以自行搜索学习一下，我在后续也有文章会提到问题。</p>]]></description></item><item><title>优化网站设计（二十三）：减小Cookie的体积</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/18/3085712.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 18 May 2013 09:39:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/18/3085712.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十三条原则：<a href="http://developer.yahoo.com/performance/rules.html#cookie_size">Reduce Cookie Size</a> （减小Cookie的体积）。  <p>Cookie，正如它的名称（小甜饼）一样，本来名不见经传，在网站开发中也算不上什么重大的技术，但因为今年央视的3.15晚会上，却一下子火了，全国人民都知道了，部分不明真相的群众觉得这简直是洪水猛兽，活脱脱地一个害人的玩意儿。  <p>其实Cookie没有那么可怕，说到底它只是一种状态保存的技术。网站为了能够为用户提供个性化的服务（例如自动登录，个性选项的保存等），会考虑将一些数据放在客户端机器上。Cookie实际上是一个文本文件，所以它在客户端机器上确实有一定的安全风险。但罪不在Cookie，更完全没有必要妖魔化它。对于Cookie的原理，以及大家之前热议的Cookie可能泄露隐私的问题，还有业界对此的一些新的应对，我准备单独再写一篇文章来讨论，以免混淆了本文的主题。</p> <p>本文的主题是：</p> <p><strong><font color="#ff0000">如果需要用Cookie，那么应该尽可能使其体积小一些。</font></strong></p> <p>这样做的原因是：</p> <p><font color="#ff0000"><strong>如果对某个域(Domain)保存了Cookie，那么针对这个域的所有请求，都会发送这些所有的Cookie（哪怕当前请求根本用不着，例如针对图片的请求），大量地、重复地发送Cookie毫无疑问会增加网络的流量，并因此而降低请求被执行的性能</strong></font>。</p> <p>Cookie是一个文本文件，针对每个域，如果他们要求保存Cookie（而且需要持久保存的话），就会在本地的磁盘中创建出来一个文件。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/18174012-3eaaf67d81b74dceab454166a11d1bd2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/18174013-7c3bcd14a7b2444b9caac18f2d1352be.png" width="244" height="53"></a></p> <p>【备注】针对每个域，只会有一个文件。</p> <p>从技术上来说，这个文件的内容是由网站控制的，他可以决定要写什么内容在里面，他可以决定是否要加密。唯一的一个限制，如果我没有记错的话，这个文件的体积是不允许超过4KB（4096字节）的。</p>]]></description></item><item><title>优化网站设计（二十二）：避免404错误</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3084052.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 17 May 2013 09:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3084052.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site<a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十二条原则：<a href="http://developer.yahoo.com/performance/rules.html#no404">Avoid 404s</a> （避免404错误）。 <p>等等！404错误也能避免吗？能吗？不能吗？这个问题要从404错误的原因说起。 <h2>什么情况下会发生404错误？</h2> <p>404 意味着Not Found，意思是说未找到资源。既然如此，那么至少会有两种原因导致404错误： <ol> <li>该资源按理说是要有，但我们没有提供。用户按照正常的方式来请求，所以资源找不到。</li> <li>该资源本来就不存在，用户按照不正常的方式来请求，当然还是找不到。</li></ol> <p>&nbsp;</p> <p>先来看第一种情况吧。</p> <p>1. 例如每个网站其实默认都应该有一个favicon.ico文件（规定是放在网站的根目录下面），它用来在浏览器中为网站显示一个小图标。这个文件是由浏览器自动请求的，如果找不到，则自然会报告404错误。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17172244-dfd527161e9a4b2d9f10d58d2831f683.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172322-21ba2fa60f06481ebd6aba938dca5814.png" width="244" height="76"></a></p> <p>2. 还有一种可能性就是，用户之前访问过你的网站，当时某个页面是存在的（例如Customer.aspx），而且为了访问方便，他将这个页面收藏起来（恭喜你，有人收藏你的网页表明你的网页对他很有用）。但是在某个时候，你的网站由于某些考虑，例如功能合并或者重组等，对Customer.aspx做了改动，并且重新命名为了Service.aspx。试想一下，如果原先那个用户使用收藏夹里面记录的地址来访问，那么是不是会发生404错误呢？</p> <p>3. 又或者，你在网页中定义的链接地址，由于疏忽，在发布之前没有检查，导致原来应该链接到service.aspx的链接，写成了servies.aspx，用户在点击链接的时候，同样会收到404错误。</p> <p>&nbsp;</p> <p>以上三种场景都属于本来应该提供资源，但是我们却没有提供，所以由于此类问题导致的404错误，我们是应该（同时也可以）避免的。</p> <p>但另外一些情形就可能不容易完全避免了，例如用户就是输入了错误的地址（天知道，他们可能是真的误操作，也可能是故意输错的），因为该资源本来就不存在，所以当然应该是返回404错误。</p> <ol> <li>误操作：用户本来想输入 Customer.aspx，但却输成了Customer.asp</li> <li>故意输错：用户本来就不想好好用你的网站，所以他故意乱输入了一些地址。</li></ol> <p>&nbsp;</p> <p>&nbsp;</p> <h2>404错误会有什么影响？</h2> <ol> <li><strong><font color="#ff0000">看不到的影响</font></strong>：有时候，404错误发生了，用户可能根本没有感觉到。</li> <ul> <li>例如请求favicon.ico文件，或者请求了某个不存在的脚本文件、样式表、图片文件，页面还是会按照正常的方式进行呈现。</li> <li>丢失的脚本文件、样式表、图片文件，会导致页面的某些行为、界面效果出现异常（也可能不是很明显）</li> <li>最大的问题可能是性能方面的影响。尤其是如果请求一个不存在的脚本文件，因为浏览器在请求脚本文件的时候，即便是返回404，它也会尝试去按照Javascript的方式解析响应中的内容。这无疑会增加很多处理的时间，而因为该文件不存在，所以这些都是无用功。</li></ul> <li><font color="#ff0000"><strong>看得到的影响</strong></font>：如果用户请求的某个页面不存在，那么他将收到明确的回应</li> <ul> <li>默认情况下，他将收到一个标准的错误页面（请注意：不少用户会被这个页面吓到）</li></ul></ol> <blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://images.cnitblog.com/blog/9072/201305/17172357-c2790393093a469a85b90e667ce25311.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172405-9a3183ea74674d5397616435d7d7ee02.png" width="244" height="45"></a></p></blockquote> <ol> <ul> <li>如果网站比较注重用户体验，会对404错误页面进行自定义，例如下面几个例子</li></ul></ol> <blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://images.cnitblog.com/blog/9072/201305/17172431-75bcd7b41d6a40948a88df3a15f4a6d1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172521-1bc6d0089d1c478fb18bc5a234058512.png" width="244" height="151"></a><a href="http://images.cnitblog.com/blog/9072/201305/17172601-9491e773f925484f90ff604d7f786226.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172607-1523e7e5be794927af7e000a18a6d471.png" width="244" height="181"></a><a href="http://images.cnitblog.com/blog/9072/201305/17172608-d708debbcbcc482989354b678d88088f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172608-ef5caa8ca2ff4abc9381a6aeee88b4d2.png" width="244" height="99"></a></p></blockquote> <p>&nbsp;</p> <p>&nbsp;</p>  <h2>应该如何尽可能避免404错误的发生</h2> <p>既然了解了404错误发生的场景，那么相应的，我们可以通过一些措施来<strong><font color="#ff0000">尽可能避免</font></strong>它的发生：</p> <ol> <li>为网站提供favicon.ico。</li> <li>在发布网站前的测试工作中，运行<a href="http://validator.w3.org/checklink">Link checker</a>工具，确保所有链接都是能够访问到的。这个工具是W3C发布的，完全免费，你值得拥有。</li> <li> <div align="left">为了避免用户收藏绝对地址（customer.aspx)，给后期更新带来隐患。可以考虑在设计阶段采用 <a href="http://msdn.microsoft.com/en-us/library/ms972974.aspx">Url Rewriting</a>&nbsp; 或者 <a href="http://www.cnblogs.com/chenxizhang/archive/2009/12/27/1633265.html">Routing</a> 等技术来实现更加友好和灵活的地址（例如/Customer)，以后如果业务逻辑有变化，只需要修改一下路由规则即可。</div></li> <ul> <li> <div align="left">如果条件允许的话, 不如直接使用 <a href="http://www.asp.net/mvc">ASP.NET MVC</a> （内置使用Routing组件）</div></li></ul> <li> <div align="left">第三条措施,同样可以尽可能地减少用户手工输入地址出错的机会。</div></li></ol> <p align="left">&nbsp;</p> <p>&nbsp;</p> <h2>如何提供自定义的404错误页面</h2> <p>我们知道，404错误是无法完全避免的。而默认情况下，IIS 服务会提供标准的错误页面（但是，这些页面可能不是那么友好）</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17172611-c32a18d421784de18755b8b157e153e0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17172614-4ffc83ca1646485eafb56cfea8d1b3af.png" width="244" height="91"></a></p> <p>所以，为了让你的网站能在出现这种错误的时候，给用户相对较好一些的用户体验，我建议你应该设计自定义的404错误页面。</p> <p>&nbsp;</p> <p>看看下面列出的一些设计，相信能给你一些灵感：</p> <ol> <li><a href="http://www.webdesignerdepot.com/2009/07/50-creative-and-inspiring-404-pages/">http://www.webdesignerdepot.com/2009/07/50-creative-and-inspiring-404-pages/</a></li> <li><a href="http://blog.karachicorner.com/2012/06/30-best-404-web-page-designs/">http://blog.karachicorner.com/2012/06/30-best-404-web-page-designs/</a></li></ol> <p>【备注】与上面这些设计者不同的一点,我个人认为这个错误页面无需特意突出404 , 因为其实普通用户是不知道404 具体什么意思的. Keep it simple 。</p> <p>&nbsp;</p> <p>然后，可以在网站的web.config中进行如下的配置</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>

<span class="rem">&lt;!--</span>
<span class="rem">  For more information on how to configure your ASP.NET application, please visit</span>
<span class="rem">  http://go.microsoft.com/fwlink/?LinkId=169433</span>
<span class="rem">  --&gt;</span>

<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="false"</span>
                 <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>

<strong><font color="#ff0000">    <span class="kwrd">&lt;</span><span class="html">customErrors</span> <span class="attr">mode</span><span class="kwrd">="On"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">error</span> <span class="attr">statusCode</span><span class="kwrd">="404"</span>
             <span class="attr">redirect</span><span class="kwrd">="my404.html"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">customErrors</span><span class="kwrd">&gt;</span></font></strong>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>优化网站设计（二十一）：尽量少用iframe</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083788.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 17 May 2013 07:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083788.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong> </strong>Best Practices for Speeding Up Your Web Site <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h3>准备工作</h3> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十一条原则：<a href="http://developer.yahoo.com/performance/rules.html#iframes">Minimize Number of iframes</a> (尽量少用iframe)。 <p><a href="http://www.w3school.com.cn/tags/tag_iframe.asp">iframe</a>以及与之相关的<a href="http://www.w3school.com.cn/tags/tag_frameset.asp">frameset</a>,<a href="http://www.w3school.com.cn/tags/tag_frame.asp">frame</a> 都是早期HTML版本的产物，我记得在我第一次使用FrontPage创建网站的时候（那真的是很多年前了），确实用过它们，那时候其实主要用的是HTML，连ASP都是刚刚作为新事物被介绍，更不要说什么ASP.NET，以及AJAX等方面的新鲜玩意儿了。 <p>frame 是必须嵌套在frameset里面用的，可以将它们理解为在一个页面大框架里面，定义了几个不同的框架，组成的一个框架集。每个框架可以加载一个页面。而iframe本质上就是一个frame,只不过是inner-frame（内联框架），也就是说这种框架是不需要有框架集的，可以自成一体，随意嵌套在页面的任意地方。 <p>【备注】iframe在HTML的后续版本（例如HTML 5）中还是支持的，但frameset和frame 已经明确地要告别历史舞台了。 <p>&nbsp; <h2>iframe可以用来做什么呢？</h2> <ol> <li>它使得在一个网页中嵌入另外一个网页变得可能。</li> <li>为了避免这些嵌入的网页对我们自己的网页产生不利的影响，iframe实现了一个安全沙箱（Security Sandbox）。关于这一点，在HTML 5中进行了更加明确和丰富地支持。你可以参考 </li> <ul> <li><a href="http://developer.51cto.com/art/201002/181875.htm">http://developer.51cto.com/art/201002/181875.htm</a></li> <li><a href="http://msdn.microsoft.com/EN-US/library/windows/apps/hh441129(v=vs.10).aspx">http://msdn.microsoft.com/EN-US/library/windows/apps/hh441129(v=vs.10).aspx</a></li> <li><a href="https://developer.mozilla.org/zh-CN/docs/HTML/Element/iframe">https://developer.mozilla.org/zh-CN/docs/HTML/Element/iframe</a></li></ul> <li>使用iframe可以实现并行的脚本下载。因为在框架里面是一个独立的运行环境，它里面的资源可以和主页面的资源并行下载。</li></ol> <p>&nbsp;</p> <p>目前新浪微博提供的“微博秀”还是用iframe来实现的。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17154134-b8a8b350bb224e818cf22b04d0b7d324.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17154142-b0278011a6ed48e49d764d463d100889.png" width="244" height="243"></a><br></p> <h2>iframe 可能的问题？</h2> <ol> <li>安全问题：像上面提到的那样，虽然有安全沙箱，但其实还是有安全风险的。因为iframe引用的是别人做的网页。</li> <li>兼容性问题：并非所有浏览器都能很好地支持iframe。</li> <li>性能问题：iframe会导致页面加载变慢。</li> <li>其他问题：iframe的宽度和高度不能自动适应内容大小。</li></ol> <p>&nbsp;</p> <h2>iframe替代方案</h2> <p>如果不用iframe，那么如何在页面中嵌入其他网站的内容呢？绝大部分时候，脚本可以实现iframe的功能。例如</p> <ol> <li>Google的广告代码：<a href="http://blog.sina.com.cn/s/blog_4bec262601000947.html">http://blog.sina.com.cn/s/blog_4bec262601000947.html</a> (因为没有办法访问到Google的网站，所以我找了一篇参考文档）</li> <li>网站分享边栏代码：<a href="http://www.jiathis.com/getcode">http://www.jiathis.com/getcode</a></li></ol> <p>【备注】使用脚本的方式，前提是你完全信任这些脚本。而iframe唯一的好处在于它可以对外部页面的行为做限制（通过安全沙箱）</p> <p>&nbsp;</p>  <p>如果你仅仅是要动态插入另外一个网页的内容到当前网页上，你可以直接使用AJAX的方式，例如</p> <ol> <li>get : <a href="http://api.jquery.com/jQuery.get/">http://api.jquery.com/jQuery.get/</a></li> <li>load : <a href="http://api.jquery.com/load/">http://api.jquery.com/load/</a></li></ol>]]></description></item><item><title>优化网站设计（二十）：使用多个主机来平衡负载</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083509.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 17 May 2013 05:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083509.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp;</strong> Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第二十条原则：<a href="http://developer.yahoo.com/performance/rules.html#split">Split Components Across Domains</a> （使用多个主机来平衡负载）  <p>【备注】我这里特别将Domain翻译为主机，而不是直译为“域”，是因为相对于“域”来说，主机更加易于理解。 <p>我们如果想要让一个网站（或者泛指网络资源）能够被访问到，通常需要先注册一个域名(Domain Name)，并且需要在域名管理界面中，创建一个或者多个主机，例如 <ol> <li>cnblogs.com 是一个域名。</li> <li><a href="http://www.cnblogs.com">www.cnblogs.com</a> 是指cnblogs.com域名下面对应的www这个主机，它需要再映射到一个IP地址。</li> <li>一个域名可以有多个主机，例如既可以有www主机，也可以有mail主机，ftp主机，或者www2,www3,images, scripts 等等你需要的名字，它们都分别映射到不同的IP地址。</li> <li>为什么需要多个主机呢？</li> <ul> <li>一来多主机通常对应不同的功能，通常来说，www主机代表的是网站主机，ftp主机代表的是文件传输的主机，mail主机代表的是邮件主机。</li> <li>针对同一种功能，也可以有多个主机，例如同样是提供网站的功能，可以将图片放在images主机上面，将脚本放在scripts主机上面，将网页放在www主机上面。这样做的好处就是可以有多个主机的资源被利用，有利于实现大型网站或者访问密集型网站的负载均衡。</li> <li>对于不同主机来共享脚本的一个最佳实践，可以参考之前的文章：<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html">优化网站设计（二）：使用CDN</a></li> <ul> <li>适当地采用多主机，可以提高浏览器下载资源的并行度。</li></ul></ul> <li>过多的主机是否会有什么问题呢？</li> <ul> <li>如果一个页面加载过程中需要访问过多的主机，则违背了之前的两个原则：</li> <ul> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3053996.html">优化网站设计（九）：减少DNS查找的次数</a></li></ul> <li>过多的主机，会导致更多的请求数和DNS查找的次数。建议在设计时考虑2～4个主机。</li></ul></ol> <p>&nbsp; <p>现实的世界里，我们也确实看到很多网站会采用多主机的方式。例如有的专门处理图片，有的专门处理静态网页，有的专门处理动态网页。 <p>通过<a href="http://fiddler2.com/">Fiddler</a>工具，我们很容易地发现，在请求某个页面的时候，所使用的资源来自于多少个不同的主机。 <p>我们可以访问一下博客园的主页 <p><a href="http://images.cnitblog.com/blog/9072/201305/17133909-579bf02cf2e44c0280c5f09cc9f4448b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17133923-575c54212c4842728c1d74abb1d2f607.png" width="244" height="145"></a> <p>在请求主页的时候，其实需要访问10个主机，分别如下 <p align="left"><a href="http://images.cnitblog.com/blog/9072/201305/17133926-9a34fe25da294d2ba8f697febdb0a8cb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17133928-7d56b7a0d22a4a93a49209c14166d5d7.png" width="354" height="196"></a><br></p> <p align="left">其中属于博客园自己的主机有5个（<strong><font color="#ff0000">pic, static, www,common,passport </font></strong>)，另外5个则主要与网站分析和广告有关。前五个是为了业务的分割而实现的多主机，后面五个则是为了运营需要而增加的访问。</p> <p align="left">&nbsp;</p> <p align="left">再来看一下<a href="http://weibo.com/">新浪微博</a>的首页，那就更加了得了。它需要访问多达39个不同的主机（Host）</p><pre class="csharpcode">Request Count:   159
Unique Hosts:    39
Bytes Sent:      107,659        (headers:107,659; body:0)
Bytes Received:  253,485        (headers:48,017; body:205,468)

ACTUAL PERFORMANCE
--------------
Requests started at:        13:04:24.772
Responses completed at:    13:04:35.373
Sequence (clock) duration:    00:00:10.601
Aggregate Session duration:    00:00:15.248
DNS Lookup time:        5ms
TCP/IP Connect duration:    4,405ms

RESPONSE CODES
--------------
HTTP/304:     113
HTTP/200:     45
HTTP/404:     1

RESPONSE BYTES (by Content-Type)
--------------
               text/html: 95,808
              image/jpeg: 91,835
               ~headers~: 48,017
        application/json: 12,700
application/x-javascript: 3,860
               image/png: 958
               image/gif: 307

REQUESTS PER HOST
--------------
       img.t.sinajs.cn: 34
        js.t.sinajs.cn: 12
        ww1.sinaimg.cn: 12
3.48.web1.im.weibo.com: 10
        ww4.sinaimg.cn: 9
        tp2.sinaimg.cn: 8
        ww3.sinaimg.cn: 6
          cdn.tanx.com: 6
        tp3.sinaimg.cn: 5
         biz.weibo.com: 5
          rs.sinajs.cn: 4
        ww2.sinaimg.cn: 4
       js2.t.sinajs.cn: 4
            p.tanx.com: 3
    beacon.sina.com.cn: 3
        toruk.tanx.com: 3
        tp4.sinaimg.cn: 3
            a.tbcdn.cn: 2
      alitui.weibo.com: 2
      rm.api.weibo.com: 2
  nas.im.api.weibo.com: 2
       js1.t.sinajs.cn: 2
   img01.taobaocdn.com: 2
        log.mmstat.com: 1
        ss5.sinaimg.cn: 1
         cb.alimama.cn: 1
1.48.web1.im.weibo.com: 1
 wk.impress.sinaimg.cn: 1
   img04.taobaocdn.com: 1
             weibo.com: 1
        img.alimama.cn: 1
          g3.ykimg.com: 1
         u1.sinaimg.cn: 1
   ta.sass.sina.com.cn: 1
        tp1.sinaimg.cn: 1
        www.taobao.com: 1
  tns.simba.taobao.com: 1
      vimg1.ws.126.net: 1
   strip.taobaocdn.com: 1


从这个分析结果中我们也可以清楚地看到，现在新浪微博使用了很多taobao的资源。这当然与之前阿里巴巴注资新浪微博是有关系的，精准营销嘛。</pre><pre class="csharpcode">&nbsp;</pre>
<h2>是否真的要分主机？</h2>
<p>如果我们仅仅是希望按照资源的类型，使用不同的服务器来处理（多服务器可以提高整体性能，也便于管理），但又不想增加多个主机。例如</p>
<ol>
<li>A服务器专门存放图片</li>
<li>B服务器专门存放脚本</li>
<li>C服务器存放网页</li></ol>
<p>那么，按照我们之前提到的做法，可能会下面这样规划</p>
<ol>
<li>创建images主机，指向A服务器</li>
<li>创建scripts主机，指向B服务器</li>
<li>创建www主机，指向C服务器</li></ol>
<p>但实际上，还有一种解决方案，就是采用微软提供的Application Request Routing（ARR)模块，它里面包含了负载均衡，反向代理等功能，可以较为方便地实现这个需求</p>
<ol>
<li>创建www主机，指向一台ARR Server Farm，这个Farm里面包含三个服务器(A,B,C)</li>
<li>配置路由规则，使得所有的图片请求都路由到A服务器，脚本请求都路由到B服务器，网页请求都路由到C服务器。</li></ol>
<p>&nbsp;</p>
<p>Application Request Routing模块可以通过下面地址下载</p>
<p><a href="http://www.iis.net/downloads/microsoft/application-request-routing">http://www.iis.net/downloads/microsoft/application-request-routing</a></p>
<p>要使用该模块，需要IIS 7.0 。</p>
<p>&nbsp;</p><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>优化网站设计（十九）：减少DOM元素的数量</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083162.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 17 May 2013 01:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/17/3083162.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site</strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十六条原则：<a href="http://developer.yahoo.com/performance/rules.html#min_dom">Reduce the Number of DOM Elements</a> （减少DOM元素的数量） <p>在这个系列文章的前面部分，我们谈到的很多有关设计的高级别的知识（例如如何拆分内容，并行下载等等），并且大量讨论到了脚本、样式表、图片的一些优化设计。这一篇文章我们要来讨论的是页面本身的细节设计：我们应该尽可能地使得页面的DOM元素数量少一些，这样有助于减小页面体积，并且也降低了维护这份DOM树的成本。 <h2>什么是DOM？</h2> <p>好吧，如果你不太清楚这个概念，也没有什么大不了的。DOM的全称为：Document Object Model ，中文翻译过来叫文档对象模型。我们这里所探讨的DOM，其实有一个隐含的意思是指HTML DOM。关于它的定义，可以参考下面这个链接 <p><a href="http://www.w3school.com.cn/htmldom/index.asp">http://www.w3school.com.cn/htmldom/index.asp</a> <ol> <li>HTML DOM 定义了访问和操作 HTML 文档的标准方法。</li> <li>DOM 以树结构表达 HTML 文档。</li></ol> <p>从上面的定义中，我们可以知道HTML文档的结构本身就是有一套规范的（例如可以有哪些节点，必须有哪些节点等等），而且对于HTML文档的访问也是有规范的（例如要想改变某个元素的位置，则需要修改left,或者top属性），这套规范就是DOM。这是由W3C确定，并且在所有主流浏览器中都共同遵守的一套标准。<a href="http://www.w3.org/TR/DOM-Level-2-Core/introduction.html">http://www.w3.org/TR/DOM-Level-2-Core/introduction.html</a> <h2>什么是DOM树？</h2> <p>实际上并不真的存在DOM树，这只是我们程序员对于DOM的一种理解方式。一个HTML文档，由于其独有的特性，它有且只能有一个根元素，所有其他元素都是根元素的子元素，然后子元素又可以有子元素。对于这种数据结构，为了便于构造以及日后的访问（包括查询、修改），我们会采用一种树形结构来表示它。DOM树从逻辑上说大致上像下面这样</p> <p><img alt="DOM HTML TREE" src="http://www.w3school.com.cn/i/ct_htmltree.gif"></p> <p>【备注】该截图来自于<a href="http://www.w3school.com.cn/htmldom/index.asp">http://www.w3school.com.cn/htmldom/index.asp</a></p> <p>&nbsp;</p> <p>如果有了上述的概念，那么对于“DOM元素应该尽量少”这条原则应该是不难理解的。问题的关键在于</p> <ol> <li>多少才算少</li> <li>如何减少</li></ol> <p>&nbsp;</p> <h2>多少才算少？</h2> <p>很抱歉，这是一个没有标准答案的问题。没有谁规定我们的页面必须要少于某个数量的DOM元素。雅虎的团队当年声称他们的主页只有700个元素（对于一个门户页面来说，这个真的算很少了），但是最近我再去看这个页面，我发现目前有1527个元素。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17094759-e0d1d2ec768e4f67b8af962aafcc3a65.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094828-6c4089c1149a413da9b9064ef0351270.png" width="244" height="204"></a><br>我随意地打开另外几个门户网站（例如新浪）的主页，发现他们的元素数量就大大增加了。(而且也有很多错误）</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17094853-16da5ecdba1942daa8efdc86a48853bf.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094855-ee5b2cc019d544e3b9aa15f4cede83bb.png" width="244" height="204"></a></p> <p>我们也可以再来看一下博客园的主页，我发现他们的元素数量也在一个较小的级别。（1265）</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/17094903-cff21a7e246643cab62232ef9cd04884.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094926-3053c175d8df482da73f0681845cd5b0.png" width="244" height="204"></a></p> <p>所以，对于这个元素数量的问题，并没有什么固定的标准，应该尽可能地减小。当然，我们完全可以给自己一个小小的目标，例如1000左右？</p> <p>&nbsp; <h2>如何减少DOM元素的数量？</h2> <p>我觉得有几个方面可以用来减少DOM元素的数量</p> <ol> <li>避免不正确地使用服务器控件。</li> <li>减少不必要的内容（并不是所有内容都必须放在页面上面的）</li> <ul> <li>如果数据量大，可以考虑分页，或者按需加载</li></ul></ol> <p>&nbsp;</p> <h2>避免不正确地使用服务器控件</h2> <p>这个问题被一次又一次地讨论（甚至是争论），ASP.NET给我们带来的服务器控件，从一开始诞生之日起，就充满了争议。服务器控件毫无疑问是简化了开发过程，因为通过拖拽就能实现复杂的功能。但服务器控件的代价也是相当大的（例如臃肿的代码，以及视图状态），并且从一开始就最被人诟病的是，因为服务器控件隐藏了很多细节，使得有一批网页的开发人员，只了解服务器控件，甚至连HTML的一些基础知识都不了解。</p> <p>作为从ASP时代就开始做网站的人来说，包括我在内，我亲身经历了ASP.NET的整个发展过程。毋庸讳言，实际上微软也一直在改进ASP.NET。站在今天这样的时间节点，我个人给出的建议是</p> <ol> <li>如果能用ASP.NET MVC做的，就不要用ASP.NET Web Forms。（关于他们各自的优缺点，可以参考<a href="http://msdn.microsoft.com/en-us/magazine/dd942833.aspx">这篇文章</a>。）</li> <ul> <li>我们不想用ASP.NET Web Forms的原因不光是不想用服务器控件，而且是希望有更好的架构，来支持大型团队和项目的开发。</li></ul> <li>如果要用ASP.NET Web Forms，要慎重地使用服务器控件。尤其是一些复杂控件内部。</li> <ul> <li>大部分时候，我们都可以通过禁用视图状态来减小页面体积。</li></ul></ol> <p>&nbsp;</p> <p>我们可以来看一个简单的例子。下面有一个页面，我们用一个表格来显示数据。注意，这里使用的是Repeater，而不是DataGrid或者GridView这一类更加复杂的控件。</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication2.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:Repeater</span> <span class="attr">ID</span><span class="kwrd">="data"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">='&lt;%# Eval("ID") %&gt;'</span><span class="kwrd">&gt;&lt;/</span><span class="html">asp:Label</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">='&lt;%# Eval("FirstName") %&gt;'</span><span class="kwrd">&gt;&lt;/</span><span class="html">asp:Label</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">='&lt;%# Eval("LastName") %&gt;'</span><span class="kwrd">&gt;&lt;/</span><span class="html">asp:Label</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">='&lt;%# Eval("Company") %&gt;'</span><span class="kwrd">&gt;&lt;/</span><span class="html">asp:Label</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">asp:Label</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Text</span><span class="kwrd">='&lt;%# Eval("Title") %&gt;'</span><span class="kwrd">&gt;&lt;/</span><span class="html">asp:Label</span><span class="kwrd">&gt;&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">border</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>ID<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>FirstName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>LastName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Company<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Title<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">asp:Repeater</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp; <p>后台代码很简单，我只是实例化了1000个数据，然后将其绑定而已。<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;

<span class="kwrd">namespace</span> WebApplication2
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Default : System.Web.UI.Page
    {
        <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">if</span> (!IsPostBack) {
                <span class="rem">//这里只是随机地绑定了1000行数据</span>
                data.DataSource = Enumerable.Range(1, 1000).Select(x =&gt;
                    <span class="kwrd">new</span>
                    {
                        Id = x,
                        FirstName = <span class="str">"ares"</span>,
                        LastName = <span class="str">"chen"</span>,
                        Company = <span class="str">"microsoft"</span>,
                        Title = <span class="str">"SDE"</span>
                    });

                data.DataBind();
            }
        }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<br>页面运行起来之后，我们可以检测到它会有11016个元素。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17094938-87e5dd3a04f64afbb7f3be47364ee3ec.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094942-4001d7035e62401c95613eb3ad2cd849.png" width="196" height="244"></a></p>
<p>你感到诧异吗？为什么会有这么多元素呢？我们来看看页面到底是如何构造控件的吧。首先，在页面的声明语句中，加入Trace=true这个属性</p><pre class="csharpcode">&lt;%@ Page Language=<span class="str">"C#"</span> AutoEventWireup=<span class="str">"true"</span> CodeBehind=<span class="str">"Default.aspx.cs"</span> Inherits=<span class="str">"WebApplication2.Default"</span> <strong><font color="#ff0000"> Trace=<span class="str">"true"</span>%</font></strong>&gt;</pre><pre class="csharpcode">然后在浏览器中向页面底部滚动，就可以看到一些跟踪信息</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnitblog.com/blog/9072/201305/17094949-3fdf0fddb7ec44fcb3cf9b0cbf698bdd.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094954-888e65dddb0745dcab14e64e78804e43.png" width="244" height="134"></a></p>
<p>我们可以很清楚地发现，为了构造得到一行数据，其实会有12个控件。其最终生成的HTML内容为</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17094955-c4f38c0cf63c41b09f2dcad0ad45a064.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094956-0a3a8df7a0bf4ed787f76b9d9b32efc8.png" width="244" height="148"></a></p>
<p>那么，如何改进这一点呢？看看下面的代码</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication2.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:Repeater</span> <span class="attr">ID</span><span class="kwrd">="data"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="asp">&lt;%</span># Eval(<span class="str">"ID"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="asp">&lt;%</span># Eval(<span class="str">"FirstName"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="asp">&lt;%</span># Eval(<span class="str">"LastName"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="asp">&lt;%</span># Eval(<span class="str">"Company"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span>
                            <span class="asp">&lt;%</span># Eval(<span class="str">"Title"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">border</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>ID<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>FirstName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>LastName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Company<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Title<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">asp:Repeater</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>然后我们再来看页面中有多少元素呢？6016个。比刚才足足少了5000个。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17094957-e4a749ea7f394355ae1c249f68963d23.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17094957-dcbbe48a30ae4448b066ad9bb3a749df.png" width="244" height="212"></a></p>
<p>那么到底少了什么呢？请参考下图，对照一下前面的截图，我想你应该会明白的。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17094959-da22c8c4477a42ec91cc7f16f7ca24b6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17095001-e8cd9e64636c4ed392b1dcdd8af9b603.png" width="244" height="171"></a></p>
<p>现在还有6016个元素，但其实还可以进一步优化，例如将下面红色的几行去掉，并且为服务器控件禁用视图状态。（在当前这个页面中，其实只是显示数据，用不着做提交的）</p><pre class="csharpcode">&lt;%@ Page Language=<span class="str">"C#"</span> AutoEventWireup=<span class="str">"true"</span> CodeBehind=<span class="str">"Default.aspx.cs"</span> Inherits=<span class="str">"WebApplication2.Default"</span> %&gt;

&lt;!DOCTYPE html&gt;

&lt;html xmlns=<span class="str">"http://www.w3.org/1999/xhtml"</span>&gt;
&lt;head runat=<span class="str">"server"</span>&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
 <strong><font color="#ff0000">   &lt;form id=<span class="str">"form1"</span> runat=<span class="str">"server"</span>&gt;
        &lt;div&gt;</font></strong>
            &lt;asp:Repeater ID=<span class="str">"data"</span> runat=<span class="str">"server"</span> EnableViewState=<span class="str">"false"</span>&gt;
                &lt;ItemTemplate&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;%# Eval(<span class="str">"ID"</span>) %&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;%# Eval(<span class="str">"FirstName"</span>) %&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;%# Eval(<span class="str">"LastName"</span>) %&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;%# Eval(<span class="str">"Company"</span>) %&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;%# Eval(<span class="str">"Title"</span>) %&gt;&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/ItemTemplate&gt;
                &lt;HeaderTemplate&gt;
                    &lt;table border=<span class="str">"1"</span>&gt;
                        &lt;tr&gt;
                            &lt;th&gt;ID&lt;/th&gt;
                            &lt;th&gt;FirstName&lt;/th&gt;
                            &lt;th&gt;LastName&lt;/th&gt;
                            &lt;th&gt;Company&lt;/th&gt;
                            &lt;th&gt;Title&lt;/th&gt;
                        &lt;/tr&gt;
                &lt;/HeaderTemplate&gt;
                &lt;FooterTemplate&gt;
                    &lt;/table&gt;
                &lt;/FooterTemplate&gt;
            &lt;/asp:Repeater&gt;
<strong><font color="#ff0000">        &lt;/div&gt;
    &lt;/form&gt;</font></strong>
&lt;/body&gt;
&lt;/html&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这样又可以少掉几个元素。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17095007-73d8c7c2239a4934a892142dae102de2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17095007-55217d672ec2425fa290c3c13a6d0984.png" width="174" height="244"></a></p>
<p>是不是跃跃欲试了呢？不要着急，我们再来谈一个问题：这个页面上的1000行数据真的有必要进行一次性的加载和显示吗？答案通常是否定的，因为浏览器的尺寸本来就是有限的，对于用户来说，并不可能一次性阅读1000行数据。所以，我们需要了解如何通过分页或者按需加载的技术，来减少页面DOM元素的数量，提高加载和维护的效率。</p>
<p>&nbsp;</p>
<h2>使用分页加载内容</h2>
<p>分页就是说，虽然数据很多，但我每次只显示一部分（例如20行），用户如果想看其他的行，则通过相应的按钮来导航切换。我们可以将上面的例子稍微改动一下<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication2.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">asp:Repeater</span> <span class="attr">ID</span><span class="kwrd">="data"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">EnableViewState</span><span class="kwrd">="false"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span># Eval(<span class="str">"ID"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span># Eval(<span class="str">"FirstName"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span># Eval(<span class="str">"LastName"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span># Eval(<span class="str">"Company"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">td</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span># Eval(<span class="str">"Title"</span>) <span class="asp">%&gt;</span><span class="kwrd">&lt;/</span><span class="html">td</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ItemTemplate</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">table</span> <span class="attr">border</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">tr</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>ID<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>FirstName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>LastName<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Company<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">th</span><span class="kwrd">&gt;</span>Title<span class="kwrd">&lt;/</span><span class="html">th</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">tr</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">HeaderTemplate</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">table</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">FooterTemplate</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">asp:Repeater</span><span class="kwrd">&gt;</span>

<strong><font color="#ffc000">    <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">href</span><span class="kwrd">='default.aspx?p=&lt;%= CurrentPageIndex+1 %&gt;'</span><span class="kwrd">&gt;</span>下一页<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></font></strong>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>作为演示目的，这里只是添加了一个链接，点击可以进入下一页。服务端代码也需要稍作修改<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;

<span class="kwrd">namespace</span> WebApplication2
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Default : System.Web.UI.Page
    {

        <span class="kwrd">public</span> <span class="kwrd">int</span> CurrentPageIndex { get; set; }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">if</span> (!IsPostBack)
            {

                <span class="rem">//这里检测是否要显示特定页面</span>
                var p = Request.QueryString[<span class="str">"p"</span>];
                var index = 0;

                <span class="kwrd">if</span> (<span class="kwrd">string</span>.IsNullOrEmpty(p) || !<span class="kwrd">int</span>.TryParse(p, <span class="kwrd">out</span> index))
                    CurrentPageIndex = 1;
                <span class="kwrd">else</span>
                    CurrentPageIndex = index;

                <span class="rem">//这里只是随机地绑定了20行数据</span>
                data.DataSource = Enumerable.Range((CurrentPageIndex - 1) * 20 + 1, 20).Select(x =&gt;
                    <span class="kwrd">new</span>
                    {
                        Id = x,
                        FirstName = <span class="str">"ares"</span>,
                        LastName = <span class="str">"chen"</span>,
                        Company = <span class="str">"microsoft"</span>,
                        Title = <span class="str">"SDE"</span>
                    });

                data.DataBind();
            }
        }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>如果用户没有提供p这个参数（或者是不正确的值），则默认显示第一页。如果提供了，则显示他想要的页面。每页显示20行。这个页面显示出来，只需要133个元素。如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17095009-fc7efcff18e140239c81d9fa002a8113.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17095011-c0580d23b6e14ff092f6ae47317fe54b.png" width="145" height="244"></a></p>
<p>当用户点击“下一页”的时候，实际上是一个新的请求。而且同样只需要133个元素。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/17095014-455d51abaf7f48ad95521a4234650f2c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/17095017-eec7a08e4e59406c8d6a6023566df1c0.png" width="195" height="244"></a></p>
<p>对于分页，还有一些细节直接研究，并且也有一些现成的插件可以使用。例如 <a href="http://www.bing.com/search?setmkt=en-US&amp;q=jquery+paging">http://www.bing.com/search?setmkt=en-US&amp;q=jquery+paging</a></p>
<p>&nbsp;</p>
<h2>按需加载内容</h2>
<p>分页可以很好地解决大数据的问题。但由于分页需要用户额外的点击操作，对于用户来说，可能不是很方便。为了进一步提高用户体验，我们是否能做到：</p>
<ol>
<li>默认显示20行</li>
<li>当用户往下滚动的时候，根据需要再显示另外20行</li>
<ul>
<li>这是一个循坏</li></ul></ol>
<p>现实世界中，有很多这样的例子，例如本文前面提到的<a href="http://www.yahoo.com/">雅虎主页</a>，目前就是这样做的。还有国内比较火的<a href="http://weibo.com/">新浪微博</a>，也是这样做的。</p>
<p>按需加载！听起来很有点意思吧，由于讲解这个做法，相对来说篇幅较大。我希望大家可以自行参考一下下面这篇文章 </p>
<p>Load Data From Server While Scrolling Using jQuery AJAX</p>
<p><a href="http://www.codeproject.com/Articles/239436/Load-Data-From-Server-While-Scrolling-Using-JQuery">http://www.codeproject.com/Articles/239436/Load-Data-From-Server-While-Scrolling-Using-JQuery</a></p>
<p>&nbsp;</p>
<p>按需加载与分页是有根本区别的：分页之后页面的体积能够固定下来，而按需加载的做法中，页面体积是动态添加，而且也正因为是动态添加到，每次添加的内容有限，所以给用户的影响很小。</p>
<p>&nbsp;</p>
<h2>正确地使用JQuery</h2>
<h2></h2>
<p>本文的最后部分，我要特别说明：我在之前的很多演示中都用到过jquery。（目前为止，它确实也是最好的一个javascript库，没有之一），但是对于jQuery，越来越多的人在学习，越来越多的人在滥用。这确实也是一个趋势。
<p>关于如何正确地使用jQuery,国外和国内都有热心的网友做了总结，请参考
<ol>
<li><a href="http://www.cnblogs.com/huyh/archive/2009/03/30/1422976.html">http://www.cnblogs.com/huyh/archive/2009/03/30/1422976.html</a> （国内的，翻译文档）</li>
<li><a href="http://www.cnblogs.com/huyh/archive/2009/03/31/1425430.html">http://www.cnblogs.com/huyh/archive/2009/03/31/1425430.html</a> （国内的，翻译文档）</li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/10-ways-to-instantly-increase-your-jquery-performance/">http://net.tutsplus.com/tutorials/javascript-ajax/10-ways-to-instantly-increase-your-jquery-performance/</a> （国外的）</li></ol>]]></description></item><item><title>优化网站设计（十八）：预加载内容</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3082402.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 16 May 2013 10:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3082402.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site</strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十六条原则：<a href="http://developer.yahoo.com/performance/rules.html#preload">Preload Components</a> （预加载内容） <p>我在上一篇文章（<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3081941.html">优化网站设计（十七）：延迟或按需加载内容</a>）中谈到了如何设计延迟或者按需加载的策略（针对脚本，样式表，图片），来实现页面的快速加载。看起来，本文要讨论的原则与上一条原则是相悖的，但其实不然。它们并不冲突，而且是为了实现不同的目标。这条原则只要理解了，要做起来实际上是比较简单的。 <p>其实<strong><font color="#ff0000">预加载</font></strong>这样的策略，在很多地方都会用到。例如典型的数据库访问的情况，会有所谓的“预读”行为。我可以给大家以SQL Server为例，解释一下什么叫“预读（Read Ahead)”，然后以此类比到网页加载中，我相信大家就很容易理解了。 <p>SQL Server为了提高数据读取效率，在第一次编译查询语句，并缓存执行计划的时候，会尝试读取一部分数据到缓存中，这样的话，如果该查询语句真的需要执行，因为有部分数据已经缓存起来了，则总的数据读取量就自然少了，以此可以提高性能。 <p>关于Read Ahead，你可以参考这里的文档说明：<a href="http://msdn.microsoft.com/en-us/library/ms191475(v=SQL.105).aspx">http://msdn.microsoft.com/en-us/library/ms191475(v=SQL.105).aspx</a> <p>下面这个截图就是我在执行某个查询的时候，从执行统计中看到的一些有意思的信息<pre class="csharpcode"><a href="http://images.cnitblog.com/blog/9072/201305/16183748-3476daec2fd1472392df79eb0778c5c2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16183749-b373ee8060df41ee907f6ee3b6755baa.png" width="244" height="67"></a></pre>

<p><font size="2" face="Consolas">好的，回到我们今天的话题，为什么需要预先加载内容呢？想象一下我们使用搜索引擎的场景吧：</font></p>
<ol>
<li><font size="2" face="Consolas">我们通常会先登录到搜索引擎的主页</font></li>
<li><font size="2" face="Consolas">搜索引擎的主页通常是比较简单的（Google开创了这样一个设计风格，整个页面只有一个搜索框）</font></li>
<li><font size="2" face="Consolas">所以，主页加载应该是比较快的（因为东西很少）。而且，从用户进入主页，到输入关键字进行查询，会有一定点时间，期间浏览器其实是较为空闲的。</font></li>
<li><font size="2" face="Consolas">当我们在搜索框中输入关键字之后，会被转到结果页面</font></li>
<li><font size="2" face="Consolas">结果页面的内容通常是比较多的，如果全部要在结果页面显示的时候，才加载，可能会比较慢</font></li></ol>
<p>既然如此，我们能不能将原先要在结果页面中加载的内容（如脚本，图片，样式等），通过某种方式，在用户请求主页的时候，就预先加载好。这样，当用户真的需要显示结果页面的时候，因为已经有了缓存，所以就不需要再加载了。</p>
<p>那么，你知道怎么做了吗？</p>
<p>&nbsp;</p>
<p>还有一个可能与此原则相关的做法，我们知道通常ASP.NET的网站第一次加载都较慢，因为它需要进行编译。为了能优化这些网站的加载速度，我们有一种做法叫做“预热”，简单来说，模拟用户去预先请求每个页面，让服务器的编译尽可能早地发生，这样用户再来访问的时候，就不需要再编译了。</p>
<p>如果你使用了SharePoint，则可以下载下面的这个脚本</p>
<p><a href="http://gallery.technet.microsoft.com/office/SharePoint-2007-2010-or-d1884b4b">http://gallery.technet.microsoft.com/office/SharePoint-2007-2010-or-d1884b4b</a></p>
<p>实际上，上面的脚本，还可以再做修改。至少这个思路值得我们借鉴了。</p>
<p>&nbsp;</p>
<p>同时 ，如果你使用了IIS 7.5，可以通过安装下面这个组件（<strong><font color="#ff0000">Application Initialization Module for IIS 7.5</font></strong>），来提高网站第一次访问时的性能</p>
<p><a href="http://www.iis.net/downloads/microsoft/application-initialization">http://www.iis.net/downloads/microsoft/application-initialization</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><br>&nbsp;</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>优化网站设计（十七）：延迟或按需加载内容</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3081941.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 16 May 2013 07:28:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/16/3081941.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十六条原则：<a href="http://developer.yahoo.com/performance/rules.html#postload">Postload Components</a> （<strong><font color="#ff0000">延迟</font></strong>或<strong><font color="#ff0000">按需</font></strong>加载内容）</p> <p>页面加载过程中，除了页面本身的内容之外，可能需要加载很多额外的资源，例如我们常说的：</p> <ol> <li>脚本</li> <li>样式表</li> <li>图片</li></ol> <p>我在之前的文章中，已经有针对脚本和样式表做了一些优化的建议，请参考</p> <ol> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html">优化网站设计（二）：使用CDN</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053216.html">优化网站设计（五）：在顶部放置样式定义</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053299.html">优化网站设计（六）：在文档底部放置脚本定义或引用</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053562.html">优化网站设计（八）：将脚本文件和样式表作为外部文件引用</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html">优化网站设计（十）：最小化JAVASCRIPT和CSS</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3061004.html">优化网站设计（十二）：删除重复脚本</a></p></li></ol> <p>这一条原则的核心是：<strong><font color="#ff0000">延迟或按需加载</font></strong>。首先来针对我们比较最经常用到的脚本为例进行讲解。</p> <h2>针对脚本的按需加载</h2> <p>我们可以想象一下，一个真正的网站项目中，会有各种各样的脚本文件，其中还包含很多基础的框架（例如jquery,knockoutjs 等），这些脚本文件可能都或多或少需要在页面中引用。问题在于，如果页面一多起来，或者复杂起来，我们可能不太能准确地知道某个页面是否真的需要某个脚本。（难道不是这样吗？），一个蹩脚的解决方案是，那么就在母版页中，一次性将所有可能用到的框架脚本都引用进来吧。你是这样做的吗？</p> <p>如果你真的这样做，那么，可能可以一时地解决问题。但实际上存在一个问题，在某些页面上，可能只用到一个脚本库，但为了你的方便，以后都需要全部加载所有的脚本库了。</p> <p>随着项目的进一步开发，脚本之间的依赖会进一步复杂，要维护这些脚本确实是一个大问题。</p> <p>在当年雅虎的团队写下这条原则的时候，他们提到了一个他们自己开发的组件来实现按需加载脚本，这个组件叫做GET，是包含在YUI这套工具包中的。<a href="http://yuilibrary.com/yui/docs/get/">http://yuilibrary.com/yui/docs/get/</a>&nbsp; ，它的意思就是可以动态地，按需加载脚本和样式表。</p> <p>我对YUI的研究并不太多，而实际上这几年，Javascript这方面的技术突飞猛进，涌现了更多的创新性的设计。例如我今天要讲的<a href="http://requirejs.org/">requirejs</a>。</p> <p>我通过一个简单的例子给大家来讲解吧</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/16152706-6c8e69e5041e4c4aa59e78db4da0c038.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152707-edc1ee190e9d42b7be10d9125187ce6e.png" width="244" height="170"></a></p> <p>这里有一个简单的网站，首页叫Default.aspx。根据我们的设计，这个页面需要加载jquery，以及可能的其他一些库，然后执行自己的一些逻辑。所以，我们会有如下的脚本引用</p><pre class="csharpcode">    &lt;!--传统的做法中，我们需要在页面中添加所有的脚本引用，有时候可能会加载一些不必要的脚本--&gt;
    &lt;script src=<span class="str">"Scripts/jquery-2.0.0.min.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"Scripts/knockout-2.2.1.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"Scripts/default.js"</span>&gt;&lt;/script&gt;</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这样做有什么问题吗？当然不是。只不过如我们之前所谈到的那样，这种预先加载所有脚本的方式，可能造成资源的浪费，而且这么多脚本引用在页面中，很容易引起混淆。为了更好地说明这一点，我给大家演示一个真实的场景：</p>
<ol>
<li>我们希望页面在加载的时候，只下载jquery这个库</li>
<li>只有当用户点击了页面上面的那个按钮，我们才去下载knockout这个库</li></ol>
<p>瞧！这就是所谓的按需加载。那么来看看我们将如何使用requirejs实现这个需求吧？</p>
<p>首先，你可以通过Nuget Package Manager 获取requirejs这个库。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/16152708-9eb75b88c0584824a739712ebd61b7af.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152708-38e9fd6f166f43ceb981c9be5b61f049.png" width="245" height="140"></a></p>
<p>然后，在页面中，你只需要像下面这样定义脚本引用。（以后，你的页面中也只需要有这样一个引用）</p><pre class="csharpcode">    &lt;script src=<span class="str">"Scripts/require.js"</span> data-main=<span class="str">"scripts/default"</span>&gt;&lt;/script&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这里的data-main指的是主脚本。require.js会首先下载的一个脚本。你确实可以写成下面这样</p><pre class="csharpcode">    &lt;script src=<span class="str">"Scripts/require.js"</span> data-main=<span class="str">"scripts/default.js"</span>&gt;&lt;/script&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>但是，正如你所见，.js是可以省略掉的。</p>
<p>接下来在default.js中，应该如何写脚本呢？下面是一个简单的例子</p><pre class="csharpcode"><span class="rem">/// &lt;reference path="require.js" /&gt;</span>
<span class="rem">/// &lt;reference path="jquery-2.0.0.js" /&gt;</span>
<span class="rem">/// &lt;reference path="knockout-2.2.1.js" /&gt;</span>


<span class="rem">//对requirejs进行一些基本配置</span>
requirejs.config({
    paths: {
        jquery: <span class="str">"jquery-2.0.0.min"</span> <span class="rem">//指定一个路径别名</span>
        , knockout: <span class="str">"knockout-2.2.1"</span>
    }
});


<span class="rem">//声明下面的代码是需要jquery这个库的</span>
require([<span class="str">'jquery'</span>], <span class="kwrd">function</span> () {
    $(<span class="kwrd">function</span> () {
        alert(<span class="str">"Hello,jquery!"</span>);
    });
});</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>我们看到，第一部分是对requirejs的基本配置，我们定义了两个别名。然后在第二部分，我们声明了下面的代码是需要jquery这个库的。</p>
<p>将页面运行起来之后，在浏览器中我们可以监控得到脚本下载的行为如下</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/16152710-b744cf26bf704dc2a713b4b66d6d10a6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152710-98b820d317fe4500afc5677ae1c8e751.png" width="244" height="69"></a></p>
<p>如我们设想的那样，先加载了require.js，然后加载了default.js， 然后才是加载了jquery.js</p>
<p>有点意思，不是吗？虽然最后的结果也是加载了jquery，但这个加载方式与直接在页面中定义引用有着本质的区别，这是按需加载的。如果你对此还不太赞同，那么看了下面的例子，我相信你一定会同意的。</p>
<p>我们需要在default.js这个文件中，为页面上的那个按钮订阅点击事件，而且我们希望，只有当用户真的点击过了按钮，才会下载另外一个脚本（knockout），看看如何实现这个需求吧？</p><pre class="csharpcode"><span class="rem">/// &lt;reference path="require.js" /&gt;</span>
<span class="rem">/// &lt;reference path="jquery-2.0.0.js" /&gt;</span>
<span class="rem">/// &lt;reference path="knockout-2.2.1.js" /&gt;</span>


<span class="rem">//对requirejs进行一些基本配置</span>
requirejs.config({
    paths: {
        jquery: <span class="str">"jquery-2.0.0.min"</span> <span class="rem">//指定一个路径别名</span>
        , knockout: <span class="str">"knockout-2.2.1"</span>
    }
});



<span class="rem">//声明下面的代码是需要jquery这个库的</span>
require([<span class="str">'jquery'</span>], <span class="kwrd">function</span> ($) {
    $(<span class="kwrd">function</span> () {
        <span class="rem">//只有用户点击了某个按钮，才动态加载knockoutjs</span>
        $(<span class="str">"#test"</span>).click(
            <span class="kwrd">function</span> () {
                require([<span class="str">'knockout'</span>], <span class="kwrd">function</span> (ko) {
                    alert(ko.version);
                });
            }
        );
    });
});</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">同样的，我们可以通过浏览器监控工具了解脚本下载的流程：</pre><pre class="csharpcode">页面加载的时候，仍然只有三个脚本下载了</pre><pre class="csharpcode"><a href="http://images.cnitblog.com/blog/9072/201305/16152713-7a5e051861ec49dd8ca8b2ce75826b11.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152714-f49883010c834f2892a39ce316afb275.png" width="244" height="69"></a></pre><pre class="csharpcode">但是，如果点击了按钮，则会有第四个脚本下载</pre><pre class="csharpcode"><a href="http://images.cnitblog.com/blog/9072/201305/16152714-af2a9a5a278745afac14940e411158de.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152715-6eb907b58cdc4b07b3ca6c7c2735d5e2.png" width="244" height="104"></a></pre><pre class="csharpcode">同时，从下面的对话框来看，也可以断定确实是执行了相应的脚本的。因为我们当前使用的knockout脚本的版本确实是2.2.1。</pre><pre class="csharpcode"><a href="http://images.cnitblog.com/blog/9072/201305/16152715-c81eec4aa827422da05a072ee4a50e16.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152715-c303e8f79b874bcb8ad8919ef6b6f186.png" width="244" height="197"></a></pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">这的确是一个很不错的机制。如果大家有兴趣，还可以继续深入研究，现在jquery为了更好地满足动态加载和按需加载的需要，甚至都提供了模块化的版本。请参考 <a href="http://projects.jga.me/jquery-builder/">http://projects.jga.me/jquery-builder/</a></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h2>针对样式表文件的按需加载</h2>
<p>我相信按需加载脚本文件这样的设计，足够引起你的兴趣了。很自然地，你可能会有这样一个问题，能不能实现对样式表的按需加载呢？</p>
<p>听起来不错，而且应该也不难，但目前没有现成的实现。当然YUI中的GET是可以用的。</p>
<p>requirejs的官方有一个解释，有兴趣可以参考一下&nbsp; <a href="http://requirejs.org/docs/faq-advanced.html#css">http://requirejs.org/docs/faq-advanced.html#css</a></p>
<p>他们也提供了一个建议的脚本来按需加载样式表</p><pre class="csharpcode"><span class="kwrd">function</span> loadCss(url) {
    <span class="kwrd">var</span> link = document.createElement(<span class="str">"link"</span>);
    link.type = <span class="str">"text/css"</span>;
    link.rel = <span class="str">"stylesheet"</span>;
    link.href = url;
    document.getElementsByTagName(<span class="str">"head"</span>)[0].appendChild(link);
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>你可以将这个脚本访问任何的地方，进行调用。例如我是下面这样做的</p><pre class="csharpcode"><span class="rem">/// &lt;reference path="require.js" /&gt;</span>
<span class="rem">/// &lt;reference path="jquery-2.0.0.js" /&gt;</span>
<span class="rem">/// &lt;reference path="knockout-2.2.1.js" /&gt;</span>


<span class="rem">//对requirejs进行一些基本配置</span>
requirejs.config({
    paths: {
        jquery: <span class="str">"jquery-2.0.0.min"</span> <span class="rem">//指定一个路径别名</span>
        , knockout: <span class="str">"knockout-2.2.1"</span>
    }
});



<span class="rem">//声明下面的代码是需要jquery这个库的</span>
require([<span class="str">'jquery'</span>], <span class="kwrd">function</span> ($) {
    $(<span class="kwrd">function</span> () {
        <span class="rem">//只有用户点击了某个按钮，才动态加载knockoutjs</span>
        $(<span class="str">"#test"</span>).click(
            <span class="kwrd">function</span> () {
      <strong><font color="#ff0000">          loadCss(<span class="str">'default.css'</span>);</font></strong>

                require([<span class="str">'knockout'</span>], <span class="kwrd">function</span> (ko) {
                    alert(ko.version);
                });
            }
        );
    });
});



<span class="kwrd">function</span> loadCss(url) {
    <span class="kwrd">var</span> link = document.createElement(<span class="str">"link"</span>);
    link.type = <span class="str">"text/css"</span>;
    link.rel = <span class="str">"stylesheet"</span>;
    link.href = url;
    document.getElementsByTagName(<span class="str">"head"</span>)[0].appendChild(link);
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h2>针对图片的按需加载</h2>
<p>本文的最后一部分我们来谈谈图片的按需加载的问题。如果你的页面包含了大量的图片，掌握这个原则将非常有助于提高网页的加载速度。</p>
<p>大家可以设想一下图片搜索引擎的结果页面，例如 <a href="https://www.google.com/search?newwindow=1&amp;site=&amp;tbm=isch&amp;source=hp&amp;biw=1468&amp;bih=773&amp;q=microsoft&amp;oq=microsoft&amp;gs_l=img.3...1779.4076.0.4399.9.7.0.0.0.0.0.0..0.0...0.0...1ac.1j4.12.img.aajYF7y8xW8">https://www.google.com/search?newwindow=1&amp;site=&amp;tbm=isch&amp;source=hp&amp;biw=1468&amp;bih=773&amp;q=microsoft&amp;oq=microsoft&amp;gs_l=img.3...1779.4076.0.4399.9.7.0.0.0.0.0.0..0.0...0.0...1ac.1j4.12.img.aajYF7y8xW8</a></p>
<p>我在images.google.com中搜索microsoft，毫无疑问，这会返回成千上万张图片。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/16152725-9fc69e31256d4c66a12bdfcc66d34ef8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152727-66b64567aaa14be1a6a80db941ffabd0.png" width="208" height="244"></a><a href="http://images.cnitblog.com/blog/9072/201305/16152736-3feecc62a2dc4ae3a3ed8ee99166bbc6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/16152738-9c8259cae3cc42648926b247334b12d0.png" width="208" height="244"></a></p>
<p>那么，这些图片是不是要一次性全部加载进来呢？显然不可能，你可能会说，应该做分页会不会好一些？分页通常是一个好技术，但在搜索引擎的页面中，分页不是一个很好的选择（作为用户并不见得愿意去点击页面导航按钮），目前主流的是图片搜索引擎的做法都是不采用分页，而是随着用户的滚动条滑动来按需获取图片。</p>
<p>这是一个相当重要的设计，但稍微思考一下，应该不是很简单的一个工作。幸运的是，雅虎的团队提供了一个很好的组件(ImageLoader)可以直接使用：<a href="http://yuilibrary.com/yui/docs/imageloader/">http://yuilibrary.com/yui/docs/imageloader/</a>&nbsp;</p>
<p>关于这个组件的用法，有几个在线的演示页面：</p>
<ul>
<li><a href="http://yuilibrary.com/yui/docs/imageloader/basic-features.html">Basic Features of the ImageLoader Utility</a>
<li><a href="http://yuilibrary.com/yui/docs/imageloader/below-fold.html">Loading Images Below the Fold</a>
<li><a href="http://yuilibrary.com/yui/docs/imageloader/imageloader-class-names.html">Using ImageLoader with CSS Class Names</a></li></ul>
<p>如果你习惯用jquery,那么可以参考一下下面这个说明</p>
<p><a href="http://www.appelsiini.net/projects/lazyload">http://www.appelsiini.net/projects/lazyload</a></p>
<p>&nbsp;</p>
<ul>
<p>&nbsp;</p></ul>]]></description></item><item><title>优化网站设计（十六）：为AJAX请求使用GET方法</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073891.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 12 May 2013 05:03:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073891.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十六条原则：<a href="http://developer.yahoo.com/performance/rules.html#ajax_get">Use GET for Ajax Requests</a> （为AJAX请求使用GET方法） <p>我在之前的一篇文章中讨论到了AJAX (<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073690.html">优化网站设计（十四）：使AJAX调用尽可能利用缓存特性</a>) , 在那篇文章中，我们探讨到了POST和GET这两种方式，对于AJAX利用缓存特性而言，是有不同的。 <ol> <li>POST请求，不能使用客户端缓存</li> <li>GET请求，可以使用客户端缓存（而且只要地址一样，它总是会使用客户端缓存）</li></ol> <p>从这个意义上说，使用GET会比POST而言，有更好的一个性能表现。（因为减少了请求数和数据的重复传输）。</p> <p>与此同时，这条原则也提到另外一个有价值的信息：</p> <p>when using <code>XMLHttpRequest</code>, POST is implemented in the browsers as a two-step process: sending the headers first, then sending data. So it's best to use GET, which only takes one TCP packet to send (unless you have a lot of cookies).</p> <p>在使用XMLHttpRequest（目前的AJAX都是基于它实现的）的时候，如果Method是POST，则浏览器实际上会有两个步骤，先发送头部信息，然后再发送数据（这个由于是浏览器行为，目前我这边也没有办法提供验证的方式）。但如果是使用GET的话，则只有一个TCP的包发送出去（除非有大量的Cookie），这样无疑可以提高性能。</p> <p>【备注】一个TCP包的尺寸大约为1452字节。<br></p> <p>当然，现实的项目中，并不是总能使用GET的，例如长度方面可能会有限制：</p> <p>The maximum URL length in IE is 2K, so if you send more than 2K data you might not be able to use GET.</p> <p>如果使用GET，还需要考虑版本更新的问题。这个在<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073690.html">优化网站设计（十四）：使AJAX调用尽可能利用缓存特性</a> 中我已经提到过了。</p> <p>&nbsp;</p> <p>实际上，除了POST,GET之外，HTTP协议还定义了其他一些方法（method），它们中的某一些还特别有用，有兴趣的朋友可以参考 <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a></p>]]></description></item><item><title>优化网站设计（十五）：尽可能早地发送缓冲区内容</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073836.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 12 May 2013 03:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073836.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十五条原则：<a href="http://developer.yahoo.com/performance/rules.html#flush">Flush Buffer Early</a> （尽可能早地发送缓冲区内容）。 <p>这是一条相对简单的原则，它所涉及到的一个概念叫做缓冲区（Buffer）。我们首先来了解一下缓冲区的含义，以及相应的优点和缺点。 <p>&nbsp; <h2>什么是缓冲？</h2> <p>缓冲是伴随着HTTP技术发展的一个基础概念，当我们通过一个地址请求某个在远程服务器的资源的时候，默认情况下，服务器是需要先将所请求资源的内容全部读取到内存中（这个过程就叫做缓冲），然后再一次性地发送给浏览器。 <p>在启用缓冲这个功能的情况下，因为内容是完全准备好了才发送的，所以在响应头部中，可以明确地记录内容长度(Content-Length) <p><a href="http://images.cnitblog.com/blog/9072/201305/12114439-67f6499ac3644c5ca383c35ccbf2f702.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12114439-9133bd20eb224213a0b5216ab0a6557d.png" width="244" height="163"></a> <p>而如果没有启用缓冲会怎么样呢？ <p><a href="http://images.cnitblog.com/blog/9072/201305/12114440-5ccbaaef4a214c2e88ad4c2fe9b8b0df.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12114440-8cb51044be7040e3a77b77fb659fe0ca.png" width="244" height="163"></a> <p>我们看到，此时在头部中是没有内容长度（Content-Length）的信息的，因为没有缓冲，所以HTTP协议规定，传输是按照“块（chunk)”的方式来进行的。所以我们就可以看到在上图中会有一个Transfer-Encoding的信息。 <p>&nbsp; <h2>如何启用或禁用缓冲？</h2> <p>在ASP.NET开发中，默认所有页面都是启用缓冲的，如果需要明确地禁用缓冲，则可以修改页面的定义如下</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="BufferResponsePage.aspx.cs" Inherits="WebApplication4.BufferResponsePage" <strong><font color="#ff0000">Buffer="false"</font></strong> %&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp; <h2>如何在启用缓冲的前提下手工地分段发送缓冲区内容？</h2>
<p>缓冲的功能，是很有意思的，就是说即便我们启用了缓冲（默认就是这样的），也可以根据需要在页面或者代码中，明确地分段发送缓冲内容。例如下面这个做法<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="BufferResponsePage.aspx.cs" Inherits="WebApplication4.BufferResponsePage" <strong><font color="#ff0000">Buffer="true"</font></strong> %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
    <span class="rem">&lt;!--明确地手工发送缓冲区内容，就是先将头部的内容先发送给浏览器--&gt;</span>
    <strong><font color="#ff0000"><span class="asp">&lt;%</span> Response.Flush(); <span class="asp">%&gt;</span></font></strong>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>这里是正文内容<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp; <p>同理，既然上述做法行得通，那么在代码中也是可以调用Response.Flush方法来分段发送内容的。如果你要输出很大的一段内容的时候。
<p>分段发送缓冲区内容的做法，可以尽量充分地利用浏览器的资源，减少闲置的时间。因为浏览器在请求页面的时候，如果页面的内容是需要完全缓冲后再返回（最起码也应该会有200毫秒左右），那么浏览器此时就会进行一个闲置状态，什么事情都不会做。
<p>【备注】现在的浏览器已经越来越强大了，主流的几个浏览器，每个选项卡都会有独立的进程，这在性能和稳定性方面的提升也是明显的。
]]></description></item><item><title>优化网站设计（十四）：使AJAX调用尽可能利用缓存特性</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073690.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 12 May 2013 01:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/12/3073690.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十四条原则：<a href="http://developer.yahoo.com/performance/rules.html#cacheajax">Make Ajax Cacheable</a> （使AJAX调用尽可能利用缓存特性）。 <h2>AJAX的基本概念</h2> <ol> <li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</li> <li>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</li> <li>AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</li></ol> <h2>AJAX的典型应用场景</h2> <p>AJAX在目前的应用程序中使用非常广泛，为网站提供了更加丰富的效果（虽然技术很早就有，但最早引起大家注意是在2004年左右的Gmail中）。其典型的应用场景包括</p> <ol> <li>异步加载，使得页面的内容可以分批加载。</li> <li>局部更新，使得页面的局部更新不会导致页面的刷新。</li></ol> <p>由于AJAX其实也是需要发起请求，然后服务器执行，并将结果（通常是<a href="http://json.org/" target="_blank">JSON</a>格式的）发送给浏览器进行最后的呈现或者处理，所以对于网站设计优化的角度而言，我们同样需要考虑对这些请求，是否可以尽可能地利用到缓存的功能来提高性能。</p> <p>【备注】关于AJAX，以及它与目前的一些技术（主要是服务器端的技术）如何结合的文档，我之前写过很多，有兴趣的朋友可以先参考一下 <a href="http://www.google.ee/search?q=site%3Awww.cnblogs.com%2Fchenxizhang%2F%20ajax">http://www.google.ee/search?q=site%3Awww.cnblogs.com%2Fchenxizhang%2F%20ajax</a></p> <h2>什么样的AJAX请求可以被缓存？</h2> <p>对服务器请求进行优化的方法有很多，我之前已经写过几篇，这些原则也可以应用在AJAX的场景中</p> <ol> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html"><font size="2">优化网站设计（三）：对资源添加缓存控制</font></a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html"><font size="2">优化网站设计（四）：对资源启用压缩</font></a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3053996.html"><font size="2">优化网站设计（九）：减少DNS查找的次数</font></a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html"><font size="2">优化网站设计（十）：最小化JAVASCRIPT和CSS</font></a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3060804.html"><font size="2">优化网站设计（十一）：避免重定向</font></a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/11/3072898.html"><font size="2">优化网站设计（十三）：配置ETags</font></a></li></ol> <p>但是，对于AJAX而言，有一些特殊性，并不是所有的AJAX请求都是可以缓存的。这是由于AJAX的请求通常有两种不同的方法：POST和GET。他们在进行请求的时候，就会略有不同。</p> <ol> <li><strong><font color="#ff0000">POST的请求，是不可以在客户端缓存的</font></strong>，每次请求都需要发送给服务器进行处理，每次都会返回状态码200。（这里可以优化的是，服务器端对数据进行缓存，以便提高处理速度）</li> <li><strong><font color="#ff0000">GET的请求，是可以（而且默认）在客户端进行缓存的</font></strong>，除非指定了不同的地址，否则同一个地址的AJAX请求，不会重复在服务器执行，而是返回304。</li></ol> <p>&nbsp;</p> <h2>针对POST的情况如何优化 </h2> <p>POST的请求，浏览器通常会假定用户是想要提交（或者发送）数据给服务器，既然如此，那么浏览器自然就不会对该请求进行缓存，因为你是提交数据，所以它认为服务器自然每次都是需要处理的。我们可以来看一个例子。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Web.Services;

<span class="kwrd">namespace</span> WebApplication4
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Summary description for HelloWebService</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [WebService(Namespace = <span class="str">"http://tempuri.org/"</span>)]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(<span class="kwrd">false</span>)]
    <span class="rem">// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. </span>
<strong><font color="#ff0000">    [System.Web.Script.Services.ScriptService]</font></strong>
    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloWebService : System.Web.Services.WebService
    {

        [WebMethod]
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld()
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"Hello,world -- {0}"</span>, DateTime.Now);
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>上面是一个简单的XML Web Service的定义。需要注意的是，如果希望支持AJAX访问的话，必须要添加ScriptService这个Attribute。</p>
<p>我们的调用代码如下：</p><pre class="csharpcode">
            <span class="rem">//XML Web Service只支持POST，这种方式无法在浏览器中缓存，但可以结合服务器端的缓存，减少后台代码执行的次数来提高性能</span>
            $(<span class="str">"#btCallXMLWebService"</span>).click(<span class="kwrd">function</span> () {
                $.ajax({
                    type: <span class="str">"<strong><font color="#ff0000">POST</font></strong>"</span>,
                    contentType: <span class="str">"application/json;utf-8"</span>,
                    url: <span class="str">"HelloWebService.asmx/HelloWorld"</span>,
                    data: <span class="kwrd">null</span>,
                    dataType: <span class="str">"json"</span>,
                    success: <span class="kwrd">function</span> (result) {
                        alert(result.d);
                    }
                });
            });</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>运行起来之后，我们多次点击这个按钮，会截获到如下的请求：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092618-4b8cedb73e05414994296742d26ba57f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092619-9127e59eb20641c0b2a3b2128a53211e.png" width="244" height="64"></a></p>
<p>根据上面的截图不难看出，其实每次都请求都是重新被处理过的，它们都是返回状态码为200。</p>
<p>这就是POST AJAX请求的处理情况，它不会被客户端缓存。那你可能会说，能不能将type改为GET呢？例如下面这样</p><pre class="csharpcode">          $(<span class="str">"#btCallXMLWebService"</span>).click(<span class="kwrd">function</span> () {
                $.ajax({
                    type: <span class="str">"<font color="#ff0000"><strong>GET</strong></font>"</span>,
                    contentType: <span class="str">"application/json;utf-8"</span>,
                    url: <span class="str">"HelloWebService.asmx/HelloWorld"</span>,
                    data: <span class="kwrd">null</span>,
                    dataType: <span class="str">"json"</span>,
                    success: <span class="kwrd">function</span> (result) {
                        alert(result.d);
                    }
                });
            });
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>答案是，针对XML Web Service或者标准的WCF服务，它们不支持通过GET进行请求，只支持POST请求。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092619-198b3f6ba4b345658bc6940626de84f1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092619-ad74eba63e09416ab903b259d6ddda44.png" width="244" height="46"></a></p>
<p>服务器返回了状态码为500的错误，并且在正文里面描述了这个错误的信息，如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092619-b2c946c46ec04d44a5167d7f2ebb3803.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092620-7ff9e202f1c048fbb7a8af2e7cbdfe08.png" width="244" height="86"></a></p>
<p>那么，针对这种场景，我们是否有什么方法进行优化呢？</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Web.Services;

<span class="kwrd">namespace</span> WebApplication4
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Summary description for HelloWebService</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [WebService(Namespace = <span class="str">"http://tempuri.org/"</span>)]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(<span class="kwrd">false</span>)]
    <span class="rem">// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. </span>
    [System.Web.Script.Services.ScriptService]
    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloWebService : System.Web.Services.WebService
    {

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 该方法被缓存了10秒钟，是将结果缓存在服务器内存中。</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
       <strong><font color="#ff0000"> [WebMethod(CacheDuration=10)]</font></strong>
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld()
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"Hello,world -- {0}"</span>, DateTime.Now);
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这样修改之后，对于客户端而言，其实没有什么改变的，多次调用的时候，服务器都需要处理，然后返回状态码为200。但是区别是什么呢？区别在于服务器并不需要每次都运行真正的代码，它将结果缓存在内存中，在10秒之内重复调用，就直接返回该内存中的数据即可。（这样可以提高服务器的性能，提高并发性）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092620-0e0c8c6841c44f04adf765a3f62c8cbd.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092621-7bdc9e37f3dd440db967c3ca086a651b.png" width="244" height="89"></a></p>
<p>【备注】如果是WCF来做服务的话，默认是不支持直接对操作进行缓存的。</p>
<p>&nbsp;</p>
<h2>如何设计支持GET的服务</h2>
<p>我们了解到默认情况下，XML Web Service和WCF服务，都只支持使用POST方法的AJAX调用。那么是否有办法设计出来一个支持GET的服务呢？</p>
<ol>
<li>XML Web Service不支持GET</li>
<li>WCF服务，可以通过一个特殊的webHttpBinding支持GET。本文将讨论这一种做法。</li></ol>
<blockquote>
<p>【备注】WCF有多种适用场景，我之前写过两篇文章，有兴趣的朋友可以参考 </p></blockquote>
<ol>
<h5><em><a href="http://www.google.ee/url?sa=t&amp;rct=j&amp;q=site%3Awww.cnblogs.com%2Fchenxizhang%2F%20wcf&amp;source=web&amp;cd=2&amp;ved=0CDgQFjAB&amp;url=%68%74%74%70%3a%2f%2f%77%77%77%2e%63%6e%62%6c%6f%67%73%2e%63%6f%6d%2f%63%68%65%6e%78%69%7a%68%61%6e%67%2f%61%72%63%68%69%76%65%2f%32%30%31%31%2f%30%36%2f%32%31%2f%32%30%38%35%39%37%39%2e%68%74%6d%6c&amp;ei=CeqOUbr2ENG6lQX7-YGIDA&amp;usg=AFQjCNGpyzIfRxZwoJ1gckpWFXFGHLXMig">WCF技术的不同应用场景及其实现分析</a>&nbsp;&nbsp;&nbsp; </em></h5>
<h5><em><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2086314.html">WCF技术的不同应用场景及其实现分析(续）</a></em></h5></ol>
<blockquote>
<p>3. ASP.NET MVC中可以支持Web API这个功能，可以通过GET的方式进行调用。这个的做法，本文不做探讨，有兴趣的朋友可以参考 <a href="http://www.asp.net/web-api">http://www.asp.net/web-api</a>&nbsp;</p></blockquote>
<p>&nbsp;</p>
<p>我们来看一个例子。在WCF中支持一种特殊的Operation，就是WebGet</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel;
<span class="kwrd">using</span> System.ServiceModel.Activation;
<span class="kwrd">using</span> System.ServiceModel.Web;

<span class="kwrd">namespace</span> WebApplication4
{
    [ServiceContract(Namespace = <span class="str">""</span>)]
  <strong><font color="#ff0000">  [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]</font></strong>
    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloWCFService
    {

    <strong><font color="#ff0000">    [WebGet(ResponseFormat = WebMessageFormat.Json)]</font></strong>
        <span class="kwrd">public</span> <span class="kwrd">string</span> RestfulHelloWorldWithParameter(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"Hello,{0} -- {1}"</span>, DateTime.Now, name);

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>




<p>&nbsp;</p>
<p>AJAX调用代码如下</p><pre class="csharpcode">
            $(<span class="str">"#btCallRestfulWCFServicebwithParameter"</span>).click(<span class="kwrd">function</span> () {

                <span class="kwrd">var</span> name = $(<span class="str">"#txtName"</span>).val();

                <span class="rem">//GET请求默认就是会被缓存（在同一个浏览器中，默认是临时缓存，浏览器一关闭就删除掉）</span>
                $.getJSON(<span class="str">"HelloWCFService.svc/RestfulHelloWorldWithParameter"</span>, { name: name }, <span class="kwrd">function</span> (data) {
                    alert(data.d);
                });
            });</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>运行起来之后，我们分别输入不同的name参数，并且分别调用两次。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092621-bab4f48a7bde47d1b5d81c2d5840888a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092622-cedd77d0789249a791e4e8a79db77fc3.png" width="244" height="65"></a></p>
<p>我们可以发现，第一次调用会返回状态码（200），而第二次调用会返回状态码（304），但如果参数不一样，又会返回状态码（200）。依次类推。</p>
<p>我们也确实可以在浏览器缓存中找到两份缓存的数据</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/12092623-3153ef73696047b7af49159fe8abda15.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/12092623-58c8dc502c26450baa49a908dd174734.png" width="244" height="35"></a></p>
<p>&nbsp;</p>
<p>所以对于GET请求，默认就会被缓存。但是，如果你想改变这个行为，例如你有时候不想做缓存，应该如何来实现呢？</p>
<p>&nbsp;</p>
<h2>避免对GET请求做缓存</h2>
<p>有的时候，我们可能希望GET请求不被缓存，有几种做法来达到这样的目的。</p>
<ol>
<li>每次调用的时候，请求不同的地址（可以在原始地址后面添加一个随机的号码）例如下面这样：</li></ol><pre class="csharpcode">           $(<span class="str">"#btCallRestfulWCFServicebwithParameter"</span>).click(function () {

                var name = $(<span class="str">"#txtName"</span>).val();

                <span class="rem">//GET请求默认就是会被缓存（在同一个浏览器中，默认是临时缓存，浏览器一关闭就删除掉）</span>
                $.getJSON(<span class="str">"HelloWCFService.svc/RestfulHelloWorldWithParameter"</span>, { name: name,<strong><font color="#ff0000">version:Math.random()</font></strong> }, function (data) {
                    alert(data.d);
                });
            });</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<ol>
<li>如果你所使用的是jquery的话，则可以考虑禁用AJAX的缓存</li></ol><pre class="csharpcode">            $.ajaxSetup({ cache: <span class="kwrd">false</span> });
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>使用HTML5的新特性来减少不必要的AJAX调用</h2>
<p>我觉得一个比较彻底的做法是，考虑将一部分数据缓存在客户端中，而且最好不要在临时文件夹中，以便下次启动时还能使用到这些数据。HTML 5中提供了一个新的特性：local storage，可以很好地解决这个问题，如果有兴趣的朋友可以参考下面的文档</p>
<ol>
<li><a href="http://w3school.com.cn/html5/html_5_webstorage.asp">http://w3school.com.cn/html5/html_5_webstorage.asp</a></li></ol>]]></description></item><item><title>优化网站设计（十三）：配置ETags</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/11/3072898.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 11 May 2013 09:05:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/11/3072898.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十三条原则：<a href="http://developer.yahoo.com/performance/rules.html#etags">Configure ETags</a> （配置ETags）。  <p><a href="http://en.wikipedia.org/wiki/HTTP_ETag" target="_blank">ETag</a>，全称为：Entity Tag，意思是实体标签，从名字上看，是对于某种实体的一个标识。它属于HTTP协议的一部分，也就是所有的Web服务器都应该（也确实能）支持这个特性。它的作用是用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果ETag一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本。</p> <h2>工作原理</h2> <p>我们通过实例来了解ETag的工作原理，当用户第一次请求某个资源（通常为静态资源）的时候</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170436-6e401541450b4eda89a7b75f87f86f85.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170437-ce80724793bc4abfbd44f3849b125922.png" width="244" height="116"></a></p> <p>正常情况下，他将得到一个状态码为200的响应，并且在响应头部中会包含一个ETag的信息（ETag&nbsp;&nbsp;&nbsp; "<strong><font color="#ff0000">6ab823201a4ece1:0</font></strong>"）</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170437-75bbdd3ba2af4157b094fd549be2c954.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170438-2d281bc58afa450eaa5012b362787c64.png" width="244" height="110"></a></p> <p>【备注】这个值是我本机的IIS 8.0提供，不同的服务器可能会有所不同。我后面会解释大致的含义。</p> <p>&nbsp;</p> <p>接下来，如果用户再次请求这个资源的话，浏览器会尝试在请求头部中包含这个信息，以便服务器可以比较，确定是要再次发送资源的内容。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170438-bc4e3063c2c6456c80d7dd6b98597ccd.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170438-a5ec310717a4409cbf670187f3b742e1.png" width="244" height="113"></a></p> <p>我们注意这一行 If-None-Match&nbsp;&nbsp;&nbsp; "<font color="#ff0000"><strong>6ab823201a4ece1:0</strong></font>"</p> <p>然后，服务器会怎么样响应这个请求呢？</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170439-fd571d38ca434ace81fd8611845fcf99.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170439-13cd46562cb54ddebf7ae7a0292cda9a.png" width="244" height="111"></a></p> <p>服务器实际上是比较了ETag的值，它发现浏览器提供的值与该资源实际的值是一样的，所以它就返回了304的状态码，而且不需要在响应的正文里面包含任何实际内容。浏览器得到304这个状态码之后，就知道该资源并没有被修改，所以直接使用本地缓存的版本。</p> <p>&nbsp;</p> <h2>ETag的配置</h2> <p>在IIS产品家族中，新的版本（例如IIS 7以后的版本）会自动配置一个ETag，这个ETag的值很类似于下面这样：</p> <p><font color="#ff0000"><strong>6ab823201a4ece1:0</strong></font></p> <p>它是由两个部分组成的</p> <ol> <li>第一部分称为FileTimeStamp（时间戳），我们很容易联想到这可能是跟文档修改时间有关系，事实上确实是，但你无法将其直接还原为文档修改时间（微软并没有公开这部分的算法）。我确实对此做过一些研究，但最终还是没有办法解释这个值如何生成的，所以大家也只需要知道，这个是类似于一个时间戳的值就可以了。  <li>第二部分为ChangeNumber（修改编号）。这个值在IIS 7.0以及后续的版本中，被统一设置为0。设置为一个统一值有利于解决一些问题（例如在服务器场模式下，该问题我后续也会讨论到）。事实上，保留这个ChangeNumber我觉得主要是历史遗留问题，因为早期版本是有这个值，而且可以不一样。既然如果这个值不一样的话，会给我们惹一些麻烦，那么其实最好的做法是干脆就不要这个字段了。但我想，为了保持格式上的一贯性，微软最终保留了这个字段。</li></ol> <p>&nbsp;</p> <p>这个默认的ETag不需要任何的配置就会存在（反过来，你如果要删除它倒是很不容易，这个问题后续也会提到），但我们可以继续添加自己想要的特殊ETag。也就是说，对于一个资源，实际上是可以有多个ETag的。我们看看在IIS 中的设置。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170444-4a7d633b86b44795afbf77fad2638aff.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170445-a49ad4cd86e04c0cb61b2d9d6b2f5240.png" width="244" height="175"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170445-73e8077c0049471a973432c3d7e5b2cc.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170445-42a94eaaed8940cc9a9403a144c47ea9.png" width="244" height="162"></a></p> <p>你可以在这里设置任意的值。</p> <p>我们可以预见到，如果这样设置的话，那么在响应的头部中应该就会有多个ETag了。如下图所示</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170446-64f9a10664dd4edca7b8e0a4f78b59e1.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170446-847653da1b28418182c2688fc716533b.png" width="244" height="114"></a></p> <p>&nbsp;</p> <h2>ETag与其他技术的比较</h2> <p>经过上面的介绍，大家应该知道ETag的功能，主要能提供对资源的版本标识，以避免无谓的重复下载。这从一定意义上，肯定是有利的，它可以提高性能。</p> <p>如果这样的话，那么它和“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html">优化网站设计（三）：对资源添加缓存控制</a>” 中提到过的一些技术比较起来，有什么自己的特点呢？</p> <table cellspacing="0" cellpadding="2" width="1109" border="1"> <tbody> <tr> <td valign="top" width="133">响应标头</td> <td valign="top" width="479">优势 和特点</td> <td valign="top" width="495">劣势 和可能的问题</td></tr> <tr> <td valign="top" width="133">Expires</td> <td valign="top" width="479"> <ul> <li>HTTP 1.0就有，简单易用。  <li>服务器通过这个Header告诉浏览器，某资源直到某个时间才会过期，所以在没有过期之前，浏览器就直接使用本地的缓存了。</li></ul></td> <td valign="top" width="495"> <ul> <li>因为这是时间是由服务器发送的（UTC），但如果服务器时间和客户端事件存在不一致，可能会有些问题。  <li>可能存在版本的问题，因为如果在到期之前修改过了，客户端是不会知道的。  <li>Cache-Control中的max-age可以实现类似的效果，但更加好，因为max-age是一个以秒为单位的时间数，而不是具体的时间，所以不存在上面提到的第一个问题。</li></ul></td></tr> <tr> <td valign="top" width="133"> <h4>Cache-Control</h4></td> <td valign="top" width="479"> <ul> <li>服务器通过一个Header（Last-Modified）告诉浏览器，某资源最后修改的时间  <li>浏览器在请求的时候，包含一个Header（If-Modified-Since）,然后服务器可以进行比较，如果在该时间后没有修改过，则返回304  <li>它比Expires多很多选项设置</li></ul></td> <td valign="top" width="495"> <ul> <li>Last-Modified 也是一个时间，但该时间只能精确到秒，如果在同一个秒中有多次修改（这个在现在的环境下应该确实是可能的），则可能会发生问题。</li></ul></td></tr> <tr> <td valign="top" width="133">ETag</td> <td valign="top" width="479"> <ul> <li>可以更加精确地判断资源是否被修改，因为它不是一个时间值，而是对时间经过处理的一个长整型数值（当然具体算法我们目前还不得而知）  <li>浏览器发起新请求时需要包含 If-None-Match</li></ul></td> <td valign="top" width="495"> <ul> <li>如果部署在服务器场环境中，配置不当的话，可能每个服务器会对相同的资源生成不一样的ETag，这样就增加了重复下载的可能性。要理解这个问题的原因，以及如何解决，请参考这里的文档：<a href="http://support.microsoft.com/kb/922703/en-us">http://support.microsoft.com/kb/922703/en-us</a> <li>该问题在IIS 7以及以后的版本中应该不存在了</li></ul></td></tr></tbody></table> <p>这几个技术其实很多时候是会结合起来用的，而且优先级也有所不同。通常，ETag是优先于Cache-Control的，而Cache-Control又是优先于Expires的</p> <p><img alt="clip_image006" src="http://images.cnblogs.com/cnblogs_com/skynet/201211/201211281402442505.png"></p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>何时以及如何删除ETag的功能？</h2> <p>由于之前谈到可能的一些问题，雅虎团队在当年写这个原则的时候，是建议在服务器场的环境下面禁用ETag的，在Apache中，可以通过修改配置文件来实现。而在IIS 中，如果你所使用的是7.0以及后续的版本，实际上应该可以不禁用，因为现在不会存在他们所提到的那个问题了。但如果你真的想要了解一下如何禁用，那么请参考下面的操作</p> <ol> <li>安装这个扩展：<a href="http://www.iis.net/downloads/microsoft/url-rewrite">http://www.iis.net/downloads/microsoft/url-rewrite</a>&nbsp;</li> <li>创建一个地址重写规则</li></ol> <blockquote> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170449-6b7b75370eb6453d932faca896272b64.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170450-b66f8cf8c46c4fb8a0ffda705d47e573.png" width="244" height="119"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170450-798c7db8779f41679fdfcc1b9daf56be.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170450-3d353c959c784279baf6ee0607530cba.png" width="244" height="189"></a></p> <p><a href="http://images.cnitblog.com/blog/9072/201305/11170451-f7a23d5d9c6543cba1b4d774caa9fe99.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/11170451-59a46b41c8e348aeadd4f6e9dbcd91ae.png" width="244" height="229"></a></p></blockquote> <p>这样配置了之后，就不会再有ETag，整个世界清静了。</p>]]></description></item><item><title>如何统一设置所有WebPart的标题栏的背景颜色</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/10/3071894.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 10 May 2013 12:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/10/3071894.html</guid><description><![CDATA[<p>这是今天讲课时被问到的一个小问题。用户的情况是这样的：用户公司的SharePoint环境是由总部进行管理的，中国区这边IT部门的同事的权限不高，总部设计了一套主题(Theme)，但有些地方颜色并不是很理想，所以在这边的同事想要在不改变Theme的前提下，以及在自己权限范围之内，做点修改。典型的一个问题就是想要统一地设置所有WebPart的标题栏的背景颜色。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/10204607-7c7aeabee51d41fda440c790eb0e65ae.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/10204608-963e6ba34d6c4658ad81ddba3c14e3fb.png" width="244" height="128"></a></p> <p>最直接的做法可能是下面这样：</p> <p><strong><font color="#ff0000">1.首先，我们得找出来，这些WebPart的标题栏是使用哪一个样式表的设置</font></strong></p> <p><strong><font color="#ff0000">2.其次，因为要影响所有的WebPart，所以，我们应该修改MasterPage，而不是单独某个页面。</font></strong></p> <p>&nbsp;</p> <p>那么我们就开始来做吧</p> <p>通过IE开发工具，我们很容易定位出来，WebPart标题栏所使用的样式类为：“ms-WPHeader”，这个class是定义在corev4.css中的</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/10204609-14ae3d5e57f14599b6ccb53884e6a2b3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/10204609-ca5780a2b1bb43499ccc2397cc14ae34.png" width="244" height="58"></a></p>  <p>既然找到了这个类，那么我们就可以接下来在MasterPage中定义一个同名的类，用来替换掉corev4.css中的设置</p> <p>【备注】SharePoint 2010默认情况下是使用v4.master这个母板页的</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/10204614-d5481dc07bf1433dabf47829bd708338.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/10204615-60f9899991254001842514c77889d92b.png" width="244" height="120"></a></p> <p>保存之后，就可以看到效果</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/10204616-cc3615294c994b6eb173d27ddaaa7d95.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/10204616-e69c27d953c544b3ab20414ef80ae6be.png" width="244" height="166"></a></p> <p>&nbsp;</p> <p>这样做是有效果的，但并不见得是很好的做法。最好的做法还是修改Theme定义（而不要向上面这样修改母板页）。具体如何修改Theme定义，可以参考我的<a href="http://files.cnblogs.com/chenxizhang/MOSS%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E6%AF%8D%E7%89%88%E9%A1%B5%E5%92%8C%E4%B8%BB%E9%A2%98.pdf" target="_blank">这个文档</a>。</p>]]></description></item><item><title>优化网站设计（十二）：删除重复脚本</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3061004.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 05 May 2013 07:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3061004.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论的是第十二条原则：<a href="http://developer.yahoo.com/performance/rules.html#js_dupes">Remove Duplicate Scripts</a> （删除重复脚本）。</p> <p>这条原则的意思是说，不要在一个页面中，重复引用同一个脚本文件。乍一看起来，似乎没有单独拿出来谈的必要：谁会这么做呢？你会吗？我会吗？</p> <p>当然，你最好没有这么做，而且希望你没有这么做并不完全是出于一个好的习惯，而是因为你真的了解了重复引用同一个脚本文件所带来的问题。</p> <h2>重复引用一个脚本可能存在的问题</h2> <p>我们可以用一个简单的例子来看看，如果你在一个页面中重复引用同一个脚本文件，可能存在的问题：</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">script</span><span class="kwrd">&gt;</span>
                <span class="kwrd">var</span> count = 0;
            <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<strong><font color="#ff0000">            <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="JavaScript1.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
            &lt;script src=<span class="str">"JavaScript1.js"</span>&gt;&lt;/script&gt;</font></strong>

            &lt;script&gt;
                document.write(<span class="str">"&lt;h1&gt;访问计数:"</span> + count + <span class="str">"&lt;/h1&gt;"</span>);
            <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>页面中，我们首先定义了一个全局的变量（count），然后重复引用了同一个脚本文件（javascript1.js)，这个脚本文件内的脚本其实很简单</p><pre class="csharpcode">count++;</pre>
<p>这个页面如果运行起来的话，大家可以想象一下count最后的值会是多少呢？对javascript比较熟悉的朋友一定猜出来了，由于有两次脚本引用，所以，count的最终值应该是2。如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/05150845-e58b1a3371e1495f8f59adee14de1f3b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05150846-a7c488ce59f541ad9071c8f2c5fc499e.png" width="244" height="172"></a></p>
<p>所以后果是显而易见的：我们可能认为，如果是同一个文件，引用多次的话，浏览器会不会聪明地只下载一次，并且也只执行一次呢？</p>
<p>从上图中，我们几乎可以觉得这就是对的，因为看起来并没有两个脚本请求，不是吗？</p>
<p>这是一个假象！通过上面的实例，你应该会知道，实际上脚本文件肯定被下载过两次，而且执行过两次，否则为什么count会等于2呢？</p>
<p>如果你重复引用10次，那么毫无意外的，count会等于10。</p>
<p>好吧，我凭什么会犯这么低级的错误呢？你是这样想到吗？</p>
<blockquote>
<p>This isn't as unusual as you might think. A review of the ten top U.S. web sites shows that two of them contain a duplicated script. Two main factors increase the odds of a script being duplicated in a single web page: team size and number of scripts</p></blockquote>
<p>经研究发现，即便是美国排名前10位的网站，都可以犯这个错。你有什么理由说你就一定不会呢？是的，有时候可能不是你一个人的错，在一些较大的团队和较大的项目，尤其是有大量脚本的时候，可能就要特别小心地对这些脚本进行管理了。</p>
<p>&nbsp;</p>
<h2>删除重复脚本及最佳实践</h2>
<p>其实要删除重复脚本，最重要的是要对脚本进行有效的管理，并且在编写页面的时候，仔细地进行引用。在ASP.NET中，善于利用一些框架，可以最大可能性地避免这个问题。</p>
<p>ASP.NET 从2.0开始引入了<a href="http://msdn.microsoft.com/en-us/library/wtxbf3hh(v=VS.100).aspx" target="_blank">母版页（master page）</a>的技术，利用这个技术，我们可以将一些公用的脚本引用定义在母版页中，而在内容页中引入的脚本相对就少了很多了，既然很少，那么重复添加的概率就大大减小了。</p>
<p>下面有一个简单范例（ASP.NET Web Forms）</p><pre class="csharpcode"><span class="asp">&lt;%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Site.master.cs" Inherits="WebApplication2.SiteMaster" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">lang</span><span class="kwrd">="en"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">meta</span> <span class="attr">charset</span><span class="kwrd">="utf-8"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span><span class="asp">&lt;%</span>: Page.Title <span class="asp">%&gt;</span> - My ASP.NET Application<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">asp:PlaceHolder</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>     
          <span class="asp">&lt;%</span>: Scripts.Render(<span class="str">"~/bundles/modernizr"</span>) <span class="asp">%&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">asp:PlaceHolder</span><span class="kwrd">&gt;</span>  
    <span class="kwrd">&lt;</span><span class="html">webopt:BundleReference</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">Path</span><span class="kwrd">="~/Content/css"</span> <span class="kwrd">/&gt;</span> 
    <span class="kwrd">&lt;</span><span class="html">link</span> <span class="attr">href</span><span class="kwrd">="~/favicon.ico"</span> <span class="attr">rel</span><span class="kwrd">="shortcut icon"</span> <span class="attr">type</span><span class="kwrd">="image/x-icon"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">meta</span> <span class="attr">name</span><span class="kwrd">="viewport"</span> <span class="attr">content</span><span class="kwrd">="width=device-width"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">asp:ContentPlaceHolder</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ID</span><span class="kwrd">="HeadContent"</span> <span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">asp:ScriptManager</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Scripts</span><span class="kwrd">&gt;</span>
            <span class="asp">&lt;%</span>--To learn more about bundling scripts <span class="kwrd">in</span> ScriptManager see http://go.microsoft.com/fwlink/?LinkID=272931&amp;clcid=0x409 --<span class="asp">%&gt;</span>
            <span class="asp">&lt;%</span>--Framework Scripts--<span class="asp">%&gt;</span>
            
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="MsAjaxBundle"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="jquery"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="jquery.ui.combined"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="WebForms.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/WebForms.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="WebUIValidation.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/WebUIValidation.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="MenuStandards.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/MenuStandards.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="GridView.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/GridView.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="DetailsView.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/DetailsView.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="TreeView.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/TreeView.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="WebParts.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/WebParts.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="Focus.js"</span> <span class="attr">Assembly</span><span class="kwrd">="System.Web"</span> <span class="attr">Path</span><span class="kwrd">="~/Scripts/WebForms/Focus.js"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ScriptReference</span> <span class="attr">Name</span><span class="kwrd">="WebFormsBundle"</span> <span class="kwrd">/&gt;</span>
            <span class="asp">&lt;%</span>--Site Scripts--<span class="asp">%&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">Scripts</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">asp:ScriptManager</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">header</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="content-wrapper"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-left"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span> <span class="attr">class</span><span class="kwrd">="site-title"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/"</span><span class="kwrd">&gt;</span>your logo here<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-right"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">id</span><span class="kwrd">="login"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">asp:LoginView</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ViewStateMode</span><span class="kwrd">="Disabled"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">AnonymousTemplate</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">ul</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">id</span><span class="kwrd">="registerLink"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/Account/Register"</span><span class="kwrd">&gt;</span>Register<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">id</span><span class="kwrd">="loginLink"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/Account/Login"</span><span class="kwrd">&gt;</span>Log in<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">AnonymousTemplate</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">LoggedInTemplate</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
                                Hello, <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">class</span><span class="kwrd">="username"</span> <span class="attr">href</span><span class="kwrd">="~/Account/Manage"</span> <span class="attr">title</span><span class="kwrd">="Manage your account"</span><span class="kwrd">&gt;</span>
                                    <span class="kwrd">&lt;</span><span class="html">asp:LoginName</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">CssClass</span><span class="kwrd">="username"</span> <span class="kwrd">/&gt;&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>!
                                <span class="kwrd">&lt;</span><span class="html">asp:LoginStatus</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">LogoutAction</span><span class="kwrd">="Redirect"</span> <span class="attr">LogoutText</span><span class="kwrd">="Log off"</span> <span class="attr">LogoutPageUrl</span><span class="kwrd">="~/"</span> <span class="kwrd">/&gt;</span>
                            <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">LoggedInTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">asp:LoginView</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">nav</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">id</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/"</span><span class="kwrd">&gt;</span>Home<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/About"</span><span class="kwrd">&gt;</span>About<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;&lt;</span><span class="html">a</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">href</span><span class="kwrd">="~/Contact"</span><span class="kwrd">&gt;</span>Contact<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">nav</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">header</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="body"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">asp:ContentPlaceHolder</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ID</span><span class="kwrd">="FeaturedContent"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">class</span><span class="kwrd">="content-wrapper main-content clear-fix"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">asp:ContentPlaceHolder</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ID</span><span class="kwrd">="MainContent"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">footer</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="content-wrapper"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-left"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span><span class="attr">&amp;copy;</span> <span class="asp">&lt;%</span>: DateTime.Now.Year <span class="asp">%&gt;</span> - My ASP.NET Application<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">footer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>下面还有一个<strong><font color="#ff0000">ASP.NET MVC</font></strong>中的示例</p><pre class="csharpcode"><span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">lang</span><span class="kwrd">="en"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">head</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">meta</span> <span class="attr">charset</span><span class="kwrd">="utf-8"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span>@ViewBag.Title - My ASP.NET MVC Application<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">link</span> <span class="attr">href</span><span class="kwrd">="~/favicon.ico"</span> <span class="attr">rel</span><span class="kwrd">="shortcut icon"</span> <span class="attr">type</span><span class="kwrd">="image/x-icon"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">meta</span> <span class="attr">name</span><span class="kwrd">="viewport"</span> <span class="attr">content</span><span class="kwrd">="width=device-width"</span> <span class="kwrd">/&gt;</span>
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/modernizr")
    <span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">header</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="content-wrapper"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-left"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">p</span> <span class="attr">class</span><span class="kwrd">="site-title"</span><span class="kwrd">&gt;</span>@Html.ActionLink("your logo here", "Index", "Home")<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-right"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">id</span><span class="kwrd">="login"</span><span class="kwrd">&gt;</span>
                        @Html.Partial("_LoginPartial")
                    <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">nav</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">id</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Home", "Index", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("About", "About", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Contact", "Contact", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">nav</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">header</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="body"</span><span class="kwrd">&gt;</span>
            @RenderSection("featured", required: false)
            <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">class</span><span class="kwrd">="content-wrapper main-content clear-fix"</span><span class="kwrd">&gt;</span>
                @RenderBody()
            <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">footer</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="content-wrapper"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="float-left"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span><span class="attr">&amp;copy;</span> @DateTime.Now.Year - My ASP.NET MVC Application<span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">footer</span><span class="kwrd">&gt;</span>

        @Scripts.Render("~/bundles/jquery")
        @RenderSection("scripts", required: false)
    <span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>优化网站设计（十一）：避免重定向</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3060804.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 05 May 2013 04:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/05/3060804.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site&nbsp; </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论第十一条原则：<a href="http://developer.yahoo.com/performance/rules.html#redirects">Avoid Redirects</a> （避免重定向）。</p> <p>重定向的意思是，用户的原始请求（例如请求A）被重定向到其他的请求（例如请求B）。这是HTTP世界中本来就存在的技术和现象，它本身没有所谓的好和坏，它的存在也确实有其理由，为此<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank">HTTP协议</a>中，规定了两个状态码来标识这种场景。它们分别是：</p> <ol> <li> <h5>301 Moved Permanently , 这个状态码标识用户所请求的资源被移动到了另外的位置，客户端收到此响应后，需要发起另外一个请求去下载所需的资源。这个状态码，日后可能会和另外一个状态码 308 （308 Permanent Redirect (approved as experimental <a href="http://en.wikipedia.org/wiki/Request_for_Comments">RFC</a>)<sup><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#cite_note-PermanentRedirectDraft-12">[12]</a></sup>）有些关联（这个还没有最终确定为标准）</h5> <li> <h5>302 Found ，这个状态码标识用户所请求的资源被找到了，但不在原始位置，服务器会回复其他的一个地址，客户端收到此响应后，也需要发起另外一个请求去下载所需的资源。这个状态码，日后可能会和另外两个状态码有关联。</h5> <ul> <li> <h5><a href="http://en.wikipedia.org/wiki/HTTP_303">303 See Other</a> (since HTTP/1.1)</h5> <li> <h5>307 Temporary Redirect (since HTTP/1.1) </h5></li></ul></li></ol> <p>目前，我们一直只要区分301和302即可。它们本质上的区别到底是什么呢？其实也不难：301表示永久重定向，302表示临时重定向。对于一般的用户而言，可能你还无法体会出来他们的区别，因为横竖都是要重定向的。但对于搜索引擎而言意义就非凡。我们都知道，搜索引擎是需要不定期对网站资源进行爬网，以便完善对应的索引结构的。当某个资源被永久重定向（301），搜索引擎会聪明地知道，在索引中应该记录就是永久重定向之后的新地址，而不是老地址，这样就可以避免用户通过搜索引擎来查询的时候，每次还需要先到老地址，再重定向到新地址。而对于临时重定向（302），则不会这么做。</p> <p>&nbsp;</p> <h2>重定向会有什么影响</h2> <p>说了这么多理论知识，我们还是通过一个实例来看看具体重定向是如何发生的吧</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120916-eac7be6b0cbc434ab78d31eddf831a30.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120916-f3e066d9563a4e2dad583987885c28b2.png" width="244" height="30"></a></p> <p>我们首先请求的是default.aspx页面，出于某种原因，这个请求需要被重定向到另外一个页面，Product.aspx。所以，服务器首先为default.aspx这个请求返回302的状态码，表示说这里需要临时重定向。然后，在响应的头部（Header）中，还包含了新的地址：Product.aspx。（如下图所示）。在响应的正文（Body）中，则是空白的。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120921-efbb959553314d41b9558d44b81f22c1.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120922-a80c38f30ca84e7786a8125e079d4f9b.png" width="244" height="194"></a></p> <p>浏览器收到了这个回复之后，再重新发起一个请求，Product.aspx，这个请求被正常地处理了，返回200的状态码。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120923-6cca9aa172794ecfa3a036c4c8673b35.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120923-0d8ae42e4bfc40998f52dad5d4056052.png" width="244" height="214"></a></p> <p>事情就是这样。这样的问题在于：这样做显然增加了浏览器到服务器的往返次数，这违背了另外一个原则：<a href="http://developer.yahoo.com/performance/rules.html#num_http">Make Fewer HTTP Requests</a> 。</p> <p>&nbsp;</p> <h2>重定向是如何发生的</h2> <p>事实上，重定向是经常发生的。有两种主要的情况下会发生重定向</p> <ol> <li>服务器本身的一些行为（针对某类请求）  <li>程序中明确地做了重定向</li></ol> <p>第一种情况很有意思，不同的服务器可能在处理的时候表现也是不一样的。例如我们来看下面这个请求</p> <p><a href="http://cnblogs.com">http://cnblogs.com</a></p> <p>通过监控我们发现，首先会有一个301的重定向，然后才是真正的请求（返回200），此时地址是 <a href="http://www.cnblogs.com">http://www.cnblogs.com</a> </p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120923-1d5fa228e89147ccacac1caa0801d474.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120923-c62cc65cd0a444f8b65c24d1d2a68c48.png" width="244" height="39"></a></p> <p>这是为什么呢？如果有网站开发经验的朋友一定知道，域名都是需要解析的，实际上向用户提供的服务，是互联网上面的某个网络主机。做得比较好的网站，同时会考虑用户希望访问网站的不同的方式，上例中，用户既可以访问cnblogs.com 也可以访问<a href="http://www.cnblogs.com">www.cnblogs.com</a>，区别在于前者多一次重定向请求。</p> <p>&nbsp;</p> <p>如果你就此认为是理所应当的，那么你就错了。我们再来看一下“著名”的12306.cn 吧</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120927-77c59497e2bc4faa96b7b6c4bdb23e6c.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120928-6e2d6676cd754fc8b7f9945aa473eb26.png" width="227" height="244"></a></p> <p>你如果这样访问的时候，直接就失败了。你必须完整地输入<a href="http://www.12306.cn">www.12306.cn</a> 才能访问。试问，这是多么简单、低级的问题。</p> <p>其实要做到这个很简单，牺牲了一点点性能，对于用户来说，提高了用户体验。这里留一个疑问：<strong><font color="#ff0000">有人可以解释一下，到底如何实现这样的效果（cnblogs.com =&gt; </font></strong><a href="http://www.cnblogs.com"><strong><font color="#ff0000">www.cnblogs.com</font></strong></a><strong><font color="#ff0000"> ）吗？</font></strong></p> <p>这是一种典型的重定向，这个无需任何代码就能实现。实际上是属于服务器的功能。当然，我们完全应该尽可能地使用<a href="http://www.cnblogs.com">www.cnblogs.com</a> 这种方式（例如给人们邮件中的链接，尽量是使用这个路径）。但提供了另外一个方式，是很好的设计。</p> <p>&nbsp;</p> <p>还有一种典型的重定向，我们来看下面这个例子，请在浏览器中输入google.com </p> <p>我们最终看到的页面是 <a title="http://www.google.com.hk/" href="http://www.google.com.hk/">http://www.google.com.hk/</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120931-8e30282d0d794c808cab18719c40874f.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120932-ccf6ca80255d48edaa6ab264aa608a58.png" width="244" height="206"></a></p> <p>你会发现，会有几次重定向</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05120932-9211dcaaa337458eb99846a75baed872.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05120932-1566313a6c994cfca6de36668fe387b1.png" width="244" height="77"></a></p> <p>第一次重定向是301，从google.com 重定向到<a href="http://www.google.com">www.google.com</a> </p> <p>第二次重定向是302，从<a href="http://www.google.com">www.google.com</a> 重定向到 <a title="http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ" href="http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ">http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ</a></p> <p>第三次重定向是302，从<a title="http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ" href="http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ">http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1367722843791916&amp;usg=AFQjCNEzkTX2uE5Jlo3NkA1vSHdwoCnnZQ</a> 重定向到 <a href="http://www.google.com.hk">http://www.google.com.hk</a></p> <p>&nbsp;</p> <p>同样的做法，我们从bing.com中也能看到。我们输入bing.com ，但实际看到的页面是cn.bing.com </p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05121007-6e71b608e9fa422fa53facefbe19f0f5.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05121013-6bab6312cdca4836aec6166aa588fdcf.png" width="244" height="206"></a></p> <p>实际上，这里也发生了一次重定向</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05121014-2706bf02d10f46ee8411e02f8a4bc730.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05121014-62d0492a0b174cd1828fb608cf7b9ea9.png" width="244" height="27"></a></p> <p>&nbsp;</p> <p>为什么Google和Microsoft都会这样设计搜索引擎的主界面呢？原因在于他们想给用户提供更加有个性化的本地服务，所以针对不同国家和地区的用户，实际上有独立的主机来进行处理。</p> <p>Microsoft的做法有点不一样，他们使用了统一的域名bing.com，只是为不同的国家和地区准备了不同的主机，例如cn.bing.com, hk.bing.com 。</p> <p>&nbsp;</p> <p>还有一种容易比我们忽视的重定向。请参考下面的实例</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05121014-2610d6d28c194668843e9980786ce564.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05121018-1431063788c347de984f45abdae30abc.png" width="244" height="243"></a></p> <p>在这个示例网站中，有一个文件夹，叫做Products，里面会有很多页面，例如至少会有一个Default.aspx。我们都知道，通常Default.aspx是所谓的默认页面，也就是说，要访问这个页面的话，并不需要输入Default.aspx这个部分，而是直接通过访问文件夹名称即可，例如下面这样</p> <p><a title="http://localhost:9071/Products" href="http://localhost:9071/Products">http://localhost:9071/Products</a></p> <p>和你想象的一样，这样的简写路径会返回Products目录中的Default.aspx页面的内容（这很不错，对吧）但是，通过监控我们发现，这样一个请求都会发生了一次重定向</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/05121018-26373889b4b54745b9261412b58518f6.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/05121018-cac8a52fe95d4d3cab4844f87447c904.png" width="244" height="39"></a></p> <p>有意思的是，它会将地址重定向到 <a title="http://localhost:9071/Products/" href="http://localhost:9071/Products/">http://localhost:9071/Products/</a> (只是比原始地址多了一个路径斜线），很神奇吗？但这是真的，凡是访问地址中，没有带文件名后缀的（例如aspx,asp等等），服务器都会尝试解析为一个文件夹，自动加上一个路径斜线，然后再查找内部的默认页面。</p> <p>【备注】这个行为，在ASP.NET MVC中是不会存在的，因为ASP.NET MVC的请求处理是被路由处理的。</p> <p>&nbsp;</p> <h2>ASP.NET中的重定向</h2> <p>如果上述网站是用ASP.NET开发的（cnblogs.com 显然是的，而Google.com则显然不是的，bing.com 会是的吗？），那么会怎么样来实现上述所提到的重定向呢？</p> <p>ASP.NET 4.0 有如下几种方式来做重定向</p> <ol> <li>Response.Redirect&nbsp; <a href="http://msdn.microsoft.com/EN-US/library/08za4s98(v=VS.110,d=hv.2).aspx">http://msdn.microsoft.com/EN-US/library/08za4s98(v=VS.110,d=hv.2).aspx</a>&nbsp; <ul> <li>这个会进行临时重定向，也就是返回302</li></ul> <li>Response.RedirectPermanent <a href="http://msdn.microsoft.com/EN-US/library/dd322058(v=VS.110,d=hv.2).aspx">http://msdn.microsoft.com/EN-US/library/dd322058(v=VS.110,d=hv.2).aspx</a> （这是新增的方法）  <ul> <li>这个会进行永久性重定向，也就是返回301</li></ul> <li>Server.Transfer <a href="http://msdn.microsoft.com/EN-US/library/y0w8173d(v=VS.110,d=hv.2).aspx">http://msdn.microsoft.com/EN-US/library/y0w8173d(v=VS.110,d=hv.2).aspx</a>  <ul> <li>这个不会产生301，也不会产生302，实际上，它直接返回200，浏览器根本不会知道发生了重定向，不会有多出来的一个请求  <ul> <li>听起来不错，不是吗？那么，<strong><font color="#ff0000">请问，这样做有什么附加的问题吗</font></strong>？</li></ul></li></ul></li></ol> <p>&nbsp;</p> <h2>ASP.NET中重定向附加的问题</h2> <p>&nbsp;</p> <p>以上的三个方法，我相信大家至少对其中一两个很熟悉，但是很多人不清楚他们的代价。</p> <p>实际上,不管是用Redirect还是Transfer方法，他们内部都会调用Response.End方法（这个很好理解，因为需要重定向了，所以当前的这个请求应该就不需要再提供响应了），但这个方法会导致与该请求有关的处理线程强制被中断掉，具体来说，这将引发一个异常（<b>ThreadAbortException</b>），通过Try…catch就能捕捉到。</p> <p>我们都知道，异常处理在.NET中是由CLR来做的，异常处理的代价是较高的，所以如果过于频繁地抛出异常，会给性能带来显著的影响。</p> <p>关于这个问题，以及如何改善，可以参考微软官方的文档</p> <p><a href="http://support.microsoft.com/kb/312629/en-us">http://support.microsoft.com/kb/312629/en-us</a></p> <p>我摘录解决方案的部分如下</p> <p>To work around this problem, use one of the following methods:  <ul> <li>For <b>Response.End</b>, call the <b>HttpContext.Current.ApplicationInstance.CompleteRequest </b>method instead of <b>Response.End</b> to bypass the code execution to the <b>Application_EndRequest</b> event.  <li>For <b>Response.Redirect</b>, use an overload, <b>Response.Redirect(String url, bool endResponse)</b> that passes <b>false</b> for the<b>endResponse</b> parameter to suppress the internal call to <b>Response.End</b>. For example:  <p><code><pre>  Response.Redirect ("nextpage.aspx", false);
						</pre></code>
<p>If you use this workaround, the code that follows <b>Response.Redirect</b> is executed. </p>
<li>For <b>Server.Transfer</b>, use the <b>Server.Execute</b> method instead.</li></ul>
<p>&nbsp;</p>
<h2>如何尽可能避免重定向</h2>
<p>从上面的实例和分析来看，重定向是无法完全避免的，适当地使用重定向能为网站提供更好的功能。（例如本地化，用户体验等方面）。</p>
<p>但是过多地进行重定向也肯定会给网站性能带来显著的影响。那么，有哪些方法可以作为我们改善这一点的参考呢</p>
<ol>
<li>在定义链接地址的href属性的时候，尽量使用最完整的、直接的地址。例如 
<ul>
<li>使用<a href="http://www.cnblogs.com">www.cnblogs.com</a> 而不是cnblogs.com 
<li>使用cn.bing.com 而不是bing.com 
<li>使用<a href="http://www.google.com.hk">www.google.com.hk</a> 而不是google.com 
<li>使用<a href="http://www.mysite.com/products/">www.mysite.com/products/</a> 而不是 <a href="http://www.mysite.com/products">www.mysite.com/products</a></li></ul>
<li>在使用Response.Redirect的时候，设置第二个参数为false 
<ul>
<li>考虑是否可用Server.Execute代替 
<li>考虑Respone.RedirectPermanent</li></ul>
<li>如果涉及到从测试环境到生产环境的迁移，建议通过DNS中的<a href="http://en.wikipedia.org/wiki/CNAME_record" target="_blank">CNAME</a>的机制来定义别名，而不是强制地重定向来实现</li></ol>]]></description></item><item><title>优化网站设计（十）：最小化JAVASCRIPT和CSS</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 02 May 2013 02:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3054141.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考<strong>&nbsp; Best Practices for Speeding Up Your Web Site&nbsp; </strong><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a> ，同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论第十个原则：<a href="http://developer.yahoo.com/performance/rules.html#minify">Minify JavaScript and CSS</a> （最小化JAVASCRIPT和CSS)。</p> <blockquote> <p>在开始之前，我闲扯几句：不自觉地就写到了第十篇了，这个系列我觉得是很有必要的，虽然雅虎的这些最佳实践，我在很多年前就看过，也基本上在按照这些原则进行实践。但我观察下来有不少朋友还对此不了解，或者说即便知道这些原则，但具体在应用的时候也遇到些困惑（这些原则之间本身也可能存在“矛盾”）。所以我觉得利用一些时间，结合自己的实践经验，为大家讲解和演绎，文中提到了很多想法，更重要的是我会解释为什么这么做，为什么不那么做等等，希望大家能知其然，也知其所以然。最后我还会提供相应的工具、实践的例子。</p></blockquote> <p>言归正传，"最小化JAVASCRIPT和CSS“ 这条原则主要讲的是，我们应该尽可能地减少这两种文件的体积，以便加快下载速度。</p> <ol> <li>去除不必要的格式符、空白符、注释符。这个操作，其实可以理解为是一种<strong><font color="#ff0000">格式化</font></strong>，虽然它操作的结果其实是去除掉原始文件的那些格式。</li> <li>模糊（Obfuscation）处理JAVASCRIP脚本源代码。</li></ol> <p>要理解这个行为，我们可以来看两个文件</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02100956-1317092362fc44cf94a6ad927b82a858.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02100956-c293a21a7c7d439fafdad1aeb8bfc202.png" width="774" height="66"></a></p> <p>这可能是我们最常用的两个脚本文件了。其实他们是同一个脚本文件，作为约定，带有min字样的脚本文件我们通常称为“压缩过的版本”——需要注意的是，这与“<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html">优化网站设计（四）：对资源启用压缩</a>”这篇文章中谈到的压缩不是同一个概念。从他们的体积上可以看出来，“压缩”比可以高达 65%，这可以节省很多的网络流量，以及宝贵的下载时间。</p> <p>那么这种“压缩”是如何做到的呢？我们通过查看两个文件就可了解</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101002-8cb7ebb58c4d4f41ae99ba46dd3891f1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101004-71c8c38926ec4e3fb731bc4bb2dffe75.png" width="244" height="208"></a></p> <p>原始文件，我们通常称为“格式良好”的脚本文件，里面包含了8756行，有着丰富的注释，换行符等，这种格式很易于阅读和理解，他同时也可以为开发工具（例如Visual Studio)提供智能感知方面的支持。我们再来看“压缩”过之后的文件。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101016-32af1c90e4fc4a6281f830cd2dca7c2f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101020-df61fd38b54b446fb5743c507450ec38.png" width="244" height="208"></a></p> <p>这个文件只包含6行，如果将顶部的几句注释也去除掉，实际上只有3行代码，并且我们可以看到这些代码是被处理过的，因为那些方法名，参数名都被处理成了尽可能简短的名称。很显然这样的代码不适合人类阅读，但对于计算机，具体来说是浏览器的JAVASCRIPT执行引擎来说是没有问题的。如果你有兴趣了解这些名称的映射关系，可以参考另外一个文件（jquery-2.0.0.min.map)</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101041-6c2512ca6d3f4ff8a267af723136c276.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101045-53dad3fa2f824aabb899ee06c2f79ca9.png" width="244" height="208"></a></p> <p>&nbsp;</p> <p>看起来你理解了这样做的好处，也大致知道怎么做了吧。虽然如此，我们不可能人工去做这样的事情，这个挑战太高了。通常我们会借助一些工具来实现，例如文章中提到的两个工具</p> <ol> <li><a href="http://crockford.com/javascript/jsmin">JSMin</a> ： 这个工具的名气较大，可以对JAVASCRIPT进行最小化处理。</li></ol> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101049-98beaa6f0b8c4d0282accece3d7e02a1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101052-f95c67456c5949d2b5447bcf2ce810af.png" width="244" height="130"></a></p> <ol> <li><a href="http://developer.yahoo.com/yui/compressor/">YUI Compressor</a>&nbsp; ： 这个不仅仅可以对JAVASCRIPT进行压缩，也可以对CSS进行压缩。很遗憾，它是一个java工具，可能在使用上面会有些限制。但你可以通过另外一个地址使用在线的版本：<a href="http://refresh-sf.com/yui/">http://refresh-sf.com/yui/</a>&nbsp;</li></ol> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101054-a6d85b5d33294727b7fa724310580762.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101055-ead7a10a1a75407fb0c6c8a0dd720480.png" width="244" height="197"></a></p> <p>值得一提的是，在进行JAVASCRIPT的最小化处理（尤其是要进行模糊处理）之前，需要确保脚本文件的语法合法性，并且强烈建议将该文件复制一份作为备用，因为通常这些操作都是不可逆的。</p> <p>为了检查脚本中的语法合法性，可以使用另外一个工具JSLint</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101059-70c71b29c6944578a88bafb79cfb73e5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101101-2c11d76c510c4163a44366d09a36cfbd.png" width="244" height="184"></a></p> <p>这个工具有针对Visual Studio 的插件，你可以通过扩展管理器进行安装。</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101103-c21206e30c944d0582d42f019b9946cd.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101106-305a64aed0454a3d9cabc1a0d5942886.png" width="244" height="170"></a></p> <p>&nbsp;</p> <p>我最后要补充一下，除了对JAVASCRIPT和CSS做这种最小化之外，我们有时候可能也会对HTML标记文本做最小化处理（主要是格式化），此时可以使用下面这个工具：Absolute HTML Compressor</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02101106-5bd3962e07544b969d9961c57003d932.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02101107-953db81bf7524f05a242b4c5c63c4a27.png" width="244" height="153"></a></p>]]></description></item><item><title>优化网站设计（九）：减少DNS查找的次数</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3053996.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 02 May 2013 00:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/02/3053996.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。  <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考  <p>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>  <p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a>  <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。  <p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。  <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具  <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>  <p>Technorati Tags: <a href="http://technorati.com/tags/Performance">Performance</a>,<a href="http://technorati.com/tags/Web+design">Web design</a>,<a href="http://technorati.com/tags/ASP.NET">ASP.NET</a></p> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a>  <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论第九个原则：<a href="http://developer.yahoo.com/performance/rules.html#dns_lookups">Reduce DNS Lookups</a>（减少DNS查找的次数）。  <p>DNS查找是一个较为底层的行为，我们在浏览器中输入某个地址，例如<a href="http://www.cnblogs.com">http://www.cnblogs.com</a> ，我们的浏览器要能正确地定位到博客园的服务器之前，就必须对这个域名进行解析，很显然它自己是无法解析的，所以它需要通过一定的机制进行查找，这就是为什么我们通常上网之前需要设置DNS服务器的原因。  <p><a href="http://images.cnitblog.com/blog/9072/201305/02084620-1b1514fad0b04ca78d43d1005cabef67.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02084621-c8770d0de7f945f482844db2ecb577db.png" width="244" height="110"></a>  <p>查找DNS是需要花费时间的，经验的总结是至少需要20毫秒左右的时间。在此期间，浏览器是无法下载其他任何内容资源的。所以浏览器会想办法对DNS的查找结果进行缓存。而除了浏览器的缓存之外，操作系统（例如Windows)也会对DNS查询的结果做缓存。只不过，由于浏览器使用太过频繁，目前的<strong><font color="#ff0000">主流浏览器都使用自己独有的缓存，而不使用操作系统的缓存</font></strong>。</p> <ol> <li>IE 中默认情况下对DNS的缓存时间为 30分钟。关于如何配置，可以通过阅读<a href="http://support.microsoft.com/kb/263558" target="_blank">这篇文章</a>了解更多信息。</li> <ul> <li>早期的版本设置为1天，与<a href="http://technet.microsoft.com/en-us/library/cc959517.aspx" target="_blank">Windows的设置</a>一致。 <li>Windows的DNS缓存，可以通过ipconfig /displaydns 这个命令来查看。</li></ul> <li>Firefox默认的DNS缓存时间据说为1分钟，如果不满意这个选项，直接修改 network.dnsCacheExpiration 即可。 <li>Google Chrome默认的DNS缓存时间，据我观察也是1分钟，可以通过<a href="chrome://net-internals/#dns">chrome://net-internals/#dns</a> 这个地址查看。</li></ol> <p>&nbsp;</p> <p>我们可以看到即便同样为浏览器，它们在缓存DNS的问题上也不尽相同（主要体现在时间上面），这个差异到底有什么考虑呢？</p> <ol> <li>缓存时间较长，有利于重复利用DNS缓存，提高速度。</li> <li>缓存时间较短，有利于及时地检测到目标站点的IP地址更新，以进行正确的访问。</li></ol> <p>所以，两者都有其优点和考虑。</p> <p>那么，讲了这么多，了解这个只是对于我们网站设计和优化有何启示呢？</p> <ol> <li>由于DNS查找是需要时间的，而且它们通常都是只缓存一定的时间，所以应该尽可能地减少DNS查找的次数。</li> <li>减少DNS查找次数，最理想的方法就是将所有的内容资源都放在同一个域(Domain)下面，这样访问整个网站就只需要进行一次DNS查找，这样可以提高性能。</li> <li>但理想总归是理想，上面的理想做法会带来另外一个问题，就是由于这些资源都在同一个域，而HTTP /1.1 中推荐客户端针对每个域只有一定数量的并行度（它的建议是2），那么就会出现下载资源时的排队现象，这样就会降低性能。</li> <li>所以，折衷的做法是：建议在<strong><font color="#ff0000">一个网站里面使用至少2个域，但不多于4个域</font></strong>来提供资源。我认为这条建议是很合理的，也值得我们在项目实践中去应用。</li></ol> <p>我们最后可以来看看博客园主页在这方面的设计</p> <p><a href="http://images.cnitblog.com/blog/9072/201305/02084629-0c89c8e9611e4153ac5129ac26c6b4b6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/02084631-e4bddd166acf4dd1aaa4fbae9cc6270f.png" width="244" height="133"></a></p> <p>我们看到加载主页的时候，会有47个请求，这些请求分布在不同的主机（HOST），去除重复值之后，有如下11个主机。前5个是与博客园本身有关的，后6个是与广告有关的。</p> <blockquote> <p>www.cnblogs.com<br>common.cnblogs.com<br>static.cnblogs.com<br>pic.cnitblog.com<br>passport.cnblogs.com<br>www.google-analytics.com<br>partner.googleadservices.com<br>pubads.g.doubleclick.net<br>static.googleadsserving.cn<br>csi.gstatic.com<br>p4-gg6ayhm2r5hvm-ukushuadvfiqpnzm-if-v6exp3-v4.metric.gstatic.com</p></blockquote>]]></description></item><item><title>优化网站设计（八）：将脚本文件和样式表作为外部文件引用</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053562.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 01 May 2013 12:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053562.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考 <p>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a> <p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 <p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <p>Technorati Tags: <a href="http://technorati.com/tags/Performance">Performance</a>,<a href="http://technorati.com/tags/Web+design">Web design</a>,<a href="http://technorati.com/tags/ASP.NET">ASP.NET</a></p> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要讨论的话题</h1> <p>这一篇我和大家讨论第八个原则：<a href="http://developer.yahoo.com/performance/rules.html#external">Make JavaScript and CSS External</a> （将脚本文件和样式表作为外部文件引用）</p> <p>我承认，这是一个有点争议的话题。这里的争议点并不在于要不要将脚本文件和样式表作为外部文件引用（因为通常情况下，大家都同意这样做是有好处的），而是在于如何把握一个度。因为在某些情况下，确实将脚本或者样式定义在页面中可能更好一些。</p> <p>我这里就整理一下大家对于这个做法的优缺点分析</p> <h3>好处：</h3> <ol> <li>提高了脚本文件和样式表的复用性。（无需在每个页面中都定义一次）</li> <li>减小了页面体积，可以提高页面加载速度。（脚本文件和样式表可以被浏览器单独缓存）</li> <li>提高了脚本和样式的可维护性。（这个虽然与性能无关，但其实也是很重要的）</li></ol> <h3>缺点：</h3> <ol> <li>因为有单独的文件，所以可能会增加额外的请求。这违背了 <a href="http://developer.yahoo.com/performance/rules.html#num_http">Make Fewer HTTP Requests</a> 这个原则</li> <ul> <li>但由于这些文件可以被单独缓存，所以实际上这个的影响不见得那么大</li></ul></ol> <p>&nbsp;</p> <p>很显然，<strong><font color="#ff0000">采纳这条原则的好处通常是多于坏处的</font></strong>。尤其是如果你懂得结合如下几条原则的话：</p> <ol> <li><a href="http://developer.yahoo.com/performance/rules.html#cdn">Use a Content Delivery Network (CDN)</a> <li><a href="http://developer.yahoo.com/performance/rules.html#expires">Add Expires or Cache-Control Header</a> <li><a href="http://developer.yahoo.com/performance/rules.html#gzip">Gzip Components</a></li> <li><a href="http://developer.yahoo.com/performance/rules.html#css_top">Put Stylesheets at Top</a> <li><a href="http://developer.yahoo.com/performance/rules.html#js_bottom">Put Scripts at Bottom</a></li> <li><a href="http://developer.yahoo.com/performance/rules.html#minify">Minify JavaScript and CSS</a></li> <li><a href="http://developer.yahoo.com/performance/rules.html#js_dupes">Remove Duplicate Scripts</a></li> <li><a href="http://developer.yahoo.com/performance/rules.html#split">Split Components Across Domains</a></li></ol> <p>&nbsp;</p> <p>但是，确实有的时候，我们不会采纳这条原则。下面这篇文章做了比较好的介绍 ：<a href="http://www.thefutureoftheweb.com/blog/when-to-use-inline-javascript">http://www.thefutureoftheweb.com/blog/when-to-use-inline-javascript</a></p> <p>文章说到，在下面三种情况下应该考虑直接在页面中定义脚本和样式</p> <ol> <li>这些脚本和样式是专用于某个页面的（换句话说，它们不需要复用）</li> <li>这些页面并不经常访问（这句话的潜台词是，既然不经常访问，那么页面体积大一些，甚至访问慢一些也无伤大雅）</li> <li>这些脚本和样式很少（我觉得这是一条最关键的）</li></ol> <p><a href="http://images.cnitblog.com/blog/9072/201305/01203828-3cf0bb04cf884892a5d8998a40a72737.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201305/01203830-9b40f454b02d4e259a5fcda1f63755f9.png" width="244" height="189"></a></p>]]></description></item><item><title>优化网站设计（七）：避免在CSS中使用表达式</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053439.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 01 May 2013 10:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053439.html</guid><description><![CDATA[<h1>前言</h1>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<p>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a></p>
<p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<h1>准备工作</h1>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>
<p>Technorati Tags: <a href="http://technorati.com/tags/Performance">Performance</a>,<a href="http://technorati.com/tags/Web+design">Web design</a>,<a href="http://technorati.com/tags/ASP.NET">ASP.NET</a></p>
</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol></li>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li>
</ol></li>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<h1>本文要讨论的话题</h1>
<p>这一篇我来和大家讨论个原则：<a href="http://developer.yahoo.com/performance/rules.html#css_expressions">Avoid CSS Expressions</a>&nbsp; （避免在CSS中使用表达式）</p>
<p>最早的CSS是不支持所谓的表达式的，微软的IE从5.0开始引入了这种概念，意思是希望我们拥有定义动态的CSS样式的能力，详细的文章请参考<a href="http://msdn.microsoft.com/en-us/library/ms537634(v=VS.85).aspx">http://msdn.microsoft.com/en-us/library/ms537634(v=VS.85).aspx</a>，下面有一个简单的例子：</p>
<p><strong><span style="color: #ff0000;">background-color: expression((new Date()).getHours()%2 ? "#B8D4FF" : "#F08A00" );</span></strong></p>
<p>这里可以使用一个特殊的expression函数，其实这是一个javascript的函数。它可以进行根据一个表达式进行计算，动态地决定background-color的值。</p>
<p>看起来是一个相当不错的功能，但我们可能不会想到这个表达式会运算很多次（这个具体的次数可能远远超过你的想象）</p>
<p>我随便定义了一个界面，并添加了如下的样式定义</p>
<pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">style</span><span class="kwrd">&gt;</span>
        body {
            background-color: expression((new Date()).getHours()%2 ? "#B8D4FF" : "#F08A00" );
        }
    <span class="kwrd">&lt;/</span><span class="html">style</span><span class="kwrd">&gt;</span></pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>打开之后，只是鼠标动来动去，或者滚动条上下拖动几下，就会执行1865次。如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01182253-b653c8cd5d454a0b829aee6603233eb9.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01182254-08d990f60a5040958301bde0782b5ca1.png" alt="image" width="244" height="170" border="0" /></a></p>
<p>很显然，这是很可观的一些成本。这还是比较简单的表达式，试想一下，如果有更加复杂的表达式呢？这些函数需要一次一次的执行，毫无疑问地会拖累页面执行的效率，乃至浏览器的性能。</p>
<p>正因为如此，不光是其他浏览器都不支持，同时w3c标准组织也不支持这种方式。鉴于此，微软方面也于2008年（彼时发布了IE 8）的时候，正式终止了对这种功能的支持。下面这篇文章是当时所发出的声明：</p>
<p><a href="http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx">http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx</a></p>
<p>文中提到的三点不再支持CSS表达式的原因，显然是很中肯的（<strong><span style="color: #c0504d;">更加符合标准，更加有利于性能提升，以及减少受攻击面</span></strong>）</p>
<p><strong>Why end support for expressions ?</strong></p>
<ul>
<li><strong>To comply with standards</strong>
<ul>
<li>Expressions are proprietary to Internet Explorer and as such not interoperable.</li>
<li>A common use-case for expressions was to fix IE bugs or to emulate those CSS 2.1 features not yet supported by the browser, for example, min-width and max-width. We have not only worked hard to fix these bugs in IE8 but our new layout engine supports the missing features natively.</li>
</ul>
</li>
<li><strong>To improve performance</strong>
<ul>
<li>Expressions evaluation has a high runtime cost; web performance experts like Steve Souders <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_6.html">recommend avoiding them to improve front-end performance</a></li>
</ul>
</li>
<li><strong>To reduce the browser attack surface</strong>
<ul>
<li>Because they expose a script execution context, CSS expressions constitute a possible script injection attack vector.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>那么，情况已经很清楚了，如果你根本不了解CSS表达式，那么恭喜你，你不需要再了解它了。如果你以前用过CSS表达式，而且对它还比较喜欢，那么我也希望你能慎重地考虑一下这条建议，并且毅然地选择放弃这种功能，拥抱标准吧。</p>
<p>好吧，你可能已经同意了我的提议，但是仍然有一个疑问，那么如果我们真的希望实现动态的CSS，怎么办呢？例如上面这个例子，我们希望根据当前的时间，来决定显示什么背景颜色。（小时为单数时显示一种颜色，为复数时显示另外一种颜色）。</p>
<p>你在想这个问题是吗？那我们为什么不像下面这么做呢？</p>
<pre class="csharpcode">    &lt;script src=<span class="str">"Scripts/jquery-2.0.0.min.js"</span>&gt;&lt;/script&gt;
    &lt;script&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"body"</span>).css(<span class="str">"background-color"</span>, (<span class="kwrd">new</span> Date()).getHours() % 2 ? <span class="str">"#B8D4FF"</span> : <span class="str">"#F08A00"</span>);
        });
    &lt;/script&gt;
</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>我们不光发现调用次数少了，而且这种代码在所有主流浏览器都能实现一致的用户体验，何乐而不为呢？</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01182255-12b17870ddea4ee1ba922133c092d200.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01182256-af4938b422cb40668d6f47a51fe3bc5c.png" alt="image" width="244" height="170" border="0" /></a></p>
<p>【备注】因为使用了jquery,所以会有一些其他的方法调用。</p>]]></description></item><item><title>优化网站设计（六）：在文档底部放置脚本定义或引用</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053299.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 01 May 2013 08:06:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053299.html</guid><description><![CDATA[<h1>前言</h1>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<p>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a></p>
<p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<h1>准备工作</h1>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>
<p>Technorati Tags: <a href="http://technorati.com/tags/Performance">Performance</a>,<a href="http://technorati.com/tags/Web+design">Web design</a>,<a href="http://technorati.com/tags/ASP.NET">ASP.NET</a></p>
</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol></li>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li>
</ol></li>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<h1>本文要讨论的话题</h1>
<p>这一篇我来和大家讨论第六个原则：<a href="http://developer.yahoo.com/performance/rules.html#js_bottom">Put Scripts at Bottom</a>&nbsp; （在文档底部放置脚本定义或引用）。</p>
<p>我在上一篇和大家探讨到了<a href="http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053216.html">优化网站设计（五）：在顶部放置样式定义</a> ，那是一个给我留下深刻印象的原则，之所以深刻的原因并不是因为这个原则定义有多深刻，而在于以前都这么多，但并没有意识到这是一个不错的做法。</p>
<p>那么，这一篇所谈到的&ldquo;在文档底部放置脚本定义或引用&rdquo;这个原则，则是在相当长一段时间内，我都没有注意到的一条原则。换句话说，我以前更多的是将脚本或脚本引用放在HEAD里面，例如下面这样：</p>
<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"Scripts/knockout-2.2.1.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"Scripts/modernizr-2.6.2.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"default.js"</span>&gt;<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<pre class="csharpcode">相当长一段时间里，我都没有意识到这可能会成为一个问题。后来也是在研究有关性能有关的问题时，我逐渐注意到了它，原来将脚本定义或引用放在文档底部有助于提高页面加载时的并行度，从而实现提速的目的。</pre>
<pre class="csharpcode"><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4" target="_blank">HTTP /1.1</a> 文档中有下面这一段描述：</pre>
<p>Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users. These guidelines are intended to improve HTTP response times and avoid congestion</p>
<p>我们知道HTTP本身是无状态的，这意味着每个请求都需要建立独立的连接。但从HTTP /1.1开始对此作了改进，允许在客户端和服务器之间维持连接（Keep-Alive)，这样做的目的是因为在页面加载的时候，往往需要加载很多附加的资源（例如脚本，样式表，图片等），如果每个请求都需要建立连接，显然是不合适的。维持连接（Keep-Alive)的特性，使得连接可以重用，即一段时间内，对同一域的访问请求可以不需要创建新的连接，而是使用之前的连接。</p>
<p>但这里有一个问题，如果维持过多的连接，显然对于客户端和服务器来说都不是好事（这需要耗用资源），所以HTTP /1.1 中建议针对同一个域不要维护超过2个连接。实际上这就是限制了并行度。虽然看起来我们可以通过将这些脚本放在不同的域，来绕开这个并行的问题，但要命的是，只要浏览器开始下载脚本文件，那么它就不可能使用超过2个连接进行同时工作，哪怕这些资源是放在不同的域的。</p>
<p>但据我所知，现代的浏览器对此做了一些突破（可能不止2个连接），但无论如何，这总是有限的。<a href="http://www.impng.com/web-dev/browser-max-parallel-connections.html" target="_blank">有一些方法</a>可以手工修改浏览器的设置，但我不建议这么做。</p>
<p>如果脚本文件放在HEAD里面，而且如果脚本很多的话，那么下载这些脚本文件就将占用本来就不多的几个连接，那么就必须等这些脚本全部下载完之后，才有可能下载页面其他的部分。这可能是造成页面停滞的一个用户体验。</p>
<p>那么，我们可以怎么使用这个原则呢？很简单，修改页面代码如下</p>
<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>


<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>

    <span class="rem">&lt;!--将脚本移动到文档的底部有助于提高页面加载速度--&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"Scripts/knockout-2.2.1.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"Scripts/modernizr-2.6.2.js"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"default.js"</span>&gt;<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>&nbsp;</p>
<p>有意思的是，虽然这样的移动并不难，但真的有人不愿意做这样的改变（有一部分理由是因为这样做了之后，文档结构不够清晰了）。作为妥协的一种方案，现在允许在添加脚本的时候，设置一个<a href="http://www.websiteoptimization.com/speed/tweak/defer/" target="_blank">DEFER</a>属性，标识这个脚本可以延迟加载。</p>
<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="rem">&lt;!--使用defer属性延迟加载脚本--&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-2.0.0.min.js"</span> <span class="attr">defer</span><span class="kwrd">="defer"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"Scripts/knockout-2.2.1.js"</span> defer=<span class="str">"defer"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"Scripts/modernizr-2.6.2.js"</span> defer=<span class="str">"defer"</span>&gt;&lt;/script&gt;
    &lt;script src=<span class="str">"default.js"</span> defer=<span class="str">"defer"</span>&gt;<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>



<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>看起来是不错的，但<strong><span style="color: #ff0000;">不幸的是，并非所有浏览器都支持这个特性</span></strong>。网络开发的复杂性就在于此，我几乎看到你在微笑着点头了。那么，为什么不可以接受将脚本放在文档底部的这一点稳妥的做法呢？</p>
<p>值得一说的是，并不是所有代码都适合从顶部移动到文档底部。例如这些脚本需要在加载过程中动态添加HTML的元素（可能会调用document.write方法），那么就会存在问题。看起来这是不少人固守着原先做法的原理，如果你没有用过类似<a href="http://jquery.com/" target="_blank">JQuery</a>这一类框架的话，你是情有可原的，反过来说你就不应该这么想了。而如果你真的没有听过和用过JQuery，那么你就离大部队越来越远了。</p>
<p>其实，我们在实践中逐渐发现，绝大部分情况下，我们使用Javascript的时候，都应该等到页面已经准备好之后才开始工作，因为如果你在页面都没有全部呈现出来（并不是代表用户看到，而是呈现）之前就开始操作，你将无法预知会发生什么事情。JQuery创造性地引入了<a href="http://docs.jquery.com/Tutorials:Introducing_%24%28document%29.ready%28%29" target="_blank">document.ready</a>这样一个事件，而我可以负责任地说，只要你的脚本是在document.ready之后才应该执行的，那么就都可以移动到文档底部。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>]]></description></item><item><title>优化网站设计（五）：在顶部放置样式定义</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053216.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 01 May 2013 07:16:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3053216.html</guid><description><![CDATA[<h3>前言</h3>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<p>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a></p>
<p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<h3>准备工作</h3>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>
<p>Technorati Tags: <a href="http://technorati.com/tags/Performance">Performance</a>,<a href="http://technorati.com/tags/Web+design">Web design</a>,<a href="http://technorati.com/tags/ASP.NET">ASP.NET</a></p>
</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol></li>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li>
</ol></li>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<h3>本文要讨论的话题</h3>
<p>这一篇我将和大家讨论第五个原则: <a href="http://developer.yahoo.com/performance/rules.html#css_top">Put Stylesheets at Top</a> ( <strong><span style="color: #ff0000;">在顶部放置样式定义</span></strong>).</p>
<p>老实说，我一开始看到这条原则，感受并不太深, 不是说这个原则没有用,而是因为我一直都是这么做的。我一直认为样式定义理应就是放在顶部的. 想想看吧, 样式定义是包含了页面元素呈现所需要的格式定义, 既然如此, 我们如果需要用到它们的话, 当然应该在BODY加载之前就加载它们。</p>
<p>事实上，这一点毫无争议。<a href="http://www.w3.org/TR/html4/struct/links.html#h-12.3" target="_blank">HTML规范</a>中都明确地规定，样式定义（包括直接定义在文档中的，或者外部引用的样式表），应该放在HEAD里面，而不应该放在BODY里面（不管是BODY的顶部，中部，甚至是底部）。</p>
<p>这一条原则进一步对此做了解释，这对于我来说也是一个很有意思的收获。</p>
<ol>
<li>之所以放在顶部，是为了提供<strong><span style="color: #ff0000;">渐进式呈现（render progressively）</span></strong>页面的可能性。也就是说，可以一点一点地，由上而下地呈现内容。这个对于用户来说，能提供一种较好的用户体验。</li>
<li>如果放在了底部，很多浏览器（尤其是IE浏览器）会阻止呈现任何内容，直到加载了这些样式表。这是为什么呢？如果它在没有加载样式表之前呈现了那些内容，当然是可以的。但大家可以试想一下，等到它加载了样式表，它<strong><span style="color: #ff0000;">很可能</span></strong>需要重新呈现这些内容。所以，它们为了避免重复地呈现，就干脆什么都不做。取而代之的是，用户将看到空白如也的一个页面，然后等到全部加载完成了，再突然出现一大堆内容在他面前。</li>
</ol>
<p>我不太相信真的有人会把样式表&mdash;&mdash;Style sheet（或者内联的样式定义：inline Style ）真的定义在BODY的底部，所以这个原则我们就讨论到这里吧，如果你真的那么做了，请改正过来（毕竟这个也很容易），并且我很想知道你为什么那么做？有兴趣的话，<a href="mailto:ares@xizhang.com" target="_blank">告诉我</a>一下吧</p>]]></description></item><item><title>优化网站设计（四）：对资源启用压缩</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 01 May 2013 03:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/05/01/3052881.html</guid><description><![CDATA[<h1>前言</h1>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<h6><span style="font-size: medium;">Best Practices for Speeding Up Your Web Site&nbsp; </span><a href="http://developer.yahoo.com/performance/rules.html"><span style="font-size: medium;">http://developer.yahoo.com/performance/rules.html</span></a></h6>
<p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<h1>准备工作</h1>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a>
<div id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:607f3121-d58f-49db-b70c-bee37cc24144" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">Technorati Tags: <a href="http://technorati.com/tags/Performance" rel="tag">Performance</a>,<a href="http://technorati.com/tags/Web+design" rel="tag">Web design</a>,<a href="http://technorati.com/tags/ASP.NET" rel="tag">ASP.NET</a></div>
</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol></li>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li>
</ol></li>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<h1>本文要讨论的话题</h1>
<p>这一篇，我们要讨论的是对资源启用压缩的话题。我们知道，不光我们如何<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html" target="_blank">减少请求数</a>，或者<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html" target="_blank">使用CDN</a>，以及<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html" target="_blank">使用缓存</a>，有一个事实是我们无法避免的：内容总是需要从服务器传输到客户端，那怕次数是少一些。那么，如果希望这个传输的过程尽量地快，我们应该会很自然地想到，能否将传输的内容体积减小呢？</p>
<p>要回答这样的一个问题，我们通常就会使用到压缩技术。关于这一条原则的理论和概念，请参考 <a href="http://developer.yahoo.com/performance/rules.html#gzip">http://developer.yahoo.com/performance/rules.html#gzip</a></p>
<p>压缩并不那么简单，其实它包含了一对操作：压缩和解压缩。换句话说，在我们今天讨论的网站优化中使用压缩技术，不仅仅需要考虑服务器端对内容进行压缩，还要考虑客户端（浏览器）对内容进行解压缩。反过来也是如此。所以，这里就会有一个问题，我们必须要使用大多数浏览器都能接受的压缩算法。由于浏览器的多样性，通常是由浏览器在发起请求的时候，显式地表明自己接受那些压缩算法，然后服务器检查这些设置，再确认自己是否能利用这些算法进行压缩（或者解压缩），如果不能，则宁愿不进行压缩，直接返回原始的内容。</p>
<p>所以，在<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank">HTTP 1.1</a>中规定，浏览器在发起请求的时候，可以通过下面这个Request Header来表明自己支持的压缩算法（可以有多个）</p>
<pre>Accept-Encoding: gzip, deflate</pre>
<pre>然后，服务器在发送响应的时候，也可以通过下面这个Response Header来表明此次响应是否使用了某种算法（肯定只有一个）</pre>
<pre>Content-Encoding: gzip</pre>
<pre>作为程序员，我们知道其实还有很多其他的算法，但是确实从通用层面考虑，使用最多的是<a href="http://www.ietf.org/rfc/rfc1952.txt" target="_blank">Gzip</a>。 其他能与其相提并论的还有deflate，但还是Gzip用的最多。</pre>
<h3>&nbsp;</h3>
<h3>哪些资源适合做压缩</h3>
<ol>
<li><span style="font-family: 'Courier New';">静态网页（HTML,HTM）</span></li>
<li><span style="font-family: 'Courier New';">文本文件（TEXT,XML等）</span></li>
<li><span style="font-family: 'Courier New';">脚本文件（JAVASCRIPT)</span></li>
<li><span style="font-family: 'Courier New';">样式文件（CSS)</span></li>
</ol>
<p>&nbsp;</p>
<h3>哪些资源不适合做压缩</h3>
<ol>
<li>图片（JPG,GIF,PNG)</li>
<li>特殊组件（FLASH, XAP）</li>
</ol>
<p>&nbsp;</p>
<h3>如何做压缩</h3>
<pre>要实现压缩功能并不难，现代的一些Web 服务器都内置支持这个特性。针对微软的IIS 7.0或者更高版本的话，可以通过参考下面的文章进行配置</pre>
<h3>Configuring HTTP Compression in IIS 7</h3>
<pre><a href="http://technet.microsoft.com/en-us/library/cc771003(v=WS.10).aspx">http://technet.microsoft.com/en-us/library/cc771003(v=WS.10).aspx</a></pre>
<pre>我来对其做一些总结和演示</pre>
<p><span style="font-family: 'Courier New';">IIS 7.0内置支持Gzip压缩，这个可以通过在安装IIS的时候进行选择</span></p>
<pre><a href="http://images.cnitblog.com/blog/9072/201305/01112658-2a8fd419888c4b3b8339aa1744305b7a.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112658-8f93ff01fff843dbb1a79a7942b2a089.png" alt="image" width="244" height="214" border="0" /></a></pre>
<pre>正确安装之后，在管理工具中，就可以看到这样一项功能</pre>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01112703-ca9cfd706ca548319b2b52d30a3c793e.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112704-5d9edeacfa2a4cb0aa8a665f39d78234.png" alt="image" width="244" height="155" border="0" /></a></p>
<p>&nbsp;</p>
<p>IIS 7.0 支持两种方式的压缩：静态压缩和动态压缩。所谓静态压缩，就是对相对较大的内容，IIS 7.0会将它们压缩成一个新文件，并且缓存在磁盘上（可以通过下面这个界面配置多大的文件要进行静态压缩，并且放在哪个目录中），而动态压缩就是对于某些提交小的内容，直接在运行时进行动态压缩，不在磁盘上进行缓存（这种做法会带来CPU的一些额外的负担）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01112708-9dc0c0e9ea82476f94e62d897a150331.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112709-7ffe38da9fea4edd8dd0e59ea69e9b1b.png" alt="image" width="244" height="155" border="0" /></a></p>
<p>这个缓存的目录中会自动为每个应用程序池(Application Pool)创建一个子目录，以便保存那些静态压缩的文件</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01112709-f4aa15504ac9481a9e2ed2fc7f67287f.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112709-1796c8c48e5b4d3c8c471d811a5f6a3c.png" alt="image" width="244" height="177" border="0" /></a></p>
<p>那么这种压缩到底能有多少收益呢？我们可以看看下面这个截图</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01112711-a004ce68657d4fe0a9cbdbbea7f966a1.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112712-4f7a2cf8b2794e18964e2d3129dd22a7.png" alt="image" width="244" height="136" border="0" /></a></p>
<p>上图中看到，在我的一个测试网站中，它对两个JAVASCRIPT文件做了压缩，压缩之后的尺寸分别为33KB和51KB，而这两个文件的原始文件大小其实是92KB和197KB，我们可以由此看出来，压缩比高达65%和74%。这是相当可观的一个收益，而你要做的仅仅是启用压缩即可。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201305/01112712-4556a509e8264034a1002b2b50f5c2e7.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112712-29122bd755bb4106b1575e6ae62b8c53.png" alt="image" width="244" height="69" border="0" /></a></p>
<p>&nbsp;</p>
<pre>实际上这个文件已经被压缩成下面这样了（不再是纯文本的脚本了）</pre>
<pre><a href="http://images.cnitblog.com/blog/9072/201305/01112715-ae2c9210c02c43c69ce57d12de74d223.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112716-4a8970c4c3854832a5d12fb709bb6981.png" alt="image" width="244" height="145" border="0" /></a></pre>
<pre>不可否认的是，压缩和解压缩肯定会对CPU带来一些额外的负担的，但通常情况下，这个代价是很小的，尤其是与收益比较起来的话。</pre>
<pre>等等！我们好像漏了一个很重要的话题:上面的界面中，我们知道如何启用压缩，但却没有看到</pre>
<ol>
<li>如何设置哪些文件应该如何压缩（无论静态还是动态）。</li>
<li>到底是采用什么算法压缩</li>
</ol>
<p>&nbsp;</p>
<p>这个细节被隐藏在下面的配置文件中</p>
<pre>C:\windows\system32\inetsrv\config\applicationHost.config</pre>
<pre><a href="http://images.cnitblog.com/blog/9072/201305/01112718-26949ed0942e4710b72fe3a7bcf8dcf5.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112718-396f2ab531d44cc099ea93aa6d4051e6.png" alt="image" width="244" height="136" border="0" /></a></pre>
<pre>打开这个文件，搜索一下httpCompression，你可以找到如下的配置信息，当然，你可以在这个基础上做一些修改，前提是你先看懂它们。实际上不难，对吧</pre>
<pre><a href="http://images.cnitblog.com/blog/9072/201305/01112724-1807401cec1f49c1ae8c95b99722e2a4.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201305/01112725-8128d4734edd4711bc0a0f95bbd241dc.png" alt="image" width="244" height="141" border="0" /></a></pre>
<div id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:bad989bb-92a7-463c-8e61-8e081168d639" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">Technorati Tags: <a href="http://technorati.com/tags/%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96" rel="tag">性能优化</a>,<a href="http://technorati.com/tags/performance" rel="tag">performance</a>,<a href="http://technorati.com/tags/ASP.NET" rel="tag">ASP.NET</a>,<a href="http://technorati.com/tags/web+design" rel="tag">web design</a></div>]]></description></item><item><title>优化网站设计（三）：对资源添加缓存控制</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 30 Apr 2013 13:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3052440.html</guid><description><![CDATA[<h1>前言</h1>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<h6><span style="font-size: medium;">Best Practices for Speeding Up Your Web Site&nbsp; </span><a href="http://developer.yahoo.com/performance/rules.html"><span style="font-size: medium;">http://developer.yahoo.com/performance/rules.html</span></a></h6>
<p><span style="font-size: medium;">同时，他们还发布了一个相应的测试工具Yslow </span><a href="http://developer.yahoo.com/yslow/"><span style="font-size: medium;">http://developer.yahoo.com/yslow/</span></a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<h1>准备工作</h1>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol></li>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li>
</ol></li>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<h1>本文要讨论的话题</h1>
<p><strong><span style="color: #ff0000;">缓存！这是一条多么重要的原则。</span></strong>几乎所有的网站优化的书籍或者文章中都会提到这个原则，而且目前在运行的一些网站都或多或少地使用到了这个技术。这个原则的相关概念可以参考这里：<a href="http://developer.yahoo.com/performance/rules.html#expires">http://developer.yahoo.com/performance/rules.html#expires</a>&nbsp;</p>
<p>我们还是以博客园的主页为例，通过简单的监控就能发现，他们大量地使用了缓存的功能（针对不同资源，缓存的策略可能略有不同，请注意观察max-age的值，以秒为单位，有兴趣的同学可以计算一下）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212443-9e0755c54bdd4d44b4df7869fc9b7a49.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212445-75d2e848627f4cc58ea5f3755ca8484e.png" alt="image" width="244" height="120" border="0" /></a></p>
<p>&nbsp;</p>
<p>接下来，我会从几个方面，和大家来谈谈缓存的问题</p>
<h3>1.缓存的概念</h3>
<p>缓存是服务器与客户端（或者中间的代理服务器）之间的一种约定，利用缓存可以明显地减少重复从服务器下载内容的次数，这样就可以极大地提高吞吐量以及响应速度。在HTTP 1.1协议中，对于缓存有明确的，详细的说明：<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</a></p>
<p>由于缓存如此重要，所以对于很多浏览器而言（尤其是现代浏览器），他们默认就会尝试对静态内容进行缓存。(<strong><span style="color: #ff0000;">这里先卖一个关子，大家觉得默认情况下它会缓存多长时间呢</span></strong>？）</p>
<p>下图可以很好地揭示缓存的作用</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212449-d9076a212c474a5a8cf263705b626d81.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212450-0700bd23b8f54ca4bc26c05174df9de6.png" alt="image" width="244" height="69" border="0" /></a></p>
<p>这是我两次访问一个简单的页面的情形，第一次（我用颜色选中的8个请求）的时候，因为没有缓存，所以所有的内容资源（动态的和静态的）都需要下载。浏览器会根据情况对其进行缓存（通常就是对于静态内容它会有一个缓存的策略，后面再细述）。但是第二次访问，就完全不一样了，只有第1个请求是需要下载内容的（这是一个动态页面），其他的7个内容都是无需下载的（你可以看到状态码是304，而且Body都是0）</p>
<p>&nbsp;</p>
<h3>2.静态资源的缓存及其设置</h3>
<p>默认情况下，浏览器（至少绝大多数现代浏览器）都会对网站中的静态内容进行缓存。常见的静态内容包括</p>
<ol>
<li>HTM,HTML文件</li>
<li>JAVASCRIPT文件</li>
<li>CSS文件</li>
<li>图片文件</li>
</ol>
<p>如果服务器端不做任何的设置，那么默认情况下它缓存多长时间呢？答案是：<strong><span style="color: #ff0000;">可能很久</span></strong>，这个取决于两个因素</p>
<ol>
<li>浏览器缓存中的这个文件是否被清理（可能是用户手工地进行清理，有的公司也可能会设置统一的策略自动在浏览器关闭的时候清理）</li>
<li>服务器对应的文件是否有更新</li>
</ol>
<p>这里就要讲到那个304的状态码了. 这个状态码的意思是：Not Modified（未更改）。为什么会产生这样的状态码呢？其实可以通过下面三个截图来理解清楚</p>
<p>第一次请求某静态资源的时候，服务器会在返回内容（状态码为200）的同时，包含一个特殊的Header，叫做Last-Modified ,这个Header会记录在服务器端该文件最后修改的时间。如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212450-96f278d268a4402b8566e0643c941a92.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212450-801352c767014d54ba45303cc236439b.png" alt="image" width="244" height="153" border="0" /></a></p>
<p>然后，浏览器会将此文件缓存起来。</p>
<p>接下来如果需要第二次访问这个文件，浏览器发起的请求中，也会包含一个特殊的Header</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212450-fe0d341bc1794dfdb61eff00c0931682.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212450-39927361cf404682ae96c8f3ba66c74c.png" alt="image" width="244" height="52" border="0" /></a><br />这个Header的意思是说，要检查从这个时间后是否有修改。如果该文件没有修改过，则服务器就会返回304这个状态码，并且不会返回任何内容。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212451-af6cba2929834d3299c7a3f3cbaa63a1.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212451-4a5eaac963fc4988a03a8f0cf1a0fa1d.png" alt="image" width="244" height="94" border="0" /></a></p>
<p>浏览器收到了304这个状态码的话，就会使用自己已经缓存的那个版本进行呈现。</p>
<p>我们当然也可以静态资源的缓存策略进行人工的干预，这个可以通过两个途径来实现</p>
<ol>
<li><strong><span style="color: #ff0000;">通过IIS 管理界面</span></strong>。选择某个站点，然后在右侧的功能面板中，选择&ldquo;Http Response Header&rdquo;，如下图所示</li>
</ol>
<blockquote>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212505-1ef9fa996625474b8c0f2ca8f0f9aa19.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212507-04c5aca8069546beb3e6bd0a96148c23.png" alt="image" width="244" height="154" border="0" /></a></p>
<p>然后在功能页面中，点击右侧的&ldquo;Set Common Header&hellip;&rdquo; 这个Action</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212510-d49cc741eb444bec9d87301dde876136.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212511-f2b9fe0d1ea44a9097580faef47c1846.png" alt="image" width="244" height="154" border="0" /></a></p>
<p>然后在弹出的对话框中设置Expire Web Content的选项</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212511-cb5c22facd314fbe898682a43b4bc414.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212512-1799afc130254177b0a280af9c60df1e.png" alt="image" width="244" height="176" border="0" /></a></p>
<p>这里默认会有三个策略：立即过期，在一个相对时间范围内过期，在一个绝对时间后过期。你可以根据自己的需求进行设置。</p>
<p>【备注】这些设置仅仅影响静态资源。</p>
</blockquote>
<ol>
<li><strong><span style="color: #ff0000;">直接修改web.config文件</span></strong></li>
</ol>
<blockquote>
<p>上面提到的通过IIS管理界面对静态资源配置到期时间（其实也就是指一个缓存的时间），这个做法适合给管理员使用。作为开发人员，如果你希望自己来控制这些选项，那么可以直接在网站的配置文件（web.config）中添加相关的配置即可。</p>
<pre class="csharpcode"> <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">staticContent</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">clientCache</span> <span class="attr">cacheControlMode</span><span class="kwrd">="UseMaxAge"</span> <span class="attr">cacheControlMaxAge</span><span class="kwrd">="1.00:00:00"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">staticContent</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span></pre>
</blockquote>
<p>&nbsp;</p>
<blockquote>
<p>需要注意的是，在之前的截图中，有些特殊的脚本，它们的缓存时间是不受这个配置影响的。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/30212512-ab0a31b25bd64ae1bdcaff55d8091984.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/30212512-6453b18c73de420ea7174f8c51971de2.png" alt="image" width="869" height="73" border="0" /></a></p>
<p>他们是默认缓存<strong><span style="color: #ff0000;">一年</span></strong>的.这些特殊的脚本（或者样式表）其实是多个文件的组合，如果对这一点不太了解，请参考我之前的一篇文章</p>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html">优化网站设计（一）：减少请求数</a></h4>
</blockquote>
<h3>3.动态资源的缓存及其设置</h3>
<p>我们上面讨论到了静态资源的缓存及其设置，但是对于现在的大部分网站来说，光有静态资源是远远不够的，我们会有很多动态资源，典型的就是动态页面（例如aspx页面），那么对于这种动态资源，是否也有可能进行一定的缓存呢？</p>
<p>答案是肯定的，但对于动态资源的缓存细节相当多，恐怕要超出本文的范畴。我强烈推荐大家详细阅读MSDN中的这篇文档 ：</p>
<p><a href="http://msdn.microsoft.com/en-us/library/aa478965.aspx">http://msdn.microsoft.com/en-us/library/aa478965.aspx</a> （ASP.NET Caching: Techniques and Best Practices）</p>
<p>&nbsp;</p>
<p>我这里为大家总结一下对动态资源进行缓存的几种做法</p>
<ol>
<li>页面缓存，在页面中使用<a href="http://msdn.microsoft.com/en-us/library/vstudio/hdxfb6cy(v=vs.100).aspx" target="_blank">OutputCache</a>，适合于对整个页面所有内容做缓存</li>
<li>片段缓存，在用户控件中使用<a href="http://msdn.microsoft.com/en-us/library/vstudio/hdxfb6cy(v=vs.100).aspx" target="_blank">OutputCache</a>，适合于对页面的一部分（通常封装为一个用户控件）内容做缓存
<ul>
<li>在MVC中，同样可以在Action上面使用<a href="http://msdn.microsoft.com/en-us/library/dd492556(v=VS.108,d=hv.2).aspx" target="_blank">OutputCache</a>这个Attribute来定义缓存设置</li>
</ul>
</li>
<li>数据缓存，在代码中访问<a href="http://msdn.microsoft.com/en-us/library/8bx0tk8a.aspx" target="_blank">Cache</a>对象，适合对多个页面中可能会用到的共享数据做精细的缓存控制</li>
</ol>
<p>值得注意的是，这三种做法并非是互斥的，在实际的应用中，他们会相互结合起来使用。</p>
<p>&nbsp;</p>
<p>另外，除了给页面或者控件设置OutputCache（为了灵活起见，建议结合CacheProfile)之外，如果确实某些缓存的设置需要动态决定，也可以采用如下的方式来实现同样的效果</p>
<pre class="csharpcode">Response.Cache.SetExpires(DateTime.Now.AddSeconds(60));
Response.Cache.SetCacheability(HttpCacheability.Public);
Response.Cache.SetValidUntilExpires(<span class="kwrd">false</span>);
Response.Cache.VaryByParams[<span class="str">"Category"</span>] = <span class="kwrd">true</span>;

<span class="kwrd">if</span> (Response.Cache.VaryByParams[<span class="str">"Category"</span>])
{
   <span class="rem">//...</span>
}</pre>
<p>关于Response.Cache的所有属性和操作，有兴趣的可以参考 <a href="http://msdn.microsoft.com/EN-US/library/system.web.httpcachepolicy.aspx">http://msdn.microsoft.com/EN-US/library/system.web.httpcachepolicy.aspx</a></p>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>【备注】本文之前提到的Bundle默认设置为1年的过期时间就是通过这种方式来实现的。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>4.缓存的反面</h3>
<p>缓存是一种很有用的技术，几乎所有人都知道它的好处。现在的开发平台都比较强大，让我们可以有比较简单的方式来实现缓存。</p>
<p>但是，缓存有它的一些代价，或者说有反面的一些问题需要考虑。典型的问题在于</p>
<ol>
<li>&nbsp;<span style="color: #ff0000;"><strong>版本控制</strong></span>。
<ul>
<li>版本是一个问题，不是吗？典型的问题是：如果你缓存了一个页面，但这个页面的数据其实是发生了变化，那么如果你还是以缓存的版本给用户呈现，是否有问题呢？</li>
<li>如何解决版本问题呢？这里会有一个缓存依赖的概念需要了解，
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/system.web.caching.cachedependency.aspx">http://msdn.microsoft.com/en-us/library/system.web.caching.cachedependency.aspx</a></li>
</ul>
</li>
</ul>
</li>
<li><strong><span style="color: #ff0000;">容量问题</span></strong>。
<ul>
<li>静态资源通常是缓存在客户端的（除非服务器端做特殊设置，IIS 7开始支持在服务器端&mdash;&mdash;甚至内核模式&mdash;&mdash;中缓存内容），他们通常对服务器影响不大。</li>
<li>但动态资源的缓存，通常是缓存在服务器端的（或者客户端和服务器端各有一份），所以需要占用服务器的内存空间。</li>
<li>如果不加以限制（或者不做周全的考虑），则很可能会因为缓存了过多的内容，而导致服务器的内存出现争用的问题。
<ul>
<li>这里留一个问题，请问ASP.NET应用程序的缓存功能，默认最多可以使用多少服务器内存？</li>
</ul>
</li>
<li>这里所谓的周全考虑，是指我们需要对缓存的必要性进行评估。应该只缓存那些确实有必要缓存的内容。这个说来容易，实际上做起来却是不那么容易的。
<ul>
<li>我们需要评估诸如缓存命中率这样一些性能指标来评估缓存的设置是否恰当
<ul>
<li>有兴趣的同学可以参考 <a href="http://msdn.microsoft.com/zh-cn/library/fxk122b4(v=vs.100).aspx">http://msdn.microsoft.com/zh-cn/library/fxk122b4(v=vs.100).aspx</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>]]></description></item><item><title>优化网站设计（二）：使用CDN</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 30 Apr 2013 03:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/04/30/3051686.html</guid><description><![CDATA[<h1>前言</h1> <p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。 <p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考 <h6>Best Practices for Speeding Up Your Web Site&nbsp; <a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a></h6> <p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a> <p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。 <p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。 <h1>准备工作</h1> <p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具 <ol> <li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。  <ol> <li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a> <li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a> <li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li></ol> <li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012  <ol> <li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a></li></ol> <li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li></ol> <h1>本文要谈讨论的话题</h1> <p>这篇文章，我将来和大家探讨CDN的问题，这是第二条原则，相关概念可以参考这里 <a href="http://developer.yahoo.com/performance/rules.html#cdn">http://developer.yahoo.com/performance/rules.html#cdn</a></p> <p>我将从几个方面来介绍这个话题：</p> <h2>1.什么是CDN?</h2> <p>CDN的全称是Content Delivery Network，中文直译过来是：内容交付网络。它的主要意思是，将某些内容进行交付的网络。对于网站开发而言，我们所讲的内容通常指的是内容文件（例如javascript，css，图片等等），也就是说，这里所说的CDN的意思是指，建立（或者使用）一个更加有利于交付这些内容交付的网络。</p> <h2>2.为什么需要CDN?</h2> <p>我们必须承认，在很早的时候，是没有CDN的概念和需求的。那时候我们网站所需要的javascript等文件，就是放在我们的网站目录中，其实这也是一种内容交付的方式，而且往往还是比较高效的。但直到有一天，我们做了各种各样的网站，我们就会发现另外一个问题：就是针对同一个javascript文件，浏览器可能会缓存多个版本，例如下面这个截图所示</p> <p><a href="http://images.cnitblog.com/blog/9072/201304/30111435-92736ed7e26c42e0bcf5f11283333dcb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/30111436-515757adf1ba4430b7d0c21c6b87ffc1.png" width="244" height="133"></a></p> <p>之所以会这样做，是因为浏览器是根据域(Domain)来缓存内容资源的，只要域不一样，那么它就需要重复下载这些资源，而且使用同样的方式将它们缓存起来。</p> <p>但是，这会带来一些小的问题：<strong><font color="#ff0000">重复地下载，缓存这些同样的脚本文件是需要占用带宽和本地缓存文件空间的</font></strong>。</p> <p>于是，人们想出来一个解决方法：既然浏览器是根据域来区分这些内容资源的，那么是否可以将这些内容都放在统一的一个域里面呢？这样就算是我们有很多网站，我们都可以使用同样的地址引用这些内容资源，那么就不会产生重复下载和缓存的问题了。</p> <p>&nbsp;</p> <h2>3.如何使用CDN</h2> <p>很多问题，关键在于想到了，只要想到了，接下去怎么做其实不难。就好比我们现在讨论的这个CDN的问题。</p> <p>我们可以继续以博客园的主页为例来进行分析</p> <p><a href="http://images.cnitblog.com/blog/9072/201304/30111440-51f1bccfeeed419b9b38dd6e7ab7bb1e.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/30111441-b345962995c54cb086bbd069f948e18c.png" width="244" height="134"></a></p> <p>发展到今天，我们知道博客园是有很多站点的，例如<a href="http://www.cnblogs.com">www.cnblogs.com</a>, news.cnblogs.com , q.cnblogs.com 等等。他们应该或多或少都会用到jquery这个通用库。那么博客园是怎么做到底呢？</p> <p>从上图中我发现，他们做了一个所谓的公用的子站点：common.cnblogs.com ，里面存放了他们使用的jquery最终的版本。</p> <p>实际上这就是一个最直接也是最简单的使用CDN的做法：如果你有很多站点，他们之间可以共享某些内容（例如javascript，css，image等），那么与其每个站点放一份，就不如将他们统一地存在在一个地方，这样就可以减少下载的次数和缓存的体积了。</p> <p>这样做还有一个好处就是：由于主流浏览器对于同一个域所允许保持的连接数都是有限制的（可参考 <a href="http://www.impng.com/web-dev/browser-max-parallel-connections.html">http://www.impng.com/web-dev/browser-max-parallel-connections.html</a> 的介绍），HTTP 1.1协议甚至明确地建议将这个连接数限制为2（Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. <strong><em>A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy.</em></strong> A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users. These guidelines are intended to improve HTTP response times and avoid congestion）。那么，我们采用CDN的做法来将某些内容放在不同的域里面，从一定意义上可以增加下载的并行度。关于这个原则，也可以参考 <a href="http://developer.yahoo.com/performance/rules.html#split">http://developer.yahoo.com/performance/rules.html#split</a>&nbsp;</p> <p>&nbsp;</p> <p>除了上述的做法（自己单独建一个站点来保存这些内容资源），如果你是做一个互联网应用，那么还可以享受到一些业界知名的厂商所提供的CDN服务，他们将很多最常用的javascript库，放在了统一的位置（通常他们的服务器是很快的），可以供全世界的网站开发人员免费使用，这样做的好处是扩大了共享的范围，例如如果你要访问cnblogs.com ，它使用jquery的库，也许你在访问microsoft.com的时候就下载过了，所以连第一次都无需下载。</p> <p>这些提供CDN服务的厂商有：</p> <h3>微软的CDN服务</h3> <p><a href="http://www.asp.net/ajaxlibrary/cdn.ashx">http://www.asp.net/ajaxlibrary/cdn.ashx</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201304/30111441-6c67241a5eed457a83fe1bbf8c329f0f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/30111442-69adfd3de1da4bbc908c5fa4c7528160.png" width="244" height="212"></a></p> <h3>Google的CDN服务</h3> <p><a href="https://developers.google.com/speed/libraries/devguide">https://developers.google.com/speed/libraries/devguide</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201304/30111443-8d2030730cd84384a1eafaffa6158aa8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/30111443-6aa07af6c58d4d4a822a78cc0048dd96.png" width="244" height="105"></a></p> <p>选择谁的服务，完全取决你自己的喜好。事实上，他们的用法也很接近，例如</p><pre class="csharpcode">&lt;script src=<span class="str">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.0.min.js"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>另外，我在<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html" target="_blank">上一篇文章</a>中提到了为了减少请求数，我们可以采用Bundle的形式将多个文件进行打包合并，如果遇到我们希望对某个文件使用CDN的情况，应该如何改进呢？请参考下面的代码</p><pre class="csharpcode">            config.UseCdn = <span class="kwrd">true</span>;
            config.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/jquery"</span>, <span class="str">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.0.min.js"</span>).Include(<span class="str">"~/scripts/jquery-2.0.0.min.js"</span>));
</pre>
<p>需要注意的是，只有当web.config文件中，将compilation的debug设置为false,才会使用CDN, 否则将使用本地的文件。这也是为什么我们需要定义两个路径的原因。</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="false"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.5"</span><span class="kwrd">/&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>看起来不错，不是吗？但是CDN的使用，也有一些额外需要考虑到负面作用。</p>
<p>&nbsp;</p>
<h2>4.使用CDN的负面作用</h2>
<p>使用CDN，尤其是使用第三方的CDN，需要考虑网络的可到达性。这些内容既然是Host在别人的服务器上面，那么从一定意义上说，并非很可控。例如，因为众所周知的原因，我上面没有使用Google提供的CDN地址。</p>
<p>另外，使用CDN因为会涉及到多个域，那么将违背下面两条原则：</p>
<h5>Minimize HTTP Requests （这个我在<a href="http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html" target="_blank">上一篇文章</a>详细介绍过）</h5>
<p><a href="http://developer.yahoo.com/performance/rules.html#num_http">http://developer.yahoo.com/performance/rules.html#num_http</a>&nbsp; </p>
<h5>Reduce DNS Lookups （后续再介绍）</h5>
<p><a href="http://developer.yahoo.com/performance/rules.html#dns_lookups">http://developer.yahoo.com/performance/rules.html#dns_lookups</a></p>
<p>&nbsp;</p>
<p>很惊奇吗？为什么这些原则（同时也号称为最佳实践）会自相矛盾呢？其实一点都不奇怪，世界本来就是辩证统一的。这些矛盾是客观存在的，我们要做的是，综合他们的利弊，进行权衡。你说呢</p>]]></description></item><item><title>优化网站设计（一）：减少请求数</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 29 Apr 2013 07:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/04/29/3050839.html</guid><description><![CDATA[<h1>前言</h1>
<p>网站设计的优化是一个很大的话题,有一些通用的原则,也有针对不同开发平台的一些建议。这方面的研究一直没有停止过，我在不同的场合也分享过这样的话题。</p>
<p>作为通用的原则，雅虎的工程师团队曾经给出过35个最佳实践。这个列表请参考</p>
<h4><span style="font-weight: bold;">Best Practices for Speeding Up Your Web Site&nbsp; </span><a href="http://developer.yahoo.com/performance/rules.html">http://developer.yahoo.com/performance/rules.html</a>&nbsp;</h4>
<p>同时，他们还发布了一个相应的测试工具Yslow <a href="http://developer.yahoo.com/yslow/">http://developer.yahoo.com/yslow/</a></p>
<p>我强烈推荐所有的网站开发人员都应该学习这些最佳实践，并结合自己的实际项目情况进行应用。</p>
<p>接下来的一段时间，我将结合ASP.NET这个开发平台，针对这些原则，通过一个系列文章的形式，做些讲解和演绎，以帮助大家更好地理解这些原则，并且更好地使用他们。</p>
<p>&nbsp;</p>
<h1>准备工作</h1>
<p>为了跟随我进行后续的学习，你需要准备如下的开发环境和工具</p>
<ol>
<li>Google Chrome 或者firefox ，并且安装 Yslow这个扩展组件.请注意，这个组件是雅虎提供的，但目前没有针对IE的版本。</li>
<ol>
<li><a href="https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh">https://chrome.google.com/webstore/detail/yslow/ninejjcohidippngpapiilnmkgllmakh</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/yslow/">https://addons.mozilla.org/en-US/firefox/addon/yslow/</a></li>
<li>你应该对这些浏览器的开发人员工具有所了解，你可以通过按下F12键调出这个工具。</li>
</ol>
<li>Visaul Studio 2010 SP1 或更高版本，推荐使用Visual Studio 2012</li>
<ol>
<li><a href="http://www.microsoft.com/visualstudio/eng/downloads">http://www.microsoft.com/visualstudio/eng/downloads</a>&nbsp;</li>
</ol>
<li>你需要对ASP.NET的开发基本流程和核心技术有相当的了解，本系列文章很难对基础知识做普及。</li>
</ol>
<p>&nbsp;</p>
<h1>本文要讨论的话题</h1>
<p>这一篇文章讨论的是第一个原则：应该尽可能加减少请求数。这个原则的说明请参考&nbsp; <a href="http://developer.yahoo.com/performance/rules.html#num_http">http://developer.yahoo.com/performance/rules.html#num_http</a></p>
<p>我们的网页在加载的时候，为了提供更加丰富的内容和效果，除了页面本身这个请求之外，总是需要加载其他一些资源的，例如我们常见的Javascript文件，css文件，图片，甚至还会有一些Flash组件等等。这本无可厚非，但如果过多的外部请求，会很直接地降低页面加载的速度。</p>
<p>我们来看一个例子吧。例如我们经常访问的博客园的首页</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153611-1b05b2754a524aa3adba2313ccc5acf5.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153614-e6989251b1c14583a67a44d3ec5a630a.png" alt="image" width="227" height="244" border="0" /></a></p>
<p>这个网页的加载需要多少次请求呢？（如果不考虑缓存的话）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153623-fb9c0379883b49ab9e958d6298e3ae1c.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153625-01fdd97179a744dd8bd59cf8d2eeff03.png" alt="image" width="244" height="150" border="0" /></a></p>
<p>我们看到，请求数为55个。我们进一步通过Yslow来分析，可以得到综合的报表</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153630-4008698231c74e3298ba66a3177fe64b.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153631-5116c8ae0f174380aa774f3554f5e58e.png" alt="image" width="227" height="244" border="0" /></a><a href="http://images.cnitblog.com/blog/9072/201304/29153631-ec01217395764dcdb91a7210af40c57f.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153632-bc46a481a2a44f8585c0cc82d09f51d3.png" alt="image" width="244" height="147" border="0" /></a><a href="http://images.cnitblog.com/blog/9072/201304/29153635-5cf681a6fa3245409341ef3adcd3fd73.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153635-b4bfdafc1498478f8c573e958d1a894d.png" alt="image" width="244" height="221" border="0" /></a></p>
<p>应该说博客园的设计已经比较注意很多细节了。他们得到了B级的评分。我们再来看看其他一些主要的门户的表现吧（从左至右，依次是新浪，搜狐，腾讯，淘宝），他们都只得到D级的评分。</p>
<p>【备注】这些评分只是作为一个参考，不做任何的结论和推论。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153641-b320cc27fbbe4437aef313a87e119507.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153642-ac28de8e59df461894676381d69b812b.png" alt="image" width="227" height="244" border="0" /></a><a href="http://images.cnitblog.com/blog/9072/201304/29153647-9cba1ead37974097a5f16f8dc672d372.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153648-a5a75cda4fa947ffa3c9d9040b9776b9.png" alt="image" width="227" height="244" border="0" /></a><a href="http://images.cnitblog.com/blog/9072/201304/29153653-55d7ba6b6fbf4a51b5444440c270b7bb.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153655-614fd14fdeec4663acd4182bc6daddca.png" alt="image" width="227" height="244" border="0" /></a><a href="http://images.cnitblog.com/blog/9072/201304/29153700-246ed6ba4b164485a957a237d06e81b9.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153702-7a59824d2e23488185a2178045ddf337.png" alt="image" width="227" height="244" border="0" /></a></p>
<p>&nbsp;</p>
<h1>如何减少请求数?</h1>
<p>我们可以通过如下的几个方法来减少请求数:</p>
<ol>
<li>合并外部资源文件(如javascript,css,图片文件）</li>
<ol>
<li>图片的合并,是将多个图片合并为一个图片,然后采用css的一些设置（background-image,background-position) 来使用它们。这个很简单实用(但是效果也是显著的）。本文将不做演示。</li>
<li>javascript和css文件的合并，这个可能大家不太经常注意到。本文的后续部分将对此进行演示。</li>
</ol>
<li>使用Inline images 这种方式<strong>. </strong>这个方式可能依赖于浏览器的实现，目前并不是所有的浏览器都支持。所以本文也不做演示。</li>
</ol>
<p>&nbsp;</p>
<h1>合并javascript文件和css文件</h1>
<p>对于这两种文件的合并而言，我们当然可以手工去做(copy,paste)，把一个文件的内容粘贴在另外一个文件内容的底部即可。但这种方式有几个缺点：</p>
<ol>
<li>破坏了原有文件的结构</li>
<li>不同页面需要的文件组合可能是不一样的，这种情况下会需要产生多个不同的文件，而且需要比较小心地维护它们</li>
<li>如果文件的内容发生变化，就需要重新再来一次</li>
</ol>
<p>&nbsp;</p>
<p>所以，我并不是很推荐用这种手工合并的方法，事实上，我们有更好的工具来实现, 并且在ASP.NET的一些框架(例如ASP.NET MVC)里面已经有了内置的实现。</p>
<p>我们先来看一个例子,下面是一个典型的ASP.NET MVC项目</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153706-7cdd0019277847ec948664f99b502263.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153708-853c4de7f56f4b3d99a4ef9f2d4dab08.png" alt="image" width="244" height="134" border="0" /></a></p>
<p>我找了其中的一个用户注册页面，在IE中进行查看</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153711-02402a257b3b44f3b723f1c05a31e1ee.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153712-cb81d925e0b44ba49054e261dec159f0.png" alt="image" width="244" height="236" border="0" /></a></p>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>我们看到默认情况下，完成这个页面其实要执行8个请求。但经过简单的处理（添加一行代码）之后，我们可以看到如下的效果</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153715-15d2ee3efbfd4060b1540c69280d1dd4.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153716-f5096a3e4cb6409ea48a570bb9077682.png" alt="image" width="244" height="236" border="0" /></a></p>
<p>而且如果你细心看的话，在这个页面中请求的javascript文件似乎看起来经过了特殊的处理（路径比较特殊）。那么，这是如何实现的呢？</p>
<p>原来,在MVC项目中,默认会有一个所谓的BundleConfig的类，它提供了一个方法RegisterBundles，如下所示</p>
<pre class="csharpcode"><span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Optimization;

<span class="kwrd">namespace</span> MvcApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> BundleConfig
    {
        <span class="rem">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterBundles(BundleCollection bundles)
        {
            bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/jquery"</span>).Include(
                        <span class="str">"~/Scripts/jquery-{version}.js"</span>));

            bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/jqueryui"</span>).Include(
                        <span class="str">"~/Scripts/jquery-ui-{version}.js"</span>));

            bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/jqueryval"</span>).Include(
                        <span class="str">"~/Scripts/jquery.unobtrusive*"</span>,
                        <span class="str">"~/Scripts/jquery.validate*"</span>));

            <span class="rem">// Use the development version of Modernizr to develop with and learn from. Then, when you're</span>
            <span class="rem">// ready for production, use the build tool at http://modernizr.com to pick only the tests you need.</span>
            bundles.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/bundles/modernizr"</span>).Include(
                        <span class="str">"~/Scripts/modernizr-*"</span>));

            bundles.Add(<span class="kwrd">new</span> StyleBundle(<span class="str">"~/Content/css"</span>).Include(<span class="str">"~/Content/site.css"</span>));

            bundles.Add(<span class="kwrd">new</span> StyleBundle(<span class="str">"~/Content/themes/base/css"</span>).Include(
                        <span class="str">"~/Content/themes/base/jquery.ui.core.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.resizable.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.selectable.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.accordion.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.autocomplete.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.button.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.dialog.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.slider.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.tabs.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.datepicker.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.progressbar.css"</span>,
                        <span class="str">"~/Content/themes/base/jquery.ui.theme.css"</span>));

        }
    }
}</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>&nbsp;</p>
<p>这个方法会在Global.asax文件中调用</p>
<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Http;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> System.Web.Optimization;
<span class="kwrd">using</span> System.Web.Routing;

<span class="kwrd">namespace</span> MvcApplication1
{
    <span class="rem">// Note: For instructions on enabling IIS6 or IIS7 classic mode, </span>
    <span class="rem">// visit http://go.microsoft.com/?LinkId=9394801</span>

    <span class="kwrd">public</span> <span class="kwrd">class</span> MvcApplication : System.Web.HttpApplication
    {
        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            WebApiConfig.Register(GlobalConfiguration.Configuration);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            <strong>BundleConfig.RegisterBundles(BundleTable.Bundles);</strong>
            <span class="rem">//BundleTable.EnableOptimizations = false;//启用这一行，则使用Bundle的机制进行文件打包</span>
            AuthConfig.RegisterAuth();
        }
    }
}</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>&nbsp;</p>
<p>在具体的页面中，如果需要用到上述的脚本组合，则可以使用下面这样的语法来调用</p>
<p>@Scripts.Render("~/bundles/jqueryval")</p>
<p>&nbsp;</p>
<p>这就是所有的秘密。</p>
<p>那么，这个技术是不是只能使用在MVC中，在我们另外一种开发框架（ASP.NET Web Forms）中是否也可以使用呢？</p>
<p>答案是：可以的。而且这个技术，确实是最早就是用在ASP.NET Web Forms里面，只不过，因为这方面的文档较少，所以可能大家用的不多而已。下面是我作为演示用的一个简单的ASP.NET Web Forms的项目：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153719-4875ad192a584629b4e762f3fb3f4cb7.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153720-7d074ef983294a3c8ae211bd647c8e7a.png" alt="image" width="244" height="134" border="0" /></a></p>
<p>我们看到，在页面中，我们添加了三个脚本引用，这样的话，自然在打开页面的时候，需要单独请求这三个脚本文件。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153723-63f59b5844ea4c4198d2e5dc1d30fcfe.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153724-b1f475fb248a408d90bf9e491b63efdd.png" alt="image" width="244" height="236" border="0" /></a></p>
<p>我们是否可以将这三个文件合并成一个请求呢？请跟随我来进行如下的操作</p>
<p>首先，添加一个组件,这是微软官方发布的System.Web.Optimization，顾名思义，这就是为了优化网络开发用的</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153724-d4eae72d3f064e7eb53c724e6948bd4d.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153725-fb1c6de82e354ad59d9a6b52f06dda1f.png" alt="image" width="244" height="140" border="0" /></a></p>
<p>按照一般的惯例，我们在项目中添加一个文件，来进行Bundle的注册</p>
<pre class="csharpcode"><span class="kwrd">using</span> System.Web.Optimization;

<span class="kwrd">namespace</span> WebApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> BundleConfig
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterBundle(BundleCollection config)
        {
            config.Add(<span class="kwrd">new</span> ScriptBundle(<span class="str">"~/default"</span>).Include(<span class="str">"~/scripts/jquery-2.0.0.min.js"</span>, <span class="str">"~/scripts/knockout-2.2.1.js"</span>, <span class="str">"~/default.js"</span>));
        }
    }
}</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>&nbsp;</p>
<p>然后，我们修改Global.asax文件，添加如下的代码</p>
<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Web.Optimization;

<span class="kwrd">namespace</span> WebApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Global : System.Web.HttpApplication
    {

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start(<span class="kwrd">object</span> sender, EventArgs e)
        {
            BundleConfig.RegisterBundle(BundleTable.Bundles);
            BundleTable.EnableOptimizations = <span class="kwrd">true</span>;
        }

    }
}</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>最后，我们在页面上也做相应的修改，如下所示(请注意粗体部分）</p>
<pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplication1.Default" %&gt;</span>
<span class="asp"><strong>&lt;%@ Import Namespace="System.Web.Optimization" %&gt;</strong></span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <strong><span class="asp">&lt;%</span>= Scripts.Render(<span class="str">"~/default"</span>) <span class="asp">%&gt;</span></strong>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>很不错，我们现在可以查看一下页面运行起来的效果</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/29153725-f02c16e5bad34f128ba60d405e52ad63.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="image" src="http://images.cnitblog.com/blog/9072/201304/29153725-a3d02e37c5354f7c875dfb1aad27ad8e.png" alt="image" width="244" height="127" border="0" /></a></p>
<p>很明显，原先的三个请求，现在变成了一个请求。需要注意的是,如果我们去计算文件大小，这个合并之后的文件，体积会比之前三个文件体积总和略小一些。所以你可以理解为这里存在一定的压缩，但这个压缩比是不大的（尤其是原有的javascript文件本身就经过了压缩的情况下）。关于javascript文件或者css文件的压缩，后续会有专门的文章介绍。</p>
<p>上面的例子，演示的是javascript文件的合并。其实，css文件的合并也是类似的做法，区别在于要使用StyleBundle : <a href="http://msdn.microsoft.com/en-us/library/system.web.optimization.stylebundle.aspx">http://msdn.microsoft.com/en-us/library/system.web.optimization.stylebundle.aspx</a></p>
<p>&nbsp;</p>
<h1>总结</h1>
<p>本文介绍了网站优化的第一个原则（尽量减少请求数），我带领大家分析了为什么需要考虑这个原则，以及具体如何实现（包括在MVC和Web Forms的做法）</p>]]></description></item><item><title>定制WPF中的DataGrid控件支持对不同的实体类实现中文标题显示</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/04/09/3010972.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 09 Apr 2013 12:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/04/09/3010972.html</guid><description><![CDATA[<h2>问题提出：</h2> <p>这是今天被问到的一个问题。情况是这样的：</p> <p>我们都知道WPF中有一个用来显示列表数据的DataGrid控件，而且该控件具有一个AutoGenerateColumns 属性（默认为true)，它可以根据给定的数据，自动地设置列的标题，也就是说，我们可以根据需要读取不同的实体数据，然后绑定到控件上去，它自己知道该如何创建列，以及显示数据。</p> <p>这里的问题在于，我们的实体类定义通常都是英文的，例如下面是一个最简单的例子</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>DataGrid会自动为每个属性建立一个列，并且列标题设置为属性名称。例如下面这样：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/09204159-d0e6bd3ee3ff4462a2a50ca32578aa9b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/09204159-ee3ef1d00aab4769a7955c856704586a.png" width="660" height="214"></a></p>
<p>但是，美中不足的是，我们的用户更喜欢中文的标题。那么，我们是否能够以最小的代价，让这些标题能显示中文呢？</p>
<p>&nbsp;</p>
<h2>解决方案：</h2>
<p>首先，我联想到了MVC中的一个做法，就是需要给实体类添加属性描述，因为无论如何，我们需要有一个地方可以定义这些中文标题。幸运的是，我们可以直接使用内置的DataAnnotation的功能来实现，例如：</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        [Display(Name=<span class="str">"姓氏"</span>)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        [Display(Name=<span class="str">"名字"</span>)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>备注：这里要先引用System.ComponentModel.DataAnnotations 这个程序集。</p>
<p>&nbsp;</p>
<p>接下来，我们的问题就是，如何将这里定义好的Display的属性，读取到DataGrid的列标题处。我首先想到的是，能否通过定制ColumnHeaderStyle来实现，但经过一些努力，没有成功。如果有朋友对这个方案有补充，请不吝赐教。</p>
<p>我最后采用的方法是这样的，DataGrid有一个事件叫：AutoGeneratingColumn&nbsp; ，顾名思义，这个事件就是在列被创建出来之前触发的。我通过下面的代码实现了我们想要的功能。</p><pre class="csharpcode">        <span class="kwrd">private</span> <span class="kwrd">void</span> DataGrid_AutoGeneratingColumn_1(<span class="kwrd">object</span> sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var result = e.PropertyName;
            var p = (e.PropertyDescriptor <span class="kwrd">as</span> PropertyDescriptor).ComponentType.GetProperties().FirstOrDefault(x =&gt; x.Name == e.PropertyName);

            <span class="kwrd">if</span> (p != <span class="kwrd">null</span>)
            {
                var found = p.GetCustomAttribute&lt;DisplayAttribute&gt;();
                <span class="kwrd">if</span> (found != <span class="kwrd">null</span>) result = found.Name;
            }

            e.Column.Header = result;
        }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这样一来，我们看到的界面就是下面这样的啦</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/09204159-5cb304f6fd7746bba4385efef9e8c8aa.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/09204200-1083d460daf64fd1a38d96e1302f3566.png" width="660" height="223"></a></p>
<p>而且重要的，这个功能是完全通用的，不管日后想要换成什么样的实体类型，都可以通过定义Display这个Attributel来改变标题。</p>
<p>&nbsp;</p>
<p>最后，我还这个功能封装了一下，以便更加好的使用.我做了一个扩展控件，如下所示</p><pre class="csharpcode"><span class="kwrd">using</span> System.ComponentModel;
<span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Reflection;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> WpfApplication1
{
    <span class="kwrd">class</span> xGrid:DataGrid
    {
        <span class="kwrd">public</span> xGrid()
        {
            AutoGeneratingColumn += (o, e) =&gt;
            {
                var result = e.PropertyName;
                var p = (e.PropertyDescriptor <span class="kwrd">as</span> PropertyDescriptor).ComponentType.GetProperties().FirstOrDefault(x =&gt; x.Name == e.PropertyName);

                <span class="kwrd">if</span> (p != <span class="kwrd">null</span>)
                {
                    var found = p.GetCustomAttribute&lt;DisplayAttribute&gt;();
                    <span class="kwrd">if</span> (found != <span class="kwrd">null</span>) result = found.Name;
                }

                e.Column.Header = result;
            };
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这样的话，在项目中任何页面上我都可以直接像下面这样使用这个控件了。</p><pre class="csharpcode">&lt;Window x:Class=<span class="str">"WpfApplication1.MainWindow"</span>
        xmlns=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        xmlns:x=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        Title=<span class="str">"MainWindow"</span>
        xmlns:controls=<span class="str">"clr-namespace:WpfApplication1"</span>
        Height=<span class="str">"350"</span>
        Width=<span class="str">"525"</span>&gt;
    &lt;Grid&gt;
        <strong><font color="#ff0000">&lt;controls:xGrid ItemsSource=<span class="str">"{Binding}"</span>&gt;&lt;/controls:xGrid&gt;</font></strong>
    &lt;/Grid&gt;
&lt;/Window&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>一个distinct问题引发的思考</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/04/08/3008810.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 08 Apr 2013 12:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/04/08/3008810.html</guid><description><![CDATA[<p>今天被人问到这样一个问题，整理出来给大家也参考一下</p> <p>假设有如下这样一张表格：</p> <p><a href="http://images.cnitblog.com/blog/9072/201304/08203926-02fc0fd92bbe45fb97a7adf7d478dcd1.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203926-47cc2bdaf31e430f9fe1c3b63073b2e9.png" width="419" height="241"></a></p> <p>这里的数据，具有如下的特征：<font color="#000000"><strong>在一个DepartmentId中，可能会有多个Name，反之也是一样。就是说Name和DepartmentId是多对多的关系</strong></font>。</p> <p>&nbsp;</p> <p>现在想实现这样一个查询：<strong><font color="#ff0000">按照DepartmentID排完序之后（第一步），再获取Name列的不重复值（第二步），而且要保留在第一步后的相对顺序</font></strong>。以本例而言，<font color="#ff0000"><strong>应该返回三个值依次是：ACB</strong></font></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>我们首先会想到下面这样一个写法</p><pre class="csharpcode"><span class="kwrd">select</span> <span class="kwrd">distinct</span> name <span class="kwrd">from</span> Sample <span class="kwrd">order</span> <span class="kwrd">by</span> DepartmentId</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>从语义上说，这是很自然的。但是很可惜，这个语句根本无法执行，错误消息是：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/08203927-b88b3b8bbb4b476c93aaa5e6a0275981.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203927-1866f10c3c2642a09a8c168d53653b30.png" width="696" height="108"></a></p>
<p>这个错误的意思是，如果使用了DISTINCT(去重复值），则出现在OrderBy后面的字段，必须也出现在SELECT后面，但如果DepartmentID如果也真的出现在SELECT后面，显然是不会有重复值的，所以结果肯定也是不对的。</p><pre class="csharpcode"><span class="kwrd">select</span> <span class="kwrd">distinct</span> name,DepartmentId <span class="kwrd">from</span> Sample <span class="kwrd">order</span> <span class="kwrd">by</span> DepartmentId</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnitblog.com/blog/9072/201304/08203928-b18624a4935c4a8886abab13eba69827.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203928-e7f36ce0c7e64772b0666d00857f4f96.png" width="311" height="248"></a></p>
<p>&nbsp;</p>
<p>那么，既然DISINCT 与OrderBy结合起来用会有这个的一个问题，我们是否有可能变通一下，例如下面这样：</p><pre class="csharpcode"><span class="kwrd">SELECT</span> <span class="kwrd">distinct</span> a.Name
<span class="kwrd">FROM</span> (<span class="kwrd">select</span> <span class="kwrd">top</span> 100 <span class="kwrd">percent</span> name <span class="kwrd">from</span> Sample <span class="kwrd">order</span> <span class="kwrd">by</span> DepartmentId) a
</pre>
<p>想比较之前的写法，我们用到了子查询技术。同样从语义上看，仍热是很直观明了的。我想先按照DepartmentId进行排序, 然后再去重复值。但是返回到结果是下面这样的：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/08203928-3c021395bb2f4851bb5f087a741553d5.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203929-28f283f302954accbd03c271483e1fa3.png" width="286" height="179"></a></p>
<p>虽然确实去除了重复值，但返回的顺序却是不对的。我们希望是先按照DepartmentId排序之后，然后去除重复值，并且保留排序后的相对顺序。</p>
<p>为什么会出现上面这个结果呢？其实是因为DISTINCT本身是会做排序的，而且这个行为是无法更改的（下图的执行计划中可以看到这一点）。所以其实我们之前做的Order by在这里会失去意义。【实际上，如果观察ADO.NET Entity Framework等ORM工具中生成的类似的一个查询，它会自动丢弃Order by的设置】</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/08203929-8d4c521cca3f4240be0d59ca80f54c85.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203929-3199d4bdb109405cb1e1757decec31fd.png" width="1055" height="295"></a></p>
<p>&nbsp;</p>
<p>那么，这样的情况下，是不是就不可能实现需求了呢？虽然说，这个需求并不多见，绝大部分时候，DISTINCT作为最后一个操作，做一次排序是合乎情理的。</p>
<p>我是这样考虑到，既然DISTINCT的这个行为是内置的，那么是否可以绕过这个操作呢？最终我用的一个解决方案是：我能不能把每个Name都编上一个编号，例如有两个A的话，第一个A我为它编号为1，第二个编号为2，以此类推。然后，查询的时候，我先排序，然后筛选那些编号为1的Name，这样其实也就实现了去重复值了。</p>
<p>SQL Server 2005开始提供了一个<a href="http://msdn.microsoft.com/en-us/library/ms186734.aspx" target="_blank">ROW_NUMBER</a>的功能，结合这个功能，我实现了下面这样的查询：</p><pre class="csharpcode"><span class="kwrd">select</span> a.Name  <span class="kwrd">from</span> 
(<span class="kwrd">select</span> <span class="kwrd">top</span> 100 <span class="kwrd">percent</span>
Name,DepartmentId,ROW_NUMBER() <span class="kwrd">over</span>(partition <span class="kwrd">by</span> name <span class="kwrd">order</span> <span class="kwrd">by</span> departmentid) <span class="kwrd">row</span>
<span class="kwrd">from</span> Sample <span class="kwrd">order</span> <span class="kwrd">by</span> DepartmentId) a
<span class="kwrd">where</span> a.<span class="kwrd">row</span>=1
<span class="kwrd">order</span> <span class="kwrd">by</span> a.DepartmentId
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后，我得到了下面这样的结果，我推敲下来，这应该是符合了之前提到的这个需求的</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/08203930-d8b2b3c5070d492496510a4af8263c4a.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203930-9ef21f1afcdd414c9f0419771ce2f69a.png" width="371" height="179"></a></p>
<p>相比较而言，这个查询的效率会低一些，这个是可以预见的（可以通过下图看出一点端倪）。但如果需求是硬性的，那么牺牲一些性能也是不奇怪的。当然，我们可以再研究看看是否有更优的一些写法。无论如何，使用内置标准的实现，通常都是相对较快的。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201304/08203931-5b22f523e4c2449298922c13a36a3f53.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201304/08203932-560fa6651ade464c8f8352b5ae4863a5.png" width="1255" height="423"></a></p>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(5)——布局重用</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/03/29/2989593.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 29 Mar 2013 12:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/03/29/2989593.html</guid><description><![CDATA[<h2>内容概述</h2> <p>我去年写过几篇关于在WPF和Silverlight中实现可复用的设计的文章，分别如下，如果有兴趣地可以先参考一下</p> <ul> <li> <h5><a href="http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455393.html"><strong>可复用</strong>的WPF或者Silverlight应用程序和组件设计(1)——应用程序级别</a></h5> <li> <h5><a href="http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455560.html"><strong>可复用</strong>的WPF或者Silverlight应用程序和组件设计(2)——组件级别</a></h5> <li> <h5><a href="http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466957.html"><strong>可复用</strong>的WPF或者Silverlight应用程序和组件设计(3)——控件级别</a></h5> <li> <h5><a href="http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466963.html"><strong>可复用</strong>的WPF或者Silverlight应用程序和组件设计(4)——外观级别</a></h5></li></ul> <h5>今天要继续写第五篇的原因在于最近的一些思考，也是我被问到的一个问题：我们知道WPF中的布局控件有很多，例如Grid,StackPanel,Canvas等等，利用他们，编写一定的XAML定义，就可以设计出来足够灵活多样的界面。但这里会有一个问题，如果我们很多界面都很类似，例如有某种固定格式的布局要求，那么是否在每个界面上都应该去定义一次呢？</h5> <p>[备注]和前几篇文章不同的是，这一篇没有录制视频，因为我还是觉得文字的部分很重要。</p> <p>本文源代码可以通过 <a title="http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip" href="http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip">http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip</a>&nbsp; 下载</p> <p>&nbsp;</p> <h2>问题详细描述</h2> <p>想象一下下面这样一个示意图</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/29204630-4c10c1d586d5405a933c65671a843522.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204630-fa53cbce5ea94ac6a7e42d9dbd6a408f.png" width="244" height="166"></a></p> <p>如果只有一个界面的话，那么我们可以很简单地实现，如下面所示</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <strong><font color="#ff0000"><span class="attr">xmlns:extension</span><span class="kwrd">="clr-namespace:System.Windows.Extensions;assembly=WPFExtension"</span></font></strong>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">extension:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="True"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="80"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="100"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
        
        
        <span class="rem">&lt;!--顶部控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
        
        
        <span class="rem">&lt;!--主体控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
        
        <span class="rem">&lt;!--右侧控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
                        <span class="attr">Grid</span>.<span class="attr">RowSpan</span><span class="kwrd">="2"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<p>这个界面看起来是这样的：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/29204630-cd59e8aa678640849ec7c9aa744fd878.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204631-cf846d170ef64bd0aaa3cb98d9381118.png" width="244" height="164"></a> 
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>所以，我们完全可以做得出来。但是问题的关键在于，如果有很多窗口都是这样的布局，那么我们是否应该每个窗口都去这样定义？还是说能否从一定意义上实现布局重用：<strong><font color="#ff0000">能不能让这个Grid默认就有两行和两列呢？</font></strong></p>
<p>[备注] 上面的代码中，为了给Grid添加边框线，使用到了我以前写的一个扩展组件，可以通过这里了解如何使用：<a href="http://nuget.org/packages/WPFSilverlightExtension/">http://nuget.org/packages/WPFSilverlightExtension/</a></p>
<p>&nbsp;</p>
<h2>Windows Forms里面的做法</h2>
<p>很久以前，那时候还没有WPF，我们都使用Windows Forms这个技术来做界面。那时候，对于上面提到的这种布局重用的问题，有一个很简单的解决方案：窗体继承。</p>
<p>对于这一种技术，本文并不打算对此进行展开讨论，有兴趣的朋友可以参考MSDN：<a href="http://msdn.microsoft.com/en-us/library/aa983613(v=VS.71).aspx">http://msdn.microsoft.com/en-us/library/aa983613(v=VS.71).aspx</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>是否可以通过Style来实现对Grid行和列的定制</h2>
<p>虽然确实有很多人怀念Windows Forms那种经典的界面开发，但时光之轮总是催我们向前。回到现在我们在用的WPF这个技术，对于控件和界面重用，WPF提供了很强大的Style功能。所以，基于上面这样的需求，我们会很自然地想到是否可以通过Style来实现。</p><pre class="csharpcode">        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="Grid"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="ColumnDefinitions"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="100"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="RowDefinitions"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="80"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span></pre>
<p>如果能这样写，当然是很好的。但问题是，<strong><font color="#ff0000">你不能这样写</font></strong>。错误如下</p>
<p><br><a href="http://images.cnitblog.com/blog/9072/201303/29204631-1627cb10010348f6af7ee251738f9328.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204631-240207bd862c433cb04a6f0ffd81a9b2.png" width="644" height="77"></a></p>
<p>如果去查看Grid的类型定义，会发现这个属性确实只有get方法器</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnitblog.com/blog/9072/201303/29204632-be33a6c4dfce4eee88844e862c6a1fe4.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204632-3c3e3e7ef4e14bfa91e06f6cbc4ba0aa.png" width="644" height="169"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>是否可以通过对Grid进行扩展来实现行和列的定制</h2>
<p>一计不成，我们可以继续想办法。有着良好的面向对象素养的同学一定可以想到，那么要不就对Grid做一个扩展，默认提供行和列的定义，这样行不行呢？例如</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="kwrd">class</span> LayoutGrid:Grid
    {


        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnInitialized(System.EventArgs e)
        {
            <span class="kwrd">base</span>.OnInitialized(e);

            <span class="rem">//默认提供两行两列的实现</span>
            <span class="kwrd">base</span>.ColumnDefinitions.Add(<span class="kwrd">new</span> ColumnDefinition());
            <span class="kwrd">base</span>.ColumnDefinitions.Add(<span class="kwrd">new</span> ColumnDefinition() { Width = <span class="kwrd">new</span> System.Windows.GridLength(100) });

            <span class="kwrd">base</span>.RowDefinitions.Add(<span class="kwrd">new</span> RowDefinition() { Height = <span class="kwrd">new</span> System.Windows.GridLength(80) });
            <span class="kwrd">base</span>.RowDefinitions.Add(<span class="kwrd">new</span> RowDefinition());
        }
    }
}
</pre><pre class="csharpcode">然后，我们在界面上可以像下面这样使用。很明显，这样可以简化很多了。</pre><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">xmlns:extension</span><span class="kwrd">="clr-namespace:System.Windows.Extensions;assembly=WPFExtension"</span>
        <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:WpfApplicationSample"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
    
    
    <span class="kwrd">&lt;</span><span class="html">local:LayoutGrid</span> <span class="attr">extension:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--顶部控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>


        <span class="rem">&lt;!--主体控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--右侧控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
                        <span class="attr">Grid</span>.<span class="attr">RowSpan</span><span class="kwrd">="2"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ContentControl.Content</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">local:LayoutGrid</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这个方案的美中不足，在于使用者还是需要记住要在具体的内容控件上面设置Grid.Row，Grid.Column等相关信息，而且，如果他忘记写，或者没有按照规范写，实际上就没有实现界面的统一，因为你没有办法强制他必须写，或者怎么写。</p>
<p>要想实现界面的统一，就必须把这种可能改变界面的属性，从使用者的身边移开。</p>
<p>&nbsp;</p>
<h2>使用用户控件实现PlaceHolder式的控件模板</h2>
<p>既然直接扩展Grid并不能完整地实现我们的需求，我接下来想到是否可以使用用户控件来封装，而且为了让用户使用简单，同时也避免用户不按照规定使用，所以我借鉴了ASP.NET中的母版页(<a href="http://www.asp.net/web-forms/tutorials/master-pages" target="_blank">master page</a>)这样的技术，使用类似PlaceHolder这样的方式来实现了一个控件模板。</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.TemplateLayout"</span>
             <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
             <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
             <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
             <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
             <span class="attr">xmlns:extension</span><span class="kwrd">="clr-namespace:System.Windows.Extensions;assembly=WPFExtension"</span>
             <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
             <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
             <span class="attr">d:DesignWidth</span><span class="kwrd">="300"</span>
             <span class="attr">x:Name</span><span class="kwrd">="root"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">extension:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="True"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="80"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="100"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--顶部控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Content</span><span class="kwrd">="{Binding TopControl,ElementName=root}"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>


        <span class="rem">&lt;!--主体控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
                        <span class="attr">Content</span><span class="kwrd">="{Binding MainControl,ElementName=root}"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--右侧控件--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ContentControl</span> <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
                        <span class="attr">Grid</span>.<span class="attr">RowSpan</span><span class="kwrd">="2"</span>
                        <span class="attr">Content</span><span class="kwrd">="{Binding RightControl,ElementName=root}"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>需要注意的是，因为这里是定义一个控件模板，所以具体的内容控件是没有内容的，我们希望使用者可以后期再插入具体的内容。这里使用到了绑定的技术。为了支持绑定，我们在这个控件中添加了三个依赖属性，如下</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for TemplateLayout.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> TemplateLayout : UserControl
    {
        <span class="kwrd">public</span> TemplateLayout()
        {
            InitializeComponent();
        }




        <span class="kwrd">public</span> <span class="kwrd">object</span> TopControl
        {
            get { <span class="kwrd">return</span> (<span class="kwrd">object</span>)GetValue(TopControlProperty); }
            set { SetValue(TopControlProperty, <span class="kwrd">value</span>); }
        }

        <span class="rem">// Using a DependencyProperty as the backing store for TopControl.  This enables animation, styling, binding, etc...</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty TopControlProperty =
            DependencyProperty.Register(<span class="str">"TopControl"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">object</span>), <span class="kwrd">typeof</span>(TemplateLayout), <span class="kwrd">new</span> PropertyMetadata(<span class="kwrd">null</span>));





        <span class="kwrd">public</span> <span class="kwrd">object</span> MainControl
        {
            get { <span class="kwrd">return</span> (<span class="kwrd">object</span>)GetValue(MainControlProperty); }
            set { SetValue(MainControlProperty, <span class="kwrd">value</span>); }
        }

        <span class="rem">// Using a DependencyProperty as the backing store for MainControl.  This enables animation, styling, binding, etc...</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty MainControlProperty =
            DependencyProperty.Register(<span class="str">"MainControl"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">object</span>), <span class="kwrd">typeof</span>(TemplateLayout), <span class="kwrd">new</span> PropertyMetadata(<span class="kwrd">null</span>));





        <span class="kwrd">public</span> <span class="kwrd">object</span> RightControl
        {
            get { <span class="kwrd">return</span> (<span class="kwrd">object</span>)GetValue(RightControlProperty); }
            set { SetValue(RightControlProperty, <span class="kwrd">value</span>); }
        }

        <span class="rem">// Using a DependencyProperty as the backing store for RightControl.  This enables animation, styling, binding, etc...</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty RightControlProperty =
            DependencyProperty.Register(<span class="str">"RightControl"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">object</span>), <span class="kwrd">typeof</span>(TemplateLayout), <span class="kwrd">new</span> PropertyMetadata(<span class="kwrd">null</span>));


    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>那么，如何来使用这个模板控件呢？大致是下面这样的：</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>很显然，这样使用起来更加简洁方便，而且使用者只能往我们预先定义好的三个内容区域中去填充内容，而不可能因为错误的设置属性（或者忘记设置属性）而导致界面布局不一致。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/29204633-4c727be8279141b7b465b8e972fba67e.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204633-9233f93673ca416d9a6a3e79f3982ff8.png" width="244" height="164"></a></p>
<p>&nbsp;</p>
<p>看起来相当不错，几乎已经完全实现了我们的要求。我以前也就一直这样用，直到最近发现一个问题。</p>
<p>如果我们出于一些目的，希望给这些内容控件添加名称，以便在后台代码中访问到它。例如下面这样：</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
           <strong><font color="#ff0000"> <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span> <span class="attr">x:Name</span><span class="kwrd">="topTextBlock"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span></font></strong>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>看起来是一个很平常的修改，但你立即会发现，这会导致无法编译通过。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/29204634-af9a7ddb5aab40718fd82d8441ed4c48.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204634-db8f93fa3fb34db78ff38ee6c83274b7.png" width="644" height="124"></a></p>
<p>Cannot set Name attribute value 'topTextBlock' on element 'TextBlock'. 'TextBlock' is under the scope of element 'TemplateLayout', which already had a name registered when it was defined in another scope.</p>
<p>这个错误实在是让人捉摸不透，目前也没有找到合理的解释。可能的解释是这样：因为我们的TextBlock其实是嵌入到TemplateLayout中，而TemplateLayout默认会为内部的控件生成一个名称，所以就不允许再定义名称。</p>
<p>为此，我也找了很多资料，一个最接近的讨论在这里</p>
<p><a href="http://stackoverflow.com/questions/5758342/how-to-create-wpf-usercontrol-which-contains-placeholders-for-later-usage">http://stackoverflow.com/questions/5758342/how-to-create-wpf-usercontrol-which-contains-placeholders-for-later-usage</a></p>
<p>这个问题描述到了和本文比较接近的情况，而且也提到了如果假如名称，会出现错误。但是该文也没有可用的解决方案。</p>
<p>&nbsp;</p>
<p>针对这个问题，我做了不少研究，同时也找了一些朋友进行讨论。其中和<a href="http://weibo.com/waynebabywang" target="_blank">韦恩卑鄙</a> 的讨论中，他给了我一个启发，打开了我另外一个思路：<strong><font color="#ff0000">如果说定义名称是必须的，那么既然WPF内部的命名规范无法通过，那么是否可以通过自己的一种什么机制来定义名称呢</font></strong>？最终我确定使用<a href="http://msdn.microsoft.com/en-us/library/ms749011.aspx" target="_blank">附加属性</a>来实现了该功能。<strong>荣誉属于</strong><a href="http://weibo.com/waynebabywang" target="_blank"><strong>韦恩卑鄙</strong></a><strong>。</strong></p>
<p>&nbsp;</p>
<h2>通过附加属性来为控件添加名称</h2>
<p>我创建了如下这样一个类型，添加了一个附加属性，并且为控件查找提供了一个方法。
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p><pre class="csharpcode"><span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> LayoutExtension
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法用来获取控件</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;typeparam name="T"&gt;指定控件类型，例如TextBlock&lt;/typeparam&gt;</span>
        <span class="rem">/// &lt;param name="name"&gt;指定控件名称&lt;/param&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> T GetControl&lt;T&gt;(<span class="kwrd">string</span> name)
            <span class="kwrd">where</span> T : <span class="kwrd">class</span>
        {
            <span class="kwrd">return</span> controls.FirstOrDefault(t =&gt; t.Key == name).Value <span class="kwrd">as</span> T;
        }


        <span class="kwrd">private</span> <span class="kwrd">static</span> Dictionary&lt;<span class="kwrd">string</span>, DependencyObject&gt; controls;
        <span class="kwrd">static</span> LayoutExtension()
        {
            controls = <span class="kwrd">new</span> Dictionary&lt;<span class="kwrd">string</span>, DependencyObject&gt;();
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">string</span> GetName(DependencyObject obj)
        {
            <span class="kwrd">return</span> (<span class="kwrd">string</span>)obj.GetValue(NameProperty);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SetName(DependencyObject obj, <span class="kwrd">string</span> <span class="kwrd">value</span>)
        {
            obj.SetValue(NameProperty, <span class="kwrd">value</span>);

        }

        <span class="rem">// Using a DependencyProperty as the backing store for Name.  This enables animation, styling, binding, etc...</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty NameProperty =
            DependencyProperty.RegisterAttached(<span class="str">"Name"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">string</span>), <span class="kwrd">typeof</span>(LayoutExtension), <span class="kwrd">new</span> PropertyMetadata(<span class="kwrd">string</span>.Empty, (d, e) =&gt;
            {
                <span class="kwrd">if</span> (e.NewValue != <span class="kwrd">null</span>)
                {
                    var name = e.NewValue.ToString();

                    <span class="kwrd">if</span> (!controls.ContainsKey(name))
                        controls.Add(name, d);
                }
            }));

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>如何使用这个扩展呢？</p><pre class="csharpcode">
    <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span>
                       <span class="attr">local:LayoutExtension</span>.<span class="attr">Name</span><span class="kwrd">="topTextBlock"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后，如果需要在后台代码中访问这个控件，就可以大致像下面这样操作</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Media;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();

            Loaded += MainWindow_Loaded;
        }

        <span class="kwrd">void</span> MainWindow_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var txt = LayoutExtension.GetControl&lt;TextBlock&gt;(<span class="str">"topTextBlock"</span>);
            txt.Foreground = <span class="kwrd">new</span> SolidColorBrush(Colors.Red);

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnitblog.com/blog/9072/201303/29204635-3fdf7d412c904973b93801d44b40f28f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204635-5a085e5436f3474a8c030192ae0e880f.png" width="244" height="164"></a></p>
<p>&nbsp;</p>
<h2>如何更加方便地使用这个扩展？</h2>
<p>为了使得大家更加方便地使用这个扩展，我将其合并到了我之前写过的针对WPF和Silverlight的扩展包中，大家可以通过nuget package manager搜索wpfsilverlightextension下载安装这个扩展包</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/29204636-de8ecb49c55044be995663e7d77b2ccf.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/29204636-986fa0d800964adc8254fc669fb6fdf0.png" width="244" height="140"></a></p>
<p>目前这个扩展，既支持WPF，也支持Silverlight。可以免费使用。</p>
<p>如果是使用这个包的话，那么在导入名称空间的时候，我习惯用extension这个名称，所以在具体页面中用的时候，大致上是下面这样</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Top"</span>
                       <span class="attr">extension:LayoutExtension</span>.<span class="attr">Name</span><span class="kwrd">="topTextBlock"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.TopControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Main"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.MainControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout.RightControl</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">local:TemplateLayout</span><span class="kwrd">&gt;</span></pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>是否一定要使用这个扩展？</h2>
<p>看起来还不错，但是是否一定要使用这个扩展呢？并不见得。因为我之前就说过，我以前没有意识到这个Name会出问题，是因为我几乎大部分时候都没有命名这种需要。为什么呢？因为我们大部分时候都会使用mvvm这种模式进行WPF应用程序的开发，在这种情况下，我们是不会在代码中去访问到控件的。例如下面是一个较为真实的例子：</p><pre class="csharpcode">&lt;Page x:Class=<span class="str">"EmployeePage"</span>
      xmlns=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
      xmlns:x=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
      xmlns:mc=<span class="str">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
      xmlns:d=<span class="str">"http://schemas.microsoft.com/expression/blend/2008"</span>
      xmlns:local=<span class="str">"clr-namespace:SMSApplicationSample"</span>
      xmlns:extension=<span class="str">"clr-namespace:System.Windows.Extensions;assembly=WPFExtension"</span>
      xmlns:tk=<span class="str">"clr-namespace:Xceed.Wpf.Toolkit;assembly=WPFToolkit.Extended"</span>
      mc:Ignorable=<span class="str">"d"</span>
      d:DesignHeight=<span class="str">"300"</span>
      d:DesignWidth=<span class="str">"300"</span>
      Title=<span class="str">"EmployeePage"</span>&gt;

    &lt;Page.DataContext&gt;
        &lt;local:EmployeePageViewModel&gt;&lt;/local:EmployeePageViewModel&gt;
    &lt;/Page.DataContext&gt;

    &lt;tk:BusyIndicator 
        IsBusy=<span class="str">"{Binding IsBusy}"</span>
        BusyContent=<span class="str">"Data loading,pls wait..."</span>&gt;
       
        &lt;local:TemplateLayout&gt;
            &lt;local:TemplateLayout.Condition&gt;
                &lt;!--加载所有员工--&gt;
                &lt;DataGrid ItemsSource=<span class="str">"{Binding Employees}"</span>
                          SelectedItem=<span class="str">"{Binding CurrentEmployee,Mode=TwoWay}"</span>&gt;
                    &lt;!--通过前台的选择，TwoWay的方式可以将CurrentEmployee的更新告诉后台，并且去更新绑定了该属性的元素，这个机制就是所谓的依赖属性的通知功能--&gt;
                &lt;/DataGrid&gt;
            &lt;/local:TemplateLayout.Condition&gt;
            &lt;local:TemplateLayout.Result&gt;
                &lt;!--显示一个员工--&gt;
                &lt;ContentControl Content=<span class="str">"{Binding CurrentEmployee}"</span>&gt;
                    &lt;ContentControl.ContentTemplate&gt;
                        &lt;DataTemplate&gt;
                            &lt;Grid extension:GridHelper.ShowBorder=<span class="str">"True"</span>&gt;
                                &lt;Grid.RowDefinitions&gt;
                                    &lt;RowDefinition Height=<span class="str">"auto"</span>&gt;&lt;/RowDefinition&gt;
                                    &lt;RowDefinition Height=<span class="str">"auto"</span>&gt;&lt;/RowDefinition&gt;
                                    &lt;RowDefinition Height=<span class="str">"auto"</span>&gt;&lt;/RowDefinition&gt;
                                    &lt;RowDefinition Height=<span class="str">"auto"</span>&gt;&lt;/RowDefinition&gt;
                                &lt;/Grid.RowDefinitions&gt;
                                &lt;Grid.ColumnDefinitions&gt;
                                    &lt;ColumnDefinition Width=<span class="str">"100"</span>&gt;&lt;/ColumnDefinition&gt;
                                    &lt;ColumnDefinition Width=<span class="str">"*"</span>&gt;&lt;/ColumnDefinition&gt;
                                    &lt;ColumnDefinition Width=<span class="str">"100"</span>&gt;&lt;/ColumnDefinition&gt;
                                &lt;/Grid.ColumnDefinitions&gt;

                                &lt;Image Source=<span class="str">"{Binding Photo}"</span>
                                       Grid.Column=<span class="str">"2"</span>
                                       Grid.RowSpan=<span class="str">"4"</span>&gt;&lt;/Image&gt;

                                &lt;TextBlock Text=<span class="str">"FirstName:"</span>&gt;&lt;/TextBlock&gt;
                                &lt;TextBlock Text=<span class="str">"{Binding FirstName}"</span>
                                           Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

                                &lt;TextBlock Text=<span class="str">"LastName:"</span>
                                           Grid.Row=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;
                                &lt;TextBlock Text=<span class="str">"{Binding LastName}"</span>
                                           Grid.Row=<span class="str">"1"</span>
                                           Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

                                &lt;TextBlock Text=<span class="str">"Title:"</span>
                                           Grid.Row=<span class="str">"2"</span>&gt;&lt;/TextBlock&gt;
                                &lt;TextBlock Text=<span class="str">"{Binding Title}"</span>
                                           Grid.Row=<span class="str">"2"</span>
                                           Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

                                &lt;TextBlock Text=<span class="str">"Address:"</span>
                                           Grid.Row=<span class="str">"3"</span>&gt;&lt;/TextBlock&gt;
                                &lt;TextBlock Text=<span class="str">"{Binding Address}"</span>
                                           Grid.Row=<span class="str">"3"</span>
                                           Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

                            &lt;/Grid&gt;
                        &lt;/DataTemplate&gt;
                    &lt;/ContentControl.ContentTemplate&gt;

                &lt;/ContentControl&gt;
            &lt;/local:TemplateLayout.Result&gt;
            &lt;local:TemplateLayout.Action&gt;
                &lt;!--显示一些按钮，可以添加，删除，修改员工--&gt;
                &lt;StackPanel&gt;
                    &lt;Button Content=<span class="str">"New..."</span>
                            Command=<span class="str">"{Binding NewCommand}"</span>&gt;&lt;/Button&gt;
                    &lt;Button Content=<span class="str">"Update..."</span>
                            Command=<span class="str">"{Binding UpdateCommand}"</span>
                            CommandParameter=<span class="str">"{Binding CurrentEmployee}"</span>&gt;&lt;/Button&gt;
                    &lt;Button Content=<span class="str">"Delete..."</span>
                            Command=<span class="str">"{Binding DeleteCommand}"</span>&gt;&lt;/Button&gt;

                    &lt;Button Content=<span class="str">"Show Report..."</span>
                            Command=<span class="str">"{Binding ReportCommand}"</span>&gt;&lt;/Button&gt;
                &lt;/StackPanel&gt;
            &lt;/local:TemplateLayout.Action&gt;
        &lt;/local:TemplateLayout&gt;
    &lt;/tk:BusyIndicator&gt;
        
&lt;/Page&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>本文源代码可以通过 <a title="http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip" href="http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip">http://files.cnblogs.com/chenxizhang/WpfApplicationSample.zip</a>&nbsp; 下载</p>]]></description></item><item><title>使用网站作为WCF服务宿主的几种做法</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/03/28/2987698.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 28 Mar 2013 13:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/03/28/2987698.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一篇文章探讨使用网站作为WCF服务宿主的几种做法，我将从最基本的svc文件的方式，演化成为无svc文件的方式，并且在最后介绍REST与路由规则结合的做法。</p> <p>本文所讲解的WCF功能，是基于WCF 4.0这个版本。我所采用的开发工具是Visual Studio 2012. 本文范例代码可以通过 <a href="http://files.cnblogs.com/chenxizhang/Web-host-sample.zip">Web-host-sample.zip</a>&nbsp; 下载。</p> <p>本文不是WCF的入门文档，有关WCF的典型使用场景和一些基础知识，可以参考我之前的两篇文章</p> <ul> <li> <h4><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2085979.html">WCF技术的不同应用场景及其实现分析</a></h4></li> <li> <h4><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2086314.html">WCF技术的不同应用场景及其实现分析(续）</a></h4></li></ul> <p>&nbsp;</p> <h2>范例说明</h2> <p>本文所采用的范例是相当简单的，我已经定义的合约和服务如下</p><pre class="csharpcode">
<span class="kwrd">using</span> System.ServiceModel;


<span class="kwrd">namespace</span> Web
{
    [ServiceContract]
    <span class="kwrd">public</span> <span class="kwrd">interface</span> IHelloService
    {
        [OperationContract]
        <span class="kwrd">string</span> SayHello();
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloService : IHelloService
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> SayHello()
        {
            <span class="kwrd">return</span> <span class="str">"Hello,world"</span>;
        }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h2>基本做法(采用svc文件的方式）</h2>
<p>WCF 4.0以前的版本，我们都是采用svc文件作为服务的宿主文件。例如，我们可以定义如下这样一个HelloService.svc，其内容如下</p><pre class="csharpcode">&lt;%@ ServiceHost Service=<span class="str">"Web.HelloService"</span> %&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>需要注意的是，你在Visual Studio中无法直接添加一个空白的svc文件，我一般是选择Text File这个模板，但是在命名的时候，将其修改为svc后缀。如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214844-38f84c6dfe314324be822e3adc856149.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214845-766cdb2d3ba94990be2c8f57fbae93bf.png" width="244" height="170"></a></p>
<p>&nbsp;</p>
<p>定义好这个文件后，可以直接在浏览器中查看该服务的描述，如下图所示。此时表示该服务已经被正确地宿主了。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214846-69df27624e984a5e96800e82f974954f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214846-fe3e62e3197b4ce9b2cb015c3c8ca9d5.png" width="244" height="173"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>无svc文件的做法</h2>
<p>上面这个做法虽然不难，但每次都要手工创建那个svc文件，总是觉得有些多余。那么是否有办法免去这个步骤呢？WCF 4.0提供了这种可能性。</p>
<p>我们需要做的是，在配置文件中指定一个虚拟的文件路径，并且将其与服务进行关联起来。如下所示(请重点关心粗体部分）</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>

<span class="rem">&lt;!--</span>
<span class="rem">  For more information on how to configure your ASP.NET application, please visit</span>
<span class="rem">  http://go.microsoft.com/fwlink/?LinkId=169433</span>
<span class="rem">  --&gt;</span>

<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span>
                 <span class="attr">targetFramework</span><span class="kwrd">="4.5"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">httpRuntime</span> <span class="attr">targetFramework</span><span class="kwrd">="4.5"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>


  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
    
 
<strong>    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
                               <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceActivations</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">service</span><span class="kwrd">="Web.HelloService"</span>
             <span class="attr">relativeAddress</span><span class="kwrd">="MyService.svc"</span><span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceActivations</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">serviceHostingEnvironment</span><span class="kwrd">&gt;</span></strong>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>为了与上面的例子区分，我特意在这里定义relativeAddress的时候，用了不一样的名称。你没有看错，只需要这样定义就可以直接访问到MyService.svc，而不要求你实际去创建这个文件。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214846-037bbc3e4a8541a39f5cc7f187e93ea8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214847-338a97a41d0641c08494da0365138a56.png" width="244" height="173"></a></p>
<p>看起来挺不错的，但仍然有一点点美中不足就是，这个虚拟地址，必须有一个后缀名（而且推荐使用svc），对于一般的用户而言，可能并不是特别友好。是否有办法将这个地址进一步地简化呢？</p>
<p>对于标准的SOAP服务来说，应该是没有办法了。但是如果是REST服务，倒是有另外一个方法来实现。请继续阅读下面的说明。</p>
<p>&nbsp;</p>
<h2>REST与路由规则</h2>


<p>为了做演示，我将服务稍作修改，使得其成为所谓的RESTful的服务。请注意红色粗体部分。</p><pre class="csharpcode">
<span class="kwrd">using</span> System.ServiceModel;
<span class="kwrd">using</span> System.ServiceModel.Web;


<span class="kwrd">namespace</span> Web
{
    [ServiceContract]
    <span class="kwrd">public</span> <span class="kwrd">interface</span> IHelloService
    {
        [OperationContract]
  <strong><font color="#ff0000">      [WebGet]</font></strong>
        <span class="kwrd">string</span> SayHello();
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloService : IHelloService
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> SayHello()
        {
            <span class="kwrd">return</span> <span class="str">"Hello,world"</span>;
        }
    }
}</pre>
<p>&nbsp;</p>
<p>然后我们还需要添加有关的配置文件设置(请注意粗体部分）</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>

<span class="rem">&lt;!--</span>
<span class="rem">  For more information on how to configure your ASP.NET application, please visit</span>
<span class="rem">  http://go.microsoft.com/fwlink/?LinkId=169433</span>
<span class="rem">  --&gt;</span>

<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span>
                 <span class="attr">targetFramework</span><span class="kwrd">="4.5"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">httpRuntime</span> <span class="attr">targetFramework</span><span class="kwrd">="4.5"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>


  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>

<strong>    <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">name</span><span class="kwrd">="Web.HelloService"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">contract</span><span class="kwrd">="Web.IHelloService"</span>
                  <span class="attr">binding</span><span class="kwrd">="webHttpBinding"</span><span class="kwrd">&gt;&lt;/</span><span class="html">endpoint</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span></strong>


    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>

<strong><font color="#000000">      <span class="kwrd">&lt;</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">webHttp</span> <span class="attr">helpEnabled</span><span class="kwrd">="true"</span><span class="kwrd">&gt;&lt;/</span><span class="html">webHttp</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span></font></strong>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>


    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
                               <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceActivations</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">service</span><span class="kwrd">="Web.HelloService"</span>
             <span class="attr">relativeAddress</span><span class="kwrd">="MyService.svc"</span><span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceActivations</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">serviceHostingEnvironment</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>为了使用我们自己想要的地址（虚拟地址）来访问这个服务，我们可以结合路由规则来实现（这个也是WCF 4.0新增的特性）</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214848-4ed320182f6c4132b567f974d532b173.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214848-ce445f9e184a45e7b6d50f261bb283c9.png" width="244" height="169"></a></p>
<p>将如下代码添加到Global.asax文件中</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel.Activation;
<span class="kwrd">using</span> System.Web.Routing;

<span class="kwrd">namespace</span> Web
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Global : System.Web.HttpApplication
    {
        <span class="kwrd">private</span> <span class="kwrd">void</span> RegisterRoutes()
        {
            WebServiceHostFactory factory = <span class="kwrd">new</span> WebServiceHostFactory();
            RouteTable.Routes.Add(<span class="kwrd">new</span> ServiceRoute(<span class="str">"HelloService"</span>, factory,
               <span class="kwrd">typeof</span>(HelloService)));
  
        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start(<span class="kwrd">object</span> sender, EventArgs e)
        {
            RegisterRoutes();
        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Session_Start(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_BeginRequest(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_AuthenticateRequest(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Error(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Session_End(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_End(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>我们在这里是定义了一个路由规则，凡是请求HelloService这个虚拟路径的（注意，没有带任何后缀），就路由到我们的服务。在浏览器中我们可以看到效果如下</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214849-fcc50e1d94ce4b21bcd3f235035027c3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214850-f27919ddd9af417c89b7788f77658f07.png" width="244" height="173"></a></p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/28214850-e645874ae1094c76bf37d5b2d306dc89.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/28214850-d5504b5b264e49afb9ebc7b6b6f52106.png" width="244" height="173"></a></p>]]></description></item><item><title>如何使用我的博客电子书</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/03/25/2981406.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 25 Mar 2013 12:20:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/03/25/2981406.html</guid><description><![CDATA[<p>我这些年来积累的博客文章已经有超过1000多篇，为了更好地有利于大家进行阅读，我将其整理打包成了一本电子书。该书的好处在于可以完全离线阅读，而且不仅仅在桌面上，同时也完全支持在平板电脑，或者智能手机上面进行阅读。</p> <p><img style="float: right; display: inline" align="right" src="http://ww2.sinaimg.cn/large/64baafd9jw1e2zc3gdvhlj.jpg" width="240" height="180"  alt="" /></p> <p><strong><font color="#ff0000">哪里可以下载？</font></strong><a title="http://pan.baidu.com/share/link?shareid=387684&amp;uk=2483235255#0-tsina-1-80924-397232819ff9a47a7b7e80a40613cfe1" href="http://pan.baidu.com/share/link?shareid=387684&amp;uk=2483235255#0-tsina-1-80924-397232819ff9a47a7b7e80a40613cfe1" target="_blank">http://pan.baidu.com/share/link?shareid=387684&amp;uk=2483235255#0-tsina-1-80924-397232819ff9a47a7b7e80a40613cfe1</a></p> <p><strong><font color="#ff0000">如何在Windows 桌面中使用</font></strong></p> <p>可以下载一些免费的epub reader来使用，例如 <a title="http://www.bing.com/search?setmkt=en-US&amp;q=epub+reader" href="http://www.bing.com/search?setmkt=en-US&amp;q=epub+reader" target="_blank">http://www.bing.com/search?setmkt=en-US&amp;q=epub+reader</a></p> <p>推荐使用这个&nbsp; <a title="http://calibre-ebook.com/" href="http://calibre-ebook.com/">http://calibre-ebook.com/</a></p> <p><strong><font color="#ff0000">如何导入到平板电脑或者手机上面使用</font></strong></p> <p>从我的使用体验来说，我建议你导入到平板电脑（例如ipad）中阅读，因为这毕竟是一本书，屏幕大一些会看起来舒服一些。</p> <p>通过Itunes 导入epub文件到iPad的方法可以参考 <a title="http://coay.com/howto_ipad.php" href="http://coay.com/howto_ipad.php" target="_blank">http://coay.com/howto_ipad.php</a></p>]]></description></item><item><title>设计对浏览器更加友好的网站——整合搜索功能（针对Google Chrome）</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/03/23/2976651.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 23 Mar 2013 00:53:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/03/23/2976651.html</guid><description><![CDATA[<p>设计对浏览器友好的网站，是一个很大的话题。本篇文章想讨论一下的是，如何在Google Chrome中直接整合网站所带的搜索功能。</p> <p>很多网站都有搜索功能，例如以博客园的搜索中心地址是：<a title="http://zzk.cnblogs.com/" href="http://zzk.cnblogs.com/">http://zzk.cnblogs.com/</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085322-f1a03c3641ec47db91790d92206d7173.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085323-29b34e1981674d4fb050c1b03b9c097e.png" width="244" height="220"></a></p> <p>我们可以进入这个网页，然后输入关键字进行搜索，例如</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085331-de3a8071b73e4d4f9abffe7675fab611.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085334-421c05a11008493ba5f628ebf90f9e45.png" width="244" height="220"></a></p> <p>这没有任何问题，但有时候可能你会想，为什么每次都要输入地址，然后进入到搜索页面，然后再输入关键字才能搜索呢？有没有更加简单的方法？</p> <p>Google的Chrome浏览器在这方面有一些不错的创新，首先，它支持直接在地址栏输入内容，进行搜索，例如</p>  <p><a href="http://images.cnitblog.com/blog/9072/201303/23085338-2c68dc5d04064303aa7ead66daa16c92.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085339-caaf93fcf05a4110b08325d8a526802c.png" width="244" height="220"></a></p> <p>此时他会调用默认的搜索引擎（我的本机设置为Bing)进行搜索</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085343-da0db64b43934c4ab3e57f21fd49d632.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085345-4858b9c31c2c4eaa97b60122cf3e0828.png" width="244" height="220"></a></p> <p>默认的搜索引擎肯定只有一个，那么我们是否有办法添加更多的搜索引擎，并且用某种方式在地址栏直接搜索呢？</p> <p>在Google Chrome的设置页面中，你可以看到可以管理搜索引擎</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085347-932a77474fff4b0ea5b86a93e2e7e4a8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085348-15aef260ced8408bb093513d7a223e62.png" width="244" height="220"></a></p> <p>点击“管理搜索引擎”按钮可以看到如下的界面</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085350-7a44abdabd254e0e8b2df9db891855c9.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085352-596210980dd94b1f9244eec7c9fe27a3.png" width="244" height="220"></a></p> <p>如果我们希望能快速地访问博客园的搜索功能，可以在“其他搜索引擎”中添加一个定义</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085356-8526abe8c53345158dd30d092a785259.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085357-583b79bee9b94c11ba96aeeaa000a8c1.png" width="244" height="220"></a></p> <p>第一个参数是一个描述名称，第二个参数是你可能会在地址栏中输入的地址，第三个字符串是将要访问的搜索页面的地址，用%s表示你的搜索关键字。</p> <p>那么，这样定义好之后，如何使用它呢？</p> <p>你可以在地址栏输入zzk.cnblogs.com（通常会自动补齐的），然后注意看右侧会有一个提示“按Tab可通过博客园进行搜索”</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085402-6788989f920f41bfa9f4b0dc0d5e8c4b.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085403-3f8527937f6d432f9cbc5e031fcd36f8.png" width="244" height="220"></a></p> <p>我按下Tab键，然后输入要找的关键字，例如CLR</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085406-f7716da84e524ed4915a4fbb0d616fee.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085407-0d1381fca1c94fb3baa114bdb823a42a.png" width="244" height="220"></a></p> <p>回车之后就可以直接看到搜素结果了。</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085415-0157c7957f184fa48e143785546ac8df.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085417-fb294d8f72094428b5b1c332124bea71.png" width="244" height="220"></a></p> <p>这样看起来就好了很多，节省了我们一些时间，这是一个聪明的设计。</p> <p>再往深入里面想一下，这个做法是很好，但是如果要求所有人都去手工地添加这个搜索设置，可能也不是很方便。有没有更加智能的做法呢</p> <p>其实Google Chrome在设计上已经考虑了这个问题，如果我们的网站想自动地在Google Chrome中注册搜索引擎设置，可以参考这里的说明</p> <p><a title="http://www.chromium.org/tab-to-search" href="http://www.chromium.org/tab-to-search">http://www.chromium.org/tab-to-search</a></p> <p><a href="http://images.cnitblog.com/blog/9072/201303/23085425-0d22a4c997eb4d0f918e56fd3a03c969.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085427-aea8283d900e47929db0ac7076e7a72d.png" width="244" height="220"></a></p> <p>我们需要在搜索中心的页面的头部中，添加一个链接定义</p><pre>&lt;link type="application/opensearchdescription+xml" rel="search"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; href="url_of_osdd_file"/&gt;</pre><pre>然后设置一个文件内容</pre><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">OpenSearchDescription</span> <span class="attr">xmlns</span><span class="kwrd">="http://a9.com/-/spec/opensearch/1.1/"</span><span class="kwrd">&gt;</span>
 <span class="kwrd">&lt;</span><span class="html">ShortName</span><span class="kwrd">&gt;</span>Search My Site<span class="kwrd">&lt;/</span><span class="html">ShortName</span><span class="kwrd">&gt;</span>
 <span class="kwrd">&lt;</span><span class="html">Description</span><span class="kwrd">&gt;</span>Search My Site<span class="kwrd">&lt;/</span><span class="html">Description</span><span class="kwrd">&gt;</span>
 <span class="kwrd">&lt;</span><span class="html">Url</span> <span class="attr">type</span><span class="kwrd">="text/html"</span> <span class="attr">method</span><span class="kwrd">="get"</span> <span class="attr">template</span><span class="kwrd">="http://my_site/{searchTerms}"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">OpenSearchDescription</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<pre>&nbsp;</pre><pre>这里使用{searchTerms}代表要搜索的关键字。</pre><pre>这方面，很多网站都已经做到了，例如国外知名的问答社区stackoverflow.com 的定义是下面这样的：</pre><pre>&lt;link rel="search" type="application/opensearchdescription+xml" title="Stack Overflow" href="/opensearch.xml"&gt;</pre><pre><a href="http://images.cnitblog.com/blog/9072/201303/23085430-8c81b1c362c04954acc853520654eba8.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/23085430-d9dbc4bf6039459597366262ff02a802.png" width="244" height="220"></a></pre><pre>希望博客园的搜索中心也加上这样的功能，也希望更多的浏览器也提供这样的设计。</pre>]]></description></item><item><title>再谈CLR查找和加载程序集的方式</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/03/14/2959688.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 14 Mar 2013 09:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/03/14/2959688.html</guid><description><![CDATA[<p>这是一个老问题，以前也有朋友写过一些文章介绍，但可能还不是很全面。我也多次被人问到，这里结合案例再次谈谈，希望对大家有所帮助。</p> <p>本文范例代码可以通过这里下载 <a title="http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip" href="http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip">http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip</a><br></p> <p>根据程序集的特征，讨论这个问题，我们大致上有两个分类</p> <h1>没有做强名称签名的程序集</h1> <p>对于这种情况，CLR查找和加载程序集的方式如下</p> <ol> <li>程序的根目录</li> <li>根目录下面，与被引用程序集同名的子目录</li> <li>根目录下面被明确定义为私有目录的子目录</li></ol> <p>同时，这种情况下，如果有定义codebase，则codebase的优先级最高，而且如果codebase指定的路径找不到，则直接报告错误，不再查找其他目录</p> <p>&nbsp;</p> <h1>有做强名称签名的程序集</h1> <p>对于这种情况，CLR查找和加载程序集的方式如下</p> <ol> <li>全局程序集缓存</li> <li>如果有定义codebase，则以codebase定义为准，如果codebase指定的路径找不到，则直接报告错误</li> <li>程序的根目录</li> <li>根目录下面，与被引用程序集同名的子目录</li> <li>根目录下面被明确定义为私有目录的子目录</li></ol> <p>&nbsp;</p> <p>我们帮助大家更好地理解以上的说明，我准备用范例来做讲解。</p> <p>&nbsp;</p> <ol><!--EndFragment--></ol> <h1>1.准备基本范例</h1> <p>下面的范例演示了一个应用程序(MyApplication)，和一个类库（MyLibrary) ，MyApplication是引用了MyLibrary的。</p> <p><a href="http://images.cnitblog.com/blog/9072/201303/14171001-365ac314231a4d00af9b158dd3965b34.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171002-cb9bf4c46c4e48aabe493b0c9ed19c9a.png" width="244" height="134"></a></p> <p>MyLibrary中有一个TestClass类型，提供了一个简单的方法（SayHello）</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Threading.Tasks;

<span class="kwrd">namespace</span> MyLibrary
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> TestClass
    {
        <span class="kwrd">public</span> <span class="kwrd">void</span> SayHello()
        {
            <span class="rem">//这里为了演示方便，显示出来当前加载的程序集完整路径</span>
            Console.WriteLine(<span class="kwrd">this</span>.GetType().Assembly.Location);
            Console.WriteLine(<span class="str">"Hello,world"</span>);
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>在MyApplication中，我们就是简单地创建了这个类型的实例，然后调用方法。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Threading.Tasks;

<span class="kwrd">namespace</span> MyApplication
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            var c = <span class="kwrd">new</span> MyLibrary.TestClass();
            c.SayHello();

            Console.Read();
        }
    }
}
</pre>
<p>默认情况下，如果我们编译整个项目，那么MyLibrary.dll会被自动地复制到MyApplication的根目录，如下图所示</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171003-6c80af4e33b2402d9a61e7268c79286c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171003-94dfdb02d0394169b10263ba0791ecc9.png" width="244" height="168"></a></p>
<p>运行MyApplication.exe，我们能看到下面这样的输出</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171004-66bdbc72af0f44428365a96c679ba9a2.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171004-690a45ac8fc44550b99323a1e482bb7c.png" width="847" height="148"></a></p>
<p>我们可以很清楚地看到，当前加载的MyLibrary.dll是来自于MyApplication的根目录的。</p>
<p>&nbsp;</p>
<h1>2. 假如我们不想将MyLibrary.dll放在应用程序的根目录</h1>
<p>有时候，我们会希望单独存放MyLibrary.dll，那么第一种做法就是，直接在应用程序根目录下面建立一个与程序集同名的子目录，然后将程序集放进去。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171004-3c9c1cabee6142f48f139e3c8f373ba6.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171005-1617bf55daf642b3a54afc840c80487c.png" width="515" height="128"></a></p>
<p>我们注意到，根目录下面的MyLibrary.dll 被移动到了MyLibrary目录<br><a href="http://images.cnitblog.com/blog/9072/201303/14171005-01b86f9794ef484ab037acb038542510.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171005-9541ead4e78f4a4e96f324514dff6aac.png" width="515" height="162"></a></p>
<p>然后，我们再次运行MyApplication.exe，能看到下面这样的输出：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171007-50d3422c0d4b4963ae662562c3fd23c3.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171007-9538c0858882411c9990f0f7323f9286.png" width="903" height="130"></a></p>
<p>&nbsp;</p>
<h1>3.假如我们有很多程序集，希望统一放在一个目录</h1>
<p>第二步的方法虽然不错，但有一个问题，就是如果我们引用的程序集很多的话，就需要在根目录下面建立很多子目录。那么，有没有办法统一地将这些程序集放在一个目录中呢？</p>
<p>我们可以通过如下的方式，定义一个特殊的私有路径（PrivatePath）</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">assemblyBinding</span> <span class="attr">xmlns</span><span class="kwrd">="urn:schemas-microsoft-com:asm.v1"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">probing</span> <span class="attr">privatePath</span><span class="kwrd">="libs"</span><span class="kwrd">&gt;&lt;/</span><span class="html">probing</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">assemblyBinding</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>同时，我们将MyLibrary.dll 移动到libs这个子目录下面去</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171008-946b1be492e742beadff6f8a76861eac.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171008-24fa9728434146f2bce46d10b6794dec.png" width="515" height="170"></a></p>
<p>然后，我们再次运行MyApplication.exe，能看到下面这样的输出：</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171009-00d3eaca0bf84d58a967401038b5f27f.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171009-c2b3303e859e43418414846e775427bf.png" width="806" height="153"></a></p>
<p>&nbsp;</p>
<p>这也就是说，对于没有签名的程序集，CLR一般会按照如下的规则查找和加载程序集</p>
<ol>
<li>程序的根目录</li>
<li>根目录下面，与被引用程序集同名的子目录</li>
<li>根目录下面被明确定义为私有目录的子目录</li><!--EndFragment--></ol>
<p>但是，有一个例外</p>
<h1>4. codebase的设置是优先的，而且是排他的</h1>
<p>codebase是一个特殊的设置，我们可以在配置文件中明确地指定某个程序集的查找路径，这个规则具有最高的优先级，而且如果你做了设置，CLR就一定会按照你的设置去查找，如果找不到，它就报告失败，而不会继续查找其他路径。</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">assemblyBinding</span> <span class="attr">xmlns</span><span class="kwrd">="urn:schemas-microsoft-com:asm.v1"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">probing</span> <span class="attr">privatePath</span><span class="kwrd">="libs"</span><span class="kwrd">/&gt;</span>

      <span class="kwrd">&lt;</span><span class="html">dependentAssembly</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">assemblyIdentity</span> <span class="attr">name</span><span class="kwrd">="MyLibrary"</span>
                          <span class="attr">culture</span><span class="kwrd">="neutral"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">codeBase</span> <span class="attr">version</span><span class="kwrd">="1.0.0.0"</span>
                  <span class="attr">href</span><span class="kwrd">="CodeBase\MyLibrary.dll"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">dependentAssembly</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">assemblyBinding</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>







<p><a href="http://images.cnitblog.com/blog/9072/201303/14171009-1e864fa5c8d74d05bf0fef1e2c291b91.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171010-ee092531dd1844499973ee7ad57316fd.png" width="515" height="406"></a></p>
<p>&nbsp;</p>
<p>请注意，我们保留了libs目录和Mylibrary目录，而且根目录下面也保留了一个MyLibrary.dll。 实际上，当前我们一共有4个dll. 那么到底会加载哪一个呢？</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171010-1599103e3ec34012b3cce89959d0b97c.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171010-397d6c2f36f144f3a31b9c0461cac467.png" width="896" height="147"></a></p>
<p>这种情况下，如果codebase下面找不到MyLibrary.dll 会怎么样呢？</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171011-8acc96744bf144fbac7c600aac13d2d0.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171011-a342a8fa1f894554aff1b562c83b1839.png" width="1041" height="185"></a></p>
<p>我们发现他是会报告错误的，而不会查找其他目录的程序集。</p>
<p>&nbsp;</p>
<h1>5.如果有强名称签名会怎么样呢？</h1>
<p>对程序集进行强名称签名的好处是，可以将其添加到全局全局程序集缓存中。这样既可以实现程序集的共享，又可以从一定程度上提高性能。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171011-93cb52f509ff43cd8f7492abee1c484e.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171012-d1f00d89ff7a4e86bf1e2029e5a82f2c.png" width="710" height="231"></a></p>
<p>签名后，我们将其添加到全局程序集缓存中去</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171013-0bb02fd9a0b8409698fa23effaef8e41.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171013-739780ab622744f0ae4294776cf1cf15.png" width="928" height="240"></a></p>
<p>那么这种情况下，不管我们在应用程序根目录（或者下面的子目录）有没有MyLibrary.dll ，CLR都是尝试先从全局程序集缓存中查找和加载的。</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171014-2e03460127e443dda6034b9a167805fb.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171014-bb17a1dc58814d36b04ed94a1599bd1b.png" width="1047" height="152"></a></p>






<p>&nbsp;</p>
<p>需要注意的是，如果程序集是经过了强名称签名，则在定义codebase的时候，应该注明publicKeyToken</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">assemblyBinding</span> <span class="attr">xmlns</span><span class="kwrd">="urn:schemas-microsoft-com:asm.v1"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">probing</span> <span class="attr">privatePath</span><span class="kwrd">="libs"</span><span class="kwrd">/&gt;</span>

      <span class="kwrd">&lt;</span><span class="html">dependentAssembly</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">assemblyIdentity</span> <span class="attr">name</span><span class="kwrd">="MyLibrary"</span>
                          <span class="attr">publicKeyToken</span><span class="kwrd">="4a77fca346941a6c"</span>
                          <span class="attr">culture</span><span class="kwrd">="neutral"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">codeBase</span> <span class="attr">version</span><span class="kwrd">="1.0.0.0"</span>
                  <span class="attr">href</span><span class="kwrd">="CodeBase\MyLibrary.dll"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">dependentAssembly</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">assemblyBinding</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">runtime</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span></pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre>
<h1><span class="kwrd">总结</span></h1>
<p>本文通过实例讲解了CLR在查找和加载程序集的时候所遵循的一些规则，针对有强名称和没有强名称的程序集，这些规则略有不同。本文范例代码可以通过这里下载 <a title="http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip" href="http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip">http://files.cnblogs.com/chenxizhang/AssemblyMatchDemoSolution.zip</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>相关问题</h1>
<p>本文还没有涵盖到的另外两个特殊情况，在日常工作中不多见，大家有兴趣可以再找些资料研读。</p>
<p>1.在目录中查找的时候，如果dll查找不到，则会尝试查找同名的exe</p>
<p>2.如果程序集带有区域性，而不是语言中立的，则还会尝试查找以语言区域命名的子目录。</p>
<p>通常情况下，我们都就是程序集设置为语言中立的，所以不存在这个问题</p>
<p><a href="http://images.cnitblog.com/blog/9072/201303/14171014-2e1ae3cbf3244c429e1d0faef1bb4f0d.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnitblog.com/blog/9072/201303/14171015-b05ddd9be4f44f47b1bd2bc9b7be868c.png" width="434" height="463"></a></p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>使用javascript脚本增强SharePoint Survey(调查)的功能</title><link>http://www.cnblogs.com/chenxizhang/archive/2013/01/03/2842901.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 03 Jan 2013 06:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2013/01/03/2842901.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲我通过实例讲解了SharePoint中的Survey的基本功能（包括如何创建，如何使用等），并且重点讲解了如何通过脚本（具体来说是使用javascript脚本）来定制Survey的一些特殊效果，例如限定多选项的选择个数等等。</p> <p>学习本视频，除了解决具体的这个问题之外，还可以对于SharePoint功能定制有更好的思路和理解。</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><embed src="http://www.tudou.com/v/wWS7Umo3ilQ/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h2>示例代码</h2><pre class="csharpcode">&lt;script src=<span class="str">"../../SiteAssets/jquery-1.8.3.min.js"</span>&gt;&lt;/script&gt;
&lt;script type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"input[type=checkbox]"</span>).click(<span class="kwrd">function</span> () {
                <span class="rem">//如果用户尝试选中</span>
                <span class="kwrd">if</span> (<span class="kwrd">this</span>.<span class="kwrd">checked</span>) {
                    <span class="rem">//判断当前是否同名的组中是否有选中两个</span>
                    <span class="kwrd">var</span> table = $(<span class="kwrd">this</span>).parents(<span class="str">"table"</span>).first();

                    <span class="kwrd">if</span> ($(<span class="str">"input[type=checkbox]:checked"</span>,table).length == 3) {
                        alert(<span class="str">"只能最多选择两个选项"</span>);
                        <span class="kwrd">this</span>.<span class="kwrd">checked</span> = <span class="kwrd">false</span>;
                    }
                }
            });
        });
        
&lt;/script&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>牛刀小试：使用Reactive Extensions（Rx），一行代码实现多线程任务执行规定时间后自动停止</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/09/19/2694062.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 19 Sep 2012 09:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/09/19/2694062.html</guid><description><![CDATA[<h1>内容摘要：</h1> <p>这是之前有一个朋友项目中实际遇到的问题：在一个窗口中，希望点击某个按钮后（或者同类操作），播放一个警告的声音，很显然，这个音频播放是用异步来实现。但又希望播放一段时间后，自动地停止播放。</p> <p>这个问题要说难也不是很难，我们无非是要想办法做一个计时，到达规定时候（例如5秒）后，强制地将线程结束掉。问题出在如何写较为理想些。</p> <p>&nbsp;</p> <h1>问题分析：</h1> <p>播放音频本身不难，而且在WPF中，音频播放默认就是异步的，根本不需要我们单独去启动线程。代码大致如下</p><pre class="csharpcode">                var player = <span class="kwrd">new</span> SoundPlayer();
                player.SoundLocation = <span class="str">"bell.wav"</span>;
                player.PlayLooping();</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这里的player一般会有两个方法：Play 和PlayLooping。前者是播放一次，后者是一直播放。但他们都是异步执行的。</p>
<p>如果需要同步执行，则倒是需要调用PlaySync，考虑到播放音频可能需要的时间较长，一般是不建议用同步的方式的。</p>
<p>而player本身有一个Stop方法，可以终止播放（同时也会将线程关闭或者归还到线程池）。</p>
<p>所以，问题的关键就在于，如何在规定的时间后，调用player.Stop方法。</p>
<h1>常规做法：</h1>
<p>从最简单粗暴的角度出发，我们可以用一个定时器，定时一定时间（例如5秒钟），到了这个时间，就调用player.Stop方法，并且将定时器也停止掉。（所以其实这个定时器只会被触发一次，我们用它的目的只是希望它能在5秒钟后被唤醒起来做事情）</p><pre class="csharpcode">            var player = <span class="kwrd">new</span> SoundPlayer();
            player.SoundLocation = <span class="str">"bell.wav"</span>;

            var timer = <span class="kwrd">new</span> DispatcherTimer(TimeSpan.FromSeconds(5), DispatcherPriority.Normal, (source, args) =&gt;
            {
                player.Stop();
                ((DispatcherTimer)source).Stop();

            }, <span class="kwrd">this</span>.Dispatcher);

            timer.Start();
            player.PlayLooping();</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>看起来怎么样呢？问题肯定是解决了。但是有没有更好的方法呢？</p>
<p>&nbsp;</p>
<h1>引入Reactive Extensions:</h1>
<p>我联想到之前我正好在研究Reactive Extensions（简称Rx），这是微软提供的一个针对异步和事件处理的增强框架。它的官方地址在：<a href="http://msdn.microsoft.com/en-us/data/gg577609.aspx">http://msdn.microsoft.com/en-us/data/gg577609.aspx</a> ，目前最新的版本是2.0.</p>
<p>Reactive Extensions提供了一种全新的视角，让我们来处理事件，和异步任务。它首先是对异步处理和事件进行了一些包装，然后，它的核心是，通过Obserable和Observer的机制，实现所谓响应式的编程体验。最后，它结合Linq，提供了语法上面的极大便利。</p>
<p>我对Reactive Extensions的研究也还算不上透彻，逐渐会有一些更多的分享出来吧。这个问题正好遇到了，所以想到可能用Rx来做，代码会更加易于阅读，本质上肯定也是有一个等待的过程，但不用Timer去做了。</p>
<p>你可以直接在Visual Studio中导入几个Rx的Package</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201209/201209191736551917.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201209/201209191736554774.png" width="1049" height="754"></a></p>
<h1>解决方案：</h1>
<p>我最终的解决方案如下。你觉得怎么样？是否有更加好的做法呢？</p><pre class="csharpcode">            Observable.Start&lt;SoundPlayer&gt;(() =&gt;
            {
                var player = <span class="kwrd">new</span> SoundPlayer();
                player.SoundLocation = <span class="str">"bell.wav"</span>;
                player.PlayLooping();

                <span class="kwrd">return</span> player;
            }).Delay(TimeSpan.FromSeconds(5)).Subscribe(player =&gt; player.Stop());</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">【备注】本来想要做一个视频的，但因为近日都在外讲课，嗓子要尽量保护。所以就通过文字写出来吧</pre><pre class="csharpcode">完整代码请通过这里下载 <a title="http://files.cnblogs.com/chenxizhang/WpfApplicationSample-rx.zip" href="http://files.cnblogs.com/chenxizhang/WpfApplicationSample-rx.zip">http://files.cnblogs.com/chenxizhang/WpfApplicationSample-rx.zip</a></pre><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>多个异步任务串行化的思考和研究(Silverlight, AJAX场景)</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/09/18/2690469.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 18 Sep 2012 05:57:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/09/18/2690469.html</guid><description><![CDATA[<h1>内容摘要</h1> <p>异步编程在我们日常的开发工作中经常遇到的场景。现在的应用程序，很难说不需要进行异步的一些任务。例如网络服务的调用。典型的情况就在于Silverlight和AJAX场景中。</p> <p>一个异步任务的执行，可能很简单，.NET有大约4种所谓的异步编程模型，最常见的是基于回调的方式。每个异步任务，都是独立的一个线程，这些任务之间，默认情况下不会有依赖，也不会有先后顺序的概念的。他们一般是同时发出去的请求，然后根据具体每个任务的情况，会逐渐返回结果。但这里有一个情况就是，他们返回结果的时间是不可预期的。</p> <p>但是如果我们需要有多个异步任务，而且这些任务之间本身存在一定的先后次序，例如A先执行完，然后才能执行B，甚至A的结果要作为B的输入。那么这个时候应该怎么做呢？</p> <p>在.NET内部的实现中，可以通过在任务之间互相嵌套的方式简单地实现，但其代码向当地不易于阅读和扩展。</p> <p>为此，我们做了一些封装和改进。本次演讲，我首先讲解了默认的一些实现方式，然后着重演示了两种扩展</p> <p>1.使用AsyncTaskFactory 这个组件 <a href="http://nuget.org/packages/AsyncTaskFactory">http://nuget.org/packages/AsyncTaskFactory</a></p> <p>2.使用AsyncCTP这个组件：<a href="http://www.microsoft.com/en-us/download/details.aspx?id=9983">http://</a><a href="http://www.microsoft.com/en-us/download/details.aspx?id=9983">www.microsoft.com/en-us/download/details.aspx?id=9983</a></p> <p>本次演讲的最后，还讲解了如何在AJAX应用中使用队列的方式来实现多个异步任务的串行化。</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>讲义地址</h1> <p><a title="http://sdrv.ms/Sw7ELi" href="http://sdrv.ms/Sw7ELi">http://sdrv.ms/Sw7ELi</a></p> <p>&nbsp;</p> <h1>视频地址</h1> <p><embed src="http://www.tudou.com/v/5CAiXEAjvGM/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <h1>演示代码：</h1> <p>完整源代码请通过这里下载：<a title="http://files.cnblogs.com/chenxizhang/AsyncQueueSample.zip" href="http://files.cnblogs.com/chenxizhang/AsyncQueueSample.zip">http://files.cnblogs.com/chenxizhang/AsyncQueueSample.zip</a> （需要Visual Studio 2010+Silvelight 4.0 Toolkit)</p> <p><font color="#ff0000">请结合视频理解代码</font></p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">服务代码</span></pre><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Services;
<span class="kwrd">using</span> System.Threading;

<span class="kwrd">namespace</span> AsyncQueueSample.Web
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 这个例子用来演示多个异步任务的串行化，这里只是简单地模拟了一个长时间执行的方法，使用线程休眠</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 时间：2012年9月</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [WebService(Namespace = <span class="str">"http://tempuri.org/"</span>)]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(<span class="kwrd">false</span>)]
    <span class="rem">// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. </span>
    [System.Web.Script.Services.ScriptService]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleWebService : System.Web.Services.WebService
    {

        [WebMethod]
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld()
        {

            Thread.Sleep(5000);
            <span class="kwrd">return</span> <span class="str">"Hello World"</span>;
        }


        [WebMethod]
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld2()
        {

            Thread.Sleep(2000);
            <span class="kwrd">return</span> <span class="str">"Hello World 2"</span>;

        }

        [WebMethod]
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld3()
        {

            Thread.Sleep(2000);
            <span class="kwrd">return</span> <span class="str">"Hello World 3"</span>;

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd">界面代码</span></pre><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Client;
<span class="kwrd">using</span> System.Threading.Tasks;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> AsyncQueueSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 这个例子演示了如何实现多个异步任务的串行化</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 时间：2012年9月</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
        }


        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这是常规的并行方式，多个异步调用彼此是没有关联的，同时发出请求</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btASync_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> localhost.SampleWebServiceSoapClient();
            proxy.HelloWorldCompleted += (o, a) =&gt; { MessageBox.Show(a.Result); };
            proxy.HelloWorldAsync();<span class="rem">//发出异步请求</span>

            proxy.HelloWorld2Completed += (o, a) =&gt; { MessageBox.Show(a.Result); };
            proxy.HelloWorld2Async();


        }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这是常规实现的串行方式，在任务之间手工实现顺序，耦合性很高</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btNormal_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> localhost.SampleWebServiceSoapClient();
            proxy.HelloWorldCompleted += (o, a) =&gt;<span class="rem">//第一个任务的回调</span>
            {
                MessageBox.Show(a.Result);

                proxy.HelloWorld2Completed += (o1, a1) =&gt;<span class="rem">//第二个任务的回调</span>
                {
                    MessageBox.Show(a1.Result);

                    proxy.HelloWorld3Completed += (o2, a2) =&gt;
                    {
                        MessageBox.Show(a2.Result);
                    };

                    proxy.HelloWorld3Async();

                };

                proxy.HelloWorld2Async();
            };

            proxy.HelloWorldAsync();
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 使用AsyncTaskFactory改进的做法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btAsyncTaskFactory_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> localhost.SampleWebServiceSoapClient();
            var task1 = <span class="kwrd">new</span> AsyncAction(<span class="str">"task 1"</span>);
            task1.SetAction(() =&gt;
            {
                proxy.HelloWorldCompleted += (o, a) =&gt; { MessageBox.Show(a.Result); task1.OnCompleted(); };
                proxy.HelloWorldAsync();
            });

            var task2 = <span class="kwrd">new</span> AsyncAction(<span class="str">"task 2"</span>);
            task2.SetAction(() =&gt;
            {
                proxy.HelloWorld2Completed += (o, a) =&gt; { MessageBox.Show(a.Result); task2.OnCompleted(); };
                proxy.HelloWorld2Async();
            });


            var task3 = <span class="kwrd">new</span> AsyncAction(<span class="str">"task 3"</span>);
            task3.SetAction(() =&gt;
            {
                proxy.HelloWorld3Completed += (o, a) =&gt; { MessageBox.Show(a.Result); task3.OnCompleted(); };
                proxy.HelloWorld3Async();
            });


            var runner = <span class="kwrd">new</span> AsyncActionRunner(task1, task3, task2);
            runner.Execute();
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 使用AsyncCTP改进的做法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        async <span class="kwrd">private</span> <span class="kwrd">void</span> btAsyncCTP_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> localhost.SampleWebServiceSoapClient() <span class="kwrd">as</span> localhost.SampleWebServiceSoap;

            var result1 = await Task&lt;localhost.HelloWorldResponse&gt;.Factory.FromAsync(
                proxy.BeginHelloWorld(<span class="kwrd">new</span> localhost.HelloWorldRequest(), <span class="kwrd">null</span>, <span class="kwrd">null</span>),
                proxy.EndHelloWorld);

            MessageBox.Show(result1.Body.HelloWorldResult);

            var result3 = await Task&lt;localhost.HelloWorld3Response&gt;.Factory.FromAsync(
                proxy.BeginHelloWorld3(<span class="kwrd">new</span> localhost.HelloWorld3Request(), <span class="kwrd">null</span>, <span class="kwrd">null</span>),
                proxy.EndHelloWorld3);
            MessageBox.Show(result3.Body.HelloWorld3Result);

            var result2 = await Task&lt;localhost.HelloWorld2Response&gt;.Factory.FromAsync(
                proxy.BeginHelloWorld2(<span class="kwrd">new</span> localhost.HelloWorld2Request(), <span class="kwrd">null</span>, <span class="kwrd">null</span>),
                proxy.EndHelloWorld2);
            MessageBox.Show(result2.Body.HelloWorld2Result);

        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 标准的RIA Service调用的做法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btRIAService_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> Web.SampleDomainContext();
            ctx.Load&lt;Web.Employee&gt;(ctx.GetEmployeesQuery(), result =&gt;
            {
                MessageBox.Show(result.Entities.FirstOrDefault().FirstName);
            }, <span class="kwrd">true</span>);

            MessageBox.Show(<span class="str">"加载完成"</span>);
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 使用AsyncCTP改进的RIA Service调用的做法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        async <span class="kwrd">private</span> <span class="kwrd">void</span> btAsyncCTPRIA_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> Web.SampleDomainContext();
            var result = await ctx.Load&lt;Web.Employee&gt;(ctx.GetEmployeesQuery()).AsTask();
            MessageBox.Show(result.Entities.FirstOrDefault().FirstName);



            MessageBox.Show(<span class="str">"加载完成"</span>);
        }

    }

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 对于RIA Service的一个扩展方法</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> OperationExtensions
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> Task&lt;T&gt; AsTask&lt;T&gt;(<span class="kwrd">this</span> T operation)
          <span class="kwrd">where</span> T : OperationBase
        {
            TaskCompletionSource&lt;T&gt; tcs =
              <span class="kwrd">new</span> TaskCompletionSource&lt;T&gt;(operation.UserState);

            operation.Completed += (sender, e) =&gt;
            {
                <span class="kwrd">if</span> (operation.HasError &amp;&amp; !operation.IsErrorHandled)
                {
                    tcs.TrySetException(operation.Error);
                    operation.MarkErrorAsHandled();
                }
                <span class="kwrd">else</span> <span class="kwrd">if</span> (operation.IsCanceled)
                {
                    tcs.TrySetCanceled();
                }
                <span class="kwrd">else</span>
                {
                    tcs.TrySetResult(operation);
                }
            };

            <span class="kwrd">return</span> tcs.Task;
        }
    }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>SharePoint 大局观（4）——从开发人员角度</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/07/17/2594976.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 17 Jul 2012 03:37:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/07/17/2594976.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>SharePoint是微软提供的一个企业级别的协作平台，目前最新的版本是2010，它的功能相当多，而且也相当灵活。为了帮助大家更好地，从相对较高的层面了解SharePoint 2010的体系结构，我这里分七讲来分别介绍。</p> <p>本节讲解如何从开发人员角度理解SharePoint这个产品。我将详细介绍</p> <ol> <li>如何配置在Windows 7上面的开发环境</li> <li>三种开发定制的方式及其使用场景</li> <li>如何理解解决方案（Solution）和功能（Feature）</li></ol> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="http://sdrv.ms/Lex2Um" href="http://sdrv.ms/Lex2Um">http://sdrv.ms/Lex2Um</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/zNOlU1dHVUw/">http://www.tudou.com/programs/view/zNOlU1dHVUw/</a></p> <p><embed src="http://www.tudou.com/v/zNOlU1dHVUw/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>SharePoint 2010 大局观（1～3）</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/06/27/2564598.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 26 Jun 2012 23:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/06/27/2564598.html</guid><description><![CDATA[<p> <h2> <p>内容摘要</p></h2></p> <p>SharePoint是微软提供的一个企业级别的协作平台，目前最新的版本是2010，它的功能相当多，而且也相当灵活。为了帮助大家更好地，从相对较高的层面了解SharePoint 2010的体系结构，我这里分七讲来分别介绍。</p> <p>&nbsp;</p> <p>这里可以浏览到首批三讲的内容。</p> <p>1. 简介和相关学习资源</p> <p>2.从基础技术框架角度</p> <p>3.从系统维护和管理角度</p> <p>&nbsp;</p> <p>【备注】如果大家希望第一时间尽快了解到有关的视频更新，可以关注我的<a href="http://weibo.com/chenxizhang">微薄</a>，因为视频都是先发布在土豆网，同时土豆网会自动同部到微博，最后才是我手工地来写一篇博客文章的</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="http://sdrv.ms/Lex2Um" href="http://sdrv.ms/Lex2Um">http://sdrv.ms/Lex2Um</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p>SharePoint 2010大局观（1）——简介和相关学习资源</p> <p><a href="http://www.tudou.com/programs/view/WrptDFkn_-U/">http://www.tudou.com/programs/view/WrptDFkn_-U/</a></p> <p><embed src="http://www.tudou.com/v/WrptDFkn_-U/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p>SharePoint 2010大局观（2）——从基础技术架构角度</p> <p><a href="http://www.tudou.com/programs/view/Ez-Fv1cvjgE/">http://www.tudou.com/programs/view/Ez-Fv1cvjgE/</a></p> <p><embed src="http://www.tudou.com/v/Ez-Fv1cvjgE/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p>SharePoint 2010大局观（3）——系统运维和管理角度</p> <p><a href="http://www.tudou.com/programs/view/2gInIMYgce4/">http://www.tudou.com/programs/view/2gInIMYgce4/</a></p> <p><embed src="http://www.tudou.com/v/2gInIMYgce4/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>揭秘应用程序池帐号ApplicationPoolIdentity</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/06/26/2563448.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 26 Jun 2012 04:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/06/26/2563448.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>在IIS 7和IIS 7.5中，我们可以为应用程序池设置一个特殊的Identity（用户标识）：ApplicationPoolIdentity。 那么这个标识到底是什么意思？它是具体什么身份呢？这一讲我将为你揭晓答案。</p> <p>这个标识设置会在应用程序池启动的时候，动态地产生一个用户身份，这个用户身份只具备对网站根目录的访问权限，这样可以进一步地保证服务器的安全性。</p> <p>作为管理员和开发人员，都需要了解这个设置的特性。</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p>无</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/9R-5nGHQLvg/">http://www.tudou.com/programs/view/9R-5nGHQLvg/</a></p> <p><embed src="http://www.tudou.com/v/9R-5nGHQLvg/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>网络资源定位(Url)的奥秘</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/06/26/2563002.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 26 Jun 2012 00:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/06/26/2563002.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>我们生活在一个网络的时代，在互联网冲浪的时候，我们会访问各种各样的网络资源，这些资源都需要通过一个地址来进行定位。这一讲，我将给大家讲解网络资源定位的概念，和一些实例，并且分析了静态化和动态化的比较。</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="http://sdrv.ms/Nu1VUv" href="http://sdrv.ms/Nu1VUv">http://sdrv.ms/Nu1VUv</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/ROEDihQH3Y0/">http://www.tudou.com/programs/view/ROEDihQH3Y0/</a></p> <p><embed src="http://www.tudou.com/v/ROEDihQH3Y0/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>演讲时经常用到的几个小工具介绍</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/06/25/2562716.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 25 Jun 2012 12:51:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/06/25/2562716.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>因为工作的关系，我经常会在各种场合做些演讲，包括给企业客户做培训。在我的演讲过程中，会用到一些小工具，经常被会观众问到。这一讲我整理出来给大家参考参考</p> <p>1.快速切换到演示环境（Windows Mobility Center)</p> <p>2.快速切换投影仪（Win+P)</p> <p>3.使用幻灯片（Presenter View）</p> <p>4.增强演示的效果（鼠标光圈，缩放工具）</p> <p>5.注重演讲技巧</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="http://sdrv.ms/Q23VWY" href="http://sdrv.ms/Q23VWY">http://sdrv.ms/Q23VWY</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/gdlVW-aVXOo/">http://www.tudou.com/programs/view/gdlVW-aVXOo/</a></p> <p><embed src="http://www.tudou.com/v/gdlVW-aVXOo/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99&amp;bid=05/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>为SharePoint 配置RBS（Remote Blob Storage) 特性</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/05/21/2511846.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 21 May 2012 08:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/05/21/2511846.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>默认情况下，SharePoint的所有内容，都是放在数据库中。（该数据库我们称之为内容数据库）。如果我们要存储的内容体积较大，则可能导致内容数据库急剧增大，管理将更加复杂。同时，将这些大的内容放在数据库，还将加重数据库存取数据以及网络传输数据的压力。</p> <p>在SharePoint 2007的时候，提供了一个所谓的EBS的扩展接口，存储提供商可以实现固定的接口来与SharePoint做一定意义上的扩展。请参考<a href="http://msdn.microsoft.com/zh-cn/library/bb802976(v=office.12).aspx">http://msdn.microsoft.com/zh-cn/library/bb802976(v=office.12).aspx</a></p> <p>由于在SharePoint 2007这个版本上，微软并没有提供官方的EBS实现，所以从事实上来说，EBS基本上只是属于理论上的一个可能性。而在SharePoint 2010中，这个功能真正地被释放出来，现在名称为RBS(Remote Blob Storage)，同时微软还提供了一个默认的实现：基于SQL Server 2008的Filestream功能来实现。</p> <p>这一讲我会探讨如何配置和使用SharePoint RBS特性。</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="http://sdrv.ms/Jr3x5E" href="http://sdrv.ms/Jr3x5E">http://sdrv.ms/Jr3x5E</a></p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/ggALepghs9k/">http://www.tudou.com/programs/view/ggALepghs9k/</a></p> <p><embed src="http://www.tudou.com/v/ggALepghs9k/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h2>参考链接</h2> <ol> <li>微软文档：<a href="http://technet.microsoft.com/zh-cn/library/ee748631.aspx">http://technet.microsoft.com/zh-cn/library/ee748631.aspx</a></li> <li>RBS下载链接：<a title="http://sdrv.ms/J7Xkpa" href="http://sdrv.ms/J7Xkpa">http://sdrv.ms/J7Xkpa</a></li></ol>]]></description></item><item><title>如何在ViewModel中正确地使用Timer（定时器）</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/05/05/2484637.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 05 May 2012 03:43:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/05/05/2484637.html</guid><description><![CDATA[<h2>内容摘要：</h2> <p>这是我在某个客户那边讲课的时候遇到一个小问题，在ViewModel中创建的一个Timer，并不会被自动停止，即便使用该ViewModel的View已经被关闭了。这个问题的原因在于Timer的特殊工作机制，它是运行在一个独立的工作线程的，除非明确地停止他，或者整个程序关闭了，它才会停止。这一讲中，我通过实例重现了这个问题，然后提供了一个可行的解决方法。</p> <p>&nbsp;</p> <h2>视频地址：</h2> <p><a href="http://www.tudou.com/programs/view/uO4b2j0N4L8/">http://www.tudou.com/programs/view/uO4b2j0N4L8/</a></p> <p><embed src="http://www.tudou.com/v/uO4b2j0N4L8/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <h2>示例代码：</h2> <p>备注：该范例使用了MvvmLight作为MVVM框架，请自行安装</p> <p><font color="#ff0000">Model：</font></p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.Linq;

<span class="kwrd">namespace</span> SilverlightApplicationSample
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> DataService
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> Customer[] GetCustomers()
        {

            Debug.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">"[{0}]正在调用数据服务"</span>,DateTime.Now));

            var rnd = <span class="kwrd">new</span> Random();
            <span class="kwrd">return</span> Enumerable.Range(1, rnd.Next(100)).Select(x =&gt; <span class="kwrd">new</span> Customer()
            {
                CompanyName = <span class="str">"Company "</span> + x.ToString()
            }).ToArray();

        }
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName { get; set; }
    }
}
</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><font color="#ff0000">ViewModel：</font></pre><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows.Threading;
<span class="kwrd">using</span> GalaSoft.MvvmLight;

<span class="kwrd">namespace</span> SilverlightApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 使用MVVMLight实现的MVVM ViewModel</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> CustomerWindowViewModel : ViewModelBase
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法也不会自动调用</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Cleanup()
        {
            <span class="kwrd">base</span>.Cleanup();

            timer.Stop();
        }

 

        DispatcherTimer timer = <span class="kwrd">null</span>;

        <span class="kwrd">public</span> CustomerWindowViewModel()
        {
            <span class="rem">//正常情况下的绑定</span>
            <span class="rem">//Customers = DataService.GetCustomers();</span>


            <span class="rem">//使用定时器调用服务</span>
            timer = <span class="kwrd">new</span> DispatcherTimer();

            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += (o, a) =&gt;
            {
                Customers = DataService.GetCustomers();
            };

            timer.Start();
        }

        <span class="kwrd">private</span> Customer[] _Customers;
        <span class="kwrd">public</span> Customer[] Customers
        {
            get { <span class="kwrd">return</span> _Customers; }
            set
            {
                <span class="kwrd">if</span> (_Customers != <span class="kwrd">value</span>)
                {
                    _Customers = <span class="kwrd">value</span>;
                    RaisePropertyChanged(<span class="str">"Customers"</span>);
                }
            }
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p><font color="#ff0000">View：</font></p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">controls:ChildWindow</span> <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationSample.CustomerWindow"</span>
                      <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
                      <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
                      <span class="attr">xmlns:controls</span><span class="kwrd">="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls"</span>
                      <span class="attr">Width</span><span class="kwrd">="400"</span>
                      <span class="attr">Height</span><span class="kwrd">="300"</span>
                      <span class="attr">Title</span><span class="kwrd">="CustomerWindow"</span>
                      <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:SilverlightApplicationSample"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">controls:ChildWindow.DataContext</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:CustomerWindowViewModel</span><span class="kwrd">&gt;&lt;/</span><span class="html">local:CustomerWindowViewModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">controls:ChildWindow.DataContext</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
          <span class="attr">Margin</span><span class="kwrd">="2"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span> <span class="attr">Height</span><span class="kwrd">="Auto"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>



        <span class="kwrd">&lt;</span><span class="html">ListBox</span> <span class="attr">ItemsSource</span><span class="kwrd">="{Binding Customers}"</span>
                 <span class="attr">DisplayMemberPath</span><span class="kwrd">="CompanyName"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">ListBox</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">x:Name</span><span class="kwrd">="CancelButton"</span>
                <span class="attr">Content</span><span class="kwrd">="Cancel"</span>
                <span class="attr">Click</span><span class="kwrd">="CancelButton_Click"</span>
                <span class="attr">Width</span><span class="kwrd">="75"</span>
                <span class="attr">Height</span><span class="kwrd">="23"</span>
                <span class="attr">HorizontalAlignment</span><span class="kwrd">="Right"</span>
                <span class="attr">Margin</span><span class="kwrd">="0,12,0,0"</span>
                <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">x:Name</span><span class="kwrd">="OKButton"</span>
                <span class="attr">Content</span><span class="kwrd">="OK"</span>
                <span class="attr">Click</span><span class="kwrd">="OKButton_Click"</span>
                <span class="attr">Width</span><span class="kwrd">="75"</span>
                <span class="attr">Height</span><span class="kwrd">="23"</span>
                <span class="attr">HorizontalAlignment</span><span class="kwrd">="Right"</span>
                <span class="attr">Margin</span><span class="kwrd">="0,12,79,0"</span>
                <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">controls:ChildWindow</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">Page：</pre><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> SilverlightApplicationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
        }

        

        <span class="kwrd">private</span> <span class="kwrd">void</span> Button_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var window = <span class="kwrd">new</span> CustomerWindow();
            window.Closed += (o, a) =&gt;
            {
                var vm = window.DataContext <span class="kwrd">as</span> CustomerWindowViewModel;
                vm.Cleanup();
            };

            window.Show();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(5)——行为级别</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466967.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 23 Apr 2012 11:24:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466967.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>上一讲中，我们探讨了在控件通过定义样式和模板，提供外观级别的复用性。外观级别指的是控件的一种显示效果，但行为是更加关注在用户交互这个层面。行为（Behavior）是在某个特定条件下触发(Trigger)的一个或者多个操作（Action)。行为大量使用在Expression Blend设计界面的过程中，他提供了无代码实现交互性的可能性，而且把很多常用的操作，封装起来，提供了更好的复用性。</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/FHLhaAlZwlA/">http://www.tudou.com/programs/view/FHLhaAlZwlA/</a></p> <p><embed src="http://www.tudou.com/v/FHLhaAlZwlA/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(4)——外观级别</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466963.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 23 Apr 2012 11:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466963.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>前面我花了三讲的时间，探讨了WPF和Silverlight可复用应用程序设计的三个层面，分别是应用程序级别，组件级别，控件级别。这一讲我们将一起来深入到控件内部，如果同一组控件，我们希望给他们提供不同的界面外观，以实现更加广泛的复用。</p> <p>在这一讲中，我们将重点探讨样式（Style)和模板(Template)，并且会结合资源(Resource)来讲课。</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/2MwjKwTijeE/">http://www.tudou.com/programs/view/2MwjKwTijeE/</a></p> <p><embed src="http://www.tudou.com/v/2MwjKwTijeE/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(3)——控件级别</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466957.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 23 Apr 2012 11:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/23/2466957.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我将探讨控件级别的复用性设计。我会讲解WPF和Silverlight中内置的控件，以及他们的一些内部组成部分和继承关系。</p> <p>WPF和Silverlight作为一种主要作为界面开发的开发框架，我们在使用他们做开发的时候，会用到各种各样的控件，或者出于某些原因，我们还会编写自定义控件或者用户控件。控件从一开始就是为了复用而设计的，这一讲我将带领大家更好地理解这一点。</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/IXywBFf6eyU/">http://www.tudou.com/programs/view/IXywBFf6eyU/</a></p> <p><embed src="http://www.tudou.com/v/IXywBFf6eyU/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(2)——组件级别</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455560.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 18 Apr 2012 08:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455560.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我继续展开讲解可复用的WPF或者Silverlight应用程序和组件设计，我将侧重在组件可复用设计这个层面。</p> <p>这一讲的内容将包括下面几点</p> <p><font color="#ff0000">如何实现组件级别的复用性</font></p> <ol> <li>动态加载<br />反射技术(Reflection)<br /><a href="http://www.cnblogs.com/chenxizhang/archive/2009/12/17/1626717.html">http://www.cnblogs.com/chenxizhang/archive/2009/12/17/1626717.html</a></li> <li>Prism框架<br /><a href="http://compositewpf.codeplex.com/">http://compositewpf.codeplex.com/</a><br />MEF(Managed Extensibility Framework)<br />Unity</li> <li>Windows Forms<br /><a href="http://www.cnblogs.com/chenxizhang/archive/2011/08/15/2139317.html">http://www.cnblogs.com/chenxizhang/archive/2011/08/15/2139317.html</a> </li></ol> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/my/tui/details/?id=1334737230829994">http://www.tudou.com/my/tui/details/?id=1334737230829994</a><br /><embed src="http://www.tudou.com/v/kkTX7SsHI94/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>可复用的WPF或者Silverlight应用程序和组件设计(1)——应用程序级别</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455393.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 18 Apr 2012 07:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/18/2455393.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲我讲解了什么是“可复用的设计”，以及具体的五个层面。</p> <ol> <li>应用程序级别的复用性</li> <li>组件级别的复用性</li> <li>控件复用性</li> <li>外观的复用性</li> <li>行为的复用性</li></ol> <p>然后，我详细展开介绍了在应用程序级别，如何实现WPF和Silverlight的可复用设计。WPF很类似于Windows Forms应用程序，可以通过在Main方法中添加参数的方式来实现可复用的设计，而Silverlight则比较特殊，因为它是嵌入在网页中，所以可以在网页里面提供参数的方式来实现可复用的设计</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/_IUdX7onK-U/">http://www.tudou.com/programs/view/_IUdX7onK-U/</a></p> <p><embed src="http://www.tudou.com/v/_IUdX7onK-U/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>使用Project Linker实现多个项目中代码文件的链接</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/14/2446926.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 14 Apr 2012 03:49:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/14/2446926.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>如果用过WPF和Silverlight开发的朋友一定会有这个体会，我们很多时候都希望他们之间能共享代码，因为毕竟很类似的。但因为运行时的不一样，默认情况下Silverlight是不能复用WPF的程序集的。以前的做法是我们可以通过手工添加链接的方式来实现，我这里有一篇博客说明这个做法（<a href="http://www.cnblogs.com/chenxizhang/archive/2010/10/09/1846781.html">http://www.cnblogs.com/chenxizhang/archive/2010/10/09/1846781.html</a>） ，这一讲我讲解了使用一个Project Linker工具来自动实现项目之间的链接。<br></p> <h2>工具下载地址</h2> <p><a title="http://visualstudiogallery.msdn.microsoft.com/5e730577-d11c-4f2e-8e2b-cbb87f76c044/" href="http://visualstudiogallery.msdn.microsoft.com/5e730577-d11c-4f2e-8e2b-cbb87f76c044/">http://visualstudiogallery.msdn.microsoft.com/5e730577-d11c-4f2e-8e2b-cbb87f76c044/</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/19aZQ1fp_jQ/">http://www.tudou.com/programs/view/19aZQ1fp_jQ/</a></p> <p><embed src="http://www.tudou.com/v/19aZQ1fp_jQ/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>理解Prism中MVVM的Command与CommandParameter</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/14/2446782.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 14 Apr 2012 01:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/14/2446782.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>接上一讲（<a href="http://www.cnblogs.com/chenxizhang/archive/2012/04/13/2446415.html">http://www.cnblogs.com/chenxizhang/archive/2012/04/13/2446415.html</a>），这一讲中我使用Prism做了演示和比较。Prism不仅仅是一个MVVM框架，它还包含其他的模块。在MVVM这个层面，Prism有些特殊性（Command绑定有特殊语法），这也是我这一讲的主要内容。</p> <p>&nbsp;</p> <h2>Prism的下载链接</h2> <p><a title="http://compositewpf.codeplex.com/" href="http://compositewpf.codeplex.com/">http://compositewpf.codeplex.com/</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/72Ag1kQt1RA/">http://www.tudou.com/programs/view/72Ag1kQt1RA/</a></p> <p><embed src="http://www.tudou.com/v/72Ag1kQt1RA/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h2>示例代码</h2><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WPFPrismMvvm.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:WPFPrismMvvm"</span>
        <span class="attr">xmlns:cmd</span><span class="kwrd">="clr-namespace:Microsoft.Practices.Prism.Commands;assembly=Microsoft.Practices.Prism"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:MainWindowViewModel</span> <span class="attr">UserName</span><span class="kwrd">="chenxizhang"</span><span class="kwrd">&gt;&lt;/</span><span class="html">local:MainWindowViewModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">TextBox</span> <span class="attr">Text</span><span class="kwrd">="{Binding UserName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">Content</span><span class="kwrd">="Show"</span>
                    <span class="attr">cmd:Click</span>.<span class="attr">Command</span><span class="kwrd">="{Binding ShowCommand}"</span>
                    <span class="attr">cmd:Click</span>.<span class="attr">CommandParameter</span><span class="kwrd">="{Binding UserName}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">using</span> Microsoft.Practices.Prism.ViewModel;
<span class="kwrd">using</span> Microsoft.Practices.Prism.Commands;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> WPFPrismMvvm
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> MainWindowViewModel:NotificationObject
    {

        <span class="kwrd">private</span> <span class="kwrd">string</span> _UserName;
        <span class="kwrd">public</span> <span class="kwrd">string</span> UserName
        {
            get { <span class="kwrd">return</span> _UserName; }
            set
            {
                <span class="kwrd">if</span> (_UserName != <span class="kwrd">value</span>)
                {
                    _UserName = <span class="kwrd">value</span>;
                    RaisePropertyChanged(<span class="str">"UserName"</span>);
                }
            }
        }



        <span class="kwrd">public</span> ICommand ShowCommand
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">new</span> DelegateCommand&lt;<span class="kwrd">string</span>&gt;(
                    (user) =&gt;
                    {
                        MessageBox.Show(user);
                    }, (user) =&gt; {
                        <span class="kwrd">return</span> !<span class="kwrd">string</span>.IsNullOrEmpty(user);
                    });

            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>MVVM实践中的Command与CommandParameter的使用</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/13/2446415.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 13 Apr 2012 14:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/13/2446415.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我在原先一篇博客文章（<a href="http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html">http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html</a>）基础上，针对MVVM中Command的使用做了演示和讲解。灵活的数据绑定，和命令绑定，是MVVM的核心精神，善加这两个功能，将大大地简化我们的应用程序开发，提供更加合理的代码架构。可以这么说，如果你在做WPF,Silverlight或者相关的开发，你是必须要了解MVVM的。但是至于你使用具体哪一个框架，倒不是那么重要的，他们基本都很类似。</p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a href="http://www.tudou.com/programs/view/SZXSes10MD0/">http://www.tudou.com/programs/view/SZXSes10MD0/</a></p> <p><embed src="http://www.tudou.com/v/SZXSes10MD0/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h2>示例代码</h2><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> GalaSoft.MvvmLight;
<span class="kwrd">using</span> GalaSoft.MvvmLight.Command;


<span class="kwrd">namespace</span> WpfMVVM
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> MainWindowViewModel:ViewModelBase
    {

        <span class="kwrd">private</span> <span class="kwrd">string</span> _UserName;
        <span class="kwrd">public</span> <span class="kwrd">string</span> UserName
        {
            get { <span class="kwrd">return</span> _UserName; }
            set
            {
                <span class="kwrd">if</span> (_UserName != <span class="kwrd">value</span>)
                {
                    _UserName = <span class="kwrd">value</span>;
                    RaisePropertyChanged(<span class="str">"UserName"</span>);
                }
            }
        }



        <span class="kwrd">public</span> ICommand ShowCommand
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">new</span> RelayCommand&lt;<span class="kwrd">string</span>&gt;(
                    (user) =&gt;
                    {
                        MessageBox.Show(user);
                    }, (user) =&gt; {
                        <span class="kwrd">return</span> !<span class="kwrd">string</span>.IsNullOrEmpty(user);
                    });

            }
        }
    }
}
</pre>
<p>&nbsp;</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfMVVM.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
        <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:WpfMVVM"</span>
        <span class="attr">Height</span><span class="kwrd">="350"</span>
        <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:MainWindowViewModel</span> <span class="attr">UserName</span><span class="kwrd">="chenxizhang"</span><span class="kwrd">&gt;&lt;/</span><span class="html">local:MainWindowViewModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.DataContext</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">TextBox</span> <span class="attr">Text</span><span class="kwrd">="{Binding UserName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">Button</span> <span class="attr">Content</span><span class="kwrd">="Show"</span>
                    <span class="attr">Command</span><span class="kwrd">="{Binding ShowCommand}"</span>
                    <span class="attr">CommandParameter</span><span class="kwrd">="{Binding UserName}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>Windows Desktop开发第一章（共四讲）</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/11/2442737.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 11 Apr 2012 09:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/11/2442737.html</guid><description><![CDATA[<p>这一章分四讲介绍了Windows Desktop开发的一些基本概念。分别是</p> <h2>第一讲：简介课程和第一章介绍</h2> <p>视频：</p> <p><a title="http://www.tudou.com/programs/view/5miggPYk_Dg/" href="http://www.tudou.com/programs/view/5miggPYk_Dg/">http://www.tudou.com/programs/view/5miggPYk_Dg/</a></p> <p><embed src="http://www.tudou.com/v/5miggPYk_Dg/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <h2>第二讲：Windows 桌面开发的技术</h2> <p><br>&nbsp;&nbsp;&nbsp; 1.GUI(图形化用户界面）:Windows Forms和WPF<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用于丰富的用户交互</p> <p>&nbsp;&nbsp;&nbsp; 2.CUI(命令行用户界面）:Console（控制台）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 有简单的用户交互，性能较好</p> <p>&nbsp;&nbsp;&nbsp; 思考的问题：<br>&nbsp;&nbsp;&nbsp; 当用户双击那个EXE的时候，到底是怎么运行起来的？</p> <p>&nbsp;&nbsp;&nbsp; 3.（无用户界面）Windows Service（服务）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 定时运行的，或者要长期运行的程序，无需用户的干预</p> <p>&nbsp;&nbsp;&nbsp; 4.WINDOWS 8会不会改变桌面开发的模式</p> <p>视频</p> <p><a title="http://www.tudou.com/programs/view/69NCSDR3MLE/" href="http://www.tudou.com/programs/view/69NCSDR3MLE/">http://www.tudou.com/programs/view/69NCSDR3MLE/</a></p> <p><embed src="http://www.tudou.com/v/69NCSDR3MLE/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h2>第三讲：Windows Forms与WPF的比较（GUI)</h2> <p><br>&nbsp;&nbsp;&nbsp; 程序结构<br>&nbsp;&nbsp;&nbsp; 呈现机制<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows Forms(GDI+,2D)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WPF(GDI+ 2D,DirectX 3D==&gt;Wrapper)<br>&nbsp;&nbsp;&nbsp; 编译机制<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 尤其注意界面元素的编译行为<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WPF:XAML=》BAML(Binary)</p> <p>视频</p> <p><a title="http://www.tudou.com/programs/view/Vm6F0EZeb74/" href="http://www.tudou.com/programs/view/Vm6F0EZeb74/">http://www.tudou.com/programs/view/Vm6F0EZeb74/</a></p> <p><embed src="http://www.tudou.com/v/Vm6F0EZeb74/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p><br>&nbsp;</p> <h1>第四讲：设计模式和框架在Windows Desktop中的应用</h1> <p><br>&nbsp;&nbsp;&nbsp; MVC,MVP,MVVM</p> <p>视频<br><a title="http://www.tudou.com/programs/view/jFq5FRpEsOU/" href="http://www.tudou.com/programs/view/jFq5FRpEsOU/">http://www.tudou.com/programs/view/jFq5FRpEsOU/</a></p> <p><embed src="http://www.tudou.com/v/jFq5FRpEsOU/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>谈一谈职业素养</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/04/08/2437279.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 08 Apr 2012 01:03:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/04/08/2437279.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲中，我分享了我对于职业素养的认识和理解。职业素养是一个很大的话题，但总的来说，他表现为某个人对于职业的一种精神和态度。</p> <p>我个人总结起来，职业素养是在具备专业技能基础上，表现出来的以下精神品质</p> <ol> <li>责任心</li> <li>伦理观</li> <li>纪律性</li> <li>守时间</li> <li>乐沟通</li> <li>敢承担</li></ol> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!137&amp;parid=BB01F26F28894A40!136" href="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!137&amp;parid=BB01F26F28894A40!136">https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!137&amp;parid=BB01F26F28894A40!136</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/ILUyjAW8J7k/" href="http://www.tudou.com/programs/view/ILUyjAW8J7k/">http://www.tudou.com/programs/view/ILUyjAW8J7k/</a></p> <p><embed src="http://www.tudou.com/v/ILUyjAW8J7k/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>网络世界中的图片以及相关的处理</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/26/2418388.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 26 Mar 2012 11:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/26/2418388.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲中，我讲解了网络世界中图片格式,以及他们的一些特点</p> <ol> <li>JPG 或者JPEG</li> <li>GIF</li> <li>PNG</li></ol> <p>同时，还通过实例讲解了三种常见的提高网页显示图片的速度的策略</p> <ol> <li>根据80/20法则，先显示较小的图片，只有当真正需要的时候，才显示大图片</li> <li>使用异步加载的方式，加载大图片</li> <li>使用延迟加载的策略，实现更加智能化的加载方式</li></ol> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!127&amp;parid=BB01F26F28894A40!111" href="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!127&amp;parid=BB01F26F28894A40!111">https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!127&amp;parid=BB01F26F28894A40!111</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/HWLDk95bBf8/" href="http://www.tudou.com/programs/view/HWLDk95bBf8/">http://www.tudou.com/programs/view/HWLDk95bBf8/</a></p> <p><embed src="http://www.tudou.com/v/HWLDk95bBf8/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p>示例代码（异步加载图片）</p><pre class="csharpcode">&lt;%@ Page Language=<span class="str">"C#"</span> AutoEventWireup=<span class="str">"true"</span> CodeBehind=<span class="str">"WebForm1.aspx.cs"</span> Inherits=<span class="str">"WebApplication1.WebForm1"</span> %&gt;

&lt;!DOCTYPE html PUBLIC <span class="str">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="str">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;
&lt;html xmlns=<span class="str">"http://www.w3.org/1999/xhtml"</span>&gt;
&lt;head runat=<span class="str">"server"</span>&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script src=<span class="str">"Scripts/jquery-1.7.1.min.js"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;
    &lt;script type=<span class="str">"text/javascript"</span>&gt;
        <span class="rem">//window.Ready</span>

        $(function () {
            $(<span class="str">"img"</span>).each(function () {
                $(<span class="kwrd">this</span>).attr(<span class="str">"src"</span>, $(<span class="kwrd">this</span>).attr(<span class="str">"originalsrc"</span>));
            });
        });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=<span class="str">"form1"</span> runat=<span class="str">"server"</span>&gt;
    &lt;div&gt;
        &lt;img src=<span class="str">"placeholder.png"</span> 
            originalsrc=<span class="str">"DSC_0006.jpg"</span> alt=<span class="str">""</span> /&gt;
    &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>大幕开启: fmplan的探索和进展</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/21/2410341.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 21 Mar 2012 10:24:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/21/2410341.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>经过一段时间的摸索和准备，这一讲中我向大家介绍了目前我们确定的内容发布机制和协作网络，欢迎大家关注和访问</p> <blockquote> <p>官方主页：<br><a href="http://fmplan.xizhang.com">http://fmplan.xizhang.com</a><br>博客园<br><a href="http://chenxizhang.cnblogs.com">http://chenxizhang.cnblogs.com</a><br>土豆网（视频）<br><a href="http://www.tudou.com/home/chenxizhang/">http://www.tudou.com/home/chenxizhang/</a><br>优酷网（视频）<br><a href="http://u.youku.com/fmplan">http://u.youku.com/fmplan</a> <br>讲义和附加资源<br>Skydrive<br><a href="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!105&amp;parid=root">https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!105&amp;parid=root</a> </p> <p>微博<br>新浪(@chenxizhang)</p></blockquote> <p>与此同时，我们将正式启动四门课程的分批录制计划，并且预计在年内全部完成。这四门课程是基于.NET Framework 4.0和Visual Studio 2010的应用程序开发的基础课程，也是微软官方推出的权威课程。分别针对桌面应用开发(主要是WPF)，Web应用开发(ASP.NET)，服务开发(WCF)和数据访问技术（ADO.NET Entity Framework) </p> <ol> <li>Desktop</li> <li>Web</li> <li>Services</li> <li>Data Access<br></li></ol> <p>这四门课程一共有7本教材，与此同时，我还提供了3本课外教材，分别是</p> <ol> <li>Data Structures and Algorithms Using C#</li> <li>Microsoft.Press.CLR.via.Csharp.3rd.Edition</li> <li>Microsoft_.NET_Framework_2.0_Application_Development_Foundation</li></ol> <p>所有的教材，我已经上传到了上面提供的Skydrive空间中。（<a href="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!105&amp;parid=root">https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!105&amp;parid=root</a> ）</p> <p>在授课方式上面，我大致的计划是这样的</p> <ol> <li>每章分四讲<br>内容概览，引出问题（1讲）<br>内容讲解（3讲）</li> <li>章节回顾（1讲）——可能安排在线讨论会的方式（约30分钟）<br>提前公布申请<br>最多9个座席</li> <li>引申话题（次数不限）</li></ol> <p>&nbsp;</p> <p><font color="#ff0000" size="3">欢迎大家关注这个系列课程。如果你真心想要学习，请认认真真地读教材，并且认真听课，积极反馈问题，我相信这将对你有很明显的帮助。</font></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a title="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!126&amp;parid=BB01F26F28894A40!105" href="https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!126&amp;parid=BB01F26F28894A40!105">https://skydrive.live.com/redir.aspx?cid=bb01f26f28894a40&amp;resid=BB01F26F28894A40!126&amp;parid=BB01F26F28894A40!105</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/ijgm8YT9InY/" href="http://www.tudou.com/programs/view/ijgm8YT9InY/">http://www.tudou.com/programs/view/ijgm8YT9InY/</a></p> <p><embed src="http://www.tudou.com/v/ijgm8YT9InY/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>你应该如何更好地利用搜索引擎</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/21/2409610.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 21 Mar 2012 04:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/21/2409610.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我利用大约20分钟，分享了两个方面的话题</p> <p>1.从用户的角度，如何掌握一些简单的搜索技巧，让搜索引擎更加理解你的需求，并且更加精确定位到你需要找的内容</p> <p>2.从设计的角度，如何让你的网站提高搜索引擎友好性（SEO）,让你的网站更容易被检索到。我提到了一些常见的SEO技巧，并且也介绍了HTML 5中有关的增强</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/你应该如何利用搜索引擎.pdf">http://www.xizhang.com/fmplan/resources/你应该如何利用搜索引擎.pdf</a></p> <p>&nbsp;</p> <h2>相关资源</h2> <p><a href="http://www.xizhang.com/fmplan/resources/google-seo-starter-guide.pdf">http://www.xizhang.com/fmplan/resources/google-seo-starter-guide.pdf</a> </p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/EPAQL6GnHm4/" href="http://www.tudou.com/programs/view/EPAQL6GnHm4/">http://www.tudou.com/programs/view/EPAQL6GnHm4/</a></p> <p><embed src="http://www.tudou.com/v/EPAQL6GnHm4/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>利用博客与视频分享和交流知识和经验</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404812.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 18 Mar 2012 09:40:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404812.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我利用大致25分钟的时候，给大家分享了下面三个话题</p> <ol> <li>为什么我要建议大家多利用博客和视频？</li> <li>如何撰写和发布博客？</li> <li>如何录制和发布视频？</li></ol> <p>这里着重地对第一点做些阐述：</p> <p>我们从书本上，或者从周围的人身上学习到知识，将其应用到工作实践，这是理论到实践的一个过程。然后，将自己掌握到的知识和经验，用文字的方式总结记录下来，这对于我们自己而言，是一个将实践上升到理论的过程，坚持不懈地这样做，你将逐渐建立自己的知识理论体系，同时，因为博客的公开性，你的一些经验和创见，可能对于其他人也有很好的帮助，同时其他人也会给你一些反馈，这是一个很有意义的分享和提升的过程。</p> <p>而如果能再进一步，能够通过语言的方式直接表达出来，借助视频这种更加直观的方式和强大的展现力，将更加有利于锻炼你的整理和提炼知识方面的能力，也能给更多的人以便捷的了解你的知识和经验的机会。</p> <p>为此，我建议大家多写博客，并且也可以尝试录制一些自己的视频，锻炼这方面的能力。</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/利用博客和视频分享和交流知识和经验.pdf">http://www.xizhang.com/fmplan/resources/利用博客和视频分享和交流知识和经验.pdf</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/KftekBbH0ug/" href="http://www.tudou.com/programs/view/KftekBbH0ug/">http://www.tudou.com/programs/view/KftekBbH0ug/</a></p> <p><embed src="http://www.tudou.com/v/KftekBbH0ug/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>谈卢梭的《爱弥尔》及其对于教育的现实意义</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404720.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 18 Mar 2012 08:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404720.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我将分享卢梭及其那本著名的书籍《爱弥尔》，这本书是关于教育的专著，其中很多思想在当前的社会，仍然有很好的借鉴意义。</p> <ol> <li>卢梭和《爱弥尔》这本书的故事</li> <li>《爱弥尔》的主要思想</li> <li>现实的借鉴意义</li></ol> <p>《爱弥尔》这本书的围绕一个假象的主人公“爱弥尔”展开，从他出生，到慢慢长大成人，卢梭用了五卷的篇幅，阐述了在五个不同阶段不同的教育思想，其中心思想是要不要违背自然教育，不要违背人性，提出教育的目的在于发展学生获取知识的能力，培养学生具有科学的头脑，发展学生的求知欲，好奇心以及学习的兴趣。从学习的角度而言，最大的目的不是仅仅取得知识，而是判断的能力。</p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/谈卢梭的《爱弥尔》及其对于教育的现实意义.pdf">http://www.xizhang.com/fmplan/resources/谈卢梭的《爱弥尔》及其对于教育的现实意义.pdf</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/k6mRkuc0lFA/" href="http://www.tudou.com/programs/view/k6mRkuc0lFA/">http://www.tudou.com/programs/view/k6mRkuc0lFA/</a></p> <p><embed src="http://www.tudou.com/v/k6mRkuc0lFA/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>http协议浅析</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404520.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 18 Mar 2012 04:07:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/18/2404520.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲，我花了35分钟左右，分享了http协议的一些概念，以及在现实开发中的一些应用场景。主要包括的内容有：</p> <ol> <li>}http和https</li> <li>}GET和POST</li> <li>}在自定义程序中使用http</li></ol> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/http.pdf">http://www.xizhang.com/fmplan/resources/http.pdf</a> </p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/KDeYCgWlBH8/" href="http://www.tudou.com/programs/view/KDeYCgWlBH8/">http://www.tudou.com/programs/view/KDeYCgWlBH8/</a></p> <p><embed src="http://www.tudou.com/v/KDeYCgWlBH8/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>学习和自我学习</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/10/2388593.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 09 Mar 2012 23:26:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/10/2388593.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>学习是一种态度，也是一个有方法可循的过程，这一讲我分享一些我对于学习和自我学习的认识和理解。希望对大家有帮助</p> <ol> <li>学习是认识世界——求是  <li>学习是认识自己——求真</li></ol> <p>学习的方法论</p> <ol> <li>提出问题（学什么）  <li>要常实践（怎么学）  <li>要常总结（写下来）  <li>要有恒心</li></ol> <p>&nbsp; <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/学习和自我学习.pdf">http://www.xizhang.com/fmplan/resources/学习和自我学习.pdf</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/e-ZDCnuc3_w/" href="http://www.tudou.com/programs/view/e-ZDCnuc3_w/">http://www.tudou.com/programs/view/e-ZDCnuc3_w/</a></p> <p><embed src="http://www.tudou.com/v/e-ZDCnuc3_w/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>关于云计算的大局观</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/09/2388272.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 09 Mar 2012 12:34:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/09/2388272.html</guid><description><![CDATA[<h2>内容摘要</h2> <p>这一讲我用了30分钟时间（本来想分两讲，但后来还是一口气讲完这个话题），介绍了云计算概念，发展过程，公有云和私有云，以及公有云平台的相关参考资料。</p> <p>云计算就是我们身边，触手可及。这是一个值得我们去了解的领域。</p> <p>&nbsp;</p> <h2>讲义地址</h2> <p><a href="http://www.xizhang.com/fmplan/resources/02/关于云计算的大局观.pdf">http://www.xizhang.com/fmplan/resources/02/关于云计算的大局观.pdf</a></p> <p>&nbsp;</p> <h2>视频地址</h2> <p><a title="http://www.tudou.com/programs/view/Trj4byLf5Mc/" href="http://www.tudou.com/programs/view/Trj4byLf5Mc/">http://www.tudou.com/programs/view/Trj4byLf5Mc/</a></p> <p><embed src="http://www.tudou.com/v/Trj4byLf5Mc/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>fmplan主页功能设计第一阶段成果</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/08/2385964.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 08 Mar 2012 15:08:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/08/2385964.html</guid><description><![CDATA[<h2>内容摘要</h2> <h2></h2> <p>fmplan的主页地址是在：<a href="http://fmplan.xizhang.com">http://fmplan.xizhang.com</a>&nbsp; ，通过将近一周的集中开发，我把几个核心功能已经实现出来。大致如下</p> <p>1.内容发布和管理（这是后台管理功能，目前没有对外公开）</p> <p>2.首页显示目前所有的主题列表</p> <p>3.点击某个主题可以打开详细页面</p> <p>4.任何用户（无需登录）都可以进行评论</p> <p>5.独创的语音留言系统（目前限定为20秒，上传有点慢，请大家稍微节省一些资源）</p> <p>&nbsp;</p> <p>这个网站是使用ASP.NET MVC 3进行开发的（语音留言部分采用了Silverlight技术），部署在Windows Azure平台上。目前采用的机器配置一般，可能速度不是特别快。语音留言限定为20秒，文件通常为2～3MB，会上传到服务器。（这个速度慢一点）</p> <p>&nbsp;</p> <p>欢迎大家给我们反馈、支持和鼓励。</p> <p>网站的样式风格会在本周末做些调整。功能方面，不求多。接下来主要精力是做内容，研究和讲授课程的事情。</p> <p>&nbsp;</p> <h2>视频地址</h2> <p>以后的视频都是放在土豆网或者优酷网。在文章中的贴出来的链接，可能是两者其中之一，以哪个处理快的为准。（经测试，这次发布还是土豆快一些）</p> <p><a title="http://www.tudou.com/programs/view/RaPCVxxVFNY/" href="http://www.tudou.com/programs/view/RaPCVxxVFNY/">http://www.tudou.com/programs/view/RaPCVxxVFNY/</a></p> <p><embed src="http://www.tudou.com/v/RaPCVxxVFNY/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>【十五分钟Talkshow】工作流及工作流框架、服务</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/06/2381260.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 05 Mar 2012 22:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/06/2381260.html</guid><description><![CDATA[<h1>内容摘要</h1> <p>这里用四讲的内容，给大家介绍了工作流（微软平台上的Workflow Foundation)的基本理论，框架</p> <ol> <li>}工作流是指什么</li> <li>}微软的工作流产品和技术</li> <li>}工作流解决方案的组成部分</li></ol> <p>并且着重介绍了三个服务</p> <ol> <li>}Workflow Foundation(WF)与Windows Communication Foundation(WCF)</li> <li>}持久化服务</li> <li>}跟踪服务</li></ol> <p>&nbsp;</p> <h1>讲义地址</h1> <p><a href="http://www.xizhang.com/fmplan/02/工作流及其服务.pdf">http://www.xizhang.com/fmplan/02/工作流及其服务.pdf</a></p> <p><a href="http://www.xizhang.com/fmplan/02/工作流的基本概念.pdf">http://www.xizhang.com/fmplan/02/工作流的基本概念.pdf</a></p> <p>&nbsp;</p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/fSvF6xOlnbA/" href="http://www.tudou.com/programs/view/fSvF6xOlnbA/">http://www.tudou.com/programs/view/fSvF6xOlnbA/</a>&nbsp; (基本概念）</p> <p><embed src="http://www.tudou.com/v/fSvF6xOlnbA/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p><a title="http://www.tudou.com/programs/view/XACR4IkIwfo/" href="http://www.tudou.com/programs/view/XACR4IkIwfo/">http://www.tudou.com/programs/view/XACR4IkIwfo/</a> （WCF和WF)</p> <p><embed src="http://www.tudou.com/v/XACR4IkIwfo/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p><a title="http://www.tudou.com/programs/view/BiphVaPkZYc/" href="http://www.tudou.com/programs/view/BiphVaPkZYc/">http://www.tudou.com/programs/view/BiphVaPkZYc/</a> （持久化）</p> <p><embed src="http://www.tudou.com/v/BiphVaPkZYc/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <p><a title="http://www.tudou.com/programs/view/rw1-PX9uG7k/" href="http://www.tudou.com/programs/view/rw1-PX9uG7k/">http://www.tudou.com/programs/view/rw1-PX9uG7k/</a> （跟踪服务）</p> <p><embed src="http://www.tudou.com/v/rw1-PX9uG7k/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>【十五分钟Talkshow】fmplan(十五分钟计划)的初步想法</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378583.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 03 Mar 2012 11:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378583.html</guid><description><![CDATA[<h1>摘要信息</h1>
<p>这个演讲将概述提出了我最近开始的一个名为&#8220;fmplan&#8221;的 基于互联网的教育计划</p>
<ul>
    <li>}计划简介</li>
    <li>}内容简介</li>
    <li>}目标受众</li>
    <li>}学习环境</li>
    <li>}支持和帮助</li>
</ul>
<h1>讲义地址</h1>
<p><a href="http://www.xizhang.com/fmplan/resources/fmplan_overview.pdf">http://www.xizhang.com/fmplan/resources/fmplan_overview.pdf</a> </p>
<p>&nbsp;</p>
<h1>视频地址</h1>
<p><a title="http://www.tudou.com/programs/view/hhS5U-o-qRc/" href="http://www.tudou.com/programs/view/hhS5U-o-qRc/">http://www.tudou.com/programs/view/hhS5U-o-qRc/</a></p>
<p><embed height="400" type="application/x-shockwave-flash" width="480" src="http://www.tudou.com/v/hhS5U-o-qRc/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" wmode="opaque" allowfullscreen="true" allowscriptaccess="always"></p>]]></description></item><item><title>【十五分钟Talkshow】谈谈我对开源的认识和理解</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378232.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 03 Mar 2012 05:08:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378232.html</guid><description><![CDATA[<h1>摘要信息</h1> <ul> <li>什么是开源？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 开源、开放源代码（<a title="http://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" href="http://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81">http://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81</a>）、开源软件（<a title="http://zh.wikipedia.org/zh-cn/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6" href="http://zh.wikipedia.org/zh-cn/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6">http://zh.wikipedia.org/zh-cn/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6</a>）  <li>开源是不是等于免费？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 开源协议：权利和义务  <ul> <li><a title="http://baike.baidu.com/view/1373538.htm" href="http://baike.baidu.com/view/1373538.htm">http://baike.baidu.com/view/1373538.htm</a></li></ul> <li>&nbsp; 开源社区<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CodePlex.com  <li>为什么有的软件没有开源？</li></ul> <p>&nbsp;&nbsp; </p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/1BzQpaHSorU/" href="http://www.tudou.com/programs/view/1BzQpaHSorU/">http://www.tudou.com/programs/view/1BzQpaHSorU/</a></p> <p><embed src="http://www.tudou.com/v/1BzQpaHSorU/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>【十五分钟Talkshow】谈谈HTML 5及其对Web开发人员的挑战和机遇</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378157.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 03 Mar 2012 03:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/03/2378157.html</guid><description><![CDATA[<h1>摘要信息</h1> <p>这一次演讲将包含以下内容</p> <ul> <li>&nbsp;&nbsp;&nbsp; HTML 5是什么？（定义了网页的标准）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外还有一个CSS 3.0的标准</li> <li>&nbsp;&nbsp;&nbsp; 目前HTML 5的进展大致是怎样？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 各厂家对HTML 5的支持<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://html5test.com/">http://html5test.com/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li> <li>&nbsp;&nbsp;&nbsp; 有哪些学习资源？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://www.cnblogs.com/chenxizhang/archive/2010/11/08/1871436.html">http://www.cnblogs.com/chenxizhang/archive/2010/11/08/1871436.html</a></li> <li>&nbsp;&nbsp;&nbsp; 如何在Visual Studio 2010（2008）中开始HTML 5的开发？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://visualstudiogallery.msdn.microsoft.com/d771cbc8-d60a-40b0-a1d8-f19fc393127d/">http://visualstudiogallery.msdn.microsoft.com/d771cbc8-d60a-40b0-a1d8-f19fc393127d/</a></li></ul> <p><br>&nbsp;</p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/5Uc_lEYryfM/" href="http://www.tudou.com/programs/view/5Uc_lEYryfM/">http://www.tudou.com/programs/view/5Uc_lEYryfM/</a></p> <p>&nbsp;</p> <p><embed src="http://www.tudou.com/v/5Uc_lEYryfM/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>]]></description></item><item><title>【十五分钟Talkshow】音乐的力量-分享你最喜欢的音乐和故事-Tell me why</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/03/01/2375353.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 01 Mar 2012 04:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/03/01/2375353.html</guid><description><![CDATA[<p>这一讲将开始关于轻松的一个话题，希望大家都来分享一些你最喜欢的音乐，讲出你的故事。这一讲我将分享我最喜欢的一首歌《Tell me why》</p> <p>&nbsp;</p> <h1>在线收听Tell me why (MV)</h1> <p><a title="http://video.gmx.net/watch/203263/Declan_Galbraith_Tell_Me_Why" href="http://video.gmx.net/watch/203263/Declan_Galbraith_Tell_Me_Why">http://video.gmx.net/watch/203263/Declan_Galbraith_Tell_Me_Why</a></p> <p>&nbsp;</p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/GfQ4m0chRxE/?resourceId=101037296_01_08_02" href="http://www.tudou.com/programs/view/GfQ4m0chRxE/?resourceId=101037296_01_08_02">http://www.tudou.com/programs/view/GfQ4m0chRxE/?resourceId=101037296_01_08_02</a></p> <p><embed src="http://www.tudou.com/v/GfQ4m0chRxE/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <h1>歌词</h1><pre class="csharpcode"><span class="kwrd">in</span> my dream, 
在我梦中 
children sing a song of love <span class="kwrd">for</span> every boy and girl . 
孩子们为所有人吟唱着一首爱的歌 
The sky <span class="kwrd">is</span> blue and fields are green and laughter <span class="kwrd">is</span> the language of the world. 
蓝天碧草之间笑声成了世界通用的语言. 
Than I wake and all I see <span class="kwrd">is</span> a world full of people <span class="kwrd">in</span> need. 
然而当我醒来的时候却发现世界上到处是需要帮助的人. 

Tell me why(why), 
告诉我为什么 
does it have to be like <span class="kwrd">this</span>? 
真的只能是这样吗? 
Tell me why(why), 
告诉我为什么 
<span class="kwrd">is</span> there something I have missed? 
是不是我错过了什么? 
Tell me why(why), 
告诉我为什么 
cos<span class="str">' I don'</span>t understand, 
因为我实在是无法理解 
when so many need somebody, 
有那么多需要帮助的人 
we don<span class="str">'t give a helping hand. 
我们却不伸出援助之手 
Tell me why? 
告诉我为什么 

Every day, I ask myself, 
每天我都在问自己 
what will I have to do to be a man? 
做为一个人我该做些什么 
Do I have to stand and fight, to prove to everybody who I am? 
我是不是要站起来抗争,向所有人证明我的价值 
Is that what my life is far, to waste in a world full of war? 
而这是不是意味着我的一生就将耗费在这满是硝烟的世界? 

Tell me why(why), 
告诉我为什么 
does it have to be like this? 
真的只能是这样吗? 
Tell me why(why), 
告诉我为什么 
is there something I have missed? 
是不是我错过了什么? 
Tell me why(why), 
告诉我为什么 
cos'</span> I don<span class="str">'t understand, 
因为我实在是无法理解 
when so many need somebody, 
有那么多需要帮助的人 
we don'</span>t give a helping hand. 
我们却不伸出援助之手 
Tell me why? 
告诉我为什么 

Tell me why? 
告诉我为什么 
(Why,why,does the tiger run) 
为什么,为什么老虎也要逃跑 
Tell me why? 
告诉我为什么 
(Why,why,<span class="kwrd">do</span> we shoot the gun) 
为什么,为什么我们让子弹射出枪堂 
Tell me why? 
告诉我为什么 
(Why,why,<span class="kwrd">do</span> we never learn) 
为什么,为什么我们从来不吸取教训 
Can someone tell us why we let the forest burn? 
谁能告诉我,为什么我们烧毁森林 

(Why,why,<span class="kwrd">do</span> we said we care) 
为什么,为什么我们光说我们在乎 
Tell me why? 
告诉我为什么 
(Why,why,<span class="kwrd">do</span> we stand and stare) 
为什么,为什么我们只是站着旁观 
Tell me why? 
告诉我为什么 
(<span class="kwrd">do</span> the dolphins cry) 
为什么,为什么海豚在哭泣 
Can someone tell us why we let the ocean die? 
谁能告诉我,为什么我们让海洋死去 


(Why,why,<span class="kwrd">if</span> we<span class="str">'re all the same) 
为什么,为什么,如果我们大家是一样的. 
Tell me why? 
告诉我为什么 
(Why,why,do we pass and blame) 
为什么,为什么我们却在互相谴责 
Tell me why? 
告诉我为什么 
(Why,why,does it never end) 
为什么,为什么这些永无休止 
Can someone tell us why we cannot just be friends? 
谁能告诉我,为什么我们不能友好相处 


Why,why,(do we close our eyes) 
为什么,为什么(我们闭上了我们的眼睛) 
Why,why,(do the greedy life) 
为什么,为什么(我们让生命满是贪婪) 
Why,why,(do we fight for land) 
为什么,为什么(我们为了土地而争斗) 
Can someone tell us why '</span>cos we don't understand? 
谁能告诉我,因为我们实在无法知道 

Why,why?? 
为什么</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>【十五分钟Talkshow】为什么新浪微博的输入文本框具有记忆功能</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/02/29/2373962.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 29 Feb 2012 12:06:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/02/29/2373962.html</guid><description><![CDATA[<h1>摘要提示</h1> <p>“十万个为什么” 之<br>&nbsp;&nbsp;&nbsp; 为什么在新浪微博上面的输入文本框有记忆功能？</p> <p>&nbsp;&nbsp;&nbsp; 1.在网页关闭之前，如果文本框不为空，则将内容保存起来（保存到哪里去==&gt;cookie）</p> <p>&nbsp;&nbsp;&nbsp; 2.在网页加载的时候，想办法还原<br></p> <p>&nbsp;</p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/DOkXpZQnnFw/" href="http://www.tudou.com/programs/view/DOkXpZQnnFw/">http://www.tudou.com/programs/view/DOkXpZQnnFw/</a></p> <p><embed src="http://www.tudou.com/v/DOkXpZQnnFw/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h1>示例代码</h1><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="WebApplicationSample.Default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="kwrd">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">style</span> <span class="attr">type</span><span class="kwrd">="text/css"</span><span class="kwrd">&gt;</span>
        #txtInput {
            height: 113px;
            width: 694px;
        }
    <span class="kwrd">&lt;/</span><span class="html">style</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-1.4.4.min.js"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"Scripts/jquery.cookie.js"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;

    &lt;script type=<span class="str">"text/javascript"</span>&gt;

        <span class="kwrd">function</span> SaveText() {
            <span class="kwrd">var</span> date = <span class="kwrd">new</span> Date();
            date.setTime(date.getTime() + (30 * 60 * 1000));
            $.cookie(<span class="str">"input"</span>, $(<span class="str">"#txtInput"</span>).text(), { expires: date });
        }


        $(<span class="kwrd">function</span> () {
            $(<span class="str">"#txtInput"</span>).text($.cookie(<span class="str">"input"</span>));
        });
    
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span> <span class="attr">onbeforeunload</span><span class="kwrd">="SaveText()"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">textarea</span> <span class="attr">id</span><span class="kwrd">="txtInput"</span> <span class="attr">rows</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">textarea</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>【十五分钟Talkshow】在.NET应用程序中访问Excel的几种方式</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/02/28/2372102.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 28 Feb 2012 11:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/02/28/2372102.html</guid><description><![CDATA[<h1>摘要提示：</h1> <p>通过三个视频，我介绍和比较了在.NET应用程序中访问Excel的常见几种方式</p> <ol> <li>}通过Excel API访问</li> <li>}通过OpenXML访问</li> <li>}通过第三方组件访问</li></ol> <p>&nbsp;</p> <h1>讲义地址：</h1> <p><a href="http://www.xizhang.com/fmplan/resources/02/在.NET应用程序中访问和处理Excel的几种方式.pdf">http://www.xizhang.com/fmplan/resources/02/在.NET应用程序中访问和处理Excel的几种方式.pdf</a></p> <h1>视频地址：（<font color="#ff0000">请大家注意，现在视频是放在土豆上面的，广告好像一般比较长，大家是否有更好的推荐</font>）</h1> <p>第一讲 使用Excel API</p> <p><a title="http://www.tudou.com/programs/view/EK1s9TTpN1c/" href="http://www.tudou.com/programs/view/EK1s9TTpN1c/">http://www.tudou.com/programs/view/EK1s9TTpN1c/</a></p> <p><embed src="http://www.tudou.com/v/EK1s9TTpN1c/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed><br></p> <p>第二讲 使用OPENXML</p> <p><a title="http://www.tudou.com/programs/view/W_GYNMnzV3o/?fr=rec1" href="http://www.tudou.com/programs/view/W_GYNMnzV3o/?fr=rec1">http://www.tudou.com/programs/view/W_GYNMnzV3o/?fr=rec1</a></p> <p><embed src="http://www.tudou.com/v/W_GYNMnzV3o/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>第三讲 </p> <p><a title="http://www.tudou.com/programs/view/8RJlkTeOAJY/" href="http://www.tudou.com/programs/view/8RJlkTeOAJY/">http://www.tudou.com/programs/view/8RJlkTeOAJY/</a><br></p> <p><embed src="http://www.tudou.com/v/8RJlkTeOAJY/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p> <p>&nbsp;</p> <h1>范例代码：</h1><pre class="csharpcode">
摘取了使用API的那一段代码，其他代码请大家结合视频自己编写</pre><pre class="csharpcode">        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> UsingExcelAPI()
        {
            <span class="rem">//1.Excel Application</span>
            var app = <span class="kwrd">new</span> Application();

            <span class="rem">//2.Excel Workbook</span>
            var wb = app.Workbooks.Open(<span class="str">@"C:\Users\chenxizhang\Documents\demo.xlsx"</span>);

            <span class="rem">//3.Excel Worksheet</span>
            var sheet = wb.Worksheets[1];

            <span class="rem">//4.Range</span>
            var rng = sheet.Range(<span class="str">"A1"</span>);
            Console.WriteLine(rng.Value);

            <span class="rem">//5.Dispose</span>
            wb.Close();
            app.Quit();

            Marshal.ReleaseComObject(rng);
            Marshal.ReleaseComObject(sheet);
            Marshal.ReleaseComObject(wb);
            Marshal.ReleaseComObject(app);
            rng = <span class="kwrd">null</span>;
            sheet = <span class="kwrd">null</span>;
            wb = <span class="kwrd">null</span>;
            app = <span class="kwrd">null</span>;

            GC.Collect();

            Console.Read();
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>【十五分钟Talkshow】如何善用你的.NET开发环境</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/02/28/2371387.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 28 Feb 2012 05:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/02/28/2371387.html</guid><description><![CDATA[<p><font color="#ff0000">这一讲的时间大约是25分钟。内容还是有点多了。后期将逐渐规范到15分钟左右一个主题。</font></p> <p>&nbsp;</p> <h1>摘要提示</h1> <p>在这一讲中，我会介绍以下三个方面的内容</p> <ol> <li>}.NET开发环境简介  <li>}安装和配置Visual Studio  <li>}安装Web Platform Installer</li></ol> <p>&nbsp;</p> <h1>讲义地址</h1> <p><a href="http://www.xizhang.com/fmplan/resources/01/善用你的.NET开发环境.pdf">http://www.xizhang.com/fmplan/resources/01/善用你的.NET开发环境.pdf</a></p> <h1>视频地址</h1> <p><a title="http://www.tudou.com/programs/view/dy2LxvuqTyA/" href="http://www.tudou.com/programs/view/dy2LxvuqTyA/">http://www.tudou.com/programs/view/dy2LxvuqTyA/</a></p><embed src="http://www.tudou.com/v/dy2LxvuqTyA/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed>  <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>Visual Studio Style Manager下载地址</h1> <p><a href="http://www.xizhang.com/fmplan/resources/visualstudiostylemanager.zip">http://www.xizhang.com/fmplan/resources/visualstudiostylemanager.zip</a> </p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>范例代码（Helloworld.cs)</h1><pre class="csharpcode"><span class="kwrd">using</span> System;

<span class="kwrd">public</span> <span class="kwrd">class</span> Program{
    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(){
        Console.WriteLine(<span class="str">"Hello,world"</span>);
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>【十五分钟Talkshow】如何理解并优化.NET应用程序对内存的使用</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/02/27/2370422.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 27 Feb 2012 13:16:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/02/27/2370422.html</guid><description><![CDATA[<p><font color="#ff0000">前言：十五分钟Talkshow，是我将利用业余时间开展的一个活动（不定期发布），主要是我选择某些与技术或者软件工程方面有关的主题进行讲解，每次一个主题，尽可能在15分钟左右讲完。这些演讲是免费公开的，允许分发。</font></p> <p>&nbsp;</p> <p>备注：这次是第一次录制，本来计划是十五分钟左右，没有把握好时间，后期还会在内容编排上面再做一些改进</p> <p>&nbsp;</p> <h1>摘要提示：</h1> <p>这是一个关于.NET应用程序中对于内存使用和优化的简短演讲，通过此视频，你可以了解</p> <ol> <li>}什么是内存问题  <li>}.NET应用程序是如何分配和释放内存  <li>}深入分析内存使用情况并调优</li></ol> <p>&nbsp;</p> <h1>讲义地址：</h1> <p><a href="http://www.xizhang.com/fmplan/resources/01/如何理解并优化.NET应用程序对内存的使用.pdf">http://www.xizhang.com/fmplan/resources/01/如何理解并优化.NET应用程序对内存的使用.pdf</a></p> <p>&nbsp;</p> <h1>视频地址：</h1> <p><a title="http://www.tudou.com/programs/view/BhY8Q2icnAY/" href="http://www.tudou.com/programs/view/BhY8Q2icnAY/">http://www.tudou.com/programs/view/BhY8Q2icnAY/</a></p> <p>&nbsp;</p><embed src="http://www.tudou.com/v/BhY8Q2icnAY/&amp;rpid=101037296&amp;resourceId=101037296_05_05_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed>  <p><font color="#ff0000"></font>&nbsp;</p> <p><font color="#ff0000"></font>&nbsp;</p> <p>&nbsp;</p> <p>范例代码：(代码可以稍作修改，请自行准备有关的Excel文件，和数据库）</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> ClosedXML.Excel;
<span class="kwrd">using</span> System.IO;
<span class="kwrd">using</span> System.Diagnostics;


<span class="kwrd">namespace</span> Console
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            UploadData();
            GC.Collect();
            System.Console.Read();
        }

        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> UploadData()
        {
            <span class="rem">///该软件的功能在于,读取某个文件夹里面一批EXCEL文件里面的数据，并将其插入到数据库中去</span>
            <span class="rem">///测试用的EXCEL文件有470个，每个文件将要读取200个左右的单元格数据，根据名称读取</span>

            var folder = <span class="str">"d:\\temp\\demo"</span>;
            var files = Directory.GetFiles(folder, <span class="str">"*.xlsx"</span>);


            <span class="rem">//数据库连接</span>
            var db = <span class="kwrd">new</span> DataModelDataContext();

            <span class="rem">//准备一个计时器</span>
            var sw = <span class="kwrd">new</span> Stopwatch();
            sw.Start();

            System.Console.WriteLine(<span class="str">"开始工作:"</span> + DateTime.Now.ToString());


            files.ForEach(file =&gt;
            {
                var bk = <span class="kwrd">new</span> XLWorkbook(file);
                var names = bk.NamedRanges;

                var fileName = Path.GetFileNameWithoutExtension(file);
                var code = fileName.Substring(0, 6);
                var year = <span class="kwrd">short</span>.Parse(fileName.Substring(7, 4));
                var month = <span class="kwrd">byte</span>.Parse(fileName.Substring(11, 2));




                names.ForEach(item =&gt;
                {
                    var name = item.Name;
                    var address = item.RefersTo;
                    var sheet = address.Split(<span class="str">'!'</span>)[0].Replace(<span class="str">"'"</span>, <span class="str">""</span>);
                    var cell = address.Split(<span class="str">'!'</span>)[1];
                    var rng = bk.Worksheet(sheet).Range(cell).Cells().FirstOrDefault();
                    var v = !<span class="kwrd">string</span>.IsNullOrEmpty(rng.FormulaA1) ? rng.ValueCached : rng.Value.ToString();
                    <span class="rem">//如果是公式的话，则用ValueCached读取（有可能是空值，即表示当前没有值，有可能是错误，这种情况应该都是以#开头，#DIV/0!，#N/A，#NAME?，#NUM!，#VALUE，#REF!，#NULL!</span>
                    db.ItemValues.InsertOnSubmit(<span class="kwrd">new</span> ItemValue()
                    {
                        Code = code,
                        Year = year,
                        Month = month,
                        ItemName = name,
                        Value = v
                    });

                });

                db.SubmitChanges();


                bk.Dispose();
                GC.Collect();
                System.Console.WriteLine(file);
            });

            sw.Stop();

            System.Console.WriteLine(<span class="str">"结束工作:{0},耗时:{1}秒"</span>, DateTime.Now, sw.Elapsed.TotalSeconds);
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>Office 插件开发和部署的总结</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/02/04/2338115.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 04 Feb 2012 09:08:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/02/04/2338115.html</guid><description><![CDATA[<p>近日因为开发一个Outlook插件，用到了最新的Visual Studio开发工具，期间费了不少周折，主要体现在部署上面。这里整理一下给大家参考参考</p> <h2>1. 选择合适的模板，Visual Studio 2010中支持对Office 2007和Office 2010开发两种解决方案</h2> <p>一种是所谓的插件，一种是所谓的文档。其实也很好理解，插件是指通用的功能，例如你可以给Outlook添加一个特殊的工具栏，文档则是某个特殊的Office文档吧，可以实现特定的功能，例如你可以设计一个特殊的Word文档。</p> <p>值得注意的是，不支持Office 2003的开发。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708025379.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708036034.png" width="244" height="170"></a></p> <p>经过测试，如果你做的插件，是既需要用于Office 2007，又需要用于Office 2010，则你可以选择Office 2007的模板。这应该也是比较好理解的。</p> <p>至于具体功能的开发，我这里就不展开了。大家可以参考微软的有关文档。例如</p> <p><a title="http://msdn.microsoft.com/en-us/library/bb726434(v=office.12).aspx" href="http://msdn.microsoft.com/en-us/library/bb726434(v=office.12).aspx">http://msdn.microsoft.com/en-us/library/bb726434(v=office.12).aspx</a></p> <p>&nbsp;</p> <p>注意，我建议大家选择.NET Framework 4.0, 因为这个版本，可以将Office的那些COM组件，嵌入到插件中，这样就可以省去部署所谓的PIA （Primary Interop Assembly）的步骤。</p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>2.测试项目</h2> <p>测试Office插件很简单，你只需要在Visual Studio 2010中对项目进行编译即可</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708047529.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/20120204170805659.png" width="644" height="203"></a></p> <p>正常情况下，就可以在Outlook中看到这个插件</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708084926.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/20120204170810697.png" width="1035" height="292"></a></p> <p>如果要删除这个插件，则只需要在Visual Studio 2010中对项目进行清理就可以了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708115256.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201202/201202041708121452.png" width="964" height="226"></a></p> <p>&nbsp;</p> <h2>3.部署项目</h2> <p>由于测试阶段是如此容易，导致很多朋友（包括我在内）想当然地觉得部署肯定也是很容易。遗憾的是，现实给了我们残酷的教训。你必须很仔细地阅读下面这篇文章</p> <p><a title="http://msdn.microsoft.com/en-us/library/ff937654.aspx" href="http://msdn.microsoft.com/en-us/library/ff937654.aspx">http://msdn.microsoft.com/en-us/library/ff937654.aspx</a></p> <p>这篇文章十分重要，请不要贪图快而略过某些步骤，我可以证明，如果按这个文章打包的安装程序，是可以安装成功的。</p> <p>&nbsp;</p> <p>要部署该项目，目标用户机器还必须具备如下的一些条件</p> <ul> <li>1. 操作系统必须是Windows XP SP2或者更高版本，推荐Windows 7</li> <li>2. 需要安装Office 2007或者Office 2010 </li> <ul> <li>这里要注意，必须为Office 2007或者Office 2010安装“.NET编程性支持”这个功能。更加需要注意的是，要安装这项功能，需要先装好.NET Framework 2.0。对于这一点，我实在也感到很意外，但没有办法，这是先决条件。不过，好消息是：</li> <ul> <li>正常情况下，Windows XP如果启用了自动更新的话，应该已经装好了.NET Framework 2.0</li> <li>默认情况下，Windows 7是自带了.NET Framework 2.0</li></ul></ul> <li>3. 需要安装.NET Framework 4.0 Client Profile或者.NET Framework 4.0</li> <ul> <li>下载地址 <a href="http://go.microsoft.com/fwlink/?LinkId=195254">http://go.microsoft.com/fwlink/?LinkId=195254</a></li></ul> <li>4. 需要安装Visual Studio 2010 Tools for Office Runtime</li> <ul> <li>下载地址 <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=20479">http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=20479</a></li></ul></ul> <p>&nbsp;</p>    <p>以上整理给有需要的朋友参考参考</p>]]></description></item><item><title>《如何成为卓越的大学教师》的阅读笔记及感想 （一）</title><link>http://www.cnblogs.com/chenxizhang/archive/2012/01/01/2309600.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 01 Jan 2012 12:36:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2012/01/01/2309600.html</guid><description><![CDATA[<p>&nbsp;</p> <p>这本书是由哈佛大学出版的，然后北京大学出版社引进翻译了中文版，年前我听到介绍然后购买的。今天看了一部分，<font color="#ff0000"><strong>总的评价是非常不错，很值得所有大学教师参考学习，当然也很适合于我等有志青年，作为研究学习之用。</strong></font></p> <p><font color="#ff0000"><strong></strong></font>&nbsp;</p> <p><font color="#ff0000"><strong><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201201/201201012035362551.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="20051230-1_e" border="0" alt="20051230-1_e" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201201/201201012035363947.jpg" width="244" height="244"></a><br></strong></font><br></p> <p><a name="abstract"></a><a name="content"></a> <h6><font size="4">内容简介</font></h6> <p>本书是对不同大学和各个学科近百位卓越教师长达15年观察研究的总结。透过一个个生动的故事，本书为我们描绘了精彩教学的典范，举出了学生展现创意和发掘自己潜能的实例，揭示了卓越教师对学生产生持久积极影响的秘密。作者强调：卓越的教学是可以学习的。<br>本书不但是新、老教师增长见识和激发灵感的宝藏，而且对于有志成为大学教师的青年学生<br>也是绝好的参考书，同时本书所得出的结论也应该是广大学生及其家长的兴趣所在。  <p><a name="authorintro"></a> <h6><font size="4">作者简介</font></h6> <p>肯·贝恩(Ken Bain)是美国影响较大的四个教学中心，即纽约大学优秀教学中心、西北大学瑟尔精英教学中心、范德比尔特大学教学中心和蒙特克莱尔新泽西州立大学教学资源中心的创始人，现为蒙特克莱尔新泽西州立大学教学资源中心主任，在教学研究方面有着丰富的理论和实践经验，曾获得多项全美教学奖，被誉为美国最好的老师之一。  <p> <p>值得推荐的是，来自微软亚洲研究院的邹欣老师，前两天发表了一篇读后感，总结得相当好， <a title="http://www.cnblogs.com/xinz/archive/2011/12/29/2306652.html" href="http://www.cnblogs.com/xinz/archive/2011/12/29/2306652.html">http://www.cnblogs.com/xinz/archive/2011/12/29/2306652.html</a> ，邹老师从美国总部回来后，这几年在几所重点大学里面参与教育方面的实践，主要讲授软件工程方面的内容，有兴趣的朋友可以关注他的<a href="http://www.cnblogs.com/xinz/">博客</a>。  <p> <p>本书的开篇第一章，谈到了为什么写这本书，以及如何定义“卓越”，并且高屋建瓴地给出了几个不算结论的结论。我这里做些笔记，并且在此基础上也谈谈我的一些感想。即便你没有时间看完整本书，我想通过下面几点，你也大致能对这本书要表达的主体思想略知一二了。</p>  <h1>一：最优秀的教师知道什么，了解什么？</h1> <p>毫无疑问，人们必须懂得所教的知识才有可能成为优秀的老师。但这还只是一个必要前提，优秀的老师还应该擅长应用自己的知识来开发各种技能，以掌握基本原理和组织各种概念，目的是为了使别人能够使用这些原理和概念去构筑他们自己的理解和能力。他们认为，如果学对人们的思想、行为和感觉方式不能产生持久的实质性的影响，那么学习将毫无意义可言。</p> <h1>二：他们如何为教学做准备？</h1> <p>卓越的老师把讲课、讨论、解决问题和其他各种教学要素视作严肃的智力上的努力，这种努力如同他们做研究、搞学术所付出的努力一样要求苛刻和意义重大。为一堂课做准备，包括设计更有意义的提问，并且设计讲稿、讨论基于可能遭遇的问题。</p> <h1>三：他们对学生的期望是什么？</h1> <p>总体而言，卓越的老师对学生的期望自然是更加高的。他们不会满足于学生仅仅是考试及格，或者哪怕是拿到了高分，而是喜欢那些贴近生活的思想和行为的目标。</p> <h1>四：他们如何教学？</h1> <p>他们将试图营造一个“自然的批判性的学习环境”，这这样的环境中，学生解决有趣的、巧妙的或者重要的问题，完成激励他们去努力掌握概念的真实任务，通过这样的方式来学习，反思他们的假设，研究他们针对现实的思维模式。学习者对自己的学习有一种控制感，他们同别人协同工作，并且相信他们的努力会得到公正和诚实的评判；他们可以不断尝试、失败并且接受有经验的学习者的反馈意见，然后获得他们的努力所作出的累积性评价。</p> <h1>五：他们如何对待学生？</h1> <p>他们通常认为学生渴望学习，而且，如果没有相反的证据，他们认为学生有能力学习。他们对学生坦诚以待，并且倾向于非常大方得体地对待学生。</p> <h1>六：他们如何检查自己的进步和评价自己的努力？</h1> <p>他们不是完美的人，但他们的优秀在于他们能认识到自己的不完美，并且能有一套方法评估自己的努力并做出适当地调整。同时，他们从不因为自己所面对的困难而责备学生，最后，他们通常对学术界有一种强烈的责任感，而不只是关注于在课堂上的个人成功。  <p> <p>上面这些大多直接来自原文，我摘录整理了一下。但在此基础上，我也结合我的一些经历，谈谈一些个人的见解和感想  <p> <p>这是我读过的第一本专门地、系统地论述如何教学的书籍，而且本书可贵之处在于不是教条式地讲理论，花了15年时间时间观察研究才写出这样的书，其所传达的意义与本书所要倡议的精神是不谋而合的：教育是一个严肃的话题，而论述教育更为严肃。优秀是可以通过培养得到的，这需要时间，并且这份坚持需要深层次的文化思想的支撑。  <p> <p>我会读这本书虽然因为机缘巧合，但也却非纯属偶然。生活中总是这样的，你其实会不断地寻找一些东西，也许一下子没有寻找到，但因为你一直在寻找，然后在某个时候你就会遇到，然后你就会说：哦，原来在这里呀。这不仅仅是一个比喻，我的意思是说，人都会关注一些自己感兴趣的东西，而且这种关注将引导你朝着这个方向前进。从这个意义上说，我们每个人都需要时常思考，你关注什么，因为你很可能会决定你最终会成为什么。  <p> <p>我并不是大学教师，虽然从业以来有一段与大学的短暂的合作，但我这些年来主要工作还是直接服务于一些企业，我是从06年开始开始了我作为讲师的一段旅程吧。这些年以来，讲师都是我的身份之一。算起来，我也去过不少地方，接触过各类企业，总体而言，我虽然谈不上是最好的讲师，甚至连最好的之一都谈不上，但表现也算中规中矩吧。我给自己的评分是80分左右吧。  <p> <p>接触过我的朋友大致都知道，我自己对教育方面有些小小的想法。在这样的前提，以及我对自己也不十分满意的背景下，就不难理解我为什么会对这本书有相见恨晚的感慨了。我一直也在想，有没有办法学习到一些较为系统的教学方面的方法，或者如何改进自己的一些讲课方面的不足。  <p> <p>我08年～09年左右有一段与某软件学院的短暂合作，期间也体会到我们教育体制的一些常见问题。这方面，我想等后面我的看法更加成熟的时候，再谈谈吧。这是一个大的话题，这些年来我发现越来越多的人开始关注教育，这是一个可喜的事情，有人去努力，总是会有些积极变化的。我也由衷地希望更多的力量投入到教育事业上去，而且真的要有责任感和使命感，并且注意提高教学的水平。  <p> <p>我先谈谈我在企业做培训的一些感想。我这里只能称之为“培训”，因为在企业内部做的这种课程，与在大学里面讲课还是有很大区别的。</p> <p>首先，目的性不太一样。企业培训的目的性更加有针对性，我总结分析过一般是三大类的情况</p> <ol> <li>新员工入职之后的培训（侧重于讲解核心的技术，帮助新员工快速开展工作）  <li>企业对于员工的梯队式培养（侧重于针对不同级别，设计不同的课程，单独学习）  <li>对于某些疑难问题的专题学习（例如性能调优，或者排错之类，往往是有些特定的问题）</li></ol> <p>其次，受众的情况不太一样。一般而言，企业培训的受众都是有一定工作经验基础的，经验有时候是好事，有时候也是坏事。所以，针对企业员工的培训课程，有时候很好讲，但反之亦然。</p>  <p>最后，授课的条件不太一样。企业的培训，通常时间是较为短期的，通常每次最多也就是2～3天，并且大家要知道，企业培训一般一讲就是一整天（6小时甚至以上），智力劳动之外，也是一个体力劳动。在这么一个短而且集中的时间内，首先相互也需要有一个熟悉的过程，并且最起码要完成一定的培训目标，如果能做到较为圆满，则是相对不易的。值得一提的是，有的企业在安排课程的时候，出于一些考虑，会要求压缩时间，这个时候，我也会提醒他们要根据自己的情况，不要盲目地压缩，效果肯定是不好的。</p>  <p>我还要谈一谈，由于所处的行业，决定了我所做的培训在一般的企业培训的基础上，又有一些特殊性：我们所处的IT行业，或者有的人说的计算机行业，其实一般又分为两个领域：研究和应用。我们大部分人现在做的是应用方面这个领域。</p> <p>【备注】如何理解研究和应用，可以给大家举个形象一点的例子，以我对微软的粗浅了解，他们在亚洲有研究院和工程院，研究院就是倾向于研究的，他们目前所研究的技术，可能会在多年后有用（当然，也可能没有用），工程院则侧重于将现有技术转化为微软的一些具体的产品中。</p>  <p>应用这个领域有什么特点呢？我想最简单的总结就是：技术繁多，而且更新换代很快。技术多，且更新快，这将对这个领域的讲师本身来说是一个很大的挑战，如果你不能将对有关的课题的理解提升到一定的高度，那么你自己要学会这些尚且不易，何况乎要去跟别人讲课呢？</p>  <p>经常也有朋友对我提出这样的问题，如何成为一个合格的讲师？问我这话的朋友，大抵首先是对我讲课还比较满意，觉得这样讲一讲也挺轻松似的。我当然首先首先因为得到认可而感到很开心，但还是会实事求是地说，其实我每次讲课也是如履薄冰，生怕出洋相，往往准备也要很长时间。总体而言，我觉得首要的一点，就是还是要有这份心，并且以此要求自己做好这份工作。</p>  <p>所以，由于这种工作的关系，加上我自己对教育比较兴趣。所以这些年的一些思考，虽然主要在于如何将企业培训的价值做得更加好一些，归根结底是想探索一些教育方面的方法。这本书所提到的一些大的方面的思想，有的我也想到一些，但没有具体化。我相信读这本书必然对我有所助益，并且也希望籍此推荐给更多的有兴趣的朋友。</p>  <h1>1. 教育是有意义的事情。</h1> <p>不管你是在学校，还是在其他相关的领域，如果你从事教学方面的工作，那么就尽量做好它，帮助到更多的人，同时也帮助你得到提升。我自己的最大收获，也就是在教学相长中有很大的进步。</p>  <h1>2. 要有恰当、并且行之有效的方法来提高教学质量</h1> <p>要做好这件事情，与其他任何事情一样，光有热情还是不够的，还得有方法。要了解受众的需要，但也不失正确的引导。了解受众的需要，称之为因材施教，因势利导；而所谓不失正确的引导，是因为身为教育者，需要有一定程度上的权威性和原则性，该要求就要求，这也是教育的意义所在。</p>  <h1>3. 培养思考的能力比传递具体的知识更重要</h1> <p>古话说的好“授人以鱼，不若授之以渔”，我也很赞同这一点。我感觉这方面还需要多多实践。主体思想就是，不要照本宣科地讲，一定要有自己的见解，并且要提出问题，给予一些空间和时间，让学习者参与进来。</p>  <p>以上算是我的一些笔记和感想，后续还会写一点</p>]]></description></item><item><title>关于网站应用程序池的帐号密码更改及其影响的实例分析</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/20/2295118.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 20 Dec 2011 12:31:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/20/2295118.html</guid><description><![CDATA[<p>这个标题看起来有点绕，但其实是一个常见的问题，而且很多朋友对此的理解都不深。我这里用一个例子来解释一下</p> <h1>实例场景</h1> <ol> <li>我们有一个网站（名称为test),它使用了一个应用程序池(名称也为test)</li></ol> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030464929.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030488716.png" width="454" height="554"></a></p> <ol> <li>这个应用程序池所使用的用户帐号为app_pool_test</li></ol> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030507278.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030545199.png" width="454" height="554"></a></p> <ol> <li>这个帐号当前的密码,假设为 abc 。当我设置好之后，我可以正常打开网站</li></ol> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030559475.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030561526.png" width="595" height="141"></a></p> <p>这个演示页面的功能很简单，我是使用下面的代码去访问了一下数据库</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.UI;
<span class="kwrd">using</span> System.Web.UI.WebControls;
<span class="kwrd">using</span> System.Data.SqlClient;
<span class="kwrd">namespace</span> WebApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> _default : System.Web.UI.Page
    {
        <span class="kwrd">protected</span> <span class="kwrd">void</span> Page_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">using</span>(var conn = <span class="kwrd">new</span> SqlConnection(<span class="str">"server=(local)\\sqlexpress;database=northwind;integrated security=true"</span>))
            {
                conn.Open();
                Response.Write(conn.State.ToString());
            }
        }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>请注意，这里我并没有指定用户名和密码，而是使用了integrated security=true。这通常称为“信任连接”或者“集成验证”。这个问题，我下面还会解释。</p>
<p>&nbsp;</p>
<p>大家可以看到，网站能正常工作。功能没有什么了不起的，这是一个简单的演示而已。但是下面大家思考一个问题：</p>
<p>假设app_pool_test 这个帐号的密码因为什么原因需要修改（这个很正常，很多公司都有密码修改策略的），那么</p>
<p><font color="#ff0000">1.网站还是否能正常打开？</font></p>
<p><font color="#ff0000">2.数据库还是否能访问？</font></p>


<p>&nbsp;</p>
<p>我这里就做一个测试，我现在将帐号的密码修改掉</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030586675.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202030592380.png" width="398" height="260"></a></p>
<p>奇怪的是，我们会发现网站照样能打开，数据库居然也照样能访问得上。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031006382.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031017038.png" width="595" height="141"></a></p>
<p>首先，这里你应该会有一个疑问：这是为什么呢？难道改了密码没有生效吗？到底什么时候会生效呢？</p>
<p>我们接下去做实验。假使当前这个服务器，因为某种原因（例如安装补丁包），需要重新启动。或者你自己因为某个原因，需要对IIS进行重启，例如执行了下面的命令</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031038108.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031041828.png" width="681" height="446"></a></p>
<p>然后，我们再次尝试打开刚才那个网页，就会发现如下的错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031067566.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031073554.png" width="759" height="310"></a></p>
<p>一般而言，503错误都是表示后台的Application Pool存在问题，我们到IIS中查看，确实发现它被停止了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031097830.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031105487.png" width="805" height="159"></a></p>
<p>而且你还会发现，无论你如何启动，只要页面刷新一下，它就又停止了。</p>
<p>除非，你再次在它这里将正确的用户名和密码设置一次。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031128227.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031148915.png" width="457" height="551"></a></p>
<p>然后，你会发现网站能正常工作了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031157934.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112202031169462.png" width="595" height="141"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>我希望你看懂了我想要描述的一个问题：<font color="#ff0000"><strong>当网站的应用程序池帐号密码被修改之后，将如何影响到当前的网站。</strong></font></p>
<p>先将结论给大家说一下</p>
<p>1. 如果当前的网站，没有被重置。我测试下来是，只要IIS没有被重启过，或者应用程序池没有被停止过，就可以继续使用。</p>
<p>2. 否则，当前网站会无法正常工作，而且应用程序池再也无法启动，除非设置正确的密码。</p>
<p>&nbsp;</p>
<p>那么，这是为什么呢？</p>
<p>1. IIS启动的时候，默认会启动所有的应用程序池，并且使用它们的标识和密码，去请求windows系统（可能是本机，也可能是AD)进行认证</p>
<p>2. 只要认证通过了，那么应用程序池将启动，而且这个身份会被缓存起来。</p>
<p>3. 一般的应用程序，要访问后台数据库的时候，如果选择了“集成验证(integrated security=true)”这种方式的话，那么就是使用应用程序池的这个身份。</p>
<p>4. “集成验证”有时候也称为信任连接，这是什么意思呢？就是说SQL Server其实不再对帐号和密码进行验证，它“信任”windows传递过来的身份，也就是说，只要上面的第2步通过了，确实帐号是app_pool_test，那么SQL Server就认为它是app_pool_test,而不再重复验证密码。</p>
<p>5. 当IIS被重启，或者应用程序池被重启，此时就需要再次验证身份。而如果此时发现密码不匹配了，就自然无法启动应用程序池，然后也自然无法启动网站，然后也不会发生访问数据库的行为。</p>
<p>&nbsp;</p>
<h1>总结</h1>
<p>在做应用程序部署的时候，你会遇到很多复杂甚至棘手的情况，这篇文章就描述了其中一种常见的状况：</p>
<p>应用程序池的帐号密码修改之后（其实，很多时候，作为开发人员的角度，你可能不知道密码已经被修改了），所以你可能会发现一些“诡异”的现象，例如刚刚还能正常使用的程序，突然又不能使用了。理解本文，将有助于你解释这样的状况，以及了解如何解决。</p>]]></description></item><item><title>关于SharePoint 2010体系架构的几个话题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/18/2291658.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 18 Dec 2011 03:13:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/18/2291658.html</guid><description><![CDATA[<p>最近给一个客户讲解SharePoint体系架构、管理维护这方面的内容。有几个主要问题整理出来给大家参考参考。陆续会有几篇文章</p> <p>&nbsp;</p> <h1>1.SharePoint到底是怎么工作的？</h1> <p>这个问题要从“SharePoint是什么”说起。SharePoint其实说到底是一个基于ASP.NET的应用平台。它的主体部分是通过一个用户所熟知的网站提供服务的，此为其一。</p> <p>接下来，我们就要问了，作为一个网站而言，SharePoint的网站与一般的网站是否有什么不一样呢？答案是，有。SharePoint的网站虽然在IIS里面看起来与一般的网站并不什么两样（如下图），但是其实内部有很大的区别。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113027032.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113027065.png" width="387" height="365"></a></p> <p>SharePoint的网站，注册了一些特殊的HttpModule和HttpHandler，熟悉ASP.NET开发的朋友们都知道，这是ASP.NET中高级定制的两个重要手段。简单来说，SharePoint通过这些自定义的Module(模块）接管了用户的请求，从根本上实现了动态网页处理的功能。（下一个话题还会介绍一下动态网页的概念）</p> <p>这些Module或者Handler的定义，默认如下（你可以在网站的web.config）找到它们</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">security</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">requestFiltering</span> <span class="attr">allowDoubleEscaping</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">requestLimits</span> <span class="attr">maxAllowedContentLength</span><span class="kwrd">="2147483647"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">requestFiltering</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">security</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">validation</span> <span class="attr">validateIntegratedModeConfiguration</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span> <span class="attr">runAllManagedModulesForAllRequests</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="AnonymousIdentification"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="FileAuthorization"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="Profile"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="WebDAVModule"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="Session"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="SPRequestModule"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="attr">type</span><span class="kwrd">="Microsoft.SharePoint.ApplicationRuntime.SPRequestModule, Microsoft.SharePoint, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="ScriptModule"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="SharePoint14Module"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="StateServiceModule"</span> <span class="attr">type</span><span class="kwrd">="Microsoft.Office.Server.Administration.StateModule, Microsoft.Office.Server, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="PublishingHttpModule"</span> <span class="attr">type</span><span class="kwrd">="Microsoft.SharePoint.Publishing.PublishingHttpModule, Microsoft.SharePoint.Publishing, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">modules</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">handlers</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="OPTIONSVerbHandler"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="WebServiceHandlerFactory-Integrated"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="svc-Integrated"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">remove</span> <span class="attr">name</span><span class="kwrd">="WebDAV"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="svc-Integrated"</span> <span class="attr">path</span><span class="kwrd">="*.svc"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">type</span><span class="kwrd">="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="OwssvrHandler"</span> <span class="attr">scriptProcessor</span><span class="kwrd">="C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\isapi\owssvr.dll"</span> <span class="attr">path</span><span class="kwrd">="/_vti_bin/owssvr.dll"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">modules</span><span class="kwrd">="IsapiModule"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="ScriptHandlerFactory"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">path</span><span class="kwrd">="*.asmx"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="ScriptHandlerFactoryAppServices"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">path</span><span class="kwrd">="*_AppService.axd"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="ScriptResource"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="attr">verb</span><span class="kwrd">="GET,HEAD"</span> <span class="attr">path</span><span class="kwrd">="ScriptResource.axd"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="JSONHandlerFactory"</span> <span class="attr">path</span><span class="kwrd">="*.json"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="attr">resourceType</span><span class="kwrd">="Unspecified"</span> <span class="attr">preCondition</span><span class="kwrd">="integratedMode"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="ReportViewerWebControl"</span> <span class="attr">verb</span><span class="kwrd">="*"</span> <span class="attr">path</span><span class="kwrd">="Reserved.ReportViewerWebControl.axd"</span> <span class="attr">type</span><span class="kwrd">="Microsoft.Reporting.WebForms.HttpHandler, Microsoft.ReportViewer.WebForms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">handlers</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>需要注意的是，SharePoint 2010是基于IIS 7的，默认情况下，它采用的管道模型是“集成（integratedMode）”，所以这些Module和Handler是注册在system.webServer下面的。</p>
<p>关于IIS 7的管道模型，如果你有兴趣，可以参考 <a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/19/2084579.html">如何理解IIS 7的两种应用程序池的管道模式（Managed Pipeline Mode)</a></p>
<p>&nbsp;</p>
<h1>2. SharePoint的网页在磁盘上有没有？</h1>
<p>接下来一个话题就是，SharePoint的网页到底在哪里？是在磁盘中，还是在数据库中？</p>
<p>这个问题的答案是：有的是在磁盘上，有的是在数据库里面。有时候在磁盘上，有时候在数据库里面。</p>
<p>听起来有点玄，对吧，其实也不难理解的，且听我解释</p>
<p>首先讲，<font color="#ff0000">有的是在磁盘上，有的是在数据库里面。</font></p>
<p>我想大部分人开始了解SharePoint的时候，都知道它是一个网站,我们一般会通过如下的地址去访问它，假设当前这个webapplication就是在我的本地服务器，而且是在80端口的</p>
<p><a title="http://chenxizhang-pc/" href="http://chenxizhang-pc/">http://chenxizhang-pc/</a></p>
<p>在sharepoint 2010中，默认情况下，这个地址会被重定向到</p>
<p><a title="http://chenxizhang-pc/SitePages/Home.aspx" href="http://chenxizhang-pc/SitePages/Home.aspx">http://chenxizhang-pc/SitePages/Home.aspx</a></p>
<p>这是自动的行为，我们先来看一下它到底是怎么样的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113025670.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113029606.png" width="923" height="538"></a></p>
<p>这是我们熟悉的一个页面。很多朋友就好奇了，那么这个Home.aspx是在哪里的呢？这个页面（本质上是一个wiki页面），是在数据库里面的。为什么呢？它其实是定义在一个文档库中的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113031035.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113035736.png" width="918" height="383"></a></p>
<p>这个页面是由当前这个Site Template自动提供的，SharePoint 2010 默认情况下会使用wiki页面作为首页。wiki页面的好处编辑很方便。这是我们都是知道的。</p>
<p>如果我们需要添加其他页面，你有两种选择：wiki页面和web part页面（之前的SharePoint 2007的默认页面结构）。需要注意的是，这两个页面都是放在数据库里面的。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113033576.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113038593.png" width="1018" height="342"></a></p>
<p>同时，SharePoint允许我们将其中任何一个页面设置为主页</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113031657.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113048310.png" width="810" height="253"></a></p>
<p>所以，总结一下，这一类页面，属于是用户定制出来的，自然是要放在数据库里面的。</p>
<p>那么，那些页面是不放在数据库里面的呢？</p>
<p>下面这个页面，default.aspx，默认就不放在数据库里面，而是会读取到本地磁盘上，网站模板中的文件</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113041690.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111218111304295.png" width="815" height="297"></a></p>
<p>这个文件，默认是由网站模板提供的，如下图</p>
<p>C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\TEMPLATE\SiteTemplates\sts</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113041723.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113048376.png" width="870" height="291"></a></p>
<p>同时，默认情况下，所有列表的新建，编辑，显示页面，都是读取本地磁盘的文件，而不读取数据库。</p>
<p>C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\TEMPLATE\SiteTemplates\SPSSITES\LISTS\SITESLST</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113045901.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113057329.png" width="635" height="370"></a></p>
<p>这是第二大类页面，他们属于网站默认就应该有的，默认情况下，这些文件无需读取数据库，直接使用本地模板就可以了。【请注意，我说的是默认情况下，不需要读取数据库】</p>
<p>&nbsp;</p>
<p>还有第三类页面，例如网站配置页面</p>
<p><a title="http://chenxizhang-pc/_layouts/settings.aspx" href="http://chenxizhang-pc/_layouts/settings.aspx">http://chenxizhang-pc/_layouts/settings.aspx</a></p>
<p>这种页面永远读取本地文件，而且这种页面，我们有个专业术语，叫做Application Page。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111218111305394.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113059871.png" width="861" height="684"></a></p>
<p>这个页面对应的文件位置在</p>
<p>C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\TEMPLATE\LAYOUTS</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111218111306526.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113075052.png" width="704" height="725"></a></p>
<p>有时候，我们也会为SharePoint定制一些解决方案，也许也会用到一些页面，那么这些页面其实也是要部署到这个目录里面来。也就是说，Application Page永远都是使用本地文件的。</p>
<p>所以，总结起来，SharePoint中有三种页面，他们分别对应的位置如下</p>
<table style="color: #000000" border="1" cellspacing="0" cellpadding="2" width="731">
<tbody>
<tr>
<td valign="top" width="449">页面类型</td>
<td valign="top" width="280">位置</td></tr>
<tr>
<td valign="top" width="449">wiki页面，和webpart页面（有时候称为内容页）</td>
<td valign="top" width="280">数据库</td></tr>
<tr>
<td valign="top" width="449">default.aspx或者列表所用的页面</td>
<td valign="top" width="280">默认在磁盘，可能在数据库（下面会解释这个问题）</td></tr>
<tr>
<td valign="top" width="449">应用程序页面</td>
<td valign="top" width="280">磁盘</td></tr></tbody></table>
<p>&nbsp;</p>
<p><font color="#ff0000">那么，为什么说default.aspx或者列表所用的页面有时候在磁盘上，有时候在数据库里面呢？</font></p>
<p>这些页面，默认读取磁盘的用意很明显，就是说尽量减少对数据库的读写。大家可以试想一下，假设你有100个网站，里面有N个列表，如果为每个列表都产生上面所提到的11个页面，放在数据库里面，那将是多少页面。如果列表页面不需要特别定制，为什么不可以使用一个页面，而且就使用本地这个文件呢？</p>
<p>所以，如果说这些页面，不需要经过定制的话，读取磁盘上的文件是最佳的做法。</p>
<p>但是，如果这些页面，需要经过定制，形成当前网站的独特设计，再读取磁盘上的文件就不合适了，此时该文件就会被复制一份，放在该网站所对应的内容数据库里面去。而SharePoint的引擎，要处理某个页面请求的时候，会先检查数据库中是否有该页面，如果没有，则尝试读取本地磁盘。</p>
<p>有意思的是，为了以示区分，经过定制的页面，在SharePoint Designer中看到的效果有点特殊。页面前面会有一个图标</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113076481.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112181113078673.png" width="572" height="165"></a></p>
<p>在微软官方文档中，这些没有定制过的页面，有一个叫法为“ghosting page”，而经过定制的页面，叫为“unghosted page”</p>
<p>&nbsp;</p>
<p>这一篇先谈这两个话题吧，希望大家可以对sharepoint的体系结构有更加深入的理解</p>]]></description></item><item><title>谈谈MVC项目中的缓存功能设计的相关问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/14/2288062.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 14 Dec 2011 13:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/14/2288062.html</guid><description><![CDATA[<p>今天这一篇文章我来谈一谈在MVC 3项目中的缓存功能，以及针对缓存的一些设计上的考量，给大家参考参考</p> <h1>前言</h1> <p>为什么需要讨论缓存？缓存是一个中大型系统所必须考虑的问题。为了避免每次请求都去访问后台的资源（例如数据库），我们一般会考虑将一些更新不是很频繁的，可以重用的数据，通过一定的方式临时地保存起来，后续的请求根据情况可以直接访问这些保存起来的数据。这种机制就是所谓的缓存机制。</p> <p>根据缓存的位置不同，可以区分为：</p> <ol> <li>客户端缓存（缓存在用户的客户端，例如浏览器中）</li> <li>服务器缓存（缓存在服务器中，可以缓存在内存中，也可以缓存在文件里，并且还可以进一步地区分为本地缓存和分布式缓存两种）</li></ol> <p>应该说，缓存的设计是一门较为复杂的学问，主要考虑的问题包括</p> <ol> <li>要不要缓存？</li> <li>要缓存哪些数据？</li> <li>要缓存多少数据？</li> <li>要缓存多久？</li> <li>如何更新缓存（手动还是自动）</li> <li>将缓存放在哪里？</li></ol> <p>本文将以较为通俗易懂的方式，来看一看在MVC3的项目中，如何使用缓存功能。对于上述提到的一些具体业务问题，我这里不会进行太过深入地探讨。</p> <p>&nbsp;</p> <h1>MVC3中的缓存功能</h1> <p>ASP.NET MVC3 继承了ASP.NET的优良传统，内置提供了缓存功能支持。主要表现为如下几个方面</p> <ul> <li> <p>可以直接在Controller，Action或者ChildAction上面定义输出缓存（这个做法相当于原先的页面缓存和控件缓存功能）</p></li> <li> <p>支持通过CacheProfile的方式，灵活定义缓存的设置（新功能）</p></li> <li> <p>支持缓存依赖，以便当外部资源发生变化时得到通知，并且更新缓存</p></li> <li> <p>支持使用缓存API，还支持一些第三方的缓存方案（例如分布式缓存）</p></li></ul> <p>那么，下面我们就逐一来了解一下吧</p> <h1>0.范例准备</h1> <p>我准备了一个空白的MVC 3项目，里面创建好了一个Model类型：Employee</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">namespace</span> MvcApplicationCacheSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Gender { get; set; }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后，我还准备了一个HomeController</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> MvcApplicationCacheSample.Models;

<span class="kwrd">namespace</span> MvcApplicationCacheSample.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>
        <span class="kwrd">public</span> ActionResult Index()
        {
            <span class="rem">//这里目前作为演示，是直接硬编码，实际上可能是读取数据库的数据</span>
            var employees = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,Name=<span class="str">"ares"</span>,Gender=<span class="str">"Male"</span>}
            };
            <span class="kwrd">return</span> View(employees);
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>同时，为这个Action生成了一个View</p><pre class="csharpcode">@model IEnumerable&lt;MvcApplicationCacheSample.Models.Employee&gt;

@{
    ViewBag.Title = <span class="str">"Index"</span>;
}

&lt;h2&gt;Index&lt;/h2&gt;

&lt;p&gt;
    @Html.ActionLink(<span class="str">"Create New"</span>, <span class="str">"Create"</span>)
&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;
            Name
        &lt;/th&gt;
        &lt;th&gt;
            Gender
        &lt;/th&gt;
        &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;

@<span class="kwrd">foreach</span> (var item <span class="kwrd">in</span> Model) {
    &lt;tr&gt;
        &lt;td&gt;
            @Html.DisplayFor(modelItem =&gt; item.Name)
        &lt;/td&gt;
        &lt;td&gt;
            @Html.DisplayFor(modelItem =&gt; item.Gender)
        &lt;/td&gt;
        &lt;td&gt;
            @Html.ActionLink(<span class="str">"Edit"</span>, <span class="str">"Edit"</span>, <span class="kwrd">new</span> { id=item.ID }) |
            @Html.ActionLink(<span class="str">"Details"</span>, <span class="str">"Details"</span>, <span class="kwrd">new</span> { id=item.ID }) |
            @Html.ActionLink(<span class="str">"Delete"</span>, <span class="str">"Delete"</span>, <span class="kwrd">new</span> { id=item.ID })
        &lt;/td&gt;
    &lt;/tr&gt;
}

&lt;/table&gt;
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
所以，当前的应用程序运行起来看到的效果大致是下面这样的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142100599925.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142100594626.png" width="578" height="310"></a></p>
<p>这个例子很简单，没有太多需要解释的。</p>
<p>&nbsp;</p>
<h1>1.使用输出缓存</h1>
<p>那么，现在我们假设这个读取员工的数据很频繁，但是数据又更新不是很频繁，我们就会想到，能不能对这部分数据进行缓存，以便减少每次执行的时间。</p>
<p>是的，我们可以这么做，而且也很容易做到这一点。MVC中内置了一个OutputCache的ActionFilter，我们可以将它应用在某个Action或者ChildAction上面</p>
<p>【备注】ChildAction是MVC3的一个新概念，本质上就是一个Action，但通常都是返回一个PartialView。通常这类Action，可以加上一个ChildActionOnly的ActionFilter以标识它只能作为Child被请求，而不能直接通过地址请求。</p>
<p>【备注】我们确实可以在Controller级别定义输出缓存，但我不建议这么做。缓存是要经过考虑的，而不是不管三七二十一就全部缓存起来。缓存不当所造成的问题可能比没有缓存还要大。</p>
<p>&nbsp;</p>
<p>下面的代码启用了Index这个Action的缓存功能，我们让他缓存10秒钟。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> MvcApplicationCacheSample.Models;

<span class="kwrd">namespace</span> MvcApplicationCacheSample.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>
 <strong>       [OutputCache(Duration=10)]</strong>
        <span class="kwrd">public</span> ActionResult Index()
        {
            <span class="rem">//这里目前作为演示，是直接硬编码，实际上可能是读取数据库的数据</span>
            var employees = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,Name=<span class="str">"ares"</span>,Gender=<span class="str">"Male"</span>}
            };
            <span class="kwrd">return</span> View(employees);
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>那么，也就是说，第一次请求这个Index的时候，里面的代码会执行，并且结果会被缓存起来，然后在10秒钟内，第二个或者后续的请求，就不需要再次执行，而是直接将结果返回给用户即可。</p>
<p>这个OutputCache的Attribute，实际上是一个ActionFilter，它有很多参数，具体的请参考</p>
<p><a title="http://msdn.microsoft.com/zh-cn/library/system.web.mvc.outputcacheattribute.aspx" href="http://msdn.microsoft.com/zh-cn/library/system.web.mvc.outputcacheattribute.aspx">http://msdn.microsoft.com/zh-cn/library/system.web.mvc.outputcacheattribute.aspx</a></p>
<p>这些参数中，Duration是必须的，这是设置一个过期时间，以秒为单位，这个我想大家都很好理解。我重点要一下下面几个</p>
<ul>
<li>VaryByContentEncoding<br>VaryByCustom<br>VaryByHeader<br>VaryByParam</li></ul>
<p>这四个参数的意思是，决定缓存中如何区分不同请求，就是说，哪些因素将决定使用还是不使用缓存。默认情况下，如果不做任何设置，那么在规定的时间内（我们称为缓存期间），所有用户，不管用什么方式来访问，都是直接读取缓存。</p>
<p><font color="#ff0000">VaryByParam</font>，可以根据用户请求的参数来决定是否读取缓存。这个参数主要指的就是QueryString。例如</p>
<blockquote>
<p><font color="#000000">如果我们缓存了<a href="http://localhost/Home/Index">http://localhost/Home/Index</a>，那么用这个地址来访问的时候，规定时间内都是读取缓存。但如果用<a href="http://localhost/Home/Index?name=chenxizhang">http://localhost/Home/Index?name=chenxizhang</a>这样的地址过来访问，显然我们希望不要读取缓存，因为参数不一样了。要实现这样的需求，也就是说，希望根据name参数的不同缓存不同的数据。则可以设置VaryByParam=”name”。</font></p>
<p><font color="#000000">如果有多个参数的话，可以用逗号分开他们。例如 VaryByParam=”name,Id”</font></p></blockquote>
<p><font color="#000000">&nbsp;&nbsp;&nbsp; 【备注】这里其实会有一个潜在的风险，由于针对不同的参数（以及他们的组合）需要缓存不同的数据版本，假设有一个恶意的程序，分别用不同的参数发起大量的请求，那么就会导致缓存爆炸的情况，极端情况下，会导致服务器出现问题。（当然，IIS里面，如果发现缓存的内容不够用了，会自动将一些数据清理掉，但这就同样导致了程序的不稳定性，因为某些正常需要用的缓存可能会被销毁掉）。这也就是我为什么强调说，缓存设计是一个比较复杂的事情。</font></p>
<p><font color="#ff0000">VaryByHeader</font>，可以根据用户请求中所提供的一些Header信息不同而决定是否读取缓存。我们可以看到在每个请求中都会包含一些Header信息，如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142100593022.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142100594135.png" width="817" height="618"></a></p>
<p>这个也很有用，例如根据不同的语言，我们显然是有不同的版本的。或者根据用户浏览器不同，也可以缓存不同的版本。可以通过这样设置</p>
<p><font color="#ff0000">VaryByHeader=”Accept-Language,User-Agent”</font></p>
<p>上面两个是比较常用的。当然还有另外两个属性也可以设置</p>
<p>VaryByContentEncoding，一般设置为Accept-Encoding里面可能的Encoding名称，从上图也可以看出，Request里面是包含这个标头的。</p>
<p>VaryByCustom，则是一个完全可以定制的设置，例如我们可能需要根据用户角色来决定不同的缓存版本，或者根据浏览器的一些小版本号来区分不同的缓存版本，我们可以这样设置：VaryByCustom=”Role,BrowserVersion”,这些名称是你自己定义的，光这样写当然是没有用的，我们还需要在Global.asax文件中，添加一个特殊的方法，来针对这种特殊的需求进行处理。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> System.Web.Routing;
<strong><font color="#ff0000"><span class="kwrd">using</span> System.Web.Security;</font></strong>

<span class="kwrd">namespace</span> MvcApplicationCacheSample
{
    <span class="rem">// Note: For instructions on enabling IIS6 or IIS7 classic mode, </span>
    <span class="rem">// visit http://go.microsoft.com/?LinkId=9394801</span>

    <span class="kwrd">public</span> <span class="kwrd">class</span> MvcApplication : System.Web.HttpApplication
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(<span class="kwrd">new</span> HandleErrorAttribute());
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute(<span class="str">"{resource}.axd/{*pathInfo}"</span>);

            routes.MapRoute(
                <span class="str">"Default"</span>, <span class="rem">// Route name</span>
                <span class="str">"{controller}/{action}/{id}"</span>, <span class="rem">// URL with parameters</span>
                <span class="kwrd">new</span> { controller = <span class="str">"Home"</span>, action = <span class="str">"Index"</span>, id = UrlParameter.Optional } <span class="rem">// Parameter defaults</span>
            );

        }

        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            RegisterRoutes(RouteTable.Routes);
        }

<strong><font color="#ff0000">        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> GetVaryByCustomString(HttpContext context, <span class="kwrd">string</span> custom)
        {
            <span class="kwrd">switch</span>(custom)
            {
                <span class="kwrd">case</span> <span class="str">"Role"</span>:
                    {
                        <span class="kwrd">return</span> <span class="kwrd">string</span>.Join(<span class="str">","</span>, Roles.GetRolesForUser());
                    }
                <span class="kwrd">case</span> <span class="str">"BrowserVersion"</span>:
                    {
                        <span class="kwrd">return</span> context.Request.Browser.Type;
                    }

                <span class="kwrd">default</span>:
                    <span class="kwrd">break</span>;
            }

            <span class="kwrd">return</span> <span class="kwrd">string</span>.Empty;
        }</font></strong>
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>上面四个属性，可以改变缓存使用的行为。另外还有一个重要属性将影响缓存保存的位置，这就是Location属性，这个属性有如下几个可选项，我从文档中摘录过来</p>
<table style="color: #000000" border="1" cellspacing="1" cellpadding="2" width="926">
<tbody>
<tr>
<td valign="top" width="200">
<p style="line-height: normal; text-indent: 0pt"><font face="Times New Roman">成员名称</font></p></td>
<td valign="top" width="721">
<p style="line-height: normal; text-indent: 0pt"><font face="Times New Roman">说明</font></p></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">Any</font></td>
<td valign="top" width="721"><font face="Times New Roman">输出缓存可位于产生请求的浏览器客户端、参与请求的代理服务器（或任何其他服务器）或处理请求的服务器上。<strong><font color="#ff0000">（这是默认值）</font></strong></font></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">Client</font></td>
<td valign="top" width="721"><font face="Times New Roman">输出缓存位于产生请求的浏览器客户端上。</font></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">Downstream</font></td>
<td valign="top" width="721"><font face="Times New Roman">输出缓存可存储在任何 HTTP 1.1 可缓存设备中，源服务器除外。这包括代理服务器和发出请求的客户端。</font></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">Server</font></td>
<td valign="top" width="721"><font face="Times New Roman">输出缓存位于处理请求的 Web 服务器上。</font></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">None</font></td>
<td valign="top" width="721"><font face="Times New Roman">对于请求的页，禁用输出缓存。</font></td></tr>
<tr>
<td valign="top" width="200"><font face="Times New Roman">ServerAndClient</font></td>
<td valign="top" width="721"><font face="Times New Roman">输出缓存只能存储在源服务器或发出请求的客户端中。代理服务器不能缓存响应。</font></td></tr></tbody></table>
<p>这里要思考一个问题，设置为Client与设置为Server有哪些行为上面的不同</p>
<p>如果设置为Client，那么第一次请求的时候，得到的响应标头里面，会记录好这个页面应该是要缓存的，并且在10秒之后到期。如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101008072.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101001693.png" width="817" height="618"></a></p>
<p>而如果设置为Server的话，则会看到客户端是没有缓存的。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101001726.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101005663.png" width="817" height="618"></a></p>
<p>看起来不错，不是吗？如果你不加思索地就表示同意，我要告诉你，你错了。所以，不要着急就下结论，请再试一下设置为Client的情况，你会发现，如果你刷新页面，那么仍然会发出请求，而且Result也是返回200，这表示这是一个新的请求，确实也返回了结果。这显然是跟我们预期不一样的。</p>
<p>为了做测试，我特意加了一个时间输出，如果仅仅设置为Client的话，每次刷新这个时间都是不一样的。这说明，服务器端代码被执行了。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101015139.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101019840.png" width="817" height="618"></a></p>
<p>同样的问题也出现在，如果我们将Location设置为ServerAndClient的时候，其实你会发现Client的缓存好像并没有生效，每次都仍然是请求服务器，只不过这一种情况下，服务器端已经做了缓存，所以在规定时间内，服务器代码是不会执行的，所以结果也不会变。但是问题在于，既然设置了客户端缓存，那么理应就直接使用客户端的缓存版本，不应该去请求服务器才对。</p>
<p>这个问题，其实属于是ASP.NET本身的一个问题，这里有一篇文章介绍 <a title="http://blog.miniasp.com/post/2010/03/30/OutputCacheLocation-ServerAndClient-problem-fixed.aspx" href="http://blog.miniasp.com/post/2010/03/30/OutputCacheLocation-ServerAndClient-problem-fixed.aspx">http://blog.miniasp.com/post/2010/03/30/OutputCacheLocation-ServerAndClient-problem-fixed.aspx</a></p>
<p>我们可以看一下，将Location设置为ServerAndClient， 对代码稍作修改</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> MvcApplicationCacheSample.Models;
<span class="kwrd">using</span> System.Web.UI;

<span class="kwrd">namespace</span> MvcApplicationCacheSample.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>
        [OutputCache(Duration=10,Location=OutputCacheLocation.ServerAndClient)]
        <span class="kwrd">public</span> ActionResult Index()
        {

           <strong><font color="#ff0000"> Response.Cache.SetOmitVaryStar(<span class="kwrd">true</span>);
</font></strong>
            ViewBag.CurrentTime = DateTime.Now.ToString();


            <span class="rem">//这里目前作为演示，是直接硬编码，实际上可能是读取数据库的数据</span>
            var employees = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,Name=<span class="str">"ares"</span>,Gender=<span class="str">"Male"</span>}
            };
            <span class="kwrd">return</span> View(employees);
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101012381.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112142101026875.png" width="817" height="610"></a></p>
<p>我们看到，从第二次请求开始，状态码是304，这表示该页被缓存了，所以浏览器并不需要请求服务器的数据。而且你可以看到Received的字节为221B，而不是原先的1.25KB。</p>
<p>但是，<font color="#ff0000"><strong>如果仅仅设置为Client，则仍然无法真正实现客户端缓存（这个行为是有点奇怪的）</strong></font>。这个问题我确实也一直没有找到办法，如果我们确实需要使用客户端缓存，索性我们还是设置为ServerAndClient吧。</p>
<p>使用客户端缓存，可以明显减少对服务器发出的请求数，这从一定意义上更加理想。</p>
<p>&nbsp;</p>
<h1>2.使用缓存配置文件</h1>
<p>第一节中，我们详细地了解了MVC中，如何通过OutputCache这个ActionFilter来设置缓存。但是，因为这些设置都是通过C#代码直接定义在Action上面的，所以未免不是很灵活，例如我们可能需要经常调整这些设置，该如何办呢？</p>
<p>ASP.NET 4.0中提供了一个新的机制，就是CacheProfile的功能，我们可以在配置文件中，定义所谓的Profile，然后在OutputCache这个Attribute里面可以直接使用。</p>
<p>通过下面的例子，可以很容易看到这种机制的好处。下面的节点定义在system.web中</p><pre class="csharpcode">
    <span class="kwrd">&lt;</span><span class="html">caching</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">outputCacheSettings</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">outputCacheProfiles</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="employee"</span> <span class="attr">duration</span><span class="kwrd">="10"</span> <span class="attr">enabled</span><span class="kwrd">="true"</span> <span class="attr">location</span><span class="kwrd">="ServerAndClient"</span> <span class="attr">varyByParam</span><span class="kwrd">="none"</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">outputCacheProfiles</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">outputCacheSettings</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">caching</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>然后，代码中可以直接地使用这个Profile了</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> MvcApplicationCacheSample.Models;
<span class="kwrd">using</span> System.Web.UI;

<span class="kwrd">namespace</span> MvcApplicationCacheSample.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>
        [OutputCache(CacheProfile=<span class="str">"employee"</span>)]
        <span class="kwrd">public</span> ActionResult Index()
        {

            <span class="rem">//Response.Cache.SetOmitVaryStar(true);</span>

            ViewBag.CurrentTime = DateTime.Now.ToString();


            <span class="rem">//这里目前作为演示，是直接硬编码，实际上可能是读取数据库的数据</span>
            var employees = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,Name=<span class="str">"ares"</span>,Gender=<span class="str">"Male"</span>}
            };
            <span class="kwrd">return</span> View(employees);
        }

    }
}
</pre>
<p>这个例子很直观，有了Profile，我们可以很轻松地在运行时配置缓存的一些关键值。</p>
<pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h1>3.使用缓存API</h1>
<p>通过上面的两步，我们了解到了使用OutputCache，并且结合CacheProfile，可以很好地实现灵活的缓存配置。但是有的时候，我们可能还希望对缓存控制得更加精细一些。因为OutputCache是对Action的缓存，不同的Action之间是不能共享数据的，假如某些数据，我们是在不同的Action之间共享的，那么，简单地采用OutputCache来做，就会导致对同一份数据，缓存多次的问题。</p>
<p>所以，ASP.NET除了提供OutputCache这种基于声明的输出缓存设置之外，还允许我们在代码中，自己控制要对哪些数据进行缓存，并且提供了更多的选项。</p>
<p>关于如何通过API的方式添加或者使用缓存，请参考</p>
<p><a title="http://msdn.microsoft.com/zh-cn/library/18c1wd61%28v=VS.80%29.aspx" href="http://msdn.microsoft.com/zh-cn/library/18c1wd61%28v=VS.80%29.aspx">http://msdn.microsoft.com/zh-cn/library/18c1wd61%28v=VS.80%29.aspx</a></p>
<p>基本上就是使用HttpContext.Cache类型，可以完成所有的操作，而且足够灵活。</p>
<p>&nbsp;</p>
<p>值得一提的是，我知道不少公司在项目中都会采用一些ORM框架，某些ORM框架中也允许实现缓存。例如NHibernate就提供了较为丰富的缓存功能，大致可以参考一下 <a title="http://www.cnblogs.com/RicCC/archive/2009/12/28/nhibernate-cache-internals.html" href="http://www.cnblogs.com/RicCC/archive/2009/12/28/nhibernate-cache-internals.html">http://www.cnblogs.com/RicCC/archive/2009/12/28/nhibernate-cache-internals.html</a></p>
<p>&nbsp;</p>
<p>需要注意的是，微软自己提供的Entity Framework本身并没有包含缓存的功能。</p>
<p>这里仍然要特别提醒一下，使用这种基于API的缓存方案，需要仔细推敲每一层缓存的设置是否合理，以及更新等问题。</p>
<p>&nbsp;</p>
<h1>4.使用缓存依赖</h1>
<p>很早之前，在ASP.NET中设计缓存的时候，我们就可以使用缓存依赖的技术。关于缓存依赖，详细的信息请参考 <a title="http://msdn.microsoft.com/zh-cn/library/ms178604.aspx" href="http://msdn.microsoft.com/zh-cn/library/ms178604.aspx">http://msdn.microsoft.com/zh-cn/library/ms178604.aspx</a></p>
<p>实际上，这个技术确实很有用，ASP.NET默认提供了一个<a href="http://msdn.microsoft.com/zh-cn/library/system.web.caching.sqlcachedependency.aspx">SqlCacheDependency</a>，可以通过配置，连接SQL Server数据库，当数据库的表发生变化的时候，会通知到ASP.NET，该缓存就会失效。</p>
<p>值得一提的是，不管是采用OutputCache这样的声明式的缓存方式，还是采用缓存API的方式，都可以使用到缓存依赖。而且使用缓存API的话，除了使用SqlCacheDependency之外，还可以使用标准的CacheDependency对象，实现对文件的依赖。</p>
<p><a title="http://msdn.microsoft.com/zh-cn/library/system.web.caching.cachedependency%28v=VS.80%29.aspx" href="http://msdn.microsoft.com/zh-cn/library/system.web.caching.cachedependency%28v=VS.80%29.aspx">http://msdn.microsoft.com/zh-cn/library/system.web.caching.cachedependency%28v=VS.80%29.aspx</a></p>
<p>&nbsp;</p>
<h1>5.分布式缓存</h1>
<p>上面提到的手段都很不错，如果应用系统不是很庞大的话，也够用了。需要注意的是，上面所提到的缓存手段，都是在Web服务器本地内存中进行缓存，这种做法的问题在于，如果我们需要做负载均衡（一般就会有多台服务器）的时候，就不可能在多台服务器之间共享到这些缓存。正因为如此，分布式缓存的概念就应运而生了。</p>
<p>谈到分布式缓存，目前比较受到大家认可的一个开源框架是 memcached。顾名思义，它仍然使用的是内存的缓存，只不过，它天生就是基于分布式的，它的访问都是直接通过tcp的方式，所以可以访问远程服务器，也可以多台Web服务器访问同一台缓存服务器。</p>
<p>关于memcached以及它在.NET中的使用，之前有一个朋友有写过一个介绍，可以参考使用一下</p>
<p><a title="http://www.cnblogs.com/zjneter/archive/2007/07/19/822780.html" href="http://www.cnblogs.com/zjneter/archive/2007/07/19/822780.html">http://www.cnblogs.com/zjneter/archive/2007/07/19/822780.html</a></p>
<p>&nbsp;</p>
<p>需要注意的是，<strong><font color="#ff0000">分布式缓存不是为了来提高性能的（这可能是一个误区）</font></strong>，并且可以肯定的是，它的速度一定会被本地慢一些。如果你的应用只有一台服务器就能满足要求，你就没有必要使用memcached。它的最大好处就是跨服务器，跨应用共享缓存。</p>]]></description></item><item><title>MVC3课程中的几个问题整理</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/13/2285816.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 13 Dec 2011 03:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/13/2285816.html</guid><description><![CDATA[<p>这是几个小问题，整理出来给大家参考</p> <p>&nbsp;</p> <h1>1. 如何为不同类型的属性设置不同的编辑界面</h1> <p>备注：这个实例的源代码，可以通过这里下载 <a title="MvcApplicationEditTemplate.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationEditTemplate.rar">MvcApplicationEditTemplate.rar</a></p> <p>&nbsp;</p> <p>我们探讨到了针对不同的属性，MVC3其实可以专门定制不同的编辑界面。这个概念，其实早在MVC出来之前，就曾经有过。之前有一个Dynamic Data的网站模板 ，里面大致也是用到了所谓的编辑器模板（FieldTemplates)的概念。</p> <p>我们可以大致看一眼之前的做法</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126283157.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126283190.png" width="337" height="732"></a></p> <p>注意,Dynamic Data这个模板，是基于Web Forms实现的一个应用架构。这里不作进一步展开，如果有兴趣的朋友，可以参考：<a title="http://msdn.microsoft.com/en-us/library/ee845452.aspx" href="http://msdn.microsoft.com/en-us/library/ee845452.aspx">http://msdn.microsoft.com/en-us/library/ee845452.aspx</a></p> <p>&nbsp;</p> <p>提一下Dynamic Data，是希望给大家一个初步印象，确实可以针对不同类型的字段，设置不同的界面来编辑或者显示。MVC中也提供了这样的机制。</p> <p>下面我们来做一个常见的例子，<strong><font color="#ff0000">我们希望那些类型为DateTime的属性，在页面上编辑的时候，自动调用jquery的一个日历效果让用户可以选择，而不是简单的一个文本框。</font></strong></p> <p>&nbsp;</p> <h2>准备一个业务实体类型(Employee)</h2><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">namespace</span> MvcApplicationEditTemplate.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
        <span class="kwrd">public</span> DateTime Birthday { get; set; }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h2>准备一个HomeController</h2><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;

<span class="kwrd">namespace</span> MvcApplicationEditTemplate.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>

        <span class="kwrd">public</span> ActionResult Index()
        {
            var emp = <span class="kwrd">new</span> Models.Employee();

            <span class="kwrd">return</span> View(emp);
        }

    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>为这个Action生成一个Edit视图</h2><pre class="csharpcode">@model MvcApplicationEditTemplate.Models.Employee

@{
    ViewBag.Title = "Index";
}

<span class="kwrd">&lt;</span><span class="html">h2</span><span class="kwrd">&gt;</span>Index<span class="kwrd">&lt;/</span><span class="html">h2</span><span class="kwrd">&gt;</span>



@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <span class="kwrd">&lt;</span><span class="html">fieldset</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">legend</span><span class="kwrd">&gt;</span>Employee<span class="kwrd">&lt;/</span><span class="html">legend</span><span class="kwrd">&gt;</span>

        @Html.HiddenFor(model =<span class="kwrd">&gt;</span> model.ID)

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.FirstName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.FirstName)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.FirstName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.LastName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.LastName)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.LastName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.Birthday)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.Birthday)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.Birthday)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="submit"</span> <span class="attr">value</span><span class="kwrd">="Save"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">fieldset</span><span class="kwrd">&gt;</span>
}

<span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    @Html.ActionLink("Back to List", "Index")
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<p>&nbsp;</p>
<p>注意看这里的语法：EditorFor。这是MVC比较推荐的做法，我发现不少朋友可能还是习惯自己去些input，但我个人觉得那不是一个很好的做法。</p>
<h2>预览效果 
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126283223.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126293256.png" width="552" height="513"></a></p>
<p>我们的需求就是，将Birthday下面这个文本框定制一下，让他可以自动显示出来一个日历。（我们将采用jquery ui来实现）</p>
<p>&nbsp;</p>
<h2>添加一个EditorTemplate</h2>
<p>由于Birthday属性是DateTime类型，所以我们可以针对这个类型设计一个编辑器模板。为了共享，我们可以将这个模板放在Shared目录下面</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126292417.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126294959.png" width="348" height="114"></a></p>
<p>请注意，这里的目录名必须叫做：EditorTemplates。那个模板的名称也必须叫DateTime.cshtml。 再一次领教了MVC中约定胜于配置的特性吧。</p><pre class="csharpcode">@model System.DateTime
@Html.TextBox("",ViewData.TemplateInfo.FormattedModelValue,new {date_picker=true})
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>在这个文件中，我们只需要指定两行代码。（这是Razor表达式语法），从上面的语法可以看出，我们其实还是放了一个文本框（TextBox)，但这里的关键在于，我们会通过jquery来给这个文本框添加特效。</p>
<p>&nbsp;</p>
<h2>添加一个jscript文件（EditorBehavior.js)</h2><pre class="csharpcode"><span class="rem">/// &lt;reference path="jquery-1.5.1-vsdoc.js" /&gt;</span>
$(<span class="kwrd">function</span> () {
    $(<span class="str">":input[date-picker]"</span>).datepicker();
});</pre><pre class="csharpcode">&nbsp;</pre>
<h2>在视图中引入这个脚本文件</h2><pre class="csharpcode">@model MvcApplicationEditTemplate.Models.Employee

@{
    ViewBag.Title = "Index";
}

<span class="kwrd">&lt;</span><span class="html">h2</span><span class="kwrd">&gt;</span>Index<span class="kwrd">&lt;/</span><span class="html">h2</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="@Url.Content("</span>~/<span class="attr">Scripts</span>/<span class="attr">jquery-ui-1</span>.<span class="attr">8</span>.<span class="attr">11</span>.<span class="attr">js</span><span class="kwrd">")"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"@Url.Content("</span>~/Scripts/EditorBehavior.js<span class="str">")"</span> type=<span class="str">"text/javascript"</span>&gt;<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <span class="kwrd">&lt;</span><span class="html">fieldset</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">legend</span><span class="kwrd">&gt;</span>Employee<span class="kwrd">&lt;/</span><span class="html">legend</span><span class="kwrd">&gt;</span>

        @Html.HiddenFor(model =<span class="kwrd">&gt;</span> model.ID)

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.FirstName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.FirstName)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.FirstName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.LastName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.LastName)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.LastName)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-label"</span><span class="kwrd">&gt;</span>
            @Html.LabelFor(model =<span class="kwrd">&gt;</span> model.Birthday)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="editor-field"</span><span class="kwrd">&gt;</span>
            @Html.EditorFor(model =<span class="kwrd">&gt;</span> model.Birthday)
            @Html.ValidationMessageFor(model =<span class="kwrd">&gt;</span> model.Birthday)
        <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">p</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="submit"</span> <span class="attr">value</span><span class="kwrd">="Save"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">p</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">fieldset</span><span class="kwrd">&gt;</span>
}

<span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    @Html.ActionLink("Back to List", "Index")
<span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>最后预览得到的效果就是下面这样。按照这样的思路，我们还可以给其他类型的属性指定编辑器模板。</p><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126306420.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126305930.png" width="476" height="621"></a></p>
<p>&nbsp;</p>
<p>这个实例的源代码，可以通过这里下载 <a title="MvcApplicationEditTemplate.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationEditTemplate.rar">MvcApplicationEditTemplate.rar</a></p>
<p>&nbsp;</p>
<h1>2. 为什么脚本移动位置之后，页面的样式变化了</h1>
<p>这是一个小问题，我们先来看一下默认情况下MVC项目的样式</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126314011.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126317109.png" width="931" height="627"></a></p>
<p>这个布局和样式，是在_layout.cshtml中定义好的</p><pre class="csharpcode"><span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">html</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">meta</span> <span class="attr">charset</span><span class="kwrd">="utf-8"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;</span>@ViewBag.Title<span class="kwrd">&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">link</span> <span class="attr">href</span><span class="kwrd">="@Url.Content("</span>~/<span class="attr">Content</span>/<span class="attr">Site</span>.<span class="attr">css</span><span class="kwrd">")"</span> <span class="attr">rel</span><span class="kwrd">="stylesheet"</span> <span class="attr">type</span><span class="kwrd">="text/css"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="@Url.Content("</span>~/<span class="attr">Scripts</span>/<span class="attr">jquery-1</span>.<span class="attr">5</span>.<span class="attr">1</span>.<span class="attr">min</span>.<span class="attr">js</span><span class="kwrd">")"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"@Url.Content("</span>~/Scripts/modernizr-1.7.min.js<span class="str">")"</span> type=<span class="str">"text/javascript"</span>&gt;<span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="page"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">header</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="title"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">h1</span><span class="kwrd">&gt;</span>
                    My MVC Application<span class="kwrd">&lt;/</span><span class="html">h1</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="logindisplay"</span><span class="kwrd">&gt;</span>
                @Html.Partial("_LogOnPartial")
            <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">nav</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ul</span> <span class="attr">id</span><span class="kwrd">="menu"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("Home", "Index", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">li</span><span class="kwrd">&gt;</span>@Html.ActionLink("About", "About", "Home")<span class="kwrd">&lt;/</span><span class="html">li</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">ul</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">nav</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">header</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">id</span><span class="kwrd">="main"</span><span class="kwrd">&gt;</span>
            @RenderBody()
        <span class="kwrd">&lt;/</span><span class="html">section</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">footer</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">footer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<p>出于网站设计优化的考虑，我们知道应该尽可能地将javascript的引用放在页面底部。Yahoo有一个专门的文章讲这方面的内容：<a href="http://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a></p>
<p>&nbsp;</p>
<p>所以，你可能会尝试将脚本移动到footer里面，例如下面这样</p><pre class="csharpcode">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=<span class="str">"utf-8"</span> /&gt;
    &lt;title&gt;@ViewBag.Title&lt;/title&gt;
    &lt;link href=<span class="str">"@Url.Content("</span>~/Content/Site.css<span class="str">")"</span> rel=<span class="str">"stylesheet"</span> type=<span class="str">"text/css"</span> /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div <span class="kwrd">class</span>=<span class="str">"page"</span>&gt;
        &lt;header&gt;
            &lt;div id=<span class="str">"title"</span>&gt;
                &lt;h1&gt;
                    My MVC Application&lt;/h1&gt;
            &lt;/div&gt;
            &lt;div id=<span class="str">"logindisplay"</span>&gt;
                @Html.Partial(<span class="str">"_LogOnPartial"</span>)
            &lt;/div&gt;
            &lt;nav&gt;
                &lt;ul id=<span class="str">"menu"</span>&gt;
                    &lt;li&gt;@Html.ActionLink(<span class="str">"Home"</span>, <span class="str">"Index"</span>, <span class="str">"Home"</span>)&lt;/li&gt;
                    &lt;li&gt;@Html.ActionLink(<span class="str">"About"</span>, <span class="str">"About"</span>, <span class="str">"Home"</span>)&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/nav&gt;
        &lt;/header&gt;
        &lt;section id=<span class="str">"main"</span>&gt;
            @RenderBody()
        &lt;/section&gt;
        &lt;footer&gt;
            &lt;script src=<span class="str">"@Url.Content("</span>~/Scripts/jquery-1.5.1.min.js<span class="str">")"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;
            &lt;script src=<span class="str">"@Url.Content("</span>~/Scripts/modernizr-1.7.min.js<span class="str">")"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>看起来很好，但是再次打开网站的话，就会发现网页的样式有些问题</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111213112634503.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126358900.png" width="931" height="627"></a></p>
<p>这是为什么呢？原因是MVC3默认使用了HTML 5的语法来构建页面，目前HTML 5因为还没有成为事实上的标准，所以使用了一个专门的javascript库来提供支持。这个javascript库就是：modernizr-1.7.min.js， 这是一个开源的作品，请参考这里 <a title="http://www.modernizr.com/" href="http://www.modernizr.com/">http://www.modernizr.com/</a></p>
<p>在页面中用到的header,section,footer这类的tag其实是html 5专用的，所以如果上面这个脚本没有预先加载，可能显示的时候，就会有些问题。</p>
<p>所以，我们应该将modernizr-1.7.min.js放在header里面去。这样就和谐了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126362031.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126368717.png" width="931" height="627"></a></p>
<p>值得一说的是，这个库只有10KB左右，所以将它放在header里面对性能影响很小。</p>
<p>我们还可以使用微软提供的CDN功能，尽可能地减少用户需要下载的javascript的体积。关于CDN，请参考这里：<a title="http://www.asp.net/ajaxlibrary/cdn.ashx" href="http://www.asp.net/ajaxlibrary/cdn.ashx">http://www.asp.net/ajaxlibrary/cdn.ashx</a></p>
<p>&nbsp;</p>
<h1>3.Remote验证</h1>



<p>MVC3提供了一个新增的数据验证功能，叫做Remote验证，意思是可以利用客户端javascript，发起异步的请求，调用服务器代码进行验证。这个功能很不错，例如有一个页面提供用户输入用户名进行注册，我们经常需要检测用户名是否已经被别人占用。这种验证显然是无法在客户端直接提供，而是需要利用服务器代码来实现。</p>
<p>下面来看一个例子</p>
<p>首先，我们要为类型定义Annotation，需要注意的是，Remote这个Annotation是MVC专用的，所以要using System.Web.Mvc</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
<span class="kwrd">using</span> System.Web.Mvc;

<span class="kwrd">namespace</span> MvcApplicationEditTemplate.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        [Required]
        [Remote(<span class="str">"IsNameValid"</span>,<span class="str">"Home"</span>)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
        <span class="kwrd">public</span> DateTime Birthday { get; set; }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这里指定了一个远程验证用的Controller（Home）和Action（IsNameValid）</p>
<p>所以，接下来我们准备这样一个Action</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;

<span class="kwrd">namespace</span> MvcApplicationEditTemplate.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {
        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>

        <span class="kwrd">public</span> ActionResult Index()
        {
            var emp = <span class="kwrd">new</span> Models.Employee();

            <span class="kwrd">return</span> View(emp);
        }


        <span class="kwrd">public</span> ActionResult IsNameValid(<span class="kwrd">string</span> FirstName)
        {
            <span class="kwrd">if</span>(FirstName == <span class="str">"ares"</span>)
            {
                <span class="kwrd">return</span> Json(<span class="kwrd">true</span>, JsonRequestBehavior.AllowGet);
            }
            <span class="kwrd">return</span> Json(<span class="str">"Your name is invalid"</span>, JsonRequestBehavior.AllowGet);
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
注意，这里只是做了一个例子，直接比较FirstName是不是等于ares。实际情况下，这里可以执行数据库查询，得到结果。</p>
<p>还需要注意的是，这里必须返回json的数据，并且必须设置为AllowGet。</p>
<p>接下来，在视图中，要添加两个脚本引用，如下所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126362653.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126378783.png" width="699" height="732"></a></p>
<p>远程验证的效果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126372719.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112131126372752.png" width="467" height="536"></a></p>]]></description></item><item><title>在MVC3项目中结合NInject组件实现依赖注入的设计</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/12/2285304.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 12 Dec 2011 13:19:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/12/2285304.html</guid><description><![CDATA[<p>这是本次MVC3讲座中的一个话题，整理出来给大家参考参考</p> <h1>名词解释</h1> <p>依赖注入：英文是Dependency Injection。有时候也称为反转控制(Ioc)吧。不管名词怎么讲，它的大致意思是，让我们的应用程序所依赖的一些外部服务，可以根据需要动态注入，而不是预先在应用程序中明确地约束。这种思想，在当前的软件开发领域，为了保证架构的灵活性，应该还是很有意义的。</p> <p>在MVC这个框架中，为依赖注入的设计提供了先天的支持。结合一些我们熟知的DI组件，例如NInject，我们可以较为容易地实现上述提到的功能。</p> <p>&nbsp;</p> <h1>场景介绍</h1> <p>我们的应用程序，需要支持各种不同的数据源，而且我们希望日后可以很容易地切换，不会因为数据源的变化而导致对Contoller或者Model，或者View做修改。</p> <p>&nbsp;</p> <p>本文完整源代码，请通过这里下载 <a title="MvcApplicationDISample.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationDISample.rar">MvcApplicationDISample.rar</a></p> <p>&nbsp;</p> <h1>演练步骤</h1> <h2>第一步：准备一个MVC项目(选择空白模板）</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118455072.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118463153.png" width="1028" height="732"></a></p> <h1>第二步：准备一个业务实体类型</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">namespace</span> MvcApplicationDISample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>第三步：准备一个数据访问的接口定义</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">using</span> MvcApplicationDISample.Models;

<span class="kwrd">namespace</span> MvcApplicationDISample.Services
{
    <span class="kwrd">public</span> <span class="kwrd">interface</span> IDataService
    {
        Employee[] GetEmployee();
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h1>第四步：创建一个HomeController</h1>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118467089.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118467122.png" width="608" height="397"></a></p>
<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> MvcApplicationDISample.Services;
<span class="kwrd">using</span> MvcApplicationDISample.Models;


<span class="kwrd">namespace</span> MvcApplicationDISample.Controllers
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeController : Controller
    {

        IDataService DataService;
        <span class="kwrd">public</span> HomeController(IDataService service)
        {
            DataService = service;
        }

        <span class="rem">//</span>
        <span class="rem">// GET: /Home/</span>

        <span class="kwrd">public</span> ActionResult Index()
        {
            var data = DataService.GetEmployee();
            <span class="kwrd">return</span> View(data);
        }

    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
注意，这里需要为HomeController添加一个特殊的构造函数，传入IDataService这个接口。通常，所有的DI组件都是通过这样的方式注入的。</p>
<p><strong><font color="#ff0000">在设计HomeController的时候，我们不需要关心到底日后会用具体的哪种DataService，我们只是要求要传入一个IDataService的具体实现就可以了，这就是DI的本质了。</font></strong></p>
<p>&nbsp;</p>
<p>到这里为止，我们该做的准备工作基本就绪了。下面来看看如何结合DI组件来实现我们的需求</p>
<p>&nbsp;</p>
<h1>第五步：引入NInject组件</h1>
<p>这是我比较喜欢的一个DI组件。它还针对MVC3专门有一个扩展</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118463252.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118478301.png" width="868" height="594"></a></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118477778.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118479447.png" width="868" height="594"></a></p>
<p>&nbsp;</p>
<p>添加这个组件之后，除了自动添加了很多引用之外，还有一个特殊的文件App_Start\NinjectMVC3.cs</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118486972.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118482860.png" width="362" height="244"></a></p>
<p>&nbsp;</p><pre class="csharpcode">[assembly: WebActivator.PreApplicationStartMethod(<span class="kwrd">typeof</span>(MvcApplicationDISample.App_Start.NinjectMVC3), <span class="str">"Start"</span>)]
[assembly: WebActivator.ApplicationShutdownMethodAttribute(<span class="kwrd">typeof</span>(MvcApplicationDISample.App_Start.NinjectMVC3), <span class="str">"Stop"</span>)]

<span class="kwrd">namespace</span> MvcApplicationDISample.App_Start
{
    <span class="kwrd">using</span> System.Reflection;
    <span class="kwrd">using</span> Microsoft.Web.Infrastructure.DynamicModuleHelper;
    <span class="kwrd">using</span> Ninject;
    <span class="kwrd">using</span> Ninject.Web.Mvc;

    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> NinjectMVC3 
    {
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> Bootstrapper bootstrapper = <span class="kwrd">new</span> Bootstrapper();

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Starts the application</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Start() 
        {
            DynamicModuleUtility.RegisterModule(<span class="kwrd">typeof</span>(OnePerRequestModule));
            DynamicModuleUtility.RegisterModule(<span class="kwrd">typeof</span>(HttpApplicationInitializationModule));
            bootstrapper.Initialize(CreateKernel);
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Stops the application.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Stop()
        {
            bootstrapper.ShutDown();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Creates the kernel that will manage your application.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;The created kernel.&lt;/returns&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> IKernel CreateKernel()
        {
            var kernel = <span class="kwrd">new</span> StandardKernel();
            RegisterServices(kernel);
            <span class="kwrd">return</span> kernel;
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Load your modules or register your services here!</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="kernel"&gt;The kernel.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterServices(IKernel kernel)
        {
        }        
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>



<p>这个类型很有意思，WebActivator.PreApplicationStartMethod这个方法其实是注册了一个在MVC程序启动之前运行的方法。这些代码大家应该能看懂，它在CreateKernel中，添加一个新的Kernel（用来做注入的容器）。</p>
<p>&nbsp;</p>
<h1>第六步：创建一个IDataService的具体实现</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> MvcApplicationDISample.Models;

<span class="kwrd">namespace</span> MvcApplicationDISample.Services
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDataService:IDataService
    {
        <span class="preproc">#region</span> IDataService Members

        <span class="kwrd">public</span> Employee[] GetEmployee()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,FirstName=<span class="str">"ares"</span>,LastName=<span class="str">"chen"</span>}};
        }

        <span class="preproc">#endregion</span>
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
作为举例，我们这里用了一个硬编码的方式实现了该服务。</p>
<h1>第七步：实现注入</h1>
<p>回到App_Start\NinjectMVC3.cs这个文件，修改RegisterServices方法如下</p><pre class="csharpcode">       <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Load your modules or register your services here!</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="kernel"&gt;The kernel.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RegisterServices(IKernel kernel)
        {
            kernel.Bind&lt;Services.IDataService&gt;().To&lt;Services.SampleDataService&gt;();
        }      </pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>第八步：测试Controller的功能</h1>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111212211848385.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118487038.png" width="682" height="315"></a></p>
<p>我们可以看到，数据已经展现出来了。这说明，HomeController中的Index方法，确实调用了我们后期插入的这个SampleDataService。而通过下图，则可以更加清楚看到这一点</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118484006.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118499023.png" width="807" height="208"></a></p>
<p>到这里为止，我们就结合Ninject组件实现了一个简单的依赖注入的实例。Ninject 针对MVC 3有这么一个特殊的文件，可以极大地方便我们的编程。但即便没有这个文件，我们也可以通过另外一些方法来实现需求。</p>
<p>下面介绍两种比较传统的，通过扩展MVC组件实现的方式</p>
<h1>第一种：实现自定义ControllerFactory</h1>
<p>我们都知道,Controller其实都是由ControllerFactory来生成的，那么，为了给所有新创建从Controller都自动注入我们的服务，那么就可以从ControllerFactory这个地方动动脑筋了。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> Ninject;
<span class="kwrd">using</span> MvcApplicationDISample.Services;

<span class="kwrd">namespace</span> MvcApplicationDISample.Extensions
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> InjectControllerFactory:DefaultControllerFactory
    {

        <span class="kwrd">private</span> IKernel kernel;
        <span class="kwrd">public</span> InjectControllerFactory()
        {
            kernel = <span class="kwrd">new</span> StandardKernel();
            kernel.Bind&lt;IDataService&gt;().To&lt;SampleDataService&gt;();
        }
        <span class="kwrd">protected</span> <span class="kwrd">override</span> IController GetControllerInstance(System.Web.Routing.RequestContext requestContext, Type controllerType)
        {
            <span class="kwrd">return</span> (IController)kernel.Get(controllerType);
        }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
要使用这个自定义的 ControllerFactory，我们需要修改Global.ascx文件中的Application_Start方法，添加下面的粗体部分代码</p><pre class="csharpcode">        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            RegisterRoutes(RouteTable.Routes);

           <strong>ControllerBuilder.Current.SetControllerFactory(<span class="kwrd">new</span> Extensions.InjectControllerFactory());
</strong>        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>

<p>这样做好之后，我们可以测试HomeController中的Index这个Action，我们发现它还是能正常工作。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118492403.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118491008.png" width="634" height="315"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>第二种：实现自定义的DependencyResolver</h1>
<p>顾名思义，这就是MVC框架里面专门来处理所谓的依赖项的处理器。可以说这是MVC专门为DI准备的一个后门。下面是我写好的一个例子</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.Web.Mvc;
<span class="kwrd">using</span> Ninject;
<span class="kwrd">using</span> MvcApplicationDISample.Services;

<span class="kwrd">namespace</span> MvcApplicationDISample.Extensions
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> InjectDependencyResolver:IDependencyResolver
    {
        <span class="kwrd">private</span> IKernel kernel;

        <span class="kwrd">public</span> InjectDependencyResolver()
        {
            kernel = <span class="kwrd">new</span> StandardKernel();
            kernel.Bind&lt;IDataService&gt;().To&lt;SampleDataService&gt;();
        }

        <span class="preproc">#region</span> IDependencyResolver Members

        <span class="kwrd">public</span> <span class="kwrd">object</span> GetService(Type serviceType)
        {
            <span class="kwrd">return</span> kernel.TryGet(serviceType);
        }

        <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">object</span>&gt; GetServices(Type serviceType)
        {
            <span class="kwrd">return</span> kernel.GetAll(serviceType);
        }

        <span class="preproc">#endregion</span>
    }
}</pre><pre class="csharpcode">&nbsp;</pre>
<p>那么，如何使用这个自定义的处理器呢？</p>
<p>很简单，我们仍然是修改Global.asax文件中的Application_Start方法</p><pre class="csharpcode">        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            RegisterRoutes(RouteTable.Routes);

            <span class="rem">//ControllerBuilder.Current.SetControllerFactory(new Extensions.InjectControllerFactory());</span>

            DependencyResolver.SetResolver(<span class="kwrd">new</span> Extensions.InjectDependencyResolver());
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><br><br>请注意，之前那个设置ControllerFactory的代码，我们可以注释掉了</p>
<p>这个解决方案的最终效果和之前是一样的。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118496024.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112122118495501.png" width="634" height="315"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>本文完整源代码，请通过这里下载 <a title="MvcApplicationDISample.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationDISample.rar">MvcApplicationDISample.rar</a></p>]]></description></item><item><title>在MVC项目中为用户登录失败次数实现提示</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/11/2284198.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 11 Dec 2011 13:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/11/2284198.html</guid><description><![CDATA[<p>这两天在给一个客户讲解MVC 3的架构和在项目中的应用，有提到这样一个问题：</p> <blockquote> <p>MVC3 默认实现的Forms Authentication机制，可以结合SQL Server做成员管理，而且可以设置在一定时间内如果用户连续输入密码错误达到一定次数的话，就自动将用户锁定。</p> <p>但是，默认情况下，却没有提供一定的机制，给用户提示，例如你已经输入几次失败了，还最多可以输入几次等等。这在有的时候给用户造成了一些不便。</p></blockquote> <p>那么，是否有办法解决这个问题呢？</p> <p>本文源代码，可以通过这里下载 <a title="MvcApplicationSample.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationSample.rar">MvcApplicationSample.rar</a></p> <p>&nbsp;</p> <p>首先，我们来看一下默认的一些设置和代码</p> <h1>MemberShip的配置</h1><pre class="csharpcode">   <span class="kwrd">&lt;</span><span class="html">membership</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">providers</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">clear</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="AspNetSqlMembershipProvider"</span> <span class="attr">type</span><span class="kwrd">="System.Web.Security.SqlMembershipProvider"</span> <span class="attr">connectionStringName</span><span class="kwrd">="ApplicationServices"</span>
             <span class="attr">enablePasswordRetrieval</span><span class="kwrd">="false"</span> <span class="attr">enablePasswordReset</span><span class="kwrd">="true"</span> <span class="attr">requiresQuestionAndAnswer</span><span class="kwrd">="false"</span> <span class="attr">requiresUniqueEmail</span><span class="kwrd">="false"</span>
             <span class="attr">maxInvalidPasswordAttempts</span><span class="kwrd">="5"</span> <span class="attr">minRequiredPasswordLength</span><span class="kwrd">="6"</span> <span class="attr">minRequiredNonalphanumericCharacters</span><span class="kwrd">="0"</span> <span class="attr">passwordAttemptWindow</span><span class="kwrd">="10"</span>
             <span class="attr">applicationName</span><span class="kwrd">="/"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">providers</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">membership</span><span class="kwrd">&gt;</span>
</pre>
<p>上面的配置是默认的，意思是在10分钟内，如果连续输入密码5次错误的话，就锁住用户</p>
<p>&nbsp;</p>
<h1>AccountController中的代码</h1><pre class="csharpcode">        [HttpPost]
        <span class="kwrd">public</span> ActionResult LogOn(LogOnModel model, <span class="kwrd">string</span> returnUrl)
        {
            <span class="kwrd">if</span>(ModelState.IsValid)
            {
                <span class="kwrd">if</span>(Membership.ValidateUser(model.UserName, model.Password))
                {
                    FormsAuthentication.SetAuthCookie(model.UserName, model.RememberMe);
                    <span class="kwrd">if</span>(Url.IsLocalUrl(returnUrl) &amp;&amp; returnUrl.Length &gt; 1 &amp;&amp; returnUrl.StartsWith(<span class="str">"/"</span>)
                        &amp;&amp; !returnUrl.StartsWith(<span class="str">"//"</span>) &amp;&amp; !returnUrl.StartsWith(<span class="str">"/\\"))
                    {
                        return Redirect(returnUrl);
                    }
                    else
                    {
                        return RedirectToAction("</span>Index<span class="str">", "</span>Home<span class="str">");
                    }
                }
                else
                {

                    ModelState.AddModelError("</span><span class="str">", "</span>The user name or password provided <span class="kwrd">is</span> incorrect.");
                }
            }

            <span class="rem">// If we got this far, something failed, redisplay form</span>
            <span class="kwrd">return</span> View(model);
        }</pre>
<p>这里的代码很简单，只要不通过验证的话，就显示一个错误消息：The user name or password provided <span class="kwrd">is</span> incorrect.</p>
<p>但其实这个消息对用户来说并不是很直观，他不会知道到底是哪里出了错：是用户名不对呢？还是密码不对？甚至说，密码还可以最多输入几次？</p>
<p>&nbsp;</p>
<p>所以，默认情况下，如果登录不成功，就会看到如下的界面</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111211212712960.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127146981.png" width="931" height="627"></a></p>
<p>如果连续输入错误超过5次，就会导致用户再也无法登录，而他没有得到任何提示。我们通过数据库可以看到这个用户已经被锁定了。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127165750.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127179819.png" width="1047" height="129"></a></p>
<p>而且在这个表中确实有一个字段是记录了连续输入密码错误的次数</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127189951.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127203671.png" width="738" height="130"></a></p>
<p>&nbsp;</p>
<p>那么，接下来看看是否有什么办法解决？我想到的解决方案如下</p>
<p>&nbsp;</p>
<h1>添加一个自定义的MembershipProvider</h1>
<p>既然默认的Membership Provider提供不了这个功能，那么我们可以尝试自己做一个，想办法去读取这张表应该就能实现</p><pre class="csharpcode"><span class="kwrd">using</span> System.Configuration;
<span class="kwrd">using</span> System.Data.SqlClient;
<span class="kwrd">using</span> System.Web.Security;

<span class="kwrd">namespace</span> MvcApplicationSample.Extensions
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 这是一个自定义的MembershipProvider，添加了一个功能，可以获取用户连续输入密码失败的次数</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> MySQLMemberShipProvider:SqlMembershipProvider
    {

        <span class="kwrd">private</span> <span class="kwrd">string</span> connectionString = <span class="kwrd">string</span>.Empty;


        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Initialize(<span class="kwrd">string</span> name, System.Collections.Specialized.NameValueCollection config)
        {
            <span class="kwrd">base</span>.Initialize(name, config);

            <span class="rem">//这里获取到默认使用的数据库连接字符串</span>
            connectionString = ConfigurationManager.ConnectionStrings[<span class="str">"ApplicationServices"</span>].ConnectionString;
        }


        <span class="kwrd">public</span> <span class="kwrd">int</span> GetFailedPasswordAttemptCount(<span class="kwrd">string</span> userName)
        {
            <span class="kwrd">using</span>(var conn = <span class="kwrd">new</span> SqlConnection(connectionString))
            {
                <span class="kwrd">using</span>(var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = <span class="str">"SELECT aspnet_Membership.FailedPasswordAttemptCount FROM aspnet_Membership INNER JOIN aspnet_Users ON aspnet_Membership.UserId = aspnet_Users.UserId INNER JOIN aspnet_Applications ON aspnet_Membership.ApplicationId =aspnet_Applications.ApplicationId AND aspnet_Users.ApplicationId = aspnet_Applications.ApplicationId WHERE (aspnet_Users.UserName = @userName) AND (aspnet_Applications.ApplicationName =@applicationName)"</span>;

                    cmd.Parameters.AddWithValue(<span class="str">"@userName"</span>, userName);
                    cmd.Parameters.AddWithValue(<span class="str">"@applicationName"</span>, <span class="kwrd">this</span>.ApplicationName);

                    conn.Open();
                    var result = cmd.ExecuteScalar();
                    conn.Close();

                    <span class="kwrd">if</span>(result != <span class="kwrd">null</span>)
                    {
                        <span class="kwrd">return</span> (<span class="kwrd">int</span>)result;
                    }
                }
            }
            <span class="rem">//如果用户不存在，则返回-1</span>
            <span class="kwrd">return</span> -1;
        }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>修改web.config使用这个新的membership Provider</h1>
<p>修改部分为下面粗体的部分</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">membership</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">providers</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">clear</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="AspNetSqlMembershipProvider"</span> <span class="attr">type</span><span class="kwrd">="<strong>MvcApplicationSample.Extensions.MySQLMemberShipProvider,MvcApplicationSample</strong>"</span> <span class="attr">connectionStringName</span><span class="kwrd">="ApplicationServices"</span>
             <span class="attr">enablePasswordRetrieval</span><span class="kwrd">="false"</span> <span class="attr">enablePasswordReset</span><span class="kwrd">="true"</span> <span class="attr">requiresQuestionAndAnswer</span><span class="kwrd">="false"</span> <span class="attr">requiresUniqueEmail</span><span class="kwrd">="false"</span>
             <span class="attr">maxInvalidPasswordAttempts</span><span class="kwrd">="5"</span> <span class="attr">minRequiredPasswordLength</span><span class="kwrd">="6"</span> <span class="attr">minRequiredNonalphanumericCharacters</span><span class="kwrd">="0"</span> <span class="attr">passwordAttemptWindow</span><span class="kwrd">="10"</span>
             <span class="attr">applicationName</span><span class="kwrd">="/"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">providers</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">membership</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>



<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>修改AccountController中的代码（请注意粗体部分）</h1><pre class="csharpcode">        [HttpPost]
        <span class="kwrd">public</span> ActionResult LogOn(LogOnModel model, <span class="kwrd">string</span> returnUrl)
        {
            <span class="kwrd">if</span>(ModelState.IsValid)
            {
                <span class="kwrd">if</span>(Membership.ValidateUser(model.UserName, model.Password))
                {
                    FormsAuthentication.SetAuthCookie(model.UserName, model.RememberMe);
                    <span class="kwrd">if</span>(Url.IsLocalUrl(returnUrl) &amp;&amp; returnUrl.Length &gt; 1 &amp;&amp; returnUrl.StartsWith(<span class="str">"/"</span>)
                        &amp;&amp; !returnUrl.StartsWith(<span class="str">"//"</span>) &amp;&amp; !returnUrl.StartsWith(<span class="str">"/\\"))
                    {
                        return Redirect(returnUrl);
                    }
                    else
                    {
                        return RedirectToAction("</span>Index<span class="str">", "</span>Home<span class="str">");
                    }
                }
                else
                {


     <strong>               var provider = (Extensions.MySQLMemberShipProvider)Membership.Provider;
                    var count = provider.GetFailedPasswordAttemptCount(model.UserName);
                    var max = provider.MaxInvalidPasswordAttempts;

                    


                    if(count != -1)
                    {



                        ModelState.AddModelError("</strong></span><strong><span class="str">", count==max?"</span>Your account <span class="kwrd">is</span> locked.<span class="str">":string.Format("</span>You have been continually input the wrong password {0} times, <span class="kwrd">if</span> then enter {1} mistakes, your account will be locked</strong><strong><span class="str">", count, max - count));
                    }
                    else
                        ModelState.AddModelError("</span><span class="str">", "</span>The user name or password provided <span class="kwrd">is</span> incorrect.");</strong>
                }
            }

            <span class="rem">// If we got this far, something failed, redisplay form</span>
            <span class="kwrd">return</span> View(model);
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这样的话，我们来测试一下效果看看</p><pre class="csharpcode"><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127226378.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127238495.png" width="931" height="627"></a></pre><pre class="csharpcode">如果连续输错5次，则提示已经被锁定了</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112112127252248.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/20111211212726220.png" width="931" height="627"></a></pre><pre class="csharpcode">&nbsp;</pre>
<p>本文源代码，可以通过这里下载 <a title="MvcApplicationSample.rar" href="http://files.cnblogs.com/chenxizhang/MvcApplicationSample.rar">MvcApplicationSample.rar</a></p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>如何解决在Windows XP下的IIS 5.1经常出现编号为500的服务器错误</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/12/06/2278457.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 06 Dec 2011 12:54:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/12/06/2278457.html</guid><description><![CDATA[<p>传说中，这是一个常见的问题。我自己多年前用Windows XP的时候，倒也没有怎么遇到过。今天因为在讲一个课程的时候，用到了Windows XP作为虚拟机系统，在进行一个Web 服务部署的时候，居然这么走运就遇到了这个问题，课堂上时间紧，一下子也没有排除这个问题。回来后稍微研究了一下，整理出来，给有需要的朋友也参考一下</p> <p>找问题的解决方案时，我参考了以下这个文章 <a title="http://www.coogg.com/article.asp?id=494" href="http://www.coogg.com/article.asp?id=494">http://www.coogg.com/article.asp?id=494</a></p> <p>我自己总结下来两个步骤</p> <p>1.确认如下几个服务，都是设置为自动启动的，并且处于启动状态</p> <ul> <li>COM+ Event System</li> <li>COM+ System Application</li> <li>Distributed Transaction Coordinator（DTC)</li></ul> <p>为什么要开这几个服务呢？其实如果熟悉IIS的朋友一定知道，IIS5这个版本，其实是通过COM+实现的一个应用程序，所以自然是依赖COM+服务的，然后IIS可以参与分布式事务协调，所以需要开启DTC服务。</p> <p>&nbsp;</p> <p>2. 通过如下的命令对IIS 进行注册。我没有想明白为什么这个还需要手工来注册，可能是今天我们在安装IIS的介质有什么问题，或者说安装的时候，上述几个服务没有开起来导致的？（如果是这样，那也实在有点让人费解）。现在已经无从查证了，总之，这样做了就可以解决问题。</p> <p>cd c:\WINDOWS\system32\inetsrv</p> <p>rundll32 wamreg.dll, CreateIISPackage </p> <p>regsvr32 asptxn.dll&nbsp;&nbsp; </p> <p>&nbsp;</p> <p>经过上面两个步骤，终于可以如愿打开网站了。下面只是一个测试的例子。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112062054248383.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201112/201112062054269660.png" width="710" height="515"></a></p> <p>&nbsp;</p> <p>好长时间不用Windows XP了，也确实有点生疏了。这次是为了方便，做了一个虚拟机，里面安装了所需要的开发环境，采用XP的好处是占用内存稍小一点。</p>]]></description></item><item><title>SQL Server CE 和db4o以及XMLdatabase的应用比较</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/27/2264826.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 27 Nov 2011 00:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/27/2264826.html</guid><description><![CDATA[<h1>引子</h1> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2011/11/26/2264558.html">上一篇</a> (<a href="http://www.cnblogs.com/chenxizhang/archive/2011/11/26/2264558.html">SQL Server、Oracle、db2所提供的简装版(Express)比较</a>) 我针对在应用程序开发中，可能会用到的三款数据库产品的简装版做了一些介绍和比较。如果我们的应用的数据量不是很大，例如不超过4GB，而且用户的并发情况也不多的话，它们是不错的选择。但有一个问题就是，他们都需要在运行环境中，安装相应的数据库引擎，而且相对来说，所占用的内存还不小。如果我们这个应用是一个针对个人用户或者要在终端用户的桌面上运行的的，那么就可能遇到一个部署的障碍。大家试想一下，有多少人愿意在自己的日常工作的电脑上面安装这样的数据库引擎呢？尤其是他们对这些东西又不熟悉的情况下。你可能会苦口婆心地去跟用户解释，动之以情，晓之以理……不过，请打住，用户会跟你说：“Don’t make me think”，<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-winkingsmile" alt="Winking smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822567331.png"></p> <p>&nbsp;</p> <p>那么，是否有办法实现，不安装任何数据库引擎的情况下，也能完成类似数据库的存取呢？答案是肯定的。这一篇文章，我同样介绍三个产品给大家参考参考。</p> <h1>名词定义和介绍</h1> <ol> <li>SQL Server CE:全称叫SQL Server Compact Edition。这是从SQL Server 2005开始提供的一个特殊版本。原本叫SQL Server Mobile Edition，顾名思义，是定位用在手机开发中的。不过，期间又改过几次名字，我们就不要深究了。目前而言，这个版本可以用于一些脱机的、本地的存取，它继承了SQL Server的优良传统，提供了与SQL Server一致性的访问体验，并且这个数据库可以很容易地与服务器端的SQL Server实现同步。你可以通过微软官方网站了解更多或者进行下载：<a title="http://www.microsoft.com/downloads/zh-cn/details.aspx?familyid=85E0C3CE-3FA1-453A-8CE9-AF6CA20946C3&amp;displaylang=zh-cn" href="http://www.microsoft.com/downloads/zh-cn/details.aspx?familyid=85E0C3CE-3FA1-453A-8CE9-AF6CA20946C3&amp;displaylang=zh-cn">http://www.microsoft.com/downloads/zh-cn/details.aspx?familyid=85E0C3CE-3FA1-453A-8CE9-AF6CA20946C3&amp;displaylang=zh-cn</a></li> <li>db4o:全称是Open Source Object–Oriented Database ，顾名思义，它是一个开源的、面向对象的数据库。它基于JAVA和.NET分别做了很好的实现，并且对LINQ做了很好的支持。总体来说，这是一款相当不错的产品。它的官方网站在：<a title="http://db4o.com/" href="http://db4o.com/">http://db4o.com/</a></li> <li>XMLdatabase：全称就是xml database，这是我自己做的一个轻型的数据库，目前只提供基于.NET版本的实现。与db4o相同的是，这是也是完全面向对象的，并且支持LINQ语法。然后，不同的是，这个数据库将完全采用XML格式存储所有的数据，而不是二进制。这在当前XML统治一切的时代，是有相当的积极意义的。你可以通过 <a title="http://xmldatabase.codeplex.com/" href="http://xmldatabase.codeplex.com/">http://xmldatabase.codeplex.com/</a> 了解更多，也可以通过 <a title="http://nuget.org/List/Packages/XMLDatabase" href="http://nuget.org/List/Packages/XMLDatabase">http://nuget.org/List/Packages/XMLDatabase</a> 下载使用</li></ol> <p>&nbsp;</p> <h1>SQL Server CE</h1> <p>如果你本来就比较熟悉SQL Server，并且希望你的这个程序，可以与服务器端实现数据同步，那么你应该优先选用SQL Server CE。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822565346.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822576185.png" width="905" height="617"></a></p> <p>需要注意的是，Local Database Cache是一个特殊的模板，它可以结合Sync Framework实现与服务器端数据库的同步</p> <p>我们先来看一下简单的Local Database的做法，通过模板创建一个sdf文件之后，双击它，就会自动打开Server Explorer</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822571168.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822572248.png" width="332" height="299"></a></p> <p>在这里，你可以像在服务器一样，添加表（注意，只能添加表，没有其他对象，例如视图，存储过程等）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822579183.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822573610.png" width="911" height="751"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822576086.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822582705.png" width="326" height="486"></a></p> <p>访问SQL Server CE的数据库，实在太简单了。我们可以用ADO.NET Entity Framework来快速建模和访问。注意，它不支持LINQ to SQL.</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822582116.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822585987.png" width="959" height="664"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822594002.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/2011112708225965.png" width="631" height="562"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270822598396.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823004983.png" width="1028" height="631"></a></p> <p>在应用程序中，你可以通过如下的方式对数据进行查询</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Windows.Forms;

<span class="kwrd">namespace</span> WindowsFormsApplicationSample
{
    <span class="kwrd">static</span> <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// The main entry point for the application.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [STAThread]
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(<span class="kwrd">false</span>);
            


            <span class="rem">//使用LINQ to Entities访问SQL Server CE数据库</span>

            <span class="rem">//1.创建数据库上下文</span>
            var ctx = <span class="kwrd">new</span> UsersEntities();
            <span class="rem">//2.构造查询</span>
            var query = from u <span class="kwrd">in</span> ctx.Employees
                        <span class="kwrd">where</span> u.Email.Contains(<span class="str">"xizhang"</span>)
                        select u;
            <span class="rem">//3.得到结果</span>
            var result = query.ToArray();
            <span class="rem">//4.执行其他操作（绑定，或者遍历）</span>
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>通过如下的方式对数据库进行修改，例如新增，删除，更新等</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Windows.Forms;

<span class="kwrd">namespace</span> WindowsFormsApplicationSample
{
    <span class="kwrd">static</span> <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// The main entry point for the application.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [STAThread]
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(<span class="kwrd">false</span>);
            


            <span class="rem">//使用LINQ to Entities访问SQL Server CE数据库</span>

            <span class="rem">//1.创建数据库上下文</span>
            var ctx = <span class="kwrd">new</span> UsersEntities();
            <span class="rem">//2.新增一条记录</span>
            ctx.AddToEmployees(<span class="kwrd">new</span> Employee() { EmployeeId = 1, FirstName = <span class="str">"ares"</span>, LastName = <span class="str">"chen"</span>, Email = <span class="str">"ares@xizhang.com"</span> });

            <span class="rem">//3.更新一条记录</span>
            var ares = ctx.Employees.FirstOrDefault(e =&gt; e.FirstName == <span class="str">"ares"</span>);
            <span class="kwrd">if</span>(ares != <span class="kwrd">null</span>)
                ares.Email = <span class="str">"ares@microsoft.com"</span>;

            <span class="rem">//4.删除一条记录</span>
            <span class="kwrd">if</span>(ares != <span class="kwrd">null</span>)
                ctx.DeleteObject(ares);

            <span class="rem">//5.以上三个操作，最终都要通过保存才最终能反应到数据库中</span>
            ctx.SaveChanges();

        }

    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
大家可以看到，这样的语法应该是很好理解。SQL Server CE在这三个产品中，最大的优势就是：它仍然是一个关系型数据库，所有你拥有的关系数据库的知识和经验都可以复用，而且它完全支持XML数据类型。在访问上，它与正常的数据库访问没有什么区别。</p>
<p>更加强大的是，保存在SQL Server CE数据库中可以很方便地与服务器端的SQL Server进行同步。这个功能，需要结合<a href="http://msdn.microsoft.com/zh-cn/library/bb902854.aspx">Microsoft Sync Framework</a>. 这对于需要提供脱机支持并且后续需要同步的场景，是多么重要。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823007773.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823001885.png" width="959" height="664"></a></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823011819.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823018198.png" width="816" height="592"></a></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823026180.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823022559.png" width="711" height="464"></a></p>
<p>限于篇幅，我这里就不一个一个去截图了，有兴趣的朋友，可以参考 <a title="http://msdn.microsoft.com/zh-cn/library/bb726002.aspx" href="http://msdn.microsoft.com/zh-cn/library/bb726002.aspx">http://msdn.microsoft.com/zh-cn/library/bb726002.aspx</a> 进行一些动手实验。</p>
<p>&nbsp;</p>
<h1>db4o</h1>
<p>这是我见过最好的一个嵌入式、面向对象的数据库之一。目前针对.NET 4.0和3.5都分别有安装程序，并且甚至还提供了对Silverlight的支持。</p>
<p>总体而言，它的核心理念是面向对象，就是说，我们可以忘记数据库，忘记SQL语句。我们所有的操作都是利用对象的方式来实现。下面的代码摘自官方提供的Tutorial。可以很清晰地看到它的用法：增、删、改、查</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.IO;
<span class="kwrd">using</span> Db4objects.Db4o;
<span class="kwrd">using</span> Db4objects.Db4o.Query;
<span class="kwrd">using</span> Db4odoc.Tutorial;
<span class="kwrd">namespace</span> Db4odoc.Tutorial.F1.Chapter1
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> FirstStepsExample : Util
    {
        <span class="kwrd">readonly</span> <span class="kwrd">static</span> <span class="kwrd">string</span> YapFileName = Path.Combine(
                               Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                               <span class="str">"formula1.yap"</span>);
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            File.Delete(YapFileName);
            AccessDb4o();
            File.Delete(YapFileName);
            <span class="kwrd">using</span>(IObjectContainer db = Db4oEmbedded.OpenFile(YapFileName))
            {
                StoreFirstPilot(db);
                StoreSecondPilot(db);
                RetrieveAllPilots(db);
                RetrievePilotByName(db);
                RetrievePilotByExactPoints(db);
                UpdatePilot(db);
                DeleteFirstPilotByName(db);
                DeleteSecondPilotByName(db);
            }
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> AccessDb4o()
        {
            <span class="kwrd">using</span>(IObjectContainer db = Db4oEmbedded.OpenFile(YapFileName))
            {
                <span class="rem">// do something with db4o</span>
            }
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> StoreFirstPilot(IObjectContainer db)
        {
            Pilot pilot1 = <span class="kwrd">new</span> Pilot(<span class="str">"Michael Schumacher"</span>, 100);
            db.Store(pilot1);
            Console.WriteLine(<span class="str">"Stored {0}"</span>, pilot1);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> StoreSecondPilot(IObjectContainer db)
        {
            Pilot pilot2 = <span class="kwrd">new</span> Pilot(<span class="str">"Rubens Barrichello"</span>, 99);
            db.Store(pilot2);
            Console.WriteLine(<span class="str">"Stored {0}"</span>, pilot2);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RetrieveAllPilotQBE(IObjectContainer db)
        {
            Pilot proto = <span class="kwrd">new</span> Pilot(<span class="kwrd">null</span>, 0);
            IObjectSet result = db.QueryByExample(proto);
            ListResult(result);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RetrieveAllPilots(IObjectContainer db)
        {
            IObjectSet result = db.QueryByExample(<span class="kwrd">typeof</span>(Pilot));
            ListResult(result);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RetrievePilotByName(IObjectContainer db)
        {
            Pilot proto = <span class="kwrd">new</span> Pilot(<span class="str">"Michael Schumacher"</span>, 0);
            IObjectSet result = db.QueryByExample(proto);
            ListResult(result);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> RetrievePilotByExactPoints(IObjectContainer db)
        {
            Pilot proto = <span class="kwrd">new</span> Pilot(<span class="kwrd">null</span>, 100);
            IObjectSet result = db.QueryByExample(proto);
            ListResult(result);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> UpdatePilot(IObjectContainer db)
        {
            IObjectSet result = db.QueryByExample(<span class="kwrd">new</span> Pilot(<span class="str">"Michael Schumacher"</span>, 0));
            Pilot found = (Pilot)result.Next();
            found.AddPoints(11);
            db.Store(found);
            Console.WriteLine(<span class="str">"Added 11 points for {0}"</span>, found);
            RetrieveAllPilots(db);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> DeleteFirstPilotByName(IObjectContainer db)
        {
            IObjectSet result = db.QueryByExample(<span class="kwrd">new</span> Pilot(<span class="str">"Michael Schumacher"</span>, 0));
            Pilot found = (Pilot)result.Next();
            db.Delete(found);
            Console.WriteLine(<span class="str">"Deleted {0}"</span>, found);
            RetrieveAllPilots(db);
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> DeleteSecondPilotByName(IObjectContainer db)
        {
            IObjectSet result = db.QueryByExample(<span class="kwrd">new</span> Pilot(<span class="str">"Rubens Barrichello"</span>, 0));
            Pilot found = (Pilot)result.Next();
            db.Delete(found);
            Console.WriteLine(<span class="str">"Deleted {0}"</span>, found);
            RetrieveAllPilots(db);
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>要使用它，其实很简单，只需要添加一个引用即可</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823039918.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111270823044030.png" width="751" height="624"></a></p>
<p>同时，它也提供了一个可视化的工具，可以查看数据库里面所有对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>XMLDatabase</h1>
<p>这是我在2009年设计的一个完全基于XML，面向对象的数据库。这个数据库的最终可执行的组件以及源代码，请通过下面地址访问</p>
<p><a title="http://xmldatabase.codeplex.com/" href="http://xmldatabase.codeplex.com/">http://xmldatabase.codeplex.com/</a></p>
<p>&nbsp;</p>
<p>我之前有几篇文章详细介绍了设计的考虑和使用用法</p>
<p><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/09/1542354.html">XML数据库一睹为快</a></p>
<p><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/12/1544105.html">XML数据库的有关架构和细节说明</a></p>
<p><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/31/1557545.html">XML数据库之alpha发布</a></p>
<p>&nbsp;</p>
<p>今年，我整理了一下，重新发布到了Nuget Gallary，所以，你要使用的话，会更加简单，如果你使用的是Visual Studio 2010的话</p>
<p>关于如何使用，请参考下面这篇文章的详细介绍，这里就不重复了</p>
<p><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/25/2090180.html">XMLDatabase项目已经发布到nuget gallery</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>总结</h1>
<p>本文介绍了三款可用于本地、脱机存储应用程序开发的数据库解决方案。SQL Server Compact Edition与SQL Server一脉相承，使用关系型数据库的机制，提供了一致的数据访问体验。db4o和XMLDatabase都是开源的面向对象数据库，都支持LINQ语法，db4o是用二进制保存数据，而XMLDatabase是以XML格式存储所有数据的。</p>]]></description></item><item><title>SQL Server、Oracle、db2所提供的简装版(Express)比较</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/26/2264558.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 26 Nov 2011 11:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/26/2264558.html</guid><description><![CDATA[<h1>引子</h1> <p>近日，给一个客户做一个定制内容的培训，他们目前用的开发环境是Visual Studio 2008，主要做的是Windows Forms开发，后台数据库之前用的是Oracle，现在用的是db2。所以我特别整了一个虚拟机，安装了这些需要的软件，并且也借此机会，对SQL Server，Oracle和db2所提供的简装版(Express Editio)做一个简要的比较，这篇文章是为记录</p> <h1>前言</h1> <p>目前数据库领域，三大厂商就是微软，Oracle和IBM，他们的拳头产品分别就是SQL Server，Oracle，db2。这种三足鼎立的局面，已经存在了一段时间，而且还将继续存在下去。这三个产品，我个人认为本质上的差异性并不大，用户在选择的时候，主要根据自己公司的平台基础架构和使用习惯，以及知识储备的情况决定。</p> <h1>SQL Server Express</h1> <p>由于工作背景的关系，我主要是使用SQL Server，所以先从它说起吧。</p> <p>最早SQL Server 2000就提供了所谓的MSDE(Desktop Engine)，目的就是提供一个免费可以分发的小型数据库引擎，方便开发和部署。后来在SQL Server 2005中正式改名为SQL Server Express，这个名称沿用到了SQL Server 2008以及R2这个版本.</p> <p>SQL Server Express是免费的，它可以用于小型业务系统，或者一些实验性的开发场景。它有一个容量限制，就是数据库不能超过4GB。</p> <p>SQL Server Express可以<a href="http://www.microsoft.com/downloads/zh-cn/details.aspx?familyid=220549B5-0B07-4448-8848-DCC397514B41&amp;displaylang=zh-cn">单独下载</a>安装，也可以通过安装Visual Studio 的时候，勾选这个组件实现自动安装。一般安装好之后，会有两个服务组件，如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921063807.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921086183.png" width="863" height="196"></a></p> <p>SQL Sever Express没有自带管理工具，一般可以通过命令行（sqlcmd)来实现一些管理</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921085245.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921095702.png" width="672" height="123"></a></p> <p>需要注意的是，这里的服务器名称要写.\sqlexpress，在SQL Server中，这表示的是一个命名实例的意思。</p> <p>如果不习惯用命令行，则还可以单独下载<a href="http://www.microsoft.com/downloads/zh-cn/details.aspx?FamilyID=C243A5AE-4BD1-4E3D-94B8-5A0F62BF7796">SQL Server Express Management Studio</a>，这也是免费的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921105570.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921113279.png" width="802" height="367"></a></p> <p>SQL Server与Visual Studio有天然的关系，在Visual Studio中可以很容易建立SQL Server 服务器连接，并且进行诸如创建数据库，表，视图，修改数据，新建查询等所有有关操作。即便你没有安装上面所提到的Management Studio，其实你需要做的事情都可以通过Visual Studio来完成</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921131195.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921149111.png" width="1028" height="644"></a></p> <p>要访问SQL Server数据库的数据，是相当方便的。.NET Framework内置提供了System.Data.SqlClient的命名空间，可以很方便地完成数据库的访问。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Data.SqlClient;


<span class="kwrd">namespace</span> Sample
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            var conn = <span class="kwrd">new</span> SqlConnection(<span class="str">"Database=Northwind;data source=(local)\\sqlexpress;integrated security=true"</span>);
            var cmd = conn.CreateCommand();
            cmd.CommandText = <span class="str">"SELECT * FROM Employees"</span>;
            conn.Open();

            var reader = cmd.ExecuteReader();
            <span class="kwrd">while</span> (reader.Read())
            {
                Console.WriteLine(reader[0].ToString());
            }

        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>同时，SQL Server Express还完全支持LINQ to SQL以及ADO.NET Entity Framework</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921159535.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921163863.png" width="580" height="634"></a></p>
<p>&nbsp;</p>
<h1>Oracle Express </h1>
<p>接下来我们来看一下Oracle Express的情况,目前Oracle提供的最新版本是11g Express，可以通过下面的地址下载</p>
<p><a title="http://www.oracle.com/technetwork/database/express-edition/downloads/index.html" href="http://www.oracle.com/technetwork/database/express-edition/downloads/index.html">http://www.oracle.com/technetwork/database/express-edition/downloads/index.html</a></p>
<p>我下载了两个安装程序，如下图</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921173731.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921199978.png" width="905" height="325"></a></p>
<p>OracleXE112_WIN32.zip是数据库主程序安装文件</p>
<p>ODTWithODAC112021.zip是所谓的开发工具包，也就是给Visual Studio配套的一些程序集和脚本等</p>
<p>安装好之后，大致有如下的几个服务</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921209040.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921219497.png" width="565" height="104"></a></p>
<p>如果安装了ODT，就可以很方便地在Visual Studio中连接到Oracle数据库，进行操作</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921225254.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921235678.png" width="1028" height="644"></a></p>
<p>要通过编程访问Oracle数据库，也很简单，只要预先添加一个引用</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921243627.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921241576.png" width="933" height="363"></a></p>
<p>需要注意的是，这个Assembly并没有安装在GAC，所以你可能需要通过“浏览”这个选项卡，直接找到它，而不是在".NET"这个选项卡里面去找。</p>
<p>具体的访问代码其实很类似，例如</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> Oracle.DataAccess.Client;


<span class="kwrd">namespace</span> Sample
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            var conn = <span class="kwrd">new</span> OracleConnection(<span class="str">"data source=localhost;user id=ares;password=password"</span>);
            var cmd = conn.CreateCommand();
            cmd.CommandText = <span class="str">"SELECT * FROM SYS.Employees"</span>;
            conn.Open();

            var reader = cmd.ExecuteReader();
            <span class="kwrd">while</span> (reader.Read())
            {
                Console.WriteLine(reader[0].ToString());
            }

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>IBM db2 Express-C</h1>
<p>IBM目前所提供的db2 Express 的名称叫Express-C, 版本号为9.7.4，可以通过下面的地址下载到</p>
<p><a title="http://www.ibm.com/developerworks/cn/downloads/im/udbexp/" href="http://www.ibm.com/developerworks/cn/downloads/im/udbexp/">http://www.ibm.com/developerworks/cn/downloads/im/udbexp/</a></p>
<p>我下载了几个组件，如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921262283.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921277134.png" width="905" height="325"></a></p>
<p>db2exec_975_win_x86.exe是db2 express-C的安装程序</p>
<p>db2exec_vsai_975_win_x86.exe是给visual studio的一个插件</p>
<p>ibm_data_studio_standalone_win_v31.zip是db2 express的一个管理工具</p>
<p>安装完之后，我大致看了一下有关的服务，有如下几个</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921285640.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921293066.png" width="568" height="119"></a></p>
<p>在Visual Studio中，同样也可以方便地进行连接，和管理。这得益于Visual Studio所提供的良好的扩展机制</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921301854.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921319770.png" width="1028" height="644"></a></p>
<p>如果安装了那个管理工具，则有如下的画面</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921339638.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921344456.png" width="1028" height="640"></a></p>
<p>如果需要编程访问DB2 Express-C，则可以添加如下的引用</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921363452.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921376078.png" width="483" height="359"></a></p>
<p>并且使用诸如下面这样的代码访问即可</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> IBM.Data.DB2;

<span class="kwrd">namespace</span> Sample
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建数据库连接</span>
            var conn = <span class="kwrd">new</span> DB2Connection(<span class="str">"Database=SAMPLE;User ID=administrator;Server=localhost;password=password01!"</span>);
            <span class="rem">//创建命令</span>
            var cmd = conn.CreateCommand();
            cmd.CommandText = <span class="str">"SELECT * FROM Employee"</span>;
            <span class="rem">//打开连接</span>
            conn.Open();
            <span class="rem">//读取数据</span>
            var reader = cmd.ExecuteReader();
            <span class="kwrd">while</span> (reader.Read())
            {
                Console.WriteLine(reader[0].ToString());
            }
            <span class="rem">//关闭连接</span>
            conn.Close();

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
我们会发现，这与之前的SQL Server Express和Oracle中访问数据库的方式，何其相似。




<p>&nbsp;</p>
<h1>总结</h1>
<p>从上面的例子和截图可以看出来，这三个产品，在我们作为开发人员具体来使用的时候，其实差别很小的。这也是一个好的框架所带来的优势。.NET支持灵活的数据访问框架，由此，我们可以专注于业务本身，而不需要为不同的数据源编写不同的代码。事实上，完全可以做到，一份代码复用于不同的数据源。而作为一个Express的产品，他们从能力上，没有本质上的差别。</p>
<p>&nbsp;</p>
<p>针对他们的一些小的区别，我整理一个表格如下</p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111126192139614.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111261921401387.png" width="789" height="185"></a>]]></description></item><item><title>我们该用怎么样的系统思维来了解SharePoint及其价值</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/20/2256344.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 20 Nov 2011 10:50:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/20/2256344.html</guid><description><![CDATA[<h1>名词解释</h1> <p>SharePoint，这里泛指微软的SharePoint Service , SharePoint Foundation, SharePoint Server ，这是微软针对互联互通，协作分享所推出的一系列技术、产品、解决方案。目前最新的版本是2010，分为两个产品：SharePoint Foundation 2010(免费), SharePoint Server 2010(收费）</p> <p>SharePoint 的官方主页在</p> <p><a title="http://sharepoint.microsoft.com/zh-cn/Pages/default.aspx" href="http://sharepoint.microsoft.com/zh-cn/Pages/default.aspx">http://sharepoint.microsoft.com/zh-cn/Pages/default.aspx</a></p> <p>&nbsp;</p> <h1>引子</h1> <p>很多事情，是需要花了时间了解了，才可能会有更加恰当的评估。这句话用在很多地方都是适用的，例如用在SharePoint这个产品上面。我因为工作关系，接触到不少客户，也花了相当多的时间，在帮助这些客户了解，评估和实施SharePoint。你知道，有时候，这个过程并不太轻松，当然此间也有不少体会。我今天整理一些资料分享出来，我的中心思想（也是我跟很多客户的决策层强调最多的）是：<font color="#ff0000"><strong>我们需要的是一个系统的思维，要有大局观</strong></font>。</p> <p>&nbsp;</p> <h1>一.用一句话概括SharePoint的核心价值</h1> <p>我总结的最扼要的一句话就是：SharePoint是关于分享和协作的一个idea——<font color="#ff0000"> <strong>Share is point</strong></font>。作为一套服务和软件，它拥有一段不算短的历史了，但如果真的对其变迁加以了解，你会发现其内在的那个主题一直没有变。</p> <p>稍作展开，以SharePoint 2010为例，可以这样定义SharePoint：<font color="#ff0000"><strong>它是一个可用户企业内部，也可以用于外部的信息协作平台</strong></font>。</p> <p>&nbsp;</p> <h1>二.用系统思维理解SharePoint</h1> <p>我一般会从四个角度来看SharePoint,并且谈论到SharePoint 的6大功能，以及它与其他外部系统的集成。</p> <p>&nbsp;</p> <p>首先，要看的是<strong><font color="#ff0000">基础技术架构</font></strong>，这是为了能让<font color="#ff0000"><strong>CTO(技术总监)</strong></font>评估技术平台的成熟度和可靠性，和其他基础架构产品之间的关系，后期可持续扩展的能力，评估总体拥有成本（TCO)等等方面的问题</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849253116.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111120184925575.png" width="971" height="727"></a><br> <p>然后,我会展开到<font color="#ff0000"><strong>运维和管理</strong></font>的层面,这主要是与<strong><font color="#ff0000">IT运维部门</font></strong>讨论理解SharePoint的部署模型，三层架构，服务架构，负载均衡方面的可能性等等话题 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849254446.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849269396.png" width="969" height="730"></a> <p>&nbsp; <p>第三个角度是，从<font color="#ff0000"><strong>开发人员角度</strong></font>，我会谈到开发模型、三种不同的开发方式，选择合适的开发策略是相当重要的 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849261871.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849273441.png" width="971" height="730"></a> <p>最后我还会谈谈，从<font style="background-color: #ffffff" color="#ff0000"><strong>使用者角度</strong></font>，SharePoint意味着什么。例如网页和内容的概念，页面个性化，列表和文档及其它功能的使用等等。 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111120184927377.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849279264.png" width="970" height="727"></a> <p>&nbsp;</p> <p>上面是四个看到SharePoint的视角，然后，大家还可以从功能性上面更好地理解，参照下图</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111120184927867.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111120184928834.png" width="967" height="729"></a></p> <p>&nbsp;</p> <p>另外，SharePoint可以与其他很多产品相结合，例如</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849292164.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111201849298476.png" width="967" height="727"></a></p> <p>&nbsp;</p> <p>上面的截图来自我的一个讲义，我稍做了整理，如果有需要的，可以通过下面地址下载</p> <p><a title="用系统思维理解SharePoint2010.pdf" href="http://files.cnblogs.com/chenxizhang/%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%80%9D%E7%BB%B4%E7%90%86%E8%A7%A3SharePoint2010.pdf">用系统思维理解SharePoint2010.pdf</a></p> <p>&nbsp;</p> <h1>三.企业在引入SharePoint时的一些建议</h1> <p>一般会强调和重点讨论如下几点</p> <ol> <li>引入SharePoint是一个系统工程，不是简单地安装了软件就完事了，这不是IT一个部门的事情，要提升到信息化的高度。</li> <li>SharePoint与Lotus的可比性不大。我对Lotus具体的功能以及近些年的发展不是很了解，但我知道的是，SharePoint从2007版本开始，受到了越来越多客户和用户的认可。</li> <li>必须要有专职并且是专业的SharePoint管理员，小型企业，可以设1人。中大型企业，还需要设置多人。</li> <li>使用习惯会有些要改变，使用了SharePoint，大致上的习惯应该是以SharePoint为中心去收集和发布信息，这与传统的使用客户端软件或者专用业务系统的方式可能有些小的不同。</li> <li>定制开发要适度评估，在了解现有功能的前提下，如果确实需要，才开发。</li> <li>与外界应用系统的集成应该尽可能都通过BCS（Business Connectivity Service)+SSS(Secure Store Service) 的服务架构来实现</li> <li>工作流方面的支持，SharePoint默认会有些模板，2010中已经有很大改进了。但对于复杂工作流或者工作流系统而言，这方面还有改进空间。但我觉得部门级别的工作流，默认的模板（或者配合SharePoint Designer加以一些设计）就能满足要求。</li> <li>目前在移动设备方面的支持还略显简单。</li> <li>权限这一块，粒度可能不是特别细。我知道很多企业也确实有些特殊的权限控制的策略，这里要评估一个度的问题。因为SharePoint本质上是为了共享和协作的。</li></ol> <h1>四.个人学习SharePoint的一些问题</h1> <p>除了上面讨论到的话题，我其实平常也经常收到一些个人网友的咨询，主要有如下的问题</p> <ol> <li><strong><font color="#ff0000">学习SharePoint是否有前途？</font></strong>老实说，这个问题，就好比以前也经常有朋友问我说“学.NET是否有前途”一样，大家可以省略问了，因为我的答案基本上都是：有。这绝不是敷衍，其实潜台词是，不管什么技术，只要在恰当的时候，你掌握了，并且将其学以致用，就有前途。</li> <li><strong><font color="#ff0000">感觉要学的东西很多，不知道如何下手，该怎么办</font></strong>？这倒是一个实际的问题，很多人都有这样的感觉。我觉得，如果你所在的公司也比较重视，你最好的方式是，找到就近的、专业的培训机构进行系统地学习，微软还有这方面的认证考试（<a title="http://www.microsoft.com/learning/en/us/certification/cert-sharepoint-server.aspx#tab1" href="http://www.microsoft.com/learning/en/us/certification/cert-sharepoint-server.aspx#tab1">http://www.microsoft.com/learning/en/us/certification/cert-sharepoint-server.aspx#tab1</a>），你可以通过考试来检验你的知识。当然，自我学习也是完全可以的，你可以自己买些书（国外，国内的书都有），然后微软也提供了一些官方的培训学习材料，例如（<a title="http://blogs.technet.com/b/ldusolier/archive/2011/10/18/sharepoint-training-kits.aspx" href="http://blogs.technet.com/b/ldusolier/archive/2011/10/18/sharepoint-training-kits.aspx">http://blogs.technet.com/b/ldusolier/archive/2011/10/18/sharepoint-training-kits.aspx</a>）</li></ol> <p>&nbsp;</p> <h1>总结</h1> <p>这一篇文章，我希望从系统的高度，帮助大家更好地理解SharePoint。我提供了一些素材，也针对企业和个人的一些相关顾虑和问题，做了一些展开。希望能给企业的决策层、管理和开发人员、用户，或者仅仅是SharePoint爱好者一个参考。</p>]]></description></item><item><title>如何为Infopath重复表添加自动递增的行号</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/16/2251527.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 16 Nov 2011 09:22:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/16/2251527.html</guid><description><![CDATA[<p>这是今天在讲表单设计和工作流时候的一个小问题，之前在Infopath 2007中很容易实现，因为有一个函数：position，可以自动获取当前行的编号。</p> <p>但是这个函数在Infopath 2010中已经删除了，尝试使用该函数会遇到如下的错误提示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111161722171.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111161722191995.png" width="331" height="151"></a></p> <p>找了下资料，后来是这样解决的，使用下面的表达式</p> <p>count(../preceding-sibling::*[local-name() = "<font color="#ff0000">YourRepeatingGroupName</font>"])+1 <p>请注意，将红色字体的部分，替换为你的重复组的名称</p> <p>例如我的例子是：</p> <p>count(../preceding-sibling::*[local-name() = "订单明细"])+1<br></p> <p>这里其实关键是xpath的语法，sibling是指找同级的元素，preceding是找之前的，所以preceding-silbing，就是找当前元素的所有之前的兄弟元素，理解这个，对这个表达式就能理解了</p>]]></description></item><item><title>如何给Infopath表单保存时自动命名和自动关闭</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/14/2247756.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 13 Nov 2011 23:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/14/2247756.html</guid><description><![CDATA[<p>这是课程中的一个小问题和例子，分享出来给更多朋友参考</p> <h1>问题：</h1> <p>默认情况下，我们在SharePoint中通过Forms Service填写Infopath表单的时候，当我们点击了“Save”菜单项，会弹出一个对话框来，这里我们需要输入一个File Name。如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111114074653573.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140746554312.png" width="931" height="627"></a></p> <p>但问题就在于这里，用户输入这个名称显然不是很方便的，而且容易造成重复</p> <p>另外一个问题就是，上图中，我们必须Save完后，还要点击Close按钮，表单才会关闭。那么有没有什么办法改善这一点呢？</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>解决方案：自定义提交</h1> <p>我给出的解决方案就是不使用标准的Save功能，而是自定义提交功能。</p> <p>&nbsp;</p> <h2>第一步：定义提交选项</h2> <p>点击下图中的Submit Options</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140746562751.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140746583143.png" width="829" height="369"></a></p> <p>启用提交，并且选择发送到SharePoint document Library</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140746594406.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111114074700686.png" width="462" height="358"></a></p> <p>点击Add按钮，在下面的对话框中，定义目标列表库，以及文件名的格式。我这里定义个文件名包含三部分：它们用一个concat函数连接起来。</p> <p>1. Order Form ，这是固定的</p> <p>2. userName()，这是一个函数，返回当前用户名</p> <p>3. now()， 这是一个函数，返回当前时间</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747029092.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747043944.png" width="621" height="439"></a></p> <p>点击“Next”，给这个连接保存一个名称</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747052699.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747065598.png" width="621" height="439"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747084910.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111114074709874.png" width="462" height="358"></a></p> <p>&nbsp;</p> <h2>第二步：显示提交菜单，隐藏默认的保存菜单</h2> <p>打开表单选项</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747116772.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747136541.png" width="827" height="710"></a></p> <p>确认以下选项</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747149441.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747166800.png" width="688" height="486"></a></p> <p>&nbsp;</p> <p>完成如上设置之后，就可以到浏览器中看看效果了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747173604.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747197899.png" width="931" height="627"></a></p> <p>点击“Submit”菜单，表单会被自动关闭，而且会有一个默认的名称，根据当前用户和时间</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747204146.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/2011111407472277.png" width="931" height="627"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>总结</h2> <p>通过简单的配置，我们确实可以实现自动命名和关闭表单。这个解决方案唯一的问题就是，它的目标文档库是设置为固定的，如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747233533.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111140747241765.png" width="626" height="182"></a></p> <p>也就是说，这是固定发送到某个文档库的，目前没有什么简单的配置方式实现自动发送到当前文档库。</p> <p>为什么会有这个问题，因为Infopath表单说到底是一个内容类型，它应该是要能复用在不同的表单库才对，有的朋友可能会说，最好是能根据当前使用该表单模板的表单库位置自动保存是否更好。当然，在某些情况下，那样确实更好。但目前的Infopath，并没有提供这个功能。一个可行的方法是，通过一些后台代码来做这样的事情，但是其实我们也不是很推荐在Infopath里面多写代码的，老实说会很麻烦。所以，这个问题暂时就不展开了</p>]]></description></item><item><title>SharePoint 2010开发方面的课堂中整理有关问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/13/2246958.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 12 Nov 2011 23:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/13/2246958.html</guid><description><![CDATA[<p>这是我这几天在做一个SharePoint开发的课程的时候，大家提出的一些问题，及我的解答，分享给更多的朋友参考一下 <p>这个文档，也可以在这里下载 <p><a title="SharePoint2010开发方面的有关问题.pdf" href="http://files.cnblogs.com/chenxizhang/SharePoint2010%E5%BC%80%E5%8F%91%E6%96%B9%E9%9D%A2%E7%9A%84%E6%9C%89%E5%85%B3%E9%97%AE%E9%A2%98.pdf">SharePoint2010开发方面的有关问题.pdf</a> <p>&nbsp; <hr align="center" size="2" width="100%">  <ol> <li> <h1><b>对于</b><b>SharePoint</b><b>的体系结构不甚清楚，觉得有点乱</b><b></b></h1></li></ol> <p>了解了就不会觉得乱了，请理解 <p>1) 场è服务器è服务è应用程序è站点集è站点è子站点è列表(或库)è列表项目。请描述这个地址的含义：http://chenxizhang-pc/sites/training/sql <p>2) 不同的级别有不同的管理员，可以分工协作 <p>3) SharePoint 2007的SSP没有了，现在是一个松散式的服务应用程序的架构 <p>理解SharePoint的六大模块 <p>1) 站点 <p>2) 社区 <p>3) 内容 <p>4) 搜索 <p>5) 商业智能 <p>6) 应用集成 <p>理解SharePoint的三种定制开发场景 <p>1) 基于浏览器的定制（主题，母板页，页面，列表，库） <p>2) 使用SharePoint Designer的定制（权限，列表定义，外部数据，工作流，网站修改） <p>3) 使用Visual Studio的定制开发（全功能开发，可复用的解决方案） <ol start="2"> <li> <h1><b>经常因为密码过期的问题，导致服务器出现很多相关问题</b></h1></li></ol> <p>SharePoint 2010提供了配置账户，以及自动修改密码的功能，可以从根本上解决这个问题 <p>它会自动刷新AD中的密码，不需要额外的管理操作 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755327272.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image002" border="0" alt="clip_image002" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755339125.jpg" width="244" height="165"></a> <ol start="3"> <li> <h1><b>SharePoint</b><b>如何与后台的业务系统进行集成</b></h1></li></ol> <p>这个可以通过BCS服务来实现，基本架构是这样的： <p>外部列表è外部内容类型èBDC模型è后台数据源 <p>后台数据源可以是SQL Server或者其他任何数据源，如果是SQL Server的话，则直接通过配置就能完成，如果是其他数据源，则需要少量定制开发 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755348437.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image004" border="0" alt="clip_image004" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755352241.jpg" width="244" height="167"></a> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755361793.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image006" border="0" alt="clip_image006" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755374203.jpg" width="244" height="165"></a> <p>可以在网页里面增删改查 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755384943.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image008" border="0" alt="clip_image008" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755399304.jpg" width="244" height="165"></a> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755415268.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image010" border="0" alt="clip_image010" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755417677.jpg" width="244" height="177"></a> <p>同时，还可以同步到SharePoint workspace中进行脱机查看和编辑 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755438625.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image012" border="0" alt="clip_image012" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755444381.jpg" width="244" height="190"></a> <p>关于连接其他外部数据源的开发实例，可以参考我的其他一些博客文章 <p><a href="http://zzk.cnblogs.com/s?w=blog%3Achenxizhang%20bcs">http://zzk.cnblogs.com/s?w=blog%3Achenxizhang%20bcs</a> <ol start="4"> <li> <h1><b>网站集管理员如何管理自己的解决方案</b></h1></li></ol> <p>SharePoint 2010开始提供了两种不同的解决方案模型 <p>1. 服务器场解决方案，支持全功能的定制开发，可以用在任意的级别。需要管理员安装和部署。 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755456758.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image014" border="0" alt="clip_image014" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755469167.jpg" width="244" height="165"></a> <p>支持所有的项目类型 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755475654.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image016" border="0" alt="clip_image016" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755481411.jpg" width="244" height="220"></a> <p>和所有的项目条目 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755491279.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image018" border="0" alt="clip_image018" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111113075553534.jpg" width="244" height="233"></a> <p>2. 沙箱解决方案，支持部分功能的定制开发，只能用在具体的站点集，由站点集管理员安装和管理。受到沙盒安全模型的限制，很多代码不能被执行，而且每天能够使用的资源是有限的 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755553226.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image020" border="0" alt="clip_image020" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130755565635.jpg" width="244" height="165"></a> <p>一个大的原则就是：<b>凡是要访问到网站之外资源，例如磁盘文件，数据库，或者其他网站集的功能都是不支持的，而且代码能使用的命名空间也会被自动过滤</b>。 <p>沙箱解决方案中支持的项目类型 <p>1) Empty projects (to which you add only allowed project item types) <p>2) List Definition projects <p>3) Event Receiver projects, <p>4) Content Type projects. <p>不支持的项目类型 <p>1) Site Definition projects <p>2) Visual Web Part projects（这个项目类型，因为涉及到一个ascx文件需要部署到磁盘，默认是不支持的，但可以通过安装SharePoint PowerTools来提供这个支持） <p>3) Business Data Connectivity Model projects. <p>支持的项目条目类型 <p>1) Web Parts <p>2) List Definitions <p>3) Event Receivers <p>4) Content Types <p>不支持的项目条目类型 <p>1) Visual Web Parts <p>2) Application Pages <p>3) Business Data Connectivity Models <ol start="5"> <li> <h1><b>从SharePoint 2007</b><b>或者WSS 3.0</b><b>升级到SharePoint 2010</b><b>相关问题</b></h1></li></ol> <p>有三种升级方式 <p>1. 就地升级（in place upgrade），在原先的服务器场上面直接安装SharePoint 2010，安装配置过程中有一个升级选项。这种做法的好处是自动化，几乎不需要额外的操作，但风险较高，万一升级不成功，则可能无法还原到2007 <p>&nbsp; <p>2. 附加数据库进行迁移(attach content database) <p>a. 备份原先的内容数据库（通常是在SQL Server 2005中） <p>b. 将备份文件复制到SQL Server 2008, 还原数据库 <p>c. 通过Test-SPContentDatabase命令验证数据库是否可以附加到SharePoint 2010 <p>d. 在SharePoint 2010中新建一个Web Application <p>e. 通过Mount-SPContentDatabase命令进行附加 <p>&nbsp; <p>3. 界面的升级 <p>a. 通常需要手工执行这个操作，来完成原先2007站点集的页面样式的升级。 也可以在Mount-SPContentDatabase的时候，指定一个参数(-UpdateUserExperience) <p>b. 在站点操作菜单中有一个Visual Upgrade <ol start="6"> <li> <h1><b>万一数据库坏了如何快速切换的问题</b></h1></li></ol> <p>SharePoint 2010支持使用SQL Server的数据库镜像功能，来提供这方面的保护，实现高可用。 <p>可以在新建Web Application指定故障转移服务器 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130756001203.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image021" border="0" alt="clip_image021" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130756027483.png" width="166" height="244"></a> <p>也可以在后期再修改这个设置 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130756033447.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image023" border="0" alt="clip_image023" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130756045856.jpg" width="244" height="157"></a> <ol start="7"> <li><b>使用下来感觉SharePoint</b><b>比较慢，有没有什么优化的策略</b></li></ol> <p>SharePoint的性能调优是一个系统功能，大致的原则和思路如下 <p>1. 根据企业的业务情况进行测试 <p><a href="http://technet.microsoft.com/en-us/library/ff758659.aspx">http://technet.microsoft.com/en-us/library/ff758659.aspx</a> <p>2. 进行合理的服务器场软硬件规划，请参考如下的指导文档 <p><a href="http://technet.microsoft.com/en-us/library/ff758645.aspx">http://technet.microsoft.com/en-us/library/ff758645.aspx</a> <p>3. 优化数据库及其存储设计 <p><a href="http://technet.microsoft.com/zh-cn/library/cc298801.aspx">http://technet.microsoft.com/zh-cn/library/cc298801.aspx</a> <p>4. 考虑远程数据存储（RBS）的机制，将大对象放置在数据库之外 <p><a href="http://technet.microsoft.com/zh-cn/library/ee748649.aspx">http://technet.microsoft.com/zh-cn/library/ee748649.aspx</a> <p>5. 考虑对用户操作设置一定容量阀值，避免恶意的操作 <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111113075605151.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image025" border="0" alt="clip_image025" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111130756062560.jpg" width="135" height="244"></a> <p>6. 考虑缓存的特性 <p>页面缓存和用户配置信息缓存<a href="http://msdn.microsoft.com/en-us/library/aa661294.aspx">http://msdn.microsoft.com/en-us/library/aa661294.aspx</a> <p>大对象缓存<a href="http://msdn.microsoft.com/en-us/library/aa604896.aspx">http://msdn.microsoft.com/en-us/library/aa604896.aspx</a> <p>7. 掌握SharePoint的监控手段，发现问题并调整 <p><a href="http://technet.microsoft.com/en-us/library/ff758658.aspx">http://technet.microsoft.com/en-us/library/ff758658.aspx</a>]]></description></item><item><title>定制SharePoint文档信息面板</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/10/2244985.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 10 Nov 2011 13:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/10/2244985.html</guid><description><![CDATA[<p>这也是课堂中的例子，分享给更多朋友参考学习吧</p> <h1>概述</h1> <p>作为SharePoint内容管理功能的一个具体表现，文档信息面板（Document Information Panel)的功能，使得我们在使用文档并且将其用于工作流程的时候，可以添加一些与业务相关的数据。</p> <p>文档信息面板，是SharePoint服务器结合Office 客户端软件共同实现的一个功能。</p> <p>&nbsp;</p> <h1>默认的文档信息面板</h1> <p>只要在文档库中，添加至少一个自定义字段，然后通过Office客户端软件（例如Word)为该文档库添加新的文档的时候，就会自动显示出文档信息面板。</p> <p>下面的例子中，我有一个文档库，除了默认的字段之后，我添加了一个特殊的字段，“Project”，而且该字段我设置为了“Required”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102145176421.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102145442710.png" width="927" height="454"></a></p> <p>然后，我在Word中，就可以看到一个所谓的Document Properties-Server的特殊区域。这就是我们所谓的“文档信息面板”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102145461366.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102145493610.png" width="983" height="674"></a></p> <p>从这个例子可以看出，如果我们希望用户在上传文档的时候，提供一些额外的信息，那么有这样的一个信息面板，将是比较直观和方便的。当然，前提是，这是Office文档。</p> <p>默认情况下，并不需要特殊的设置，这个面板会根据文档库中的列的信息，自动生成出来。但如果我们希望这个面板更加漂亮，或者有自己特别的布局，则可以进一步定制。</p> <p>例如，我希望在这个面板上面添加更多的描述信息，以及公司的Logo。下面是一个例子</p> <p>转到文档库的设置页面，定位到“内容类型(Content Types）”这个节</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102145542525.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146045547.png" width="930" height="445"></a></p> <p>点击“Document”这个Content Type</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146073680.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111110214612610.png" width="931" height="466"></a></p> <p>点击“Document Information Panel settings”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146181062.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111110214624468.png" width="932" height="487"></a></p> <p>点击“Create a new custom template”，此时会启动Infopath这个应用程序。前提是你已经安装。我们可以看到，它确实默认就显示了两个字段，是水平排列的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146418586.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146477086.png" width="828" height="588"></a></p> <p>我们完全可以对这个模板进行修改，添加我们需要的其他任何东西，例如</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102146552673.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/2011111021470723.png" width="828" height="588"></a></p> <p>作为演示目的，我添加一个图片，并且让两个字段进行竖排，而不是横排。然后，我还添加了一个说明。然后，我就可以将这个表单发布出来</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102147103106.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102147128938.png" width="828" height="414"></a></p> <p>&nbsp;</p> <p>保存起来之后，以后添加文档，我们看到的信息面板就像下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102147193162.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111102147221785.png" width="983" height="674"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>总结：</h1> <p>文档信息面板提供了一个特别的方式，让用户可以填写文档之外的一些信息，这些信息将被收集到服务器，并且将可以用于流程或者统计分析。</p> <p>文档信息面板本质上是一个Infopath表单，它提供了一个默认的视图，但还支持定制。</p>]]></description></item><item><title>通过脚本方式导出SharePoint网站集用户及其角色列表</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/10/2244796.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 10 Nov 2011 09:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/10/2244796.html</guid><description><![CDATA[<p>这是课堂上的一个例子，分享出来给大家参考用。如果你管理一个或者多个网站集，那么这个脚本将有助于你快速地了解用户信息。 <p>管理员们，懂点脚本还是很有用的哦，呵呵 <p><strong></strong>&nbsp; <p><b>将下面的脚本保存为一个ps1</b><b>文件</b><pre class="csharpcode">function Get-UsersWebPermissions([<span class="kwrd">string</span>]$siteUrl) { 
    $site = Get-SPSite $siteUrl;
    $webs=$site.AllWebs;
    
    <span class="kwrd">foreach</span>($w <span class="kwrd">in</span> $webs){
        $users = $w.SiteUsers;
        <span class="kwrd">foreach</span>($user <span class="kwrd">in</span> $users){
            $data = @{ 
                <span class="str">"Site"</span> = $site.Url 
                <span class="str">"Web Url"</span> = $w.Url 
                <span class="str">"Web Name"</span> = $w.Title 
                <span class="str">"Username"</span> = $user.LoginName
                <span class="str">"Fullname"</span> = $user.Name 
                <span class="str">"Roles"</span> = $user.Roles 
                <span class="str">"Groups"</span> = $user.Groups
                };
            New-Object PSObject -Property $data 
        };
    };
} 
Get-UsersWebPermissions -siteUrl http:<span class="rem">//chenxizhang-pc | Out-GridView</span>
</pre>
<p>打开SharePoint 2010 Management Shell,定位到上面这个文件所在的目录，执行这个脚本。</p>
<p>【备注】在你的机器运行的时候，需要将上面的<a href="http://chenxizhang-pc">http://chenxizhang-pc</a>替换为你的网站集地址</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111101759186883.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image002" border="0" alt="clip_image002" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111101759204143.jpg" width="580" height="312"></a></p>
<p>回车运行之后，就可以看到结果</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111110175922390.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image002[7]" border="0" alt="clip_image002[7]" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111110175923782.jpg" width="580" height="409"></a></p>
<p>这个结果可以复制，粘贴到Excel里面来，以便做进一步的处理。</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>如何通过编程方式将SharePoint中的Infopath表单及附件进行归档</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/08/2241808.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 08 Nov 2011 15:00:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/08/2241808.html</guid><description><![CDATA[<p>事情是这样的：我们通过Infopath设计了一些电子表单，用来在企业内部进行一些流程审批的载体。结合SharePoint Server所提供的Forms Service，我们可以比较便捷地实现，在线填写也很方便，如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082257565290.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082257587949.png" width="828" height="588"></a></p> <p>在浏览器中填写的效果如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258027520.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258046417.png" width="931" height="635"></a></p> <p>注意：这只是一个演示表单，我简单做了几个字段而已。重点要体现附件。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258154214.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225816146.png" width="931" height="635"></a></p> <p>&nbsp;</p> <p>那么，现在的需求是这样：因为这些表单越来越多，而且大多有附件，导致SharePoint的内容数据库越来越大，速度受到一定的影响。用户想到一个做法，就是定期将那些已经完成审批的表单归档，而且从这个表单库中删除掉。</p> <p>在归档的时候，就会遇到一个问题，<font color="#ff0000" size="4"><strong>如何将附件也归档，并且放到指定的磁盘文件夹上去</strong></font>。</p> <p>&nbsp;</p> <p>首先，我们需要了解的是，Infopath的附件默认是怎么存储的呢？Infopath表单其实就是一份特殊的XML文件，它会将所有的信息，包括附件在内都保存在一个XML文件中。当然，附件会通过编码成Base64的字符串保存。我们可以将之前填写好的这个表单保存下来一份数据，以便了解它里面的结构</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258189980.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258204242.png" width="933" height="530"></a></p> <p>这个文件，我们可以用记事本直接打开</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258218504.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258323968.png" width="1028" height="711"></a></p> <p>大家可以看到，其实附件的内容都是保存在这个xml文件里面的。</p> <p>通过一些研究，我实现了如下的解决方案，这是一个原型，可以作为一个参考。</p> <p>【备注】具体在做的时候，还要细致一些将所有数据都妥善保存，本例<font color="#ff0000"><strong>重点演示如何保存附件</strong></font>。其他常规的数据应该很容易处理。可以读取出来存放在数据库中的一个表中。</p> <p>&nbsp;</p> <p>下面这个类型是我在网上找到的，不是我的原创。这个类型是一个解码器，可以将上面的Base64String还原为一个字节数组</p><pre class="csharpcode">  <span class="kwrd">using</span> System;

    <span class="kwrd">using</span> System.Collections.Generic;

    <span class="kwrd">using</span> System.Text;


    <span class="kwrd">using</span> System.IO;


    <span class="rem">/// &lt;summary&gt;</span>

    <span class="rem">/// Class used to decode an InfoPath attachment.</span>

    <span class="rem">/// Pulls the file name and the decoded file from either a base 64 byte array or string.</span>

    <span class="rem">/// &lt;/summary&gt;</span>

    <span class="kwrd">public</span> <span class="kwrd">class</span> InfoPathAttachmentDecoder
    {

        <span class="rem">// Private string to hold the attachment name.</span>

        <span class="kwrd">string</span> _fileName;


        <span class="rem">// Private byte array to hold the decoded attachment.</span>

        <span class="kwrd">byte</span>[] _decodedFile;


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// The name of the file within the InfoPath attachment.</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="kwrd">public</span> <span class="kwrd">string</span> Filename
        {

            get { <span class="kwrd">return</span> _fileName; }

        }


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// The decoded file within the InfoPath attachment.</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="kwrd">public</span> <span class="kwrd">byte</span>[] DecodedFile
        {

            get { <span class="kwrd">return</span> _decodedFile; }

        }


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// Constructor for the InfoPathAttachmentDecoder Class</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="rem">/// &lt;param name="base64EncodedString"&gt;The attachment represented by a string&lt;/param&gt;</span>

        <span class="kwrd">public</span> InfoPathAttachmentDecoder(<span class="kwrd">string</span> base64EncodedString)
        {

            <span class="rem">// Use unicode encoding.</span>

            Encoding _encoding = Encoding.Unicode;


            <span class="rem">// The byte array containing the data.</span>

            <span class="kwrd">byte</span>[] _data = Convert.FromBase64String(base64EncodedString);


            <span class="rem">// Use a memory stream to access the data.</span>

            <span class="kwrd">using</span>(MemoryStream _memoryStream = <span class="kwrd">new</span> MemoryStream(_data))
            {

                <span class="rem">// Create a binary reader from the stream.</span>

                BinaryReader _theReader = <span class="kwrd">new</span> BinaryReader(_memoryStream);


                <span class="rem">// Create a byte array to hold the header data.</span>

                <span class="kwrd">byte</span>[] _headerData = _theReader.ReadBytes(16);


                <span class="rem">// Find the file size before finding the file name.</span>

                <span class="kwrd">int</span> _fileSize = (<span class="kwrd">int</span>)_theReader.ReadUInt32();


                <span class="rem">// Get the file name.</span>

                <span class="kwrd">int</span> _attachmentNameLength = (<span class="kwrd">int</span>)_theReader.ReadUInt32() * 2;

                <span class="kwrd">byte</span>[] _fileNameBytes = _theReader.ReadBytes(_attachmentNameLength);

                _fileName = _encoding.GetString(_fileNameBytes, 0, _attachmentNameLength - 2);


                <span class="rem">// Get the decoded attachment. </span>

                _decodedFile = _theReader.ReadBytes(_fileSize);

            }

        }


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// Constructor for the InfoPathAttachmentDecoder Class</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="rem">/// &lt;param name="base64EncodedBytes"&gt;The attachment represented by a byte array&lt;/param&gt;</span>

        <span class="kwrd">public</span> InfoPathAttachmentDecoder(<span class="kwrd">byte</span>[] base64EncodedBytes) : <span class="kwrd">this</span>(Convert.ToBase64String(base64EncodedBytes)) { }


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// Static method that gets the file from the attachment.</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="rem">/// &lt;param name="base64EncodedString"&gt;The attachment represented by a string&lt;/param&gt;</span>

        <span class="rem">/// &lt;returns&gt;Returns a byte array of the file in the attachment.&lt;/returns&gt;</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">byte</span>[] DecodeInfoPathAttachment(<span class="kwrd">string</span> base64EncodedString)
        {

            <span class="rem">// Create an instance of the InfoPathAttachmentDecoder</span>

            InfoPathAttachmentDecoder _infoPathAttachmentDecoder = <span class="kwrd">new</span> InfoPathAttachmentDecoder(base64EncodedString);


            <span class="rem">// Return the decoded file.</span>

            <span class="kwrd">return</span> _infoPathAttachmentDecoder.DecodedFile;

        }


        <span class="rem">/// &lt;summary&gt;</span>

        <span class="rem">/// Static method that gets the file from the attachment.</span>

        <span class="rem">/// &lt;/summary&gt;</span>

        <span class="rem">/// &lt;param name="base64EncodedBytes"&gt;The attachment represented by a byte array&lt;/param&gt;</span>

        <span class="rem">/// &lt;returns&gt;Returns a byte array of the file in the attachment.&lt;/returns&gt;</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">byte</span>[] DecodeInfoPathAttachment(<span class="kwrd">byte</span>[] base64EncodedBytes)
        {

            <span class="rem">// Create an instance of the InfoPathAttachmentDecoder</span>

            InfoPathAttachmentDecoder _infoPathAttachmentDecoder = <span class="kwrd">new</span> InfoPathAttachmentDecoder(base64EncodedBytes);


            <span class="rem">// Return the decoded file.</span>

            <span class="kwrd">return</span> _infoPathAttachmentDecoder.DecodedFile;

        }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>然后，我们需要实现对XML文档的读取。虽然读XML文件向来都不是什么大问题，但Infopath的XML文档结构还是挺繁琐的，有很多命名空间，直接读取相当费时费力。我一般会用下面的方式</p>
<p>&nbsp;</p>
<p>1. 打开Visual Studio Command Prompt</p>
<p>2. 根据xml文件生成xsd（架构）</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258343836.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225835116.png" width="681" height="446"></a></p>
<p>3.根据xsd文件生成一个强类型的class</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225844205.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258498663.png" width="681" height="446"></a></p>
<p>&nbsp;</p>
<p>准备工作做好了，下面我们做一个简单的程序来实现一下整个存档的逻辑</p>
<h2>1. 创建一个Windows Forms程序</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258501007.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258526938.png" width="959" height="664"></a></p>
<p>【注意】选择.NET Framework 3.5</p>
<p>&nbsp;</p>
<h2>2. 设置编译平台为x64（这是访问SharePoint服务器对象模型的要求）</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225853394.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258549149.png" width="730" height="385"></a></p>
<p>&nbsp;</p>
<h2>3. 做一个简单的界面如下</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082258569017.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225906926.png" width="584" height="406"></a></p>
<p>&nbsp;</p>
<h2>4. 引用Microsoft.SharePoint.dll</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/20111108225910496.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259183608.png" width="319" height="237"></a></p>
<p>&nbsp;</p>
<h2>5. 将之前生成好的10248.cs和写好的InfoPathAttachmentDecoder 类型添加到项目中来</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259228685.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259272650.png" width="354" height="274"></a></p>
<p>&nbsp;</p>
<h2>6.编写代码</h2><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.IO;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Windows.Forms;
<span class="kwrd">using</span> System.Xml.Serialization;
<span class="kwrd">using</span> Microsoft.SharePoint;

<span class="kwrd">namespace</span> FormArchiver
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainForm : Form
    {
        <span class="kwrd">public</span> MainForm()
        {
            InitializeComponent();
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> btStart_Click(<span class="kwrd">object</span> sender, EventArgs e)
        {
            var path = txtLibPath.Text;
            var folder = txtFolder.Text;

            var site = <span class="kwrd">new</span> SPSite(path);
            var web = site.OpenWeb();
            var list = web.GetList(path);
            var items = list.Items;
            <span class="kwrd">foreach</span>(SPListItem item <span class="kwrd">in</span> items)
            {
                var file = item.File;
                var stream = file.OpenBinaryStream();
                var serializer = <span class="kwrd">new</span> XmlSerializer(<span class="kwrd">typeof</span>(myFields));<span class="rem">//这里的myFields这个类型，是之前通过xsd工具根据表单结构生成的</span>

                var result =(myFields) serializer.Deserialize(stream);
                var attachment = <span class="kwrd">new</span> InfoPathAttachmentDecoder(result.group3.FirstOrDefault().field4);
                var fileName = attachment.Filename;
                var buffer = attachment.DecodedFile;

                <span class="kwrd">if</span>(!Directory.Exists(folder))
                    Directory.CreateDirectory(folder);

                var targetPath = Path.Combine(folder, fileName);
                File.WriteAllBytes(targetPath, buffer);

            }

            MessageBox.Show(<span class="str">"保存完成"</span>);
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这个程序运行起来的效果大致如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259286106.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259292386.png" width="433" height="289"></a></p>
<p>&nbsp;</p>
<p>点击“开始”，很快的我们就可以将附件保存出来到预设的目录</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259324347.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111082259332546.png" width="905" height="644"></a></p>
<p>&nbsp;</p>
<p>这个演示程序的源代码，请通过这里下载</p>
<p><a title="FormArchiver.rar" href="http://files.cnblogs.com/chenxizhang/FormArchiver.rar">FormArchiver.rar</a></p>]]></description></item><item><title>SharePoint 疑难杂症之加载控件TaxonomyPicker.ascx失败及其解决方法</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/08/2241585.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 08 Nov 2011 11:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/08/2241585.html</guid><description><![CDATA[<p>今天讲SharePoint 2010的管理和开发课程，在排错的时候，检查事件日志，发现有好几个错误，如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111081922404550.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111081922428430.png" width="1052" height="715"></a></p> <p> 找到微软一篇文章</p> <p><a title="http://support.microsoft.com/kb/2481844" href="http://support.microsoft.com/kb/2481844">http://support.microsoft.com/kb/2481844</a></p> <p>意思说，这个控件里面有一个错误的字符，解决方案如下</p> <ol> <li>Navigate to /14/TEMPLATE/ControlTemplates/TaxonomyPicker.ascx user control  <li>Open the user control in a text editor and locate the first line  <li>Find the character string &amp;#44; and replace with a comma ‘,’ (without quotes).  <li>Save the user control</li></ol> <p>修改之后，整个世界就清静了。但是这个问题，确实让人啼笑皆非，不是吗？玩SharePoint的同学们伤不起啊</p>]]></description></item><item><title>如何“删除”SharePoint列表的Title字段</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/06/2238419.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 06 Nov 2011 13:51:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/06/2238419.html</guid><description><![CDATA[<p>近日网友来信问到，如何删除掉SharePoint列表的Title字段。这其实是一个经常被问到的问题，我今天给出的解决方案给大家参考一下</p> <p>首先，其实我们是无法删除这个字段的，有的朋友可能不理解，但如果你做过SharePoint的开发，那么就很好理解，因为在SPList这个对象上面，有一个Title属性，这个属性就是指向了Title字段。假如我们真的把Title字段删除掉，那么在访问SPList的时候就可能会有问题。</p> <p>我们可以简单来看一下就明白了</p> <p>1. 对于普通字段，在编辑页面中，是有删除按钮的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150413397.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150422492.png" width="984" height="802"></a></p> <p>2. 而对于Title字段，是没有删除按钮的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150427442.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150426853.png" width="990" height="804"></a></p> <p>&nbsp;</p> <p>那么，假设我们的列表，真的不需要这样一个字段，或者觉得Title这样的字段名不是我们希望的。那么有什么办法让用户不要看到它吗？</p> <p>下面是一个做法，给大家参考</p> <p>1. 启用列表的内容类型管理功能</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150431803.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150436230.png" width="989" height="539"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150434802.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150441148.png" width="989" height="385"></a></p> <p>&nbsp;</p> <p>2. 在内容类型的高级设置里面，将Title设置为隐藏</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150453034.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150451016.png" width="990" height="728"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150468965.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150472802.png" width="989" height="664"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150487687.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150498144.png" width="990" height="804"></a></p> <p>&nbsp;</p> <p>3.查看效果</p> <p>经过如上设置之后，在新建Item的时候，就不会再看到Title字段了，看起来就像删除了一样。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150504391.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111062150516833.png" width="990" height="804"></a></p>]]></description></item><item><title>通过监控诊断和调试应用程序对共享目录访问可能的权限问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/11/04/2236121.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 04 Nov 2011 05:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/11/04/2236121.html</guid><description><![CDATA[<p>事情是这样的，我们开发的一个SharePoint的流程系统，在某个客户那里部署之后，测试期间遇到一些问题。大致相关的一部分流程是这样的</p> <p>1.用户发起流程之后，会有一些附件，最开始是上传到SharePoint中的一个文档库的</p> <p>2.流程运行期间，大多是审批，签转，参与人可以对这些附件进行修改，通过SharePoint的多版本功能，可以为文档保存多个版本</p> <p>3.当流程结束之后，我们希望将与这个流程所有的文档（及所有的版本）移动到某个共享目录存档起来。（这样做的目的是减轻SharePoint的压力）</p> <p>&nbsp;</p> <p>这次遇到的问题是，在最后一步，将文档转移到共项目的时候，总是无法通过，报的是IOException，也就是无法写入到目录。</p> <p>那么，我们是用什么身份去写这个目录的呢？</p> <p>通常，在SharePoint的解决方案中，为了简化授权，我们在操作外部资源（例如数据库，或者文件夹）的时候，都会提升权限，如下所示</p><pre class="csharpcode">      [WebMethod]
        <span class="kwrd">public</span> <span class="kwrd">bool</span> CloseTicket(<span class="kwrd">int</span> ticketId)
        {
            var result = <span class="kwrd">false</span>;
            var webUrl = SPContext.Current.Web.Url;
            var DocumentLibName = <span class="str">"DocumentReviewTempDocumentLib"</span>;
            var Database = Global.GetDatabase();


            SPSecurity.RunWithElevatedPrivileges(<span class="kwrd">delegate</span>()
                {
                   <span class="rem">//这里编写具体的功能</span>
                });

            <span class="kwrd">return</span> result;
        }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这里的关键是SPSecurity.RunWithElevatedPrivileges这个方法，就是所谓提升了权限。</p>
<p>那么到底提升到什么权限呢？它是提升到当前Web Application所依赖的那个Application Pool的运行帐号的权限。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111041341145154.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111041341145645.png" width="1054" height="741"></a></p>
<p>我的机器上，当前使用了一个端口为80的Web Application，它的Identity是NetworkService</p>
<p>那么，意思就是说，如果调用了上面那个CloseTicket方法，则不管调用者是谁，只要成功调用到了，则后续工作所使用的身份，其实都是NetworkService.</p>
<p>&nbsp;</p>
<p>道理是这么讲没有错，但是事实的情况就是，我们即便在客户提供的共享目录添加了这个帐号的权限，仍然是写入失败。</p>
<p>那么，我们如何证明，我们确实使用了这个帐号呢？</p>
<p>我用了一个工具来进行监控，这是微软提供的一个Procmon.exe，就是进程监控器，这个小工具属于systeminternal套件，非常好用，赞一个</p>
<p><a title="http://technet.microsoft.com/en-us/sysinternals/default.aspx" href="http://technet.microsoft.com/en-us/sysinternals/default.aspx">http://technet.microsoft.com/en-us/sysinternals/default.aspx</a></p>
<p>&nbsp;</p>
<p>通过这个工具，我们稍作设置，就可以测试一下对某个目录的读写情况</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111041341146168.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201111/201111041341152547.png" width="1141" height="498"></a></p>
<p>这是相当不错的，我们可以看到，刚才发生了CreateFile事件，而且用户是NETWORK SERVICE,进程是w3wp.exe(IIS的工作进程都是这个名字），有这种工具，有监控结果，无疑是更加形象的。</p>
<p>&nbsp;</p>
<p>下午还要继续协助客户调试一下看看到底他们那边是什么情况，以上记录下来给大家也参考一下</p>]]></description></item><item><title>基于OAuth实现的Windows Live Writer新浪微博插件</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/29/2228754.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 29 Oct 2011 11:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/29/2228754.html</guid><description><![CDATA[<h1>写在前面的话</h1> <p>和很多朋友一样，我一直坚持写技术方面的博客，希望通过这样的方式，一方面沉淀自己的知识结构和心得体会，更希望也许能够在某些时候给其他一些朋友提供一些参考帮助。我自己这么多年的技术道路，每每遇到一些疑难杂症，也是习惯在网上搜索一下，很多时候都能找到解决方案。开发方面的中文社区，我觉得博客园是做得非常好的，我很喜欢这里的环境和氛围。</p> <p>&nbsp;</p> <p>同时，今年以来，我也喜欢上了微博这种新的社交方式，通过简单的一两句话（140个字以内），可以和身边的朋友分享心情，确实很不错的。我自己是在新浪微博上面开通了帐号(<a href="http://weibo.com/chenxizhang">@chenxizhang</a>), 也玩得不亦乐乎，也欢迎大家关注我。<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-hotsmile" alt="Hot smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920259060.png"></p> <p>&nbsp;</p> <h1>为什么设计这个插件</h1> <p>我自己有一个需求，就是希望我在博客园发布的博客，也同时发送一条微博到新浪，这样关注我的朋友们，也就知道我的一些技术方面的新的消息了。为了实现我的这个需求，我也找了些方法，新浪本身提供了一个所谓的关联博客的功能，我也设置了，但不知道怎么回事就是没有用，问过一些朋友，也大多如此。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920267457.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920261078.png" width="1018" height="551"></a></p> <p>一时没有什么好的方法的情况下，我就想自己来写一个插件，一方面可以自己用，另外，说不定还有很多其他的朋友也有这方面的需求，可以分享给大家用。</p> <p>要实现一个插件，来自动发布微博，其实并不是很难，这个领域是有规范可遵循的。这里的关键是，如何模拟用户登录到新浪，并且发布新的消息。新浪微博使用的是国际上通用的OAuth机制，已经也大致知道一些。同时，博客园官方在这方面也有实践经验，可以给我们参考，我也是学习了这篇文章</p> <p><a title="http://www.cnblogs.com/cmt/archive/2010/05/13/1733904.html" href="http://www.cnblogs.com/cmt/archive/2010/05/13/1733904.html">http://www.cnblogs.com/cmt/archive/2010/05/13/1733904.html</a></p> <p>&nbsp;</p> <p>我所使用的一个OAuth的.NET程序库，也是博客园这篇文章提到<a href="http://t.sina.com.cn/1653426785">sarlmolapple</a>写了个C#的SDK：<a href="http://code.google.com/p/opensinaapi/">http://code.google.com/p/opensinaapi/</a>，相当不错的。分享产生更大价值，由这件事情，我们更加体会到。谢谢sarlmolapple同学。</p> <p>关于OAuth这块技术，我这里就不赘述了，sarlmolapple所实现的SDK已经很完整，并且有web客户端，和桌面客户端的例子。</p> <p>&nbsp;</p> <h1>我如何设计这个插件</h1> <p>我重点说一下我的几个设计的目标</p> <p>1. 应该要尽可能方便使用，结合博客作者的使用习惯</p> <p>2. 应该要尽可能安全，包含用户的隐私</p> <p>&nbsp;</p> <p>基于方便使用的角度，我不准备单独设计客户端，现在微博客户端其实很多了，我这个想法是针对博客作者而设计，所以我想到了，应该有不少作者和我一样，使用微软的Live writer来编写和发布博客吧，因此我决定写一个Live writer的插件，这是很自然的：我不需要单独再装一个软件，就是我平常用的Live writer就能提供这样的功能，应该是方便的。如果有用Live writer，则本来应该对插件就不陌生，我相信很多人都用了一个代码插入的插件吧，它可以帮助我们将插入的代码很好地格式化。</p> <p>&nbsp;</p> <p>另外，从安全方面的考虑，我不准备让用户在我的插件中输入任何与用户名和密码有关的信息，大家不需要有任何关于隐私方面的顾虑。这方面新浪的API是做得不错的，我提供的插件，将引导大家在新浪的专门页面上进行登录并且授权，然后将得到的授权码提供给插件即可，插件不记录任何用户名和密码信息。</p> <p>&nbsp;</p> <p>那么，Live writer如何支持扩展的？</p> <p>微软的Windows Live系列产品，包括Messenger,Writer,Mail等等都在某个程度上支持扩展。有兴趣的大家，可以参考下面的文档</p> <p><a title="http://msdn.microsoft.com/en-us/library/dd179336.aspx" href="http://msdn.microsoft.com/en-us/library/dd179336.aspx">http://msdn.microsoft.com/en-us/library/dd179336.aspx</a></p> <p>具体来说，你可以引用WindowsLive.Writer.Api.dll，并且实现PublishNotificationHook这个抽象类，就可以完成一个简单的插件。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920264175.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920272572.png" width="905" height="644"></a></p> <p>编译好的插件，是一个dll的形式，你需要复制到下面目录就可以了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920273685.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920273162.png" width="905" height="237"></a></p> <p>&nbsp;</p> <p>这个插件我已经提供了下载</p> <p><a title="http://www.xizhang.com/contents/weibo/weiboplugin.rar" href="http://www.xizhang.com/contents/weibo/weiboplugin.rar">http://www.xizhang.com/contents/weibo/weiboplugin.rar</a></p> <p>如果有更新，我将统一在下面的页面提供说明</p> <p><a href="http://www.xizhang.com/weibo.htm">http://www.xizhang.com/weibo.htm</a> </p> <p>如果你希望在更新时收到通知，可以给这个邮箱(<a href="mailto:admin@xizhang.com">admin@xizhang.com</a>)发一个邮件，我会将你添加到一个邮件联系人列表中，这样日后有更新的版本时，会通过邮件发送给你</p> <p>如果你不想写邮件，也可以在本博客文章下面留言，届时有更新时，我也会在这里发布消息。</p> <p>&nbsp;</p> <h1>如何使用这个插件</h1> <p>1. 请通过这个<a href="http://www.xizhang.com/contents/weibo/weiboplugin.rar">地址</a>下载插件</p> <p>2. 解压缩之后，将weiboplugin.dll复制到Live writer的目录</p> <ul> <li>32位系统：C:\Program Files\Windows Live Writer\Plugins  <li>64位系统：C:\Program Files (x86)\Windows Live Writer\Plugins</li></ul> <p>3.打开Live writer，首先要进行配置</p> <p>选择开始=》Options</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111029192028719.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920287372.png" width="704" height="530"></a></p> <p>切换到plug-ins这个选项卡</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920283261.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920285246.png" width="558" height="563"></a></p> <p>这里可以看到一个“新浪微博助手”的插件，选择它，点击“Options”按钮，会有一个选项窗口</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920292455.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920292488.png" width="523" height="293"></a></p> <p>你需要点击“授权”按钮</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920295868.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920298933.png" width="523" height="293"></a></p> <p>此时会有一个链接出来，这是新浪提供的统一进行授权的页面，点击这个链接</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920295901.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920305378.png" width="1018" height="551"></a></p> <p>【备注】如果你当前已经登录到了新浪微博，则上面的画面不会出现，直接就会得到下面这个授权码</p> <p>&nbsp;</p> <p>这里你可以安全地输入你的帐号和密码，然后选择“登录并授权”，正常的话，会得到一个授权码</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920303492.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920313001.png" width="1018" height="551"></a></p> <p>你将这个授权码复制到刚才那个选项框中来</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920314671.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920315019.png" width="523" height="293"></a></p> <p>然后点击“保存”按钮即可</p> <p>&nbsp;</p> <p>退出选项设置后，你就可以使用该插件了。你写好文章后，按照正常流程发布。第一次使用插件，会有一个提示，点击“确定”即可</p> <p>以后使用就不需要任何操作，它会自动调用插件。</p> <p>&nbsp;</p> <p>最终效果如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920335741.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920341380.png" width="1233" height="733"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920375298.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110291920403403.png" width="916" height="577"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <p> <h1> <p>结束语</p></h1>  <p>这是我利用闲余时间开发的一个用于博客作者的微博助手，希望对大家有些帮助，博客微博两不误，呵呵</p>]]></description></item><item><title>测试微博发布</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/29/2228743.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 29 Oct 2011 11:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/29/2228743.html</guid><description><![CDATA[<p>这是一个测试文章，测试微博发布插件</p>]]></description></item><item><title>试水Windows 8 Metro application（xaml)及我的一些理解</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/25/2224499.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 25 Oct 2011 14:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/25/2224499.html</guid><description><![CDATA[<p>前不久，微软召开了Build大会，向开发者们公布了最新版本的Windows 系统，即Windows 8的一些信息。从各方面的反应来看，总体还是比较积极的（微软这次的大会算是舍了大本了，每个参会人员都免费得到一台平板电脑呢<img class="wlEmoticon wlEmoticon-nyahnyah" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Nyah-Nyah" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111025220842930.png">），我最近也找到有关的视频了解学习了一下，和很多朋友一样，我从开发人员的角度，比较关注的是，新版的Windows系统，及其在界面和整个生态环境方面的一些重大改变，将给我们这个行业，或者我们自己的公司和个人带来什么切身的影响。</p> <p>带着这样的疑问，我下载了微软提供的Windows Developer Preview版本安装试用了一下，这一篇文章将结合我自己的体会，给大家一些实际的参考信息。</p> <p>关于BUILD大会的两个主题演讲，有时间的朋友，应该全部看一遍</p> <p><a title="http://www.buildwindows.com/" href="http://www.buildwindows.com/">http://www.buildwindows.com/</a></p> <p>国内也有视频网站有转载，我这里就不介绍了。</p> <p>&nbsp;</p> <p>如果你想尝鲜使用Windows Developer Preview,可以在这里下载</p> <p><a title="http://msdn.microsoft.com/en-us/windows/apps/br229516" href="http://msdn.microsoft.com/en-us/windows/apps/br229516">http://msdn.microsoft.com/en-us/windows/apps/br229516</a>&nbsp;</p> <p>我是参照下面这篇文章的介绍进行安装的，我用移动硬盘安装，还比较顺利。</p> <p><a title="http://www.cnblogs.com/wpf_gd/archive/2011/09/15/2177810.html" href="http://www.cnblogs.com/wpf_gd/archive/2011/09/15/2177810.html">http://www.cnblogs.com/wpf_gd/archive/2011/09/15/2177810.html</a></p> <p><strong><font color="#ff0000">【备注】如果对系统安装不是特别清楚的同学，我建议你最好烧录一张DVD，然后在单独的机器安装，否则如果万一出现问题，可能会对你的工作造成影响</font></strong></p> <p>安装好之后，可以看到下面这样的界面,这就是一再被说到Metro界面风格</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208421520.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208432458.png" width="1404" height="1054"></a></p> <p>&nbsp;</p> <p>很显然，界面是第一个重大的变化。但实际上，这个界面并不是Windows 8的首创，这个界面最早是出现在Zune中，然后出现在Windows Phone 7中，现在只是将它的使用范围进一步扩大，微软的目标是希望以后的桌面电脑、平板电脑、手机都使用这种风格的界面。</p> <p>【备注】据说，前不久，Metro这种界面设计的风格正式申请了专利，而且获得了认证</p> <p><a title="http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PG01&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsrchnum.html&amp;r=1&amp;f=G&amp;l=50&amp;s1=%2220110202834%22.PGNR.&amp;OS=DN/20110202834&amp;RS=DN/20110202834" href="http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PG01&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsrchnum.html&amp;r=1&amp;f=G&amp;l=50&amp;s1=%2220110202834%22.PGNR.&amp;OS=DN/20110202834&amp;RS=DN/20110202834">http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PG01&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsrchnum.html&amp;r=1&amp;f=G&amp;l=50&amp;s1=%2220110202834%22.PGNR.&amp;OS=DN/20110202834&amp;RS=DN/20110202834</a></p> <p>&nbsp;</p> <p>这种界面无疑是很适合触摸式的操作的，而触摸式是一个趋势，这无可阻挡，所以Metro的出现时势所必然。然而，之所以可以单独申请专利，是因为它又区别于iPhone或者Android 的那种界面（仍然是一排一排的按钮），我个人感觉还是不错的，Metro的这种样式，给用户的信息量会多一些。</p> <p>&nbsp;</p> <p>不过，话说回来，Windows 8作为第一个使用Metro的操作系统，为了保证向后兼容性，是不可能只提供Metro这种样式的界面的，它仍然保留了传统的桌面。这个界面其实跟Windows 7很像，但也是有很多改进的。这里就先不做太多赘述</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208473411.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208527876.png" width="1404" height="1054"></a></p> <p>&nbsp;</p> <p>也就是说，至少目前可以肯定的是，Windows 8将支持两种风格的应用程序</p> <p>1. 传统的应用程序，通过exe等形式发布，用户可以自己复制，或者下载，然后安装</p> <p>2. Metro应用程序，这些应用程序是必须通过Windows Store来发布，并且传播的，用户也只能通过这个Store去下载和安装</p> <p>【备注】我们很多人都知道Apple Store，微软在手机领域也有一个Windows Phone Marketplace ，以后还将有一个统一的Windows Store(<a title="http://msdn.microsoft.com/en-us/windows/apps/br216180?lcid=1033" href="http://msdn.microsoft.com/en-us/windows/apps/br216180?lcid=1033">http://msdn.microsoft.com/en-us/windows/apps/br216180?lcid=1033</a>)</p> <p>&nbsp;</p> <p>从第二点来看，我觉得不会有太多人反对Windows 8以及Metro。从各方面的声音来看，大家都提到一个字：Opportunity （机会），是的，对于Windows平台的厂商（微软），最终用户，还有开发商以及开发人员，这意味着新的机会。</p> <p>&nbsp;</p> <p>在BUILD大会上，微软的高层除了演示了各种客户端的效果之后，其实还着重在强调云的概念。这是自然而然的，Windows 8如果想要华丽转身，成为桌面电脑+平板电脑+手机的统一的系统，绝不仅仅是客户端的事情。微软的Windows Azure以及相关配套的一些服务，在很早之前就为此在做准备了。典型的问题就是，这么多Application，其实到时候都是统一托管在Windows Azure平台上。另外，值得一说的是，Windows 8登录就直接继承了Windows Live ID,可以期待以后，只要有Windows Live ID，在不同设备上就能很自然地同步资源，或者进行一致性的操作。</p> <p>&nbsp;</p> <p>好的，那么回到开发人员的视角，既然Metro势在必行，那么我们有什么样的机遇和挑战呢？</p> <p>&nbsp;</p> <p>这次BUILD大会前后，就一直有很多朋友在议论，说微软要抛弃Silverlight等等。这个说法其实不准确。准确地说是，Silverlight无法在Metro样式的应用程序中运行，即便是Metro的IE，也是不接受Silverlight的，当然，它同时也不接受Flash。它不接受任何插件，它为HTML 5而来。</p> <p>是的，你没有听错，在Windows 8中，确实有两个IE，一个是Metro版本的，一个是桌面版本的。（实际上，微软正在开发Metro Office，我实在想看看那时怎么样一个Office）</p> <p>&nbsp;</p> <p>下面这个是Metro版本的IE</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208542218.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208559286.png" width="1404" height="1054"></a></p> <p>下面这个是桌面版的IE，与Windows 7里面的IE 9没有太大的区别，虽然这个版本叫IE 10.这个IE 里面当然是继续支持Silverlight的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111025220857912.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111025220858663.png" width="1098" height="815"></a></p> <p>&nbsp;</p> <p>其实这里有一句潜台词，大家可以试想一下，虽然说Windows 8是希望覆盖桌面电脑、平板电脑、手机（我相信这个目标也的确可以实现），但相比较桌面电脑而言，平板电脑和手机其实是没有桌面的概念的，所以，我可以预见，在平板电脑和手机里面，就肯定只有Metro样式的应用程序，在它们上面是不支持Silverlight的。</p> <p>其实，我自己做过基于Silverlight的项目，我的体会和很多人都相似，我没有寄太大希望它能用在internet上面，相反，Silverlight目前在一些企业内部项目中倒还是用得不错。因为，Silverlight作为一种技术，有它适用的地方，我们不能期望它能用在所有地方。</p> <p>&nbsp;</p> <p>但是，一个很大的好消息是，拥有Silverlight或者WPF开发经验的开发人员，将能够在Metro应用程序开发中占得先机。为什么这么说呢？因为Metro应用程序，支持三种编写方式</p> <p>1. javascript</p> <p>2. xaml + C#/VB.NET</p> <p>3. C++</p> <p>&nbsp;</p> <p>是的，你看到有XAML，我们对这个不是很熟悉了吗？如果是，你的经验可以得到复用。我下面就用这种方式来创建我的第一个应用程序，大家可以看看，其实也不是特别难。</p> <p>【备注】这里的XAML与WPF或者Silverlight从本质上是一样的，但是也有些不一样，本文不会做太多深入的展开。</p> <p>&nbsp;</p> <p>在下载得到的Windows Developer Preview这个系统中，已经预先安装好了Visual Studio 11 Express（估计正式版该叫Visual Studio 2012吧<img class="wlEmoticon wlEmoticon-hotsmile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Hot smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208581535.png">，虽然这名儿实在让人有点瘆得慌）</p> <p>目前这个版本，只有下面几个模板</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208594698.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252208593303.png" width="1124" height="806"></a></p> <p>&nbsp;</p> <p>我参照微软提供的例子，做了一个简单的应用程序，体验了一下</p><pre class="brush: xml; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">&lt;UserControl x:Class="TheFirstMetroApplication.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    d:DesignHeight="768" d:DesignWidth="1366"
    xmlns:local="using:TheFirstMetroApplication" &gt;

    &lt;ScrollViewer&gt;
        &lt;StackPanel&gt;

            &lt;TextBlock Text="{Binding Title}" FontSize="30" Margin="10"&gt;&lt;/TextBlock&gt;

            &lt;ItemsControl ItemsSource="{Binding Items}"&gt;
                &lt;ItemsControl.ItemTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;StackPanel Margin="50,0,0,10"&gt;
                            &lt;HyperlinkButton Content="{Binding Title}" FontSize="20"&gt;&lt;/HyperlinkButton&gt;
                            &lt;TextBlock Text="{Binding PubDate}"&gt;&lt;/TextBlock&gt;
                        &lt;/StackPanel&gt;

                    &lt;/DataTemplate&gt;
                &lt;/ItemsControl.ItemTemplate&gt;
            &lt;/ItemsControl&gt;

        &lt;/StackPanel&gt;
    &lt;/ScrollViewer&gt;

&lt;/UserControl&gt;</pre>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209018485.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209016042.png" width="1145" height="773"></a></p>
<p>大家看这样的语法，应该没有什么不好理解吧</p>
<p>【备注】其实还是有些细节改变了，例如HyperLinkButton，居然没有了NavigationUrl属性了，为什么呢？就是说不能直接做导航，而需要去响应事件代码。（这方面我还没有时间深入去研究每个细节点，以后再看）</p>
<p>后台代码的部分，也是我们属性的C#</p>
<p>&nbsp;</p><pre class="brush: csharp; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;">using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.Web.Syndication;

namespace TheFirstMetroApplication
{
    partial class MainPage
    {
        public MainPage()
        {
            InitializeComponent();

            Loaded += new RoutedEventHandler(MainPage_Loaded);
        }

        void MainPage_Loaded(object sender, RoutedEventArgs e)
        {
            GetFeedAsync("http://www.cnblogs.com/chenxizhang/rss");
        }

        public class FeedData
        {
            public string Title { get; set; }

            // using System.Collections.ObjectModel;
            private ObservableCollection&lt;FeedItem&gt; _Items = new ObservableCollection&lt;FeedItem&gt;();
            public ObservableCollection&lt;FeedItem&gt; Items
            {
                get
                {
                    return this._Items;
                }
            }
        }

        public class FeedItem
        {
            public string Title { get; set; }
            public string Author { get; set; }
            public string Content { get; set; }
            public DateTime PubDate { get; set; }

        }


        private async Task GetFeedAsync(string feedUriString)
        {
            // using Windows.Web.Syndication;
            SyndicationClient client = new SyndicationClient();
            Uri feedUri = new Uri(feedUriString);

            try
            {
                SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri);
                FeedData feedData = new FeedData();
                feedData.Title = feed.Title.Text;

                foreach (SyndicationItem item in feed.Items)
                {
                    FeedItem feedItem = new FeedItem();
                    feedItem.Title = item.Title.Text;
                    feedItem.PubDate = item.PublishedDate.DateTime;
                    feedItem.Author = item.Authors[0].Name.ToString();
                    if (feed.SourceFormat == SyndicationFormat.Atom10)
                    {
                        feedItem.Content = item.Content.Text;
                    }
                    else if (feed.SourceFormat == SyndicationFormat.Rss20)
                    {
                        feedItem.Content = item.Summary.Text;
                    }
                    feedData.Items.Add(feedItem);
                }
                this.DataContext = feedData;
            }
            catch (Exception ex)
            {
                // Log Error.
                
            }
        }


    }

}
</pre>
<p>&nbsp;</p>
<p>这段代码的意思是，在页面加载的时候，读取我的博客列表，并且绑定在当前页面上。</p>
<p>另外，需要注意的是，程序启动的方式与WPF和Silverlight都有些不同</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209031257.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209043275.png" width="1145" height="773"></a></p>
<p>然后，还有一个专门的appxmanifest文件，来设置与程序有关的信息</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209067966.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209066919.png" width="1138" height="735"></a></p>
<p>在当前的开发环境中，你可以选择直接部署到本机，也可以部署到模拟器，当然还可以发布到Windows Store，我下面部署到模拟器给大家看一下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209077476.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209073082.png" width="834" height="583"></a></p>
<p>按下F5键就可以部署调试，一个类似于平板电脑的界面打开了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209081196.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209093247.png" width="1181" height="762"></a></p>
<p>这个程序可以在桌面上找到</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209112365.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209137646.png" width="1186" height="772"></a></p>
<p>点击右键，可以很方便地进行卸载</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209162403.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209186713.png" width="1181" height="769"></a></p>
<p>&nbsp;</p>
<p>就这样，我们完成了第一个Metro应用程序，虽然这只是皮毛中的皮毛。但至少我们有信心去接受这个挑战和机遇，至少我是这么看的。</p>
<p>Metro应用程序，将很容易与Windows 系统进行无缝整合，例如我们希望在Windows 里面搜索时能够直接进入我们的应用程序中检索，得到结果，我们只需要在程序的设置中打开一个开关。它这里称为所谓的Declarations</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209195798.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209213978.png" width="1139" height="763"></a></p>
<p>然后，在EntryPoint里面实现一个方法</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209221046.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111025220922240.png" width="1145" height="773"></a></p>
<p>【备注】这里具体功能我没有实现，但那个参数里面是包含了用户要搜索到文字的</p>
<p>&nbsp;</p>
<p>在Windows里面，如何集成搜索功能呢。请看下面的例子。</p>
<p>【备注】由于我没有对搜索进行定制，所以它仍然是打开了主界面</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209238179.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110252209253012.png" width="1242" height="777"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>总结：Windows 8提出一个全新的设想，不光是界面上的。我个人觉得应该是值得期待的，本文我通过例子编写了第一个基于XAML的Metro应用程序，大家可以发现，其实也并不是很复杂，我们之前的经验可以得到复用，这无疑让我们有了更充分地理由，迎接这个机遇和挑战。</h2>
<p>&nbsp;</p>
<p>更多动手实验，请参考Windows 8 Hand-On Labs</p>
<p><a title="http://www.buildwindows.com/Labs" href="http://www.buildwindows.com/Labs">http://www.buildwindows.com/Labs</a></p>]]></description></item><item><title>基于Amazon提供的EC2平台构建云端应用实践</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/22/2221437.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 22 Oct 2011 13:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/22/2221437.html</guid><description><![CDATA[<p>关于云计算，云平台，云应用现在讨论的很多了，实际上，云并不是很玄的东西，我也和一些朋友早先有些交流和研究。</p> <p>我比较认可的定义是这样：<font color="#ff0000"><strong>云计算的核心理念是让计算这种资源，变得像我们日常生活中使用水，电等资源那样，可以按需索取，并支付相应的费用，而不需要每个人都造一个发电机</strong></font>。</p> <p>从这个意义上说，云计算是一种变革，而且绝对是好的变革。在这场游戏中，有两种主要角色：服务提供商和服务消费者。目前几个巨头都在这个领域有所作为，包括Amazon,Microsoft,Google等等。其中Amazon是大家公认的前驱者，也是目前做得相对较好的一家。</p> <p>对于这些巨头来说，云计算绝对是一笔大的生意，投入多少都不为怪。而对于服务消费者来说，我们能够在这场变革中得到什么呢？</p> <p>简单地说，<strong><font color="#ff0000">云计算和平台，让任何一个小公司甚至个人都可以做出世界级的应用（我的意思是说，有这样的条件，至于能不能做出来当然看你的能力了）</font></strong>，进一步印证了世界正在变得扁平的道理，因为你的瓶颈不可能会出现在硬件或者网络方面，你也不需要预先为此做出投资，你可以关注在应用上，前期的时候，你可以购买相对少一些的资源，当你的用户量上来的时候，你可以添加更多的资源，很自然地实现扩展。</p> <p>&nbsp;</p> <p>Amazon的云平台是 <a href="http://aws.amazon.com/ec2/">Amazon Elastic Compute Cloud (Amazon <strong>EC2</strong>)</a> ， 微软的云平台是<a href="https://windows.azure.com">https://windows.azure.com</a></p> <p>其实对windows azure，作为.NET开发人员而言，应该是更有亲切感的。但我自己目前还没有发现如何注册或者购买，好像是说我们所在的区域还不支持。而我对EC2是早有耳闻，今天花了一些时间，实践了一下，总体来说还是比较顺利的</p> <p>&nbsp;</p> <p>我选择了一台Windows 2008 R2的服务器，带有SQL Server。我的一个测试程序已经配置成功，这是一个使用了SQL Server，WCF Domain Service, Silverlight 等技术做的演示页面。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111022213200585.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132037262.png" width="992" height="596"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132067559.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132084476.png" width="993" height="596"></a></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>如果大家有兴趣，可以到 <a title="http://aws.amazon.com/" href="http://aws.amazon.com/">http://aws.amazon.com/</a> 开始你的云端之旅</p> <p>&nbsp;</p> <p>下面是一些相关事项</p> <p>1.你需要有一个能支付美元的信用卡，<strong><font color="#ff0000">你需要自己详细阅读有关的价格和收费条款</font></strong></p> <p>2.你需要手头有电话，激活帐号的时候，会给你打一个电话（应该是机器打的），英语的</p> <p>3.Linux的服务器比Windows的服务器便宜一些，而且好像有一个免费的使用Linux服务器的期限</p> <p>4.你最好自己有域名（可以映射过去），因为他默认会生成一个很长的域名，而且那域名肯定不是永久的</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>在配置的过程中，遇到一些问题，给大家也提醒一下</p> <h2>1.一般给的虚拟机，都只装好ASP.NET 3.5，我们需要手工地运行下面的命令安装ASP.NET 4.0</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132101086.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132128742.png" width="685" height="343"></a></p> <h2>2. 还需要确认WCF是否能正常工作</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132157403.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132172335.png" width="1100" height="660"></a></p> <h2>3.如果使用RIA Service，需要单独安装Toolkit</h2> <p><a title="http://go.microsoft.com/fwlink/?LinkId=192054" href="http://go.microsoft.com/fwlink/?LinkId=192054">http://go.microsoft.com/fwlink/?LinkId=192054</a></p> <p>&nbsp;</p> <h2>4.根据你的实际情况，选择SQL Server Express还是SQL Server Standard版本</h2> <p>我目前是测试阶段，选择了Express</p> <p>&nbsp;</p> <h2>5.访问aws.amazon.com可能速度不快</h2> <p>我家里用的网络经常要等很久才能链接上，这可能与网络有关系。</p> <p>&nbsp;</p> <p>可以这么说，一个新的时代已经开始，我们要做的就是迎接挑战和机遇。<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-highfive" alt="High five" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110222132188813.png"></p>]]></description></item><item><title>面向服务的RIA应用系统开发中的异常处理</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/22/2221009.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 22 Oct 2011 02:09:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/22/2221009.html</guid><description><![CDATA[<p>概述：本文将介绍的话题与XML Web Service，WCF，SharePoint，Silverlight开发有关。具体来说，就是在SharePoint平台上，结合Silverlight（客户端技术）和XML Web Service 或者WCF(服务端技术）开发应用系统的一些常见问题，典型问题就是异常处理，以及大数据传输问题。总结起来，算是我个人的一点经验之谈，抛砖引玉，供大家参考参考</p> <p>&nbsp;</p> <p>这一篇，主要谈谈异常处理</p> <p>&nbsp;</p> <h1>异常处理</h1> <p>异常处理是重要的，而且相当重要。这是一个基础性设计问题, 我先讲一些通用的概念吧</p> <p>&nbsp;</p> <p>我自己做过，也看过很多系统，在这方面其实都做得不怎么理想，有两个典型表现：</p> <p>1. 没有做异常处理</p> <p>2. 没有做合适的异常处理</p> <p>&nbsp;</p> <p>没有做异常处理的情况，一个典型例子如下：</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008228510.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008221051.png" width="992" height="596"></a></p> <p>这是会吓到用户的，不是吗？看到这一堆红的，很专业的错误消息，用户会做何感想呢？</p> <p>好吧，你可能不在乎用户的感受，那么看看下面这个吧</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008238576.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008236972.png" width="992" height="596"></a></p> <p>不错，连接字符串（包括密码等）都一五一十地告诉用户了，我不知道你的老板看到这样的情况，会做如何感想？</p> <p>&nbsp;</p> <p>没有做合适的异常处理的情况，一个典型的例子如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111022100823594.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008238990.png" width="879" height="665"></a></p> <p>毫无疑问，你确实做了异常处理，你用了try…catch…不是吗？这是一个进步了</p> <p>但是其实你什么都没有做</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111022100824660.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008242088.png" width="992" height="300"></a></p> <p>这个画面自然没有之前那个那么可怕，但是对用户而言，却没有本质上的帮助。</p> <p>&nbsp;</p> <p>那么，一个较为合适的异常处理策略是怎么样的呢？简单而言，我觉得主要就是：</p> <h2>1. 尽量精确地捕获异常，</h2> <h2>2. 根据异常类型，提供不同的响应。</h2> <p><br>像上面这样的例子，如果我们能做类似如下的处理，可能会好不少</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008246266.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111022100825759.png" width="1056" height="826"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008254695.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008259712.png" width="992" height="300"></a></p> <p>这至少有了很大进步：你处理了异常，而且对异常有区别的对待，然后还提供了针对不同异常不同的响应。这是异常处理中的最基本的原则。</p> <p>但还有其他的原则。从架构上而言，我们不太推荐直接在客户端里面访问后台的数据库等资源的。上面的例子，页面（aspx）其实是客户端的概念，在极其简单的应用程序中，你确实可以像上面这样访问数据库，并且进行异常处理。</p> <p>但是，你不觉得这样做其实很复杂吗？每个页面都可以访问数据库，你每个页面里面都需要写很多重复的代码，这些代码很难维护的。</p> <p>在ASP.NET应用系统中，我们可以利用Global.asax中统一处理Error事件</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008259745.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008268939.png" width="892" height="711"></a></p> <p>&nbsp;</p> <p>并且同时使用CustomError的重定向功能，转到错误页面</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008269288.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111022100827499.png" width="896" height="473"></a></p> <p>关于这两个技术的使用，有兴趣的朋友，可以参考 <a href="http://support.microsoft.com/kb/306355/zh-cn">这里</a> 的介绍</p> <p>&nbsp;</p> <p>所以，接下来个原则就是：</p> <p>3. 尽量不要在客户端中直接地处理异常</p> <p>4. 你得有一个异常处理的策略，而不是仅仅知道对异常进行处理，而且真的那么辛苦一个一个去处理</p> <p>&nbsp;</p> <p>那么，在多层架构中，到底在哪一层处理异常比较好，并且如何把握处理异常的度呢？说实在话，不是很好掌握，这得靠你琢磨，体会，我是很难告诉你的</p> <p>是不是鸭梨很大呢？<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-nerdsmile" alt="Nerd smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008286629.png"></p> <p>&nbsp;</p> <p>好吧，我给大家推荐一个资源，也是异常处理的一个比较好的框架：微软的企业库(Enterprise Library)，里面有一个专门做异常处理的模块，相当不错</p> <p>你可以通过 <a title="http://entlib.codeplex.com/" href="http://entlib.codeplex.com/">http://entlib.codeplex.com/</a> 下载到所有你想要找的资源，例如源代码，范例，动手实验等等</p> <p>博客园的Terry以前写过这方面的文章可以参考一下，虽然他当时写的时候，版本还比较低</p> <p><a title="http://www.cnblogs.com/Terrylee/archive/2005/11/14/275659.html" href="http://www.cnblogs.com/Terrylee/archive/2005/11/14/275659.html">http://www.cnblogs.com/Terrylee/archive/2005/11/14/275659.html</a>&nbsp;</p> <p><a title="http://www.cnblogs.com/Terrylee/archive/2005/11/16/277557.html" href="http://www.cnblogs.com/Terrylee/archive/2005/11/16/277557.html">http://www.cnblogs.com/Terrylee/archive/2005/11/16/277557.html</a></p> <p>&nbsp;</p> <p>好了，关于异常处理，我们该做的铺垫，都做了。如果你已经开始意识到异常处理不是那么简单和容易的事情，那么我的目的已经基本达到了。<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-hotsmile" alt="Hot smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008284469.png"></p> <p>下面要来谈一谈你还不了解的秘密：</p> <h2>在Silverlight中访问WCF或者XML Web Service时的异常处理</h2> <p>我们先来看一下XML Web Service吧，我知道在一些比较有历史的应用系统中，大量使用了XML Web Service。它也确实很容易使用，至少写个Helloworld是这样。我们就来看一个这样的例子吧</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008285059.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008295092.png" width="896" height="765"></a></p> <p>【备注】这可不是一个好惹的“Helloworld”，它随时可以出错<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-brokenheart" alt="Broken heart" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008294568.png">。这没有什么好奇怪的，世事难料，谁能知道你后台的服务会不会出错呢？</p> <p>&nbsp;</p> <p>接下来，很多同学已经利用刚才学到的知识，在编写客户端代码的时候，注意了异常处理。</p> <p>在Silverlight中，你不会用TRY…CATCH, 因为Silverlight都是异步调用服务的，它提供了一个异步模型，如下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008303762.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008308288.png" width="899" height="782"></a></p> <p>wow，看起来不错，有这个xxxxxCompleted事件(这是在添加服务引用时自动生成的），一切看起来都是比较舒服的。</p> <p>代码逻辑很清晰，如果出错，则显示错误消息，否则显示正常结果。但是实际运行起来，情况却有点不同。</p> <p>我们发现，如果出错的话，会提供这样一个错误消息。NotFound。这是怎么回事？</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008318878.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008312815.png" width="705" height="241"></a></p> <p>谢天谢地，我们还有IE自带的一个开发工具，可以了解一下到底后台发生了什么事情</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008313960.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008323993.png" width="939" height="537"></a></p> <p>这里倒确实可以看到服务端返回的错误消息了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008324583.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008326568.png" width="993" height="244"></a></p> <p>但是，你不可能要求用户自己去这样看错误消息吧？这未免难度太高了点儿。</p> <p>而且，问题是为什么服务器明明返回了错误消息，但客户端（准确地说，是Silverlight客户端）却收不到呢？</p> <p>这里原因就在于Silverlight的特有安全模型，我们都知道，Silverlight是运行在浏览器内部的，它的安全模型有时候也成为沙箱(sandbox)，简单地说，它只有一定的权限。他只能做浏览器允许它做的事情。</p> <p>本例而言，既然服务器返回了500这个状态码，而大家要知道，500这个状态码的意思是Internal Server Error。浏览器会认为说，这个错误与应用程序无关，而不会将详细的信息传递给Silverlight运行时。</p> <p>那么，有没有办法改变这个行为，毕竟我们最关心的是如何解决这个问题。</p> <p>说起来也不是很难，我们可以在Silverlight应用程序启动的时候，通知宿主的浏览器，我们需要处理这一类的错误. 通过<a href="http://msdn.microsoft.com/zh-cn/library/system.net.webrequest.registerprefix(VS.80).aspx">WebRequest.RegisterPrefix</a>来实现这样的需求。</p> <p>WebRequest.RegisterPrefix("http://", <a href="http://msdn.microsoft.com/zh-cn/library/system.net.browser.webrequestcreator.clienthttp(VS.95).aspx">WebRequestCreator.ClientHttp</a>)</p> <p>&nbsp;</p> <p>再次运行的话，我们看到的错误消息就是下面这样的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008336601.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008336634.png" width="725" height="264"></a></p> <p>这个至少能从一定程度上解决我们的问题：我们拿到了真正的异常消息，而不是一个谁都看不懂的NotFound错误</p> <p>&nbsp;</p> <p>准确地说，这是跟Silverlight有关，而与服务端无关，服务端确实返回了消息，只不过客户端解析的机制导致了之前的问题。</p> <p>这个问题在WCF很类似，但也有些不同的特点。下面是一个例子</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008334715.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008342240.png" width="764" height="452"></a></p> <p>&nbsp;</p> <p>如果不注册WebRequest.RegisterPrefix("http://", <a href="http://msdn.microsoft.com/zh-cn/library/system.net.browser.webrequestcreator.clienthttp(VS.95).aspx">WebRequestCreator.ClientHttp</a>)</p> <p>则异常同样是NotFound</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008347256.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008342273.png" width="705" height="241"></a></p> <p>但如果注册了，则会遇到下面的情况</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008345130.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008353244.png" width="896" height="355"></a></p> <p>这是什么意思呢？因为默认情况下，WCF是不会向客户端发送异常的详细消息的。这个可以通过在服务端进行必要的配置来启用</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008352405.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008358293.png" width="750" height="458"></a></p> <p>启用了这个开关后，再运行之后，就可以看到真正的错误消息了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008363310.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008369963.png" width="624" height="262"></a><br></p> <p>通过如上的讲解，大家应该能清楚地看到在Silverlight中访问服务时，异常处理的一些特殊性，而且我们也提供了解决方案。</p> <p>&nbsp;</p> <h1>高级部分</h1> <p>实际上，除了在Silverlight中修改http处理的策略（默认是浏览器处理，我们可以修改为应用程序自己处理）之外，我们可能更倾向于在服务端做一些改进。关于这一点，在XML Web Service这个层面上，很难再做改善。所以，我们现在一般在选择架构的时候，都优先考虑WCF作为服务架构，因为它具有更好的扩展性。</p> <p>我们来想想服务器改善是什么样的一个思路：<strong><font color="#ff0000">既然客户端无法显示那个真正的错误消息，是由于服务器返回了500这个状态码的回复，那么能不能修改这个状态码，强制修改为200呢？</font></strong></p> <p>在WCF中，你可以做到这一点，通过EndPointBehavior来扩展。下面就是一个例子</p><pre class="csharpcode"><span class="rem">// This is an auto-generated file to enable WCF faults to reach Silverlight clients.</span>

<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Collections.ObjectModel;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Runtime.Serialization;
<span class="kwrd">using</span> System.Net;
<span class="kwrd">using</span> System.ServiceModel;
<span class="kwrd">using</span> System.ServiceModel.Channels;
<span class="kwrd">using</span> System.ServiceModel.Description;
<span class="kwrd">using</span> System.ServiceModel.Dispatcher;

<span class="kwrd">namespace</span> SilverlightApplicationSample.Web
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> SilverlightFaultBehavior : Attribute, IServiceBehavior
    {
        <span class="kwrd">private</span> <span class="kwrd">class</span> SilverlightFaultEndpointBehavior : IEndpointBehavior
        {
            <span class="kwrd">public</span> <span class="kwrd">void</span> AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
            {
            }

            <span class="kwrd">public</span> <span class="kwrd">void</span> ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)
            {
            }

            <span class="kwrd">public</span> <span class="kwrd">void</span> ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)
            {
                endpointDispatcher.DispatchRuntime.MessageInspectors.Add(<span class="kwrd">new</span> SilverlightFaultMessageInspector());
            }

            <span class="kwrd">public</span> <span class="kwrd">void</span> Validate(ServiceEndpoint endpoint)
            {
            }

            <span class="kwrd">private</span> <span class="kwrd">class</span> SilverlightFaultMessageInspector : IDispatchMessageInspector
            {
                <span class="kwrd">public</span> <span class="kwrd">object</span> AfterReceiveRequest(<span class="kwrd">ref</span> Message request, IClientChannel channel, InstanceContext instanceContext)
                {
                    <span class="kwrd">return</span> <span class="kwrd">null</span>;
                }

                <span class="kwrd">public</span> <span class="kwrd">void</span> BeforeSendReply(<span class="kwrd">ref</span> Message reply, <span class="kwrd">object</span> correlationState)
                {
  <strong><font color="#ff0000">                  <span class="kwrd">if</span>((reply != <span class="kwrd">null</span>) &amp;&amp; reply.IsFault)
                    {
                        HttpResponseMessageProperty property = <span class="kwrd">new</span> HttpResponseMessageProperty();
                        property.StatusCode = HttpStatusCode.OK;
                        reply.Properties[HttpResponseMessageProperty.Name] = property;
                    }</font></strong>
                }
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection&lt;ServiceEndpoint&gt; endpoints, BindingParameterCollection bindingParameters)
        {
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
         <font color="#ff0000">  </font><strong><font color="#ff0000"> <span class="kwrd">foreach</span>(ServiceEndpoint endpoint <span class="kwrd">in</span> serviceDescription.Endpoints)
            {
                endpoint.Behaviors.Add(<span class="kwrd">new</span> SilverlightFaultEndpointBehavior());
            }</font></strong>
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>





















<p>本例中，我们实现了一个特殊的EndPointBehavior，还有一个特殊的ServiceBehavior。</p>
<p>如何使用他们呢？很简单，像下面这样就可以了</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Runtime.Serialization;
<span class="kwrd">using</span> System.ServiceModel;
<span class="kwrd">using</span> System.ServiceModel.Activation;

<span class="kwrd">namespace</span> SilverlightApplicationSample.Web
{
    [ServiceContract(Namespace = <span class="str">""</span>)]
<strong><font color="#ff0000">    [SilverlightFaultBehavior]</font></strong>
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    <span class="kwrd">public</span> <span class="kwrd">class</span> HelloSilverlighWCFService
    {
        [OperationContract]
        <span class="kwrd">public</span> <span class="kwrd">void</span> DoWork()
        {
            <span class="rem">// Add your operation implementation here</span>
            <span class="kwrd">return</span>;
        }

        <span class="rem">// Add more operations here and mark them with [OperationContract]</span>
    }
}
</pre><pre class="csharpcode">&nbsp;</pre>
<p>这样的话，就能让客户端受到异常消息了。</p>
<p>呵呵，有的朋友已经发现了吧，这个类型不是我编写的，其实Visual Studio自带了这样一个模板，你可以很容易生成那个类型</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008363932.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110221008365045.png" width="774" height="502"></a></p>
<p>理解WCF的扩展机制，对于大家用好WCF将极其重要，有兴趣的朋友可以参考</p>
<p><a title="http://msdn.microsoft.com/en-us/library/gg132853.aspx" href="http://msdn.microsoft.com/en-us/library/gg132853.aspx">http://msdn.microsoft.com/en-us/library/gg132853.aspx</a></p>
<p>&nbsp;</p>
<p>关于在SharePoint中使用WCF，有很多特殊性，也会遇到一些问题，请参考下面的文章</p>
<p><a title="http://msdn.microsoft.com/en-us/library/ff521581.aspx" href="http://msdn.microsoft.com/en-us/library/ff521581.aspx">http://msdn.microsoft.com/en-us/library/ff521581.aspx</a></p>
<p>&nbsp;</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>总结</h1>
<p>本文主要讲解了XML Web Service和WCF中异常处理，以及一些扩展机制</p>]]></description></item><item><title>MVVM、MVVMLight、MVVMLight Toolkit之我见</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 01 Oct 2011 13:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/10/01/2197786.html</guid><description><![CDATA[<p>我想，现在已经有不少朋友在项目中使用了MVVMLight了吧，如果你正在做WPF，Silverlight，Windows Phone的开发，那么，你有十分必要的理由了解MVVM和MVVMLight。我写这篇文章的目的，是给大家做一个总结，以便更多的朋友了解并掌握MVVM。</p> <p>&nbsp;</p> <p>首先，要说一下MVVM的概念。<strong><font color="#ff0000">MVVM严格来说，并不是一种框架，而是一个设计的模式吧</font></strong>。与它有关的设计模式还有MVC （现在广泛用于Web应用中），以及MVP（之前有用过在Windows Forms和WPF中）</p> <p>&nbsp;</p> <p>如果你希望对MVVM有更加感性地认识，我推荐你看下面这篇文章。</p> <p><a href="http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx">http://www.codeproject.com/KB/WPF/WpfMvvmQuickStart.aspx</a></p> <p>这篇文章写得实在太好了，我很欣赏这样的技术人才，能把一个抽象问题有层次地讲清楚。（我强烈建议对MVVM的概念了解不深的朋友，认真读这篇文章，而不要急于用MVVMLight，因为MVVM是一种模式，而MVVMLight只是其中一种具体的实现）</p> <p>&nbsp;</p> <p>然后，我要说一下MVVMLight吧，刚才说了，它是一种MVVM的实现。自然它不是唯一的一种实现，但现在<strong><font color="#ff0000">大家公认的是，它是比较好的一个实现</font></strong>。就我个人的体会来说，我以前用过微软提供的Prism中的MVVM特性，但老实说，可能Prism的目标太大了，所以在MVVM这个具体的点上，实在不是那么好用。</p> <p>&nbsp;</p> <p>值得一说的是，从使用Prism转换到使用MVVMLight过程相当简单，如果有类似情况的朋友，不要有什么顾虑。我<strong><font color="#ff0000">这里不是说Prism不好，它与Mvvmlight严格来说，不是一个重量级的产品。MVVMLight专注与MVVM的实现，自然更加灵活</font></strong>。</p> <p>&nbsp;</p> <p><img src="http://download.codeplex.com/Download?ProjectName=mvvmlight&amp;DownloadId=92227&amp;Build=18207"></p> <p>接下来，我认为要学习MVVMLight最好的Quick start，就是作者自己写的这个网页</p> <p><a title="http://galasoft.ch/mvvm/" href="http://galasoft.ch/mvvm/">http://galasoft.ch/mvvm/</a></p> <p>通过这个文章，我们可以很清楚地了解MVVMLight的设计思路和包含的有关组件，无需太多补充，文章浅显易懂，确实是我们要学习的一个榜样</p> <p>请注意，我这篇文章并非逐一讲解MVVMLight的细节功能使用，我主要提一些重点，并且分享一些我的看法和观点，当然这仅是我一家之言，不见得完全正确。</p> <p>事实上针对如何使用的方面，已经有不少文章了，大家可以参考</p> <p><a title="http://zzk.cnblogs.com/s?w=mvvmlight" href="http://zzk.cnblogs.com/s?w=mvvmlight">http://zzk.cnblogs.com/s?w=mvvmlight</a></p> <p>另外一方面，我觉得大家其实要自己多动手才会有实际的收获。MVVMLight使用并不难，在使用中大家可以领会到更多。</p> <p>&nbsp;</p> <p>实际上，<strong><font color="#ff0000">我们经常谈论MVVMLight的时候，其实谈的是MVVMLight Toolkit</font></strong>，它主要是为了更加方便开发人员使用MVVMLight，它会在本地的GAC(Global Assembly Cache）中分别安装针对WPF,Silverlight,Windows Phone的Assembly（分别各自有两个Assembly），并且在Visual Studio中添加相应的项目以及项模板，更加贴心的一点是，它还提供了几个代码段。</p> <p>&nbsp;</p> <p>有的朋友可能会问，那么MVVMLight到底是什么呢？呃，MVVMLight嘛，就是MVVMLight Toolkit的名称啦 <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-berightback" alt="Be right back" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121431076.png">，有点绕对吧，放松点，不要那么较真嘛</p> <p>&nbsp;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121449864.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121454225.png" width="244" height="192"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121461236.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121476120.png" width="244" height="176"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121489958.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121492301.png" width="244" height="176"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121523466.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121528067.png" width="244" height="176"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121539920.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111001212154726.png" width="244" height="138"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111001212155311.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111001212156245.png" width="244" height="138"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121569623.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121576525.png" width="244" height="138"></a></p> <p>&nbsp;</p> <p>这里要指出的是，<strong><font color="#ff0000">我个人并不喜欢用这个Toolkit提供的项目模板和代码段</font></strong>。我觉得它所生成的代码有些冗余，修改起来反而麻烦。我真正的项目中就不用这些模板，而是倾向于自己编写ViewModel之类的。这可能也跟我之前并不是一开始就使用MVVMLight有关系，我更习惯自己写那些代码，我指的是一些ViewModel的属性，命令和绑定等等。</p> <p>&nbsp;</p> <p>好吧，我承认，我为什么不喜欢使用Toolkit的模板呢？还有一个原因是，除非必要，我对于工具要给Visual Studio添加额外的东西（哪怕是有用的），总是很敏感的，我担心它让Visual Studio变慢。是的，你知道，这多少有点类似“洁癖”的嫌疑，但怎么说呢，让我保留自己这个权利吧</p> <p>&nbsp;</p>  <p>那么，如果你像我一样，不安装MVVMLight Toolkit，如何使用MVVMLight呢？实际上很简单，我更加习惯于使用nuget package 来获取最新的MVVMLight的Library，并将它们添加到项目中来。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121573984.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/2011100121215814.png" width="704" height="644"></a></p> <p>你可以通过这个菜单打开nuget package explorer，如下图所示，然后，你可以在Online里面搜索MVVMLight，或者像我这样在Recent package中直接就可以Install。(nuget package是会被缓存在本地的，所以即便没有链接到网络，也可以正常使用）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012121582456.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111001212159198.png" width="804" height="776"></a></p> <p>既然可以缓存在本地，那么其实和安装到GAC是没有太大区别的，不是吗？</p> <p>而且用<strong><font color="#ff0000">这种方式还有一个好处，你总是可以得到最新的版本，因为nuget package是自动有更新提示</font></strong>的。而如果你是用Toolkit的话，则得不到更新的提示。（据可靠消息，MVVMLight将很快有4.0这个版本）</p> <p>&nbsp;</p> <p>很好，你现在已经知道如何将MVVMLight添加到项目中，接下来就是该让它发挥威力的时候啦。大家一定要理解MVVM的两个核心目标</p> <h1><strong>1.让UI界面与逻辑能够很好地分离又协同工作。</strong></h1> <h1><strong>2.让逻辑代码更具有可测试性。</strong></h1> <p>&nbsp;</p> <p>我们先来说说分离并协同这个目标，在MVVMLight中主要通过什么实现的呢？它提供了ViewModelBase这个基类，可以让我们很方便地编写ViewModel。从下面的截图可以看出，它提供了很多有用的特性，例如判断是否在设计状态（IsInDesignMode)，以及触发属性更改通知(RaisePropertyChanged)，尤其是后者，这可以说是MVVM的根基，为什么这么说呢？UI与逻辑的分离并且协同工作，关键就在于WPF和Silverlight有强大的数据绑定机制，而数据绑定机制之所以能够强大，就是因为WPF和Silverlight中引入的依赖属性(Dependency Property)的机制，而依赖属性，区别于普通属性的最重要一点就是既可以有单向绑定，也可以有双向绑定，而且属性更改之后，可以通知到所有绑定目标上面。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122006162.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122014111.png" width="1079" height="561"></a></p> <p>&nbsp;</p> <p>除了很好的支持绑定，UI与逻辑分离并协作的另外一个重要机制，就是命令（command)机制。在MVVMLight中，它提供了两个基本的命令：RelayCommand和RelayCommand&lt;T&gt;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122051730.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122068043.png" width="895" height="378"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122071848.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122081782.png" width="893" height="378"></a></p> <p>这两个命令其实没有本质区别，只不过后者是支持泛型的一个参数的，就是可以从命令源接受参数数据。</p> <p>需要注意的是，这两个命令只适合绑定在基于按钮的Click事件上面。例如Button,HyperlinkButton是最常见的。例如下面的例子</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122084224.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122092173.png" width="776" height="200"></a></p> <p>这个绑定的意思，其实就是说，当这个Button被点击了之后，调用ViewModel中的SaveCommand</p> <p>如果需要传递参数过去呢，就是下面这样啦。我举了两个例子，第一个例子参数是一个常数，而第二个例子参数是一个绑定值，这都是允许的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122103710.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122118943.png" width="894" height="274"></a></p> <p>但问题是，如果我要绑定其他事件呢？例如MouseMove事件，该怎么办呢？在MvvmLight.Extras这个程序集里面，单独又给出了一个Command绑定方式，叫EventToCommand，顾名思义，它可以将任何事件绑定到一个命令</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122123512.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122136793.png" width="1028" height="577"></a></p> <p>要使用这个略微麻烦一些，请看下面的例子</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122147774.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122157642.png" width="1003" height="455"></a></p> <p>所以，<strong><font color="#ff0000">绑定（尤其是双向绑定）和命令是MVVM的精髓</font></strong>，但实际要认真讲起来，MVVMLight这方面实现得其实也没有什么特别突出的，其他一些框架也都是这么做的。以前没有这些框架之前，我们也是这么写的，无非是代码会多一些而已。</p> <p>有童鞋可能会说了，属性绑定我们可以理解，但为嘛要这么麻烦去绑定命令呢？直接在xaml.cs里面写不就完了吗？请注意，MVVM的一个目标就是让xaml.cs代码中尽量少，极端的情况是没有任何用户代码。这样才能实现UI与逻辑的分离，所以尽可能地用Command来做。</p> <p>这里我也分享我的个人经验，一定会有的时候，你没有办法全部用Command，而不在xaml.cs中写任何代码。那个时候，你也大可像我一样，将代码写一些在xaml.cs中也无妨。典型的情况，是希望在视图里面接受消息（下面就要讲到），并且更新界面的一些效果，例如启动动画。这里面是一个度的把握，并无绝对的好坏。我已经看到有人心领神会地点头了，所谓随机应变，大家要有一定的灵活性。</p> <p>&nbsp;</p> <p><strong><font color="#ff0000">不过，Mvvmlight的一个创造性的设计，是它的Message（消息）机制</font></strong>，<font color="#ff0000"><strong>它让View和ViewModel，以及ViewModel之间通讯变得相当方便，甚至神奇</strong></font>。我相当欣赏这个设计，这是Mvvmlight之所以称为Mvvmlight的原因。</p> <p>具体来说，它提供了一个Messenger类型，可以用来发送和接收消息，它还提供了默认的几种消息类型。</p> <p>A <em>Messenger</em> class (and diverse message types) to be used to communicate within the application. Recipients only receive the message types that they register for. Additionally, a target type can be specified, in which case the message will only be transmitted if the recipient's type matches the target parameter. <br>Messages can be <strong>anything from simple values to complex objects</strong>. You can also use specialized message types, or create your own types deriving from them. <br><a href="http://blog.galasoft.ch/archive/2009/09/27/mvvm-light-toolkit-messenger-v2-beta.aspx">More information about the Messenger class</a>.  <ul> <li><em>MessageBase</em>: A simple message class, carrying optional information about the message's sender.  <li><em>GenericMessage&lt;T&gt;</em>: A simple message with a Content property of type T.  <li><em>NotificationMessage</em>: Used to send a notification (as a string) to a recipient. For example, save your notifications as constant in a Notifications class, and then send Notifications.Save to a recipient.  <li><em>NotificationMessage&lt;T&gt;</em>: Same as above, but with a generic Content property. Can be used to pass a parameter to the recipient together with the notification.  <li><em>NotificationMessageAction</em>: Sends a notification to a recipient and allows the recipient to call the sender back.  <li><em>NotificationMessageAction&lt;T&gt;</em>: Sends a notification to a recipient and allows the recipient to call the sender back with a generic parameter.  <li><em>DialogMessage</em>: Used to request that a recipient (typically a View) displays a dialog, and passes the result back to the caller (using a callback). The recipient can choose how to display the dialog, either with a standard MessageBox, with a custom popup, etc…  <li><em>PropertyChangedMessage&lt;T&gt;</em>: Used to broadcast that a property changed in the sender. Fulfills the same purpose than the PropertyChanged event, but in a less tight way.</li></ul> <p>一个稍微具体一点的例子，请参考</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/2011100121221618.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122188773.png" width="1187" height="698"></a></p> <p>我非常喜欢这个Messenger的功能，但同时，我个人觉得它的设计有值得改进之处，首先它的语法有点繁琐了，不是吗？</p> <p>我们显然更希望用下面这样的语法</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122183375.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122197769.png" width="1084" height="280"></a></p> <p>这是如何实现的呢，其实我是自己对Messenger做了一个扩展</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> GalaSoft.MvvmLight.Messaging;

<span class="kwrd">namespace</span> WpfApplication1
{

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 对默认的Messenger做扩展，以便更加易于使用</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> MessengerExtension
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Send&lt;T&gt;(<span class="kwrd">this</span> IMessenger messenger, T body, <span class="kwrd">object</span> token)
        {
            Messenger.Default.Send&lt;GenericMessage&lt;T&gt;&gt;(<span class="kwrd">new</span> GenericMessage&lt;T&gt;(body), token);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Register&lt;T&gt;(<span class="kwrd">this</span> Messenger messenger, <span class="kwrd">object</span> recipient, <span class="kwrd">object</span> token, Action&lt;T&gt; action)
        {
            Messenger.Default.Register&lt;GenericMessage&lt;T&gt;&gt;(recipient, token, msg =&gt; {
                action(msg.Content);
            });
        }
    }
}
</pre>
<p>&nbsp;</p>
<p>关于Messenger，其次我还觉得，它定义那么多消息类型，并不是非常理想，容易把使用者搞晕（我其实也不是很理解为什么既要做一个GenericMessage，还有一个NotificationMessage等等）。这也是我用上面这样的方式扩展的原因。我后面会整理一个扩展代码，做成可以分享的package给大家使用。</p>
<p>&nbsp;</p>
<p>讲了这么多，其实还有一个经常被大家忽视的目标：可测试性。这是很重要的。如何理解MVVM的可测试性，以及在MVVMLight中的具体实现呢？</p>
<p>我们来看一个例子，我们通常会说这是一个不可测试的代码例子</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122206590.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122207604.png" width="457" height="264"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>为什么说它是不可测试的呢?因为我们都知道，MessageBox是需要人去响应的，你要点击一下才会被关闭掉。而我们的测试（包括单元测试），大多都是要能批量，自动运行的，那么遇到这种MessageBox怎么办呢？</p>
<p>我们一般单元测试代码会这么样写</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/2011100121222113.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122229424.png" width="1029" height="208"></a></p>
<p>运行起来之后，它确实会按照预期的那样去执行代码，很显然它会弹出一个对话框，让我们去点击</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122234864.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122244765.png" width="1121" height="540"></a></p>
<p>点击了之后，当然测试会通过。但问题是，如果测试还需要人工干预才能运行，显然不利于自动化。</p>
<p>我们来看在MVVMLight中如何解决这个问题的。我们得捋一下思路：你的目的是要弹出一个对话框（或者类似的东西），但如果你必须用MessageBox的话，就肯定是会弹出那个对话框来。有什么办法可以解决这个问题呢？</p>
<p>答案就是：MvvmLight提供的Messenger机制。我们来看如下的例子</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122258570.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122268471.png" width="917" height="317"></a></p>
<p>那么，这个消息会被谁来响应呢？一般是在View里面去响应，仔细想想：显示消息（以及如何显示）其实是View的责任，与ViewModel没有什么关系。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122275864.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/20111001212227258.png" width="1005" height="594"></a></p>
<p>很好，这样就是MVVM的做法了，那么我们再来运行测试看看会怎么样呢？大家如果自己运行一下就知道了，测试直接通过了，没有任何消息提示。</p>
<p>等等，这难道就说明我们做对了吗？我们的测试中，怎么确认消息发出去了呢？也就是说，既然上面的代码并不会弹出消息，你怎么确认那个方法里面发送了消息呢？</p>
<p>所以，好戏一般都在后头，不要着急下结论。所以可测试性，是指MvvmLight为此类问题都准备了解决方案。我们如何确认SaveCommand里面肯定调用而且仅仅调用了一次Messenger.Send方法呢？</p>
<p>很显然，我们得有一个什么方式，模拟Messenger的功能：我们并不真的去发消息，我们是要验证发送消息的方法真的被调用，而且发的消息内容是不是“保存成功”，这就是我们测试的目的。</p>
<p>在这里，我们会用到一个模拟的框架，我最喜欢用的是Moq这个框架。这也是一个开源项目，它的官方网站是 <a title="http://code.google.com/p/moq/" href="http://code.google.com/p/moq/">http://code.google.com/p/moq/</a></p>
<p>同样，我们可以通过nuget package explorer中获取它，实在是很方便，不是吗？</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122285142.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122298697.png" width="804" height="776"></a></p>
<p>&nbsp;</p>
<p>然后，我们编写下面的测试代码</p><pre class="csharpcode"><span class="kwrd">using</span> WpfApplication1;
<span class="kwrd">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;
<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows.Input;

<strong><font color="#ff0000"><span class="kwrd">using</span> Moq;
<span class="kwrd">using</span> GalaSoft.MvvmLight.Messaging;</font></strong>

<span class="kwrd">namespace</span> TestProject1
{
    
    
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">///This is a test class for MainWindowViewModelTest and is intended</span>
    <span class="rem">///to contain all MainWindowViewModelTest Unit Tests</span>
    <span class="rem">///&lt;/summary&gt;</span>
    [TestClass()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> MainWindowViewModelTest
    {


        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">///A test for SaveCommand</span>
        <span class="rem">///&lt;/summary&gt;</span>
        [TestMethod()]
        <span class="kwrd">public</span> <span class="kwrd">void</span> SaveCommandTest()
        {
            MainWindowViewModel target = <span class="kwrd">new</span> MainWindowViewModel(); <span class="rem">// TODO: Initialize to an appropriate value</span>
         <strong><font color="#ff0000">   var messenger = <span class="kwrd">new</span> Mock&lt;Messenger&gt;();
            messenger.Setup(m =&gt; m.Send(It.Is&lt;DialogMessage&gt;(d =&gt; d.Content == <span class="str">"保存成功"</span>))).Verifiable();
            Messenger.OverrideDefault(messenger.Object);</font></strong>

            var cmd = target.SaveCommand;
            cmd.Execute(<span class="kwrd">null</span>);

            <strong><font color="#ff0000">messenger.Verify();</font></strong>

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>上面的代码很好理解，我们希望验证Messenger的Send方法是否被调用，而且发送的消息是不是一个DialogMessage，内容是不是“保存成功”。moq的特点就是语义很通俗易懂，让我们为它鼓掌。</p>
<p>再次运行测试的话，我们会发现这次也还是正常通过了测试。但如果，我们将ViewModel方法里面的那句发送消息的代码注释掉，则就会报告一个错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122294171.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122303025.png" width="910" height="391"></a></p>
<p>我们甚至还可以验证Send方法调用了多少次，诸如此类，这是moq的功能，这里就不多展开了。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>写在最后的话</h1>
<p>感谢<a href="mailto:laurent@galasoft.ch">Laurent Bugnion</a> 的杰出工作，他是微软MVP，我也看过他的视频，讲解MVVMLight及其原理和使用的，蛮平易近人的，典型的程序员和技术发烧友吧。有一个视频上面，他穿的一间黑色T恤，上面就写着几个字：geek, <a href="http://baike.baidu.com/view/203538.htm">极客</a>，你懂的</p>
<p>Laurent还将源代码发布到了Codeplex，你可以通过下面这里下载到</p>
<p><a title="http://mvvmlight.codeplex.com/" href="http://mvvmlight.codeplex.com/">http://mvvmlight.codeplex.com/</a></p>
<p>&nbsp;</p>
<p>顺便做一个小的调查，MVVMLight是完全免费的，包括源代码。但作者也希望得到捐赠（我看过很多不错的开源项目都接受捐赠），我想请问在读这篇文章的各位，你有没有曾几何时捐赠过任何的开源项目呢？捐赠了多少？是什么让你做出捐赠的决定呢？</p>
<p>其实以我所看到的，我也知道在国内，捐赠的这种形式并不常见，所以这个调查纯属满足我的好奇心，谢谢啦<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-hotsmile" alt="Hot smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201110/201110012122302120.png"></p>
<p>我自己而言，以前也确实没有捐赠过任何的开源项目。但我现在的想法是，如果确实有相当好的开源项目，我有心是要适当地捐赠的。</p>]]></description></item><item><title>最新微博</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/09/29/2195017.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 28 Sep 2011 23:35:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/09/29/2195017.html</guid><description><![CDATA[<p><iframe src="http://widget.weibo.com/weiboshow/index.php?width=0&amp;height=300&amp;fansRow=1&amp;ptype=0&amp;speed=0&amp;skin=1&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1689956313&amp;verifier=01e6b106" frameborder="0" scrolling="no" width="100%" height="300"></iframe></p>]]></description></item><item><title>参照WPF实现Silverlight中的多值绑定特性</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/09/24/2189604.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 24 Sep 2011 10:31:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/09/24/2189604.html</guid><description><![CDATA[<h1>前言</h1> <p>数据绑定在WPF和Silvelright开发中的作用不言而喻，无处不在的绑定，节省了大量的代码，也实现了很多之前用代码都无法实现的特性。</p> <p>下面有很多参考的文章</p> <p><a href="http://zzk.cnblogs.com/so.aspx?w=silverlight+databinding&amp;t=">http://zzk.cnblogs.com/so.aspx?w=silverlight+databinding&amp;t=</a></p> <p><a href="http://zzk.cnblogs.com/so.aspx?w=wpf+databinding&amp;t=">http://zzk.cnblogs.com/so.aspx?w=wpf+databinding&amp;t=</a></p> <p>&nbsp;</p> <p>我们之前熟知的绑定，有单向绑定，双向绑定等等。今天要讲一下多值绑定的问题，也就是说，如何给一个属性的值绑定多个数据源。</p> <p>这个特性，在WPF中是内置的，而Silverlight中则没有提供直接的支持。本文提供了一个对照，并且给出了在Silverlight中的一个替代方案，实际上与WPF使用很类似了。</p> <p>&nbsp;</p> <h1>WPF中的实现</h1> <p>我们首先来看一下常规的绑定</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span>
    <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
    <span class="attr">Height</span><span class="kwrd">="350"</span>
    <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--WPF 单值绑定--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="{Binding Title}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>


    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<p>这个很简单，我们几乎不需要做任何解释</p>
<p>&nbsp;</p>
<p>接下来看一下WPF中如何进行多值绑定</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span>
    <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
    <span class="attr">Height</span><span class="kwrd">="350"</span>
    <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--WPF 单值绑定--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="{Binding Title}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--WPF 多值绑定,结合StringFormat--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">MultiBinding</span>
                    <span class="attr">StringFormat</span><span class="kwrd">=" {0}-{1}"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Title"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Time"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">MultiBinding</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
这是第一种多值绑定方式，可以直接通过StringFormat格式化多个值，并最终显示在TextBlock中。这种做法，在很多时候，都够用了。</p>
<p>&nbsp;</p>
<p>但是，在某些时候，我们可能需要对这些多个值做复杂的处理，光用StringFormat满足不了要求，怎么办呢？</p>
<p>是的，我们会联想到使用ValueConverter。在System.Windows.Data这个命名空间中，我们以前用过一个IValueConverter的接口对吧，那是针对单值绑定的。关于这个接口，更多信息，可以参考 <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.data.ivalueconverter.aspx">http://msdn.microsoft.com/zh-cn/library/system.windows.data.ivalueconverter.aspx</a></p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Windows.Data;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// WPF单值绑定转换器</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> TitleConverter:IValueConverter
    {
        <span class="preproc">#region</span> IValueConverter Members

        <span class="kwrd">public</span> <span class="kwrd">object</span> Convert(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            <span class="rem">//这里实现具体逻辑</span>
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">object</span> ConvertBack(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            <span class="rem">//这里实现具体逻辑</span>
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="preproc">#endregion</span>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>既然是这个思路，那么有没有多值转换器呢？答案是有的。请参考</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Windows.Data;

<span class="kwrd">namespace</span> WpfApplicationSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// WPF单值绑定转换器</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">class</span> MultiValueConverterSample:IMultiValueConverter
    {
        <span class="preproc">#region</span> IMultiValueConverter Members

        <span class="kwrd">public</span> <span class="kwrd">object</span> Convert(<span class="kwrd">object</span>[] values, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            <span class="rem">//这里实现具体逻辑,请注意第一个参数是一个数组，可以传递多个值</span>
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">object</span>[] ConvertBack(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type[] targetTypes, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="preproc">#endregion</span>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>那么，如何在XAML中使用这个转换器呢？其实和单值转换器是一样的，请参考下面的语法</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span>
    <span class="attr">x:Class</span><span class="kwrd">="WpfApplicationSample.MainWindow"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">Title</span><span class="kwrd">="MainWindow"</span>
    <span class="attr">Height</span><span class="kwrd">="350"</span>
    <span class="attr">Width</span><span class="kwrd">="525"</span>
    <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:WpfApplicationSample"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:MultiValueConverterSample</span>
            <span class="attr">x:Key</span><span class="kwrd">="cv"</span><span class="kwrd">&gt;&lt;/</span><span class="html">local:MultiValueConverterSample</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Window.Resources</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--WPF 单值绑定--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="{Binding Title}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--WPF 多值绑定,结合StringFormat--&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">MultiBinding</span>
                    <span class="attr">StringFormat</span><span class="kwrd">=" {0}-{1}"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Title"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Time"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">MultiBinding</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="rem">&lt;!--WPF 多值绑定，结合Converter--&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">MultiBinding</span>
                    <span class="attr">Converter</span><span class="kwrd">="{StaticResource cv}"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Title"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                        <span class="attr">Path</span><span class="kwrd">="Time"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">MultiBinding</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">TextBlock.Text</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>看起来很好理解，对吧？这是WPF中为我们默认就提供的功能，确实很方便。</p>
<p>但是，这个特性（多值绑定）却没有在Silverlight中实现。</p>
<p>&nbsp;</p>
<h1>如何在Silverlight中实现类似的功能</h1>
<p>为了在Silverlight中实现类似的功能，不少先进同学前仆后继，做出了不懈的努力。我看到过一个比较好的实现是下面这个scott同学提供的，请参考英文博客</p>
<p><a title="http://www.scottlogic.co.uk/blog/colin/2010/05/silverlight-multibinding-solution-for-silverlight-4/" href="http://www.scottlogic.co.uk/blog/colin/2010/05/silverlight-multibinding-solution-for-silverlight-4/">http://www.scottlogic.co.uk/blog/colin/2010/05/silverlight-multibinding-solution-for-silverlight-4/</a></p>
<p>我在这个基础上做了一些改动和完善，并且将它封装到了之前提供的<a href="http://nuget.org/List/Packages/WPFSilverlightExtension/">WPFSilverlightExtension</a>中，以便大家更好地使用</p>
<p>【备注】这个Extension包，我会不断更新，将可用于Silverlight或者WPF中的一些扩展功能添加进去。目前包含的两个功能是</p>
<p>1.<a href="http://www.cnblogs.com/chenxizhang/archive/2011/09/22/2185414.html">GridHelper</a> (给Grid添加边框，适用于WPF和Silverlight)&nbsp; </p>
<p>2.Multiple Binding（多值绑定-仅Silverlight，在1.4版本中提供)</p>
<p>&nbsp;</p>
<p>添加这个扩展之后，你可以通过下面的方式使用它</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationSample.MainPage"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
        <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
        <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
        <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span> <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
        <span class="attr">xmlns:data</span><span class="kwrd">="clr-namespace:System.Windows.Data;assembly=SilverlightExtension"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span> <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">data:BindingUtil.MultiBindings</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">data:MultiBindings</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">data:MultiBinding</span>
                            <span class="attr">TargetProperty</span><span class="kwrd">="Text"</span>
                            <span class="attr">StringFormat</span><span class="kwrd">=" {0}-{1}"</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">data:MultiBinding.Bindings</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">data:BindingCollection</span><span class="kwrd">&gt;</span>
                                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                                        <span class="attr">Path</span><span class="kwrd">="Id"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                                        <span class="attr">Path</span><span class="kwrd">="Time"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;/</span><span class="html">data:BindingCollection</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;/</span><span class="html">data:MultiBinding.Bindings</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">data:MultiBinding</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">data:MultiBindings</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">data:BindingUtil.MultiBindings</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>你也可以同样定义一个多值转换器</p><pre class="csharpcode">    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.Net;
    <span class="kwrd">using</span> System.Windows;
    <span class="kwrd">using</span> System.Windows.Controls;
    <span class="kwrd">using</span> System.Windows.Documents;
    <span class="kwrd">using</span> System.Windows.Ink;
    <span class="kwrd">using</span> System.Windows.Input;
    <span class="kwrd">using</span> System.Windows.Media;
    <span class="kwrd">using</span> System.Windows.Media.Animation;
    <span class="kwrd">using</span> System.Windows.Shapes;

    <span class="kwrd">using</span> System.Windows.Data;

    <span class="kwrd">namespace</span> SilverlightApplicationSample
    {
        <span class="kwrd">public</span> <span class="kwrd">class</span> MultiValueConverterSample:IMultiValueConverter
        {

            <span class="preproc">#region</span> IMultiValueConverter Members

            <span class="kwrd">public</span> <span class="kwrd">object</span> Convert(<span class="kwrd">object</span>[] values, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
            {
                <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"{0}-{1}"</span>, values);
            }

            <span class="kwrd">public</span> <span class="kwrd">object</span>[] ConvertBack(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type[] targetTypes, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
            }

            <span class="preproc">#endregion</span>
        }
    }</pre>
<p>&nbsp;</p>
<p>然后，像下面这样使用它</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">UserControl</span>
        <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationSample.MainPage"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
        <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
        <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
        <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
        <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
        <span class="attr">xmlns:data</span><span class="kwrd">="clr-namespace:System.Windows.Data;assembly=SilverlightExtension"</span>
        <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:SilverlightApplicationSample"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">local:MultiValueConverterSample</span>
                <span class="attr">x:Key</span><span class="kwrd">="cv"</span><span class="kwrd">&gt;&lt;/</span><span class="html">local:MultiValueConverterSample</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span>
    
        <span class="kwrd">&lt;</span><span class="html">Grid</span>
            <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
            <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">data:BindingUtil.MultiBindings</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">data:MultiBindings</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">data:MultiBinding</span>
                            <span class="attr">TargetProperty</span><span class="kwrd">="Text"</span> <span class="attr">Converter</span><span class="kwrd">="{StaticResource cv}"</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">data:MultiBinding.Bindings</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">data:BindingCollection</span><span class="kwrd">&gt;</span>
                                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                                        <span class="attr">Path</span><span class="kwrd">="Id"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                                    <span class="kwrd">&lt;</span><span class="html">Binding</span>
                                        <span class="attr">Path</span><span class="kwrd">="Time"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Binding</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;/</span><span class="html">data:BindingCollection</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;/</span><span class="html">data:MultiBinding.Bindings</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">data:MultiBinding</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">data:MultiBindings</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">data:BindingUtil.MultiBindings</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>总结</h1>
<p>本文对照了在WPF和Silverlight中实现多值绑定的特性，并且给出了一个Silverlight中的替代解决方案</p>]]></description></item><item><title>为WPF和Silverlight的Grid添加边框线</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/09/22/2185414.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 22 Sep 2011 11:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/09/22/2185414.html</guid><description><![CDATA[<p>Grid是WPF和Silverlight中的一个重要的布局元素，其他的布局元素还有StackPanel, Canvas, Border等等。从字面上说，Grid是一个表格的意思，它的使用也确实很方便，从视觉上很像一个表格的样式，有行，有列的概念，这种效果很适合于需要多多个子控件进行布局，并希望保持左边或者上对齐的效果。</p> <p>我们来看一个最简单的例子（本文采用Silverlight做演示，在WPF中也是一样的）</p> <p>使用Grid的时候，一般先定义Grid的行和列的设置，然后在其放置其他控件并且设置他们的行号和列号即可，语法和语义都很简单和清晰</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationGridBorderSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        
        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
        
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左上角"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右上角"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/20110922190029815.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900293606.png" width="982" height="632"></a></p>
<p>嗯，看起来很好理解的。但是，几乎所有人（包括我在内）在最开始学习的时候，马上就会想到一个问题：</p>
<p><strong>既然是用一个表格形状进行布局了，那么能不能显示出来表格的边框线呢</strong>？</p>
<p>没想到这会是一个问题，对吧？或者你想到过了，但没有找到如何解决这个问题。</p>
<p>如果是这样，那么请继续往下看吧</p>
<p>&nbsp;</p>
<p>本文完整源代码，可以通过这里下载 </p>
<p><a title="http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar" href="http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar">http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar</a></p>
<p>&nbsp;</p>
<h1>第一步：使用ShowGridLines属性</h1>
<p>根据经验，我们会先从Grid这个元素上面去想办法。我们确实可以找到一个与我们需求很相近的属性：ShowGridLines，好吧，将它设为true之后，会怎么样呢</p><pre class="csharpcode">&lt;UserControl
    x:Class=<span class="str">"SilverlightApplicationGridBorderSample.MainPage"</span>
    xmlns=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    xmlns:x=<span class="str">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
    xmlns:d=<span class="str">"http://schemas.microsoft.com/expression/blend/2008"</span>
    xmlns:mc=<span class="str">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    mc:Ignorable=<span class="str">"d"</span>
    d:DesignHeight=<span class="str">"300"</span>
    d:DesignWidth=<span class="str">"400"</span>&gt;

    &lt;Grid
        x:Name=<span class="str">"LayoutRoot"</span>
        Background=<span class="str">"White"</span> <font color="#ff0000"><strong>ShowGridLines=<span class="str">"True"</span></strong></font> &gt;
        
        &lt;Grid.Resources&gt;
            &lt;Style
                TargetType=<span class="str">"TextBlock"</span>&gt;
                &lt;Setter
                    Property=<span class="str">"FontSize"</span>
                    Value=<span class="str">"30"</span>&gt;&lt;/Setter&gt;
                &lt;Setter
                    Property=<span class="str">"VerticalAlignment"</span>
                    Value=<span class="str">"Center"</span>&gt;&lt;/Setter&gt;
            &lt;/Style&gt;
        &lt;/Grid.Resources&gt;
        
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition&gt;&lt;/RowDefinition&gt;
            &lt;RowDefinition&gt;&lt;/RowDefinition&gt;

        &lt;/Grid.RowDefinitions&gt;
        &lt;Grid.ColumnDefinitions&gt;
            &lt;ColumnDefinition&gt;&lt;/ColumnDefinition&gt;
            &lt;ColumnDefinition&gt;&lt;/ColumnDefinition&gt;
        &lt;/Grid.ColumnDefinitions&gt;

        &lt;TextBlock
            Text=<span class="str">"左上角"</span>&gt;&lt;/TextBlock&gt;
        &lt;TextBlock
            Text=<span class="str">"左下角"</span>
            Grid.Row=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

        &lt;TextBlock
            Text=<span class="str">"右上角"</span>
            Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;

        &lt;TextBlock
            Text=<span class="str">"右下角"</span>
            Grid.Row=<span class="str">"1"</span>
            Grid.Column=<span class="str">"1"</span>&gt;&lt;/TextBlock&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900306081.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900305176.png" width="982" height="632"></a></p>
<p>哦，看起来确实有边框了。但是，效果却不理想。这个边框线是虚线，坦白说，不是那么好看。从MSDN文档中我们了解到，这个边框线只是用来辅助我们做调试用的，而不适宜于在真正的产品中用。</p>
<p>私下里说，我并不认为这是一个好的设计，为什么不提供实线（甚至可以由开发人员配置）的边框呢</p>
<p>&nbsp;</p>
<h1>第二步：使用手工定义的方式实现Grid边框线</h1>
<p>我们希望给Grid自动添加边框，应该怎么实现呢？其实，如果仅仅是给一个Grid添加的话，手工写一点代码就可以了</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationGridBorderSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        
        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
<strong><font color="#ff0000"><font size="4">            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="Border"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="BorderBrush"</span>
                    <span class="attr">Value</span><span class="kwrd">="LightGray"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="BorderThickness"</span>
                    <span class="attr">Value</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span></font></font></strong>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
        
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左上角"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右上角"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        
        <span class="rem">&lt;!--添加4个边框--&gt;</span>
<font color="#ff0000"><strong><font size="4">        <span class="kwrd">&lt;</span><span class="html">Border</span><span class="kwrd">&gt;&lt;/</span><span class="html">Border</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Border</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Border</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Border</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Border</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Border</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Border</span><span class="kwrd">&gt;</span></font></strong></font>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900305143.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/2011092219003128.png" width="834" height="556"></a></p>
<p>所以，其实我们可以手工添加Border（文章开头提到几个布局元素中，只有Border有边框线）实现我们的需求。</p>
<p>但问题在于，如果有很多Grid，都要这么去添加总是不好的吧，有没有办法更好地实现这样功能呢</p>
<p>&nbsp;</p>
<h1>第三步：使用附加依赖属性（Attached Dependency Property)实现Grid边框线</h1>
<p>既然官方并没有提供我们需要的边框线，那么我们就自己来实现一个吧。事实上，这并没有多难，尤其是你理解了WPF和Silvelight中一些核心的概念的情况下，这些概念包括<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.dependencyproperty(v=VS.95).aspx">依赖属性</a>和<a href="http://msdn.microsoft.com/zh-cn/downloads/system.windows.dependencyproperty.registerattached.aspx">附加依赖属性</a>。</p>
<p>对这两个概念，大家可以参考上面我给出的两个链接，这里我就简单地说几句吧，</p>
<h2>依赖属性(Dependency Property)是WPF和Silverlight较之前的编程模型的一个核心改变，它使得基于绑定的编程变得可能，这个大家多少有些体会了，在WPF和Silverlight中，绑定无处不在，而且功能确实强大，尤其是双向绑定及自动通知，减少了很多很多的用户代码。</h2>
<h2>附加属性(Attached Property)，则是另外一种场景，它一般用来对现有控件或者元素进行扩展。其实，我们之前的XAML中已经用到了附加属性，请看下面的部分</h2><pre class="csharpcode">
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>TextBlock这个元素，其实并没有行和列的概念，或者说它也不需要，除非它是放在一个Grid里面的时候。所以，行和列并不是TextBlock的属性，但是如果将它放在Grid里面，不提供这些信息又不行，所以附加属性就应运而生了。Grid.Row和Grid.Column就是附加属性，很显然，有了附加属性，我们就可以在不改变TextBlock的前提下，为它添加很多特性或者功能。</p>
<p>&nbsp;</p>
<p>理解了附加属性，我们来说说现在我们要解决的问题：</p>
<p><strong><font color="#ff0000">我们能不能自动给每个Grid添加一个属性，让它可以为自己添加必要的边框线呢？</font></strong></p>
<p>答案就是附加属性。</p>
<p>请添加一个代码文件，将下面代码粘贴进去</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Media;

<span class="kwrd">namespace</span> SilverlightApplicationGridBorderSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 为Grid添加的一个特殊功能</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> GridHelper
    {

        <span class="rem">//请注意：可以通过propa这个快捷方式生成下面三段代码</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">bool</span> GetShowBorder(DependencyObject obj)
        {
            <span class="kwrd">return</span> (<span class="kwrd">bool</span>)obj.GetValue(ShowBorderProperty);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SetShowBorder(DependencyObject obj, <span class="kwrd">bool</span> <span class="kwrd">value</span>)
        {
            obj.SetValue(ShowBorderProperty, <span class="kwrd">value</span>);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty ShowBorderProperty =
            DependencyProperty.RegisterAttached(<span class="str">"ShowBorder"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">bool</span>), <span class="kwrd">typeof</span>(GridHelper), <span class="kwrd">new</span> PropertyMetadata(OnShowBorderChanged));


        <span class="rem">//这是一个事件处理程序，需要手工编写，必须是静态方法</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> OnShowBorderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d <span class="kwrd">as</span> Grid;
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.OldValue)
            {
                grid.Loaded -= (s, arg) =&gt; { };
            }
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.NewValue)
            {
                grid.Loaded += (s, arg) =&gt;
                {
                    <span class="rem">//确定行和列数</span>
                    var rows = grid.RowDefinitions.Count;
                    var columns = grid.ColumnDefinitions.Count;

                    <span class="rem">//每个格子添加一个Border进去</span>
                    <span class="kwrd">for</span>(<span class="kwrd">int</span> i = 0; i &lt; rows; i++)
                    {
                        <span class="kwrd">for</span>(<span class="kwrd">int</span> j = 0; j &lt; columns; j++)
                        {
                            var border = <span class="kwrd">new</span> Border() { BorderBrush = <span class="kwrd">new</span> SolidColorBrush(Colors.Gray), BorderThickness = <span class="kwrd">new</span> Thickness(1) };
                            Grid.SetRow(border, i);
                            Grid.SetColumn(border, j);

                            grid.Children.Add(border);
                        }
                    }

                };
            }

        }

    }

}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
上面的代码应该很好理解，我们是用代码实现了与手工添加Border一样的功能，奥妙在于，Grid有一个Loaded事件，我们完全可以在这个事件里面，根据计算得到的行和列去添加Border。</p>
<p>&nbsp;</p>
<p>如何在页面中使用我们附加属性呢？我们需要在XAML中稍做修改</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationGridBorderSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
    <strong><font size="4"><font color="#ff0000"><span class="attr">xmlns:ext</span><span class="kwrd">="clr-namespace:SilverlightApplicationGridBorderSample"</span></font></font></strong><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <strong><font color="#ff0000"><font size="4"><span class="attr">ext:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="True"</span></font></font></strong>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左上角"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右上角"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>请注意，我们只需要导入命名空间，然后在Grid上面设置<strong><font color="#ff0000"><font size="4"><span class="attr">ext:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="True"</span></font></font></strong> 即可。这就是附加属性的神奇之处</p>
<p>看起来不错对吧？先不要着急，看看另外一个情况，加入我们希望把第一行的两列进行合并（ColumnSpan)的话，会怎么样呢？</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplicationGridBorderSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
    <span class="attr">xmlns:ext</span><span class="kwrd">="clr-namespace:SilverlightApplicationGridBorderSample"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">ext:GridHelper</span>.<span class="attr">ShowBorder</span><span class="kwrd">="True"</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="30"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">RowDefinition</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>

<strong><font color="#ff0000"><font size="4">        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="第一行合并两个列的内容"</span> <span class="attr">Grid</span>.<span class="attr">ColumnSpan</span><span class="kwrd">="2"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span></font></font></strong>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="左下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>



        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="右下角"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/20110922190032551.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900327486.png" width="547" height="441"></a></pre><pre class="csharpcode">&nbsp;</pre>
<p>我们看到，虽然确实第一行是合并了，但是边框线却仍然有两个，也就是说，我们在添加Border的时候，没有考虑到行或者列合并的情况。这样就不是特别理想了。我们下面要改进这个属性。</p>
<p>&nbsp;</p>
<h1>第四步：改进附加属性适应行和列的合并情况</h1>
<p>请注意，将代码做如下的改动</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Media;

<span class="kwrd">namespace</span> SilverlightApplicationGridBorderSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 为Grid添加的一个特殊功能</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> GridHelper
    {

        <span class="rem">//请注意：可以通过propa这个快捷方式生成下面三段代码</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">bool</span> GetShowBorder(DependencyObject obj)
        {
            <span class="kwrd">return</span> (<span class="kwrd">bool</span>)obj.GetValue(ShowBorderProperty);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SetShowBorder(DependencyObject obj, <span class="kwrd">bool</span> <span class="kwrd">value</span>)
        {
            obj.SetValue(ShowBorderProperty, <span class="kwrd">value</span>);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty ShowBorderProperty =
            DependencyProperty.RegisterAttached(<span class="str">"ShowBorder"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">bool</span>), <span class="kwrd">typeof</span>(GridHelper), <span class="kwrd">new</span> PropertyMetadata(OnShowBorderChanged));


        <span class="rem">//这是一个事件处理程序，需要手工编写，必须是静态方法</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> OnShowBorderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d <span class="kwrd">as</span> Grid;
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.OldValue)
            {
                grid.Loaded -= (s, arg) =&gt; { };
            }
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.NewValue)
            {
                grid.Loaded += (s, arg) =&gt;
                {
                    <span class="rem">//改进后的做法，不是简单地根据行和列，而是根据Grid的顶层子控件的个数去添加边框，同时考虑合并的情况</span>
<font color="#ff0000" size="4"><strong>                    var controls = grid.Children;
                    var count = controls.Count;

                    <span class="kwrd">for</span>(<span class="kwrd">int</span> i = 0; i &lt; count; i++)
                    {
                        var item = controls[i] <span class="kwrd">as</span> FrameworkElement;
                        var border = <span class="kwrd">new</span> Border()
                        {
                            BorderBrush = <span class="kwrd">new</span> SolidColorBrush(Colors.LightGray),
                            BorderThickness = <span class="kwrd">new</span> Thickness(1)
                        };

                        var row = Grid.GetRow(item);
                        var column = Grid.GetColumn(item);
                        var rowspan = Grid.GetRowSpan(item);
                        var columnspan = Grid.GetColumnSpan(item);

                        Grid.SetRow(border, row);
                        Grid.SetColumn(border, column);
                        Grid.SetRowSpan(border, rowspan);
                        Grid.SetColumnSpan(border, columnspan);


                        grid.Children.Add(border);

                    }</strong></font>

                };
            }

        }

    }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900331258.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900331225.png" width="547" height="441"></a></p>
<p>改动之后的效果明显比较理想了，它考虑到了行和列的合并的情况。那么，事情结束了么？先不要着急，我们再来做一个事情，假设我们希望每个单元格中的内容都与边框（左，上，右，下）有一定的距离，怎么实现呢？</p>
<p>我们会自然联想到，给Border设置Padding属性就可以了吧，那么试试吧</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Media;

<span class="kwrd">namespace</span> SilverlightApplicationGridBorderSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 为Grid添加的一个特殊功能</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> GridHelper
    {

        <span class="rem">//请注意：可以通过propa这个快捷方式生成下面三段代码</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">bool</span> GetShowBorder(DependencyObject obj)
        {
            <span class="kwrd">return</span> (<span class="kwrd">bool</span>)obj.GetValue(ShowBorderProperty);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SetShowBorder(DependencyObject obj, <span class="kwrd">bool</span> <span class="kwrd">value</span>)
        {
            obj.SetValue(ShowBorderProperty, <span class="kwrd">value</span>);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty ShowBorderProperty =
            DependencyProperty.RegisterAttached(<span class="str">"ShowBorder"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">bool</span>), <span class="kwrd">typeof</span>(GridHelper), <span class="kwrd">new</span> PropertyMetadata(OnShowBorderChanged));


        <span class="rem">//这是一个事件处理程序，需要手工编写，必须是静态方法</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> OnShowBorderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d <span class="kwrd">as</span> Grid;
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.OldValue)
            {
                grid.Loaded -= (s, arg) =&gt; { };
            }
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.NewValue)
            {
                grid.Loaded += (s, arg) =&gt;
                {
                    <span class="rem">//改进后的做法，不是简单地根据行和列，而是根据Grid的顶层子控件的个数去添加边框，同时考虑合并的情况</span>
                    var controls = grid.Children;
                    var count = controls.Count;

                    <span class="kwrd">for</span>(<span class="kwrd">int</span> i = 0; i &lt; count; i++)
                    {
                        var item = controls[i] <span class="kwrd">as</span> FrameworkElement;
                        var border = <span class="kwrd">new</span> Border()
                        {
                            BorderBrush = <span class="kwrd">new</span> SolidColorBrush(Colors.LightGray),
                            BorderThickness = <span class="kwrd">new</span> Thickness(1),
                           <strong><font color="#ff0000" size="4"> Padding= <span class="kwrd">new</span> Thickness(10)</font></strong>
                        };

                        var row = Grid.GetRow(item);
                        var column = Grid.GetColumn(item);
                        var rowspan = Grid.GetRowSpan(item);
                        var columnspan = Grid.GetColumnSpan(item);

                        Grid.SetRow(border, row);
                        Grid.SetColumn(border, column);
                        Grid.SetRowSpan(border, rowspan);
                        Grid.SetColumnSpan(border, columnspan);


                        grid.Children.Add(border);

                    }

                };
            }

        }

    }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>看起来是可以的，但是运行起来，情况好像没有什么变化。我们的文字与边框仍然没有任何距离。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900345303.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900351649.png" width="547" height="441"></a></p>
<p>这是为什么呢？既然Border设置了Padding属性，那么又为什么实现不了我们需要的效果呢？<br>其实很简单，Border的Padding属性只影响它内部的子元素或者控件。我们上面的代码，只是创建了Border，并且将其添加到Grid的Chiildren里面去。但并没有将那些TextBlock移动到Border里面去，所以就实现不了Padding效果了。</p>
<p>&nbsp;</p>
<h1>第五步：移动TextBlock到相应的Border</h1><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Media;

<span class="kwrd">namespace</span> SilverlightApplicationGridBorderSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 为Grid添加的一个特殊功能</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// 反馈：ares@xizhang.com</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> GridHelper
    {

        <span class="rem">//请注意：可以通过propa这个快捷方式生成下面三段代码</span>

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">bool</span> GetShowBorder(DependencyObject obj)
        {
            <span class="kwrd">return</span> (<span class="kwrd">bool</span>)obj.GetValue(ShowBorderProperty);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> SetShowBorder(DependencyObject obj, <span class="kwrd">bool</span> <span class="kwrd">value</span>)
        {
            obj.SetValue(ShowBorderProperty, <span class="kwrd">value</span>);
        }

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">readonly</span> DependencyProperty ShowBorderProperty =
            DependencyProperty.RegisterAttached(<span class="str">"ShowBorder"</span>, <span class="kwrd">typeof</span>(<span class="kwrd">bool</span>), <span class="kwrd">typeof</span>(GridHelper), <span class="kwrd">new</span> PropertyMetadata(OnShowBorderChanged));


        <span class="rem">//这是一个事件处理程序，需要手工编写，必须是静态方法</span>
        <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> OnShowBorderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d <span class="kwrd">as</span> Grid;
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.OldValue)
            {
                grid.Loaded -= (s, arg) =&gt; { };
            }
            <span class="kwrd">if</span>((<span class="kwrd">bool</span>)e.NewValue)
            {
                grid.Loaded += (s, arg) =&gt;
                {

                    <span class="rem">//这种做法自动将控件移动到Border里面来</span>
                    var controls = grid.Children;
                    var count = controls.Count;

                    <span class="kwrd">for</span>(<span class="kwrd">int</span> i = 0; i &lt; count; i++)
                    {
                        var item = controls[i] <span class="kwrd">as</span> FrameworkElement;
                        var border = <span class="kwrd">new</span> Border()
                        {
                            BorderBrush = <span class="kwrd">new</span> SolidColorBrush(Colors.LightGray),
                            BorderThickness = <span class="kwrd">new</span> Thickness(1),
                            <strong><font color="#ff0000" size="4">Padding = <span class="kwrd">new</span> Thickness(20)</font></strong>
                        };

                        var row = Grid.GetRow(item);
                        var column = Grid.GetColumn(item);
                        var rowspan = Grid.GetRowSpan(item);
                        var columnspan = Grid.GetColumnSpan(item);

                        Grid.SetRow(border, row);
                        Grid.SetColumn(border, column);
                        Grid.SetRowSpan(border, rowspan);
                        Grid.SetColumnSpan(border, columnspan);


                 <strong><font color="#ff0000" size="4">       grid.Children.RemoveAt(i);
                        border.Child = item;
                        grid.Children.Insert(i, border);</font></strong>

                    }
                };
            }

        }

    }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>



<p>&nbsp;</p>
<p>为了大家看到效果，我将Padding设置为20. 请注意，上述代码中，我们先从Grid中移除掉了有关的控件，然后将这些控件添加到Border里面去了。此所谓移花接木也。大家可以看到，现在每个格子里面的内容都与边框有一定的距离了。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900354124.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109221900354648.png" width="547" height="441"></a></p>
<p>&nbsp;</p>
<p>本文完整源代码，可以通过这里下载 </p>
<p><a title="http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar" href="http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar">http://files.cnblogs.com/chenxizhang/SilverlightApplicationGridBorderSample.rar</a></p>
<p>&nbsp;</p>
<h1>总结：</h1>
<p>本文采用循序渐进的方式演示了如何为Grid元素添加边框线的功能，从最原始的手工方式，逐渐演化到最后的解决方案。通过本文，你可以学会这个具体的场景问题解决方法，更可以体会到如何通过附加属性实现更多特殊的功能。</p>]]></description></item><item><title>你得学会并且学得会的Socket编程基础知识（续）——Silverlight客户端</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2173101.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 10 Sep 2011 04:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2173101.html</guid><description><![CDATA[<p>上一篇，我给大家讲解了关于Socket编程的基础知识</p> <p><a title="http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html" href="http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html">http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html</a></p> <p>&nbsp;</p> <p>本文将在这个案例的基础上，加入一个特殊场景，利用Silverlight来实现客户端。有的朋友可能会说，其实是一样的吧。请不要急于下结论，有用过Silverlight的朋友都有这种体会，很多在标准.NET Framework编程中能用的技术，到了Silverlight里面，或多或少会有些限制。不幸的是，Socket这个功能就是其中一个。这本身没有什么好不好的问题，Silverlight首先是运行在一个特殊的沙盒中，受到一些限制也是意料之中的，毕竟安全第一嘛</p> <p>&nbsp;</p> <p>我总结Silverlight中应用Socket的几点特殊之处</p> <h1></h1> <h2>1.所有的操作都必须的异步的，包括连接，发送和接收消息</h2> <h2>2.Silverlight只能做客户端，不能做服务器（虽然这句看起来说的有点多余，不过确实有朋友想这么做呢）</h2> <h2>3.Silverlight的Socket只能访问如下端口，4502-4530，只能用TCP。</h2> <h2>4.Silverlight的Socket收到访问策略的限制，服务端必须监听，并提供ClientAccessPolicy的支持。通常是在943端口（TCP)进行监听，也可以在HTTP 80端口监听。</h2> <p>本文完整代码如下 <a title="http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar" href="http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar">http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar</a></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>那么，我们就来通过例子学习一下在Silverlight中如何使用Socket技术与服务端通讯吧</p> <h1>第一步：创建Silverlight项目</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/20110910121029947.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210292060.png" width="959" height="664"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210297632.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210296553.png" width="524" height="420"></a><br></p> <h1>第二步：设计Silverlight界面</h1><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SocketSilverlightClient.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span>
        <span class="attr">Margin</span><span class="kwrd">="20"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="Button"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Width"</span>
                    <span class="attr">Value</span><span class="kwrd">="100"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="HorizontalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Left"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="HorizontalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Left"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="TextWrapping"</span>
                    <span class="attr">Value</span><span class="kwrd">="Wrap"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Button</span>
                <span class="attr">Content</span><span class="kwrd">="Connect"</span>
                <span class="attr">x:Name</span><span class="kwrd">="btConnect"</span>
                <span class="attr">Click</span><span class="kwrd">="btConnect_Click"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                <span class="attr">Text</span><span class="kwrd">="Type your message"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">StackPanel</span>
                <span class="attr">Margin</span><span class="kwrd">="5"</span>
                <span class="attr">Orientation</span><span class="kwrd">="Horizontal"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">TextBox</span>
                    <span class="attr">x:Name</span><span class="kwrd">="txtInput"</span>
                    <span class="attr">Width</span><span class="kwrd">="200"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Button</span>
                    <span class="attr">Content</span><span class="kwrd">="Send"</span>
                    <span class="attr">x:Name</span><span class="kwrd">="btSend"</span>
                    <span class="attr">Click</span><span class="kwrd">="btSend_Click"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>


            <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                <span class="attr">Text</span><span class="kwrd">="Messages from server"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">ItemsControl</span>
                <span class="attr">Margin</span><span class="kwrd">="5"</span>
                <span class="attr">x:Name</span><span class="kwrd">="icResult"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ItemsControl</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这个界面看起来像下面这样</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210293205.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210301046.png" width="1028" height="729"></a></p>
<p>&nbsp;</p>
<h1>第三步：编写基本的客户端代码</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Net;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Documents;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> System.Windows.Media;
<span class="kwrd">using</span> System.Windows.Media.Animation;
<span class="kwrd">using</span> System.Windows.Shapes;

<span class="rem">//导入命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;

<span class="kwrd">namespace</span> SocketSilverlightClient
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 演示如何在Silverlight中使用Socket技术</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 尝试连接到服务器</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btConnect_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            <span class="rem">//创建一个套接字</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            <span class="rem">//准备一个异步参数（这是特有的）</span>
            var args = <span class="kwrd">new</span> SocketAsyncEventArgs();
            <span class="rem">//设置远程服务器地址，这里用DnsSafeHost，可以获取到宿主远程服务器的主机名称</span>
            args.RemoteEndPoint = <span class="kwrd">new</span> DnsEndPoint(App.Current.Host.Source.DnsSafeHost, 4530);
            <span class="rem">//注册Completed事件处理程序</span>
            args.Completed += (o, a) =&gt;
            {
                <span class="kwrd">if</span>(a.SocketError &gt; 0)<span class="rem">//0表示成功，其他的表示有错误</span>
                {
                    <span class="rem">//注意，因为Completed方法是在工作线程触发的，所以要对主线程进行访问，必须使用Dispatcher机制</span>
                    <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
                    {
                        MessageBox.Show(<span class="str">"Connect fail:"</span> + a.SocketError.ToString());
                    });
                }
                <span class="kwrd">else</span>
                {

                    <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
                    {
                        MessageBox.Show(<span class="str">"Connect success"</span>);
                    });
                }

            };

            <span class="rem">//发起异步的连接请求</span>
            socket.ConnectAsync(args);
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> btSend_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {

        }
    }
}
</pre>
<p>【注意】在Silverlight中使用Socket的代码，与一般的客户端还是不同的。最主要的区别在于异步模型。</p>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>目前，我这里只编写了Connect的代码，是因为这里就会遇到连接问题，其他代码先不着急写出来。我们可以运行起来看看</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210301635.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210302192.png" width="846" height="366"></a></p>
<p>点击“Connect”之后，我们发现有一个错误，是AccessDenied。这就是说，Silverlight遇到了权限问题无法直接访问到服务器。</p>
<p>我们都知道,Silverlight是运行在一个沙盒里面的，它要访问宿主网站之外的资源，是受到很多限制的。它会先尝试检查目标资源是否有一个ClientAccessPolicy的设置。</p>
<p>这里有一篇详细的介绍 <a href="http://msdn.microsoft.com/zh-cn/library/cc197955(VS.95).aspx">http://msdn.microsoft.com/zh-cn/library/cc197955(VS.95).aspx</a></p>
<p>&nbsp;</p>
<h1>第四步：为服务器添加PolicyServer。</h1>
<p>已经有不少先进同学在这方面有研究了。这个PolicyServer是负责向Silverlight发送策略信息的，也就是说，Silverlight的Socket，在连接之前，会默认去连接目标主机的943端口，请求ClientAccessPolicy的认证，只有通过了，则可以继续访问其他的Socket。</p>
<p>&nbsp;</p>
<p>这个PolicyServer的设计，不是我的原创，但我稍做了修改。<strong><font color="#ff0000">请将下面的代码保存为一个独立的文件，放在SocketServer这个项目里面</font></strong></p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Configuration;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.IO;
<span class="kwrd">using</span> System.Net;
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Reflection;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> SocketServerService
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// This is a silverlight socket client access policy file server.</span>
    <span class="rem">/// </span>
    <span class="rem">/// Background:</span>
    <span class="rem">/// When a socket connection open attempt to some server is made in Silverlight 2.0</span>
    <span class="rem">/// Silverlight automatically makes a request to the server in question on port 943 for a policy file</span>
    <span class="rem">/// The policy file served includes the valid ports and valid clients for the socket server</span>
    <span class="rem">/// </span>
    <span class="rem">/// Outcomes:</span>
    <span class="rem">/// The socket request will result in success if the client access policy file served by the socket</span>
    <span class="rem">/// server permits access to the requested port and the client URI is in the &lt;allow-from&gt; element</span>
    <span class="rem">/// See ClientAccessPolicy.xml &amp; http://msdn.microsoft.com/en-us/library/cc645032(VS.95).aspx for further details</span>
    <span class="rem">/// </span>
    <span class="rem">/// The socket request will be denied if the client access policy file is not served or if the client /</span>
    <span class="rem">/// port is denied in the client access policy file</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">class</span> SL_SocketPortPolicyListener
    {
        TcpListener _Listener = <span class="kwrd">null</span>;
        TcpClient _Client = <span class="kwrd">null</span>;
        <span class="kwrd">const</span> <span class="kwrd">string</span> _PolicyRequestString = <span class="str">"&lt;policy-file-request/&gt;"</span>;
        <span class="kwrd">int</span> _ReceivedLength = 0;
        <span class="kwrd">byte</span>[] _Policy = <span class="kwrd">null</span>;
        <span class="kwrd">byte</span>[] _ReceiveBuffer = <span class="kwrd">null</span>;
        EventLog eventLog;

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="SL_SocketPortPolicyListener"/&gt; class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="serviceEventLog"&gt;The service event log.&lt;/param&gt;</span>
        <span class="kwrd">public</span> SL_SocketPortPolicyListener(EventLog serviceEventLog)
        {
            eventLog = serviceEventLog;
            Start();
        }
<font color="#ff0000">        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 增加的代码</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> SL_SocketPortPolicyListener()
            : <span class="kwrd">this</span>(<span class="kwrd">new</span> EventLog(<span class="str">"Application"</span>))
        {

        }</font>

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Starts this instance.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">void</span> Start()
        {
            <span class="kwrd">try</span>
            {
                <span class="rem">//增加的代码</span>
<strong><font color="#ff0000">                var policyConfig =
                    <span class="str">"&lt;?xml version=\"1.0\" encoding =\"utf-8\"?&gt;"</span> +
                        <span class="str">"&lt;access-policy&gt;"</span> +
                          <span class="str">"&lt;cross-domain-access&gt;"</span> +
                            <span class="str">"&lt;policy&gt;"</span> +
                              <span class="str">"&lt;allow-from&gt;"</span> +
                                <span class="str">"&lt;domain uri=\"*\" /&gt;"</span> +
                              <span class="str">"&lt;/allow-from&gt;"</span> +
                              <span class="str">"&lt;grant-to&gt;"</span> +
                                <span class="str">"&lt;socket-resource port=\"4502-4530\" protocol=\"tcp\" /&gt;"</span> +
                              <span class="str">"&lt;/grant-to&gt;"</span> +
                            <span class="str">"&lt;/policy&gt;"</span> +
                          <span class="str">"&lt;/cross-domain-access&gt;"</span> +
                        <span class="str">"&lt;/access-policy&gt;"</span>;</font></strong>

                <span class="rem">//删除的代码</span>
                <span class="rem">//string executionLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);</span>
                <span class="rem">//string policyFile = ConfigurationManager.AppSettings["PolicyFilePath"];</span>
                <span class="rem">//using(FileStream fs = new FileStream(executionLocation + policyFile, FileMode.Open))</span>
                <span class="rem">//{</span>
                <span class="rem">//    _Policy = new byte[fs.Length];</span>
                <span class="rem">//    fs.Read(_Policy, 0, _Policy.Length);</span>
                <span class="rem">//}</span>

                <span class="rem">//增加的代码</span>
                <font color="#ff0000"><strong>_Policy = Encoding.Default.GetBytes(policyConfig);</strong></font>



                _ReceiveBuffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[_PolicyRequestString.Length];

                <span class="rem">//Using TcpListener which is a wrapper around a Socket</span>
                <span class="rem">//Allowed port is 943 for Silverlight sockets policy data</span>
                _Listener = <span class="kwrd">new</span> TcpListener(IPAddress.Any, 943);
                _Listener.Start();
                _Listener.BeginAcceptTcpClient(<span class="kwrd">new</span> AsyncCallback(OnBeginAccept), <span class="kwrd">null</span>);
            }
            <span class="kwrd">catch</span>(Exception exp)
            {
                LogError(exp);
            }
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Called when [begin accept].</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="ar"&gt;The ar.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> OnBeginAccept(IAsyncResult ar)
        {
            _Client = _Listener.EndAcceptTcpClient(ar);
            _Client.Client.BeginReceive(_ReceiveBuffer, 0, _PolicyRequestString.Length, SocketFlags.None,
                <span class="kwrd">new</span> AsyncCallback(OnReceiveComplete), <span class="kwrd">null</span>);
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Called when [receive complete].</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="ar"&gt;The ar.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> OnReceiveComplete(IAsyncResult ar)
        {
            <span class="kwrd">try</span>
            {
                _ReceivedLength += _Client.Client.EndReceive(ar);
                <span class="rem">//See if there's more data that we need to grab</span>
                <span class="kwrd">if</span>(_ReceivedLength &lt; _PolicyRequestString.Length)
                {
                    <span class="rem">//Need to grab more data so receive remaining data</span>
                    _Client.Client.BeginReceive(_ReceiveBuffer, _ReceivedLength,
                        _PolicyRequestString.Length - _ReceivedLength,
                        SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(OnReceiveComplete), <span class="kwrd">null</span>);
                    <span class="kwrd">return</span>;
                }

                <span class="rem">//Check that &lt;policy-file-request/&gt; was sent from client</span>
                <span class="kwrd">string</span> request = System.Text.Encoding.UTF8.GetString(_ReceiveBuffer, 0, _ReceivedLength);
                <span class="kwrd">if</span>(StringComparer.InvariantCultureIgnoreCase.Compare(request, _PolicyRequestString) != 0)
                {
                    <span class="rem">//Data received isn't valid so close</span>
                    _Client.Client.Close();
                    <span class="kwrd">return</span>;
                }
                <span class="rem">//Valid request received....send policy file</span>
                _Client.Client.BeginSend(_Policy, 0, _Policy.Length, SocketFlags.None,
                    <span class="kwrd">new</span> AsyncCallback(OnSendComplete), _Client.Client);
            }
            <span class="kwrd">catch</span>(Exception exp)
            {
                _Client.Client.Close();
                LogError(exp);
            }
            _ReceivedLength = 0;
            <span class="rem">//listen for the next client</span>
            _Listener.BeginAcceptTcpClient(<span class="kwrd">new</span> AsyncCallback(OnBeginAccept), <span class="kwrd">null</span>);
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Called when [send complete].</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="ar"&gt;The ar.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> OnSendComplete(IAsyncResult ar)
        {
            Socket socket = (Socket)ar.AsyncState;
            <span class="kwrd">try</span>
            {
                socket.EndSend(ar);
            }
            <span class="kwrd">catch</span>(Exception exp)
            {
                LogError(exp);
            }
            <span class="kwrd">finally</span>
            {
                socket.Close();
            }
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Logs the error.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="exp"&gt;The exp.&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> LogError(Exception exp)
        {
            eventLog.WriteEntry(<span class="kwrd">string</span>.Format(<span class="str">"Error in PolicySocketServer: {0} \r\n StackTrace: {1}"</span>, exp.Message, exp.StackTrace));
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>然后，在SocketServer的主程序中，加入下面的代码（<strong><font color="#ff0000">只需要添加红色这一行即可</font></strong>）</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            <strong><font color="#ff0000">var policyServer = <span class="kwrd">new</span> SocketServerService.SL_SocketPortPolicyListener();</font></strong>


            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback(ClientAccepted), socket);


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }


        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ClientAccepted(IAsyncResult ar)
        {

            var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

            <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
            var client = socket.EndAccept(ar);

            <span class="rem">//给客户端发送一个欢迎消息</span>
            client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span> + DateTime.Now.ToString()));


            <span class="rem">//实现每隔两秒钟给服务器发一个消息</span>
            <span class="rem">//这里我们使用了一个定时器</span>
            var timer = <span class="kwrd">new</span> System.Timers.Timer();
            timer.Interval = 2000D;
            timer.Enabled = <span class="kwrd">true</span>;
            timer.Elapsed += (o, a) =&gt;
            {
                <span class="rem">//检测客户端Socket的状态</span>
                <span class="kwrd">if</span>(client.Connected)
                {
                    <span class="kwrd">try</span>
                    {
                        client.Send(Encoding.Unicode.GetBytes(<span class="str">"Message from server at "</span> + DateTime.Now.ToString()));
                    }
                    <span class="kwrd">catch</span>(SocketException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
                <span class="kwrd">else</span>
                {
                    timer.Stop();
                    timer.Enabled = <span class="kwrd">false</span>;
                    Console.WriteLine(<span class="str">"Client is disconnected, the timer is stop."</span>);
                }
            };
            timer.Start();


            <span class="rem">//接收客户端的消息(这个和在客户端实现的方式是一样的）</span>
            client.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), client);

            <span class="rem">//准备接受下一个客户端请求</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback(ClientAccepted), socket);
        }

        <span class="kwrd">static</span> <span class="kwrd">byte</span>[] buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ReceiveMessage(IAsyncResult ar)
        {

            <span class="kwrd">try</span>
            {
                var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

                <span class="rem">//接收下一个消息(因为这是一个递归的调用，所以这样就可以一直接收消息了）</span>
                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);
            }
            <span class="kwrd">catch</span>(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>




<p>再次测试，我们就发现Silverlight客户端能够连接到服务器了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210303620.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210308321.png" width="836" height="357"></a></p>
<p>&nbsp;</p>
<p>既然连接上了服务器，那么就让我们来将Silverlight客户端里面其他的一些功能都实现一下吧</p>
<p>&nbsp;</p>
<h1>第五步：实现Silverlight客户端的消息收发</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Net;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Documents;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> System.Windows.Media;
<span class="kwrd">using</span> System.Windows.Media.Animation;
<span class="kwrd">using</span> System.Windows.Shapes;

<span class="rem">//导入命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> SocketSilverlightClient
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 演示如何在Silverlight中使用Socket技术</span>
    <span class="rem">/// 作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
        }


        <span class="rem">//创建一个套接字</span>
        Socket socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);


        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 尝试连接到服务器</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">void</span> btConnect_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            <span class="rem">//准备一个异步参数（这是特有的）</span>
            var args = <span class="kwrd">new</span> SocketAsyncEventArgs();
            <span class="rem">//设置远程服务器地址，这里用DnsSafeHost，可以获取到宿主远程服务器的主机名称</span>
            args.RemoteEndPoint = <span class="kwrd">new</span> DnsEndPoint(App.Current.Host.Source.DnsSafeHost, 4530);
            <span class="rem">//注册Completed事件处理程序</span>
            args.Completed += ConnectCompleted;

            <span class="rem">//发起异步的连接请求</span>
            socket.ConnectAsync(args);
        }


        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 该事件在连接成功时发生</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">void</span> ConnectCompleted(<span class="kwrd">object</span> sender, SocketAsyncEventArgs e)
        {
            <span class="kwrd">if</span>(e.SocketError &gt; 0)<span class="rem">//0表示成功，其他的表示有错误</span>
            {
                <span class="rem">//注意，因为Completed方法是在工作线程触发的，所以要对主线程进行访问，必须使用Dispatcher机制</span>
                <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
                {
                    MessageBox.Show(<span class="str">"Connect fail:"</span> + e.SocketError.ToString());
                });
            }
            <span class="kwrd">else</span>
            {
                <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
                {
                    <span class="rem">//MessageBox.Show("Connect success");</span>

                    <span class="rem">//将连接按钮禁用掉</span>
                    btConnect.Content = <span class="str">"Connected"</span>;
                    btConnect.IsEnabled = <span class="kwrd">false</span>;


                    var buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];
                    e.SetBuffer(buffer, 0, buffer.Length);
                    e.Completed -= ConnectCompleted;
                    e.Completed += ReceiveCompleted;
                    socket.ReceiveAsync(e);
                });
            }
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 该事件在接收消息时发生</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="sender"&gt;&lt;/param&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">void</span> ReceiveCompleted(<span class="kwrd">object</span> sender, SocketAsyncEventArgs e)
        {
            <span class="rem">//将消息显示在界面上</span>
            var result = Encoding.Unicode.GetString(e.Buffer, 0, e.Count);
            <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
            {
                icResult.Items.Add(result);
            });
            <span class="rem">//递归继续接收消息</span>
            socket.ReceiveAsync(e);
        }



        <span class="kwrd">private</span> <span class="kwrd">void</span> btSend_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var args = <span class="kwrd">new</span> SocketAsyncEventArgs();
            <span class="rem">//将用户输入的文本转成字节</span>
            var buffer = Encoding.Unicode.GetBytes(txtInput.Text);
            args.SetBuffer(buffer, 0, buffer.Length);
            <span class="rem">//设置远程服务器地址，这里用DnsSafeHost，可以获取到宿主远程服务器的主机名称</span>
            args.RemoteEndPoint = <span class="kwrd">new</span> DnsEndPoint(App.Current.Host.Source.DnsSafeHost, 4530);

            <span class="rem">//发送完成的话，将控件清空，激活</span>
            args.Completed += (o, a) =&gt; {
                <span class="kwrd">this</span>.Dispatcher.BeginInvoke(() =&gt;
                {
                    txtInput.Text = <span class="kwrd">string</span>.Empty;
                    btSend.IsEnabled = <span class="kwrd">true</span>;
                });
            };
            <span class="rem">//禁用按钮</span>
            btSend.IsEnabled = <span class="kwrd">false</span>;
            <span class="rem">//发送消息</span>
            socket.SendAsync(args);
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>运行起来看看吧</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210313653.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/20110910121031306.png" width="844" height="360"></a></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210319226.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109101210319815.png" width="681" height="446"></a></p>
<p>&nbsp;</p>

<p>还不错对吧，这个例子给大家演示了如何在Silverlight中使用Socket，接下来大家可以结合自己的现实工作做一些研究和扩展吧</p>
<p>本文完整代码如下 <a title="http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar" href="http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar">http://files.cnblogs.com/chenxizhang/SocketWorkshop(with-silverlight).rar</a></p>]]></description></item><item><title>你得学会并且学得会的Socket编程基础知识</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 10 Sep 2011 01:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/09/10/2172994.html</guid><description><![CDATA[<p>这一篇文章，我将图文并茂地介绍Socket编程的基础知识，我相信，如果你按照步骤做完实验，一定可以对Socket编程有更好地理解。</p> <p>本文源代码，可以通过这里下载 <a title="http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar" href="http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar">http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar</a></p> <p>&nbsp;</p> <h1>第一步：创建解决方案</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924291243.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924293228.png" width="959" height="664"></a></p> <h1>第二步：创建服务端程序</h1> <p>这里可以选择“Console Application”这个类型，比较方便调试</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924294341.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924307962.png" width="959" height="664"></a></p> <p>然后编写如下代码，实现服务器的基本功能</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>现在可以启动调试一下看看效果如何，正常情况下应该会看到一个提示，因为我们需要在TCP 4530端口进行监听，所以防火墙会有提示。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924301342.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924309423.png" width="545" height="391"></a></p>
<p>点击“Allow access”</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924308900.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924313916.png" width="681" height="446"></a></p>
<p>这样，我们的服务器就可以开始监听了。但是这有什么用呢？是的，没有什么用。</p>
<p>我们还需要为服务器添加一些功能，例如接受传入的请求，给客户端发送消息，或者从客户端接收消息等等</p>
<h1>第三步：接受传入的请求</h1>
<p>我们需要通过Accept，或者(BeginAccept)来接受传入的请求，请注意下面代码中的红色部分</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

<strong><font color="#ff0000">            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback((ar) =&gt;
            {
                <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
                var client = socket.EndAccept(ar);

                <span class="rem">//给客户端发送一个欢迎消息</span>
                client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span>+DateTime.Now.ToString()));
            }), <span class="kwrd">null</span>);</font></strong>


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>wow，看起来不错对吧，我们赶紧做一个客户端来测试一下吧</p>
<p>&nbsp;</p>
<h1>第四步：创建客户端</h1>
<p>我们还是使用一个Console Application</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924316981.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924314506.png" width="959" height="664"></a></p>
<p>添加如下的代码，并且创建客户端连接</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//导入的命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;

<span class="kwrd">namespace</span> SocketClient
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个Socket</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//连接到指定服务器的指定端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.connect.aspx</span>
            socket.Connect(<span class="str">"localhost"</span>, 4530);


            Console.WriteLine(<span class="str">"connect to the server"</span>);
            Console.Read();

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>依次选择SocketServer和SocketClient这两个项目，分别将其启动为调试状态（右键菜单，Debug=&gt;Start new instance)</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924313110.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924318127.png" width="693" height="193"></a></p>
<p>我们看到两个程序都工作正常。</p>
<p>但是，在客户端怎么没有收到服务器发过来的消息呢？那是因为，我们没有在客户端提供这方面的功能。</p>
<p>&nbsp;</p>
<h1>第五步：在客户端中实现接受消息的方法</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//导入的命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;

<span class="kwrd">namespace</span> SocketClient
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个Socket</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//连接到指定服务器的指定端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.connect.aspx</span>
            socket.Connect(<span class="str">"localhost"</span>, 4530);

            <span class="rem">//实现接受消息的方法</span>

<strong><font color="#ff0000">            var buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];<span class="rem">//设置一个缓冲区，用来保存数据</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginreceive.aspx</span>
            socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback((ar) =&gt;
            {
                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

            }), <span class="kwrd">null</span>);</font></strong>

            Console.WriteLine(<span class="str">"connect to the server"</span>);
            Console.Read();

        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>请注意以上红色的部分，我们用了BeginReceive方法进行异步的消息侦听，如果收到了，我们就打印出来</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924311507.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/20110910092432112.png" width="673" height="187"></a></p>
<p>看起来已经实现了我们需求了：服务器给客户端发了一个消息，而客户端也已经收到了。</p>
<p>但是，这远远不够，因为它们之间的通讯不仅仅是一次性的，那么如果服务器要不断地给客户端发消息，例如每隔两秒钟就发送一个消息，如何实现呢？</p>
<p>&nbsp;</p>
<h1>第六步：实现服务器定期向客户端发消息</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback((ar) =&gt;
            {
                <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
                var client = socket.EndAccept(ar);

                <span class="rem">//给客户端发送一个欢迎消息</span>
                client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span>+DateTime.Now.ToString()));


<strong><font color="#ff0000">                <span class="rem">//实现每隔两秒钟给服务器发一个消息</span>
                <span class="rem">//这里我们使用了一个定时器</span>
                var timer = <span class="kwrd">new</span> System.Timers.Timer();
                timer.Interval = 2000D;
                timer.Enabled = <span class="kwrd">true</span>;
                timer.Elapsed += (o, a) =&gt;
                {
                    client.Send(Encoding.Unicode.GetBytes(<span class="str">"Message from server at "</span> +DateTime.Now.ToString()));
                };
                timer.Start();</font></strong>

            }), <span class="kwrd">null</span>);


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>



<p>&nbsp;</p>
<p>我们还要实现在客户端一直监听消息的机制，而不是一次性接收.请注意下面红色的部分</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//导入的命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;

<span class="kwrd">namespace</span> SocketClient
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个Socket</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//连接到指定服务器的指定端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.connect.aspx</span>
            socket.Connect(<span class="str">"localhost"</span>, 4530);
            Console.WriteLine(<span class="str">"connect to the server"</span>);

            <span class="rem">//实现接受消息的方法</span>

            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginreceive.aspx</span>
           <strong><font color="#ff0000"> socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage),socket);</font></strong>

            Console.Read();

        }


<font color="#ff0000"><strong>        <span class="kwrd">static</span> <span class="kwrd">byte</span>[] buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ReceiveMessage(IAsyncResult ar)
        {
            <span class="kwrd">try</span>
            {
                var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

                <span class="rem">//接收下一个消息(因为这是一个递归的调用，所以这样就可以一直接收消息了）</span>
                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);
            }
            <span class="kwrd">catch</span>(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }</strong></font>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>重新调试起来，看起来的效果如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924321540.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924326557.png" width="678" height="416"></a></p>
<p>我们继续做下面的实验，一步一步地研究Socket通讯中可能遇到的一些问题</p>
<p><strong>请先关闭掉客户端这个程序，而不要关闭服务端程序</strong>，这时会发现一个错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924321573.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924328542.png" width="856" height="454"></a></p>
<p>这个错误很容易理解，因为客户端已经关闭，也就是客户端那个Socket已经不存在了，服务器还继续向它发送消息当然会出错。所以，从可靠性方面的考虑，我们必须在发送消息之前检测Socket的活动状态</p>
<p>&nbsp;</p>
<h1>第七步：检测客户端的活动状态</h1><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback((ar) =&gt;
            {
                <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
                var client = socket.EndAccept(ar);

                <span class="rem">//给客户端发送一个欢迎消息</span>
                client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span>+DateTime.Now.ToString()));


                <span class="rem">//实现每隔两秒钟给服务器发一个消息</span>
                <span class="rem">//这里我们使用了一个定时器</span>
                var timer = <span class="kwrd">new</span> System.Timers.Timer();
                timer.Interval = 2000D;
                timer.Enabled = <span class="kwrd">true</span>;
                timer.Elapsed += (o, a) =&gt;
                {
<strong><font color="#ff0000">                    <span class="rem">//检测客户端Socket的状态</span>
                    <span class="kwrd">if</span>(client.Connected)
                    {
                        <span class="kwrd">try</span>
                        {
                            client.Send(Encoding.Unicode.GetBytes(<span class="str">"Message from server at "</span> + DateTime.Now.ToString()));
                        }
                        <span class="kwrd">catch</span>(SocketException ex)
                        {
                            Console.WriteLine(ex.Message);
                        }
                    }
                    <span class="kwrd">else</span>
                    {
                        timer.Stop();
                        timer.Enabled = <span class="kwrd">false</span>;
                        Console.WriteLine(<span class="str">"Client is disconnected, the timer is stop."</span>);
                    }</font></strong>
                };
                timer.Start();

            }), <span class="kwrd">null</span>);


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>上面代码的逻辑很清楚，但有时候还是会触发那个SocketException。为什么呢？这是因为我们的Timer是每隔两秒钟检查一次，那么就很可能有一种情况，我们检查的时候，它还是连接状态，消息发出去之后，它断开了。这种情况肯定是存在的。所以要用Try..catch的结构</p>
<p>&nbsp;</p>
<p>目前我们实现的场景很简单，服务器只管发消息，客户端只管收消息。但实际工作中，可能希望服务器和客户端都能收发消息。请看下一节</p>
<p>&nbsp;</p>
<h1>第八步：实现双向收发消息</h1>
<p>先看服务端的修改</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback((ar) =&gt;
            {
                <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
                var client = socket.EndAccept(ar);

                <span class="rem">//给客户端发送一个欢迎消息</span>
                client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span>+DateTime.Now.ToString()));


                <span class="rem">//实现每隔两秒钟给服务器发一个消息</span>
                <span class="rem">//这里我们使用了一个定时器</span>
                var timer = <span class="kwrd">new</span> System.Timers.Timer();
                timer.Interval = 2000D;
                timer.Enabled = <span class="kwrd">true</span>;
                timer.Elapsed += (o, a) =&gt;
                {
                    <span class="rem">//检测客户端Socket的状态</span>
                    <span class="kwrd">if</span>(client.Connected)
                    {
                        <span class="kwrd">try</span>
                        {
                            client.Send(Encoding.Unicode.GetBytes(<span class="str">"Message from server at "</span> + DateTime.Now.ToString()));
                        }
                        <span class="kwrd">catch</span>(SocketException ex)
                        {
                            Console.WriteLine(ex.Message);
                        }
                    }
                    <span class="kwrd">else</span>
                    {
                        timer.Stop();
                        timer.Enabled = <span class="kwrd">false</span>;
                        Console.WriteLine(<span class="str">"Client is disconnected, the timer is stop."</span>);
                    }
                };
                timer.Start();


  <strong><font color="#ff0000">              <span class="rem">//接收客户端的消息(这个和在客户端实现的方式是一样的）</span>
                client.BeginReceive(buffer,0,buffer.Length,SocketFlags.None,<span class="kwrd">new</span> AsyncCallback(ReceiveMessage),client);</font></strong>

            }), <span class="kwrd">null</span>);


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }

<strong><font color="#ff0000">        <span class="kwrd">static</span> <span class="kwrd">byte</span>[] buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ReceiveMessage(IAsyncResult ar)
        {
            <span class="kwrd">try</span>
            {
                var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

                <span class="rem">//接收下一个消息(因为这是一个递归的调用，所以这样就可以一直接收消息了）</span>
                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);
            }
            <span class="kwrd">catch</span>(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }</font></strong>
    }
}
</pre>
<p>可以看出来，为了让服务器可以接受消息，其实并不需要什么特别的设计，与客户端接受消息其实可以是一样的
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>再来看看客户端的修改</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//导入的命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;

<span class="kwrd">namespace</span> SocketClient
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个Socket</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//连接到指定服务器的指定端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.connect.aspx</span>
            socket.Connect(<span class="str">"localhost"</span>, 4530);
            Console.WriteLine(<span class="str">"connect to the server"</span>);

            <span class="rem">//实现接受消息的方法</span>

            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginreceive.aspx</span>
            socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);

<strong><font color="#ff0000">            <span class="rem">//接受用户输入，将消息发送给服务器端</span>
            <span class="kwrd">while</span>(<span class="kwrd">true</span>)
            {
                var message = <span class="str">"Message from client : "</span> + Console.ReadLine();
                var outputBuffer = Encoding.Unicode.GetBytes(message);
                socket.BeginSend(outputBuffer, 0, outputBuffer.Length, SocketFlags.None, <span class="kwrd">null</span>, <span class="kwrd">null</span>);
            }</font></strong>

        }


        <span class="kwrd">static</span> <span class="kwrd">byte</span>[] buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ReceiveMessage(IAsyncResult ar)
        {
            <span class="kwrd">try</span>
            {
                var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

                <span class="rem">//接收下一个消息(因为这是一个递归的调用，所以这样就可以一直接收消息了）</span>
                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);
            }
            <span class="kwrd">catch</span>(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>我在这里做了一个死循环，用户可以不断地输入，这些消息会被发送给服务器。如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924325194.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924337212.png" width="682" height="481"></a></p>
<p>【备注】因为服务器每隔两秒钟会发送新消息过来，所以在输入的时候，动作要稍快一点啦</p>
<p>&nbsp;</p>
<p>本文最后探讨一个问题，就是如何让我们的服务器可以支持多个客户端</p>
<p>&nbsp;</p>
<h1>第九步：支持多个客户端</h1>
<p>这个步骤只需要修改服务端程序即可</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="rem">//额外导入的两个命名空间</span>
<span class="kwrd">using</span> System.Net.Sockets;
<span class="kwrd">using</span> System.Net;

<span class="kwrd">namespace</span> SocketServer
{
    <span class="kwrd">class</span> Program
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Socket Server 演示</span>
        <span class="rem">/// 作者：陈希章</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;&lt;/param&gt;</span>
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span>
            var socket = <span class="kwrd">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            <span class="rem">//将该socket绑定到主机上面的某个端口</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.bind.aspx</span>
            socket.Bind(<span class="kwrd">new</span> IPEndPoint(IPAddress.Any, 4530));

            <span class="rem">//启动监听，并且设置一个最大的队列长度</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.listen(v=VS.100).aspx</span>
            socket.Listen(4);

            <span class="rem">//开始接受客户端连接请求</span>
            <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.beginaccept.aspx</span>
       <font color="#ff0000"><strong>     socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback(ClientAccepted), socket);</strong></font>


            Console.WriteLine(<span class="str">"Server is ready!"</span>);
            Console.Read();
        }


<strong><font color="#ff0000">        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ClientAccepted(IAsyncResult ar)
        {

            var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

            <span class="rem">//这就是客户端的Socket实例，我们后续可以将其保存起来</span>
            var client = socket.EndAccept(ar);

            <span class="rem">//给客户端发送一个欢迎消息</span>
            client.Send(Encoding.Unicode.GetBytes(<span class="str">"Hi there, I accept you request at "</span> + DateTime.Now.ToString()));


            <span class="rem">//实现每隔两秒钟给服务器发一个消息</span>
            <span class="rem">//这里我们使用了一个定时器</span>
            var timer = <span class="kwrd">new</span> System.Timers.Timer();
            timer.Interval = 2000D;
            timer.Enabled = <span class="kwrd">true</span>;
            timer.Elapsed += (o, a) =&gt;
            {
                <span class="rem">//检测客户端Socket的状态</span>
                <span class="kwrd">if</span>(client.Connected)
                {
                    <span class="kwrd">try</span>
                    {
                        client.Send(Encoding.Unicode.GetBytes(<span class="str">"Message from server at "</span> + DateTime.Now.ToString()));
                    }
                    <span class="kwrd">catch</span>(SocketException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
                <span class="kwrd">else</span>
                {
                    timer.Stop();
                    timer.Enabled = <span class="kwrd">false</span>;
                    Console.WriteLine(<span class="str">"Client is disconnected, the timer is stop."</span>);
                }
            };
            timer.Start();


            <span class="rem">//接收客户端的消息(这个和在客户端实现的方式是一样的）</span>
            client.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), client);

            <span class="rem">//准备接受下一个客户端请求</span>
            socket.BeginAccept(<span class="kwrd">new</span> AsyncCallback(ClientAccepted), socket);
        }</font></strong>

        <span class="kwrd">static</span> <span class="kwrd">byte</span>[] buffer = <span class="kwrd">new</span> <span class="kwrd">byte</span>[1024];

        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> ReceiveMessage(IAsyncResult ar)
        {

            <span class="kwrd">try</span>
            {
                var socket = ar.AsyncState <span class="kwrd">as</span> Socket;

                <span class="rem">//方法参考：http://msdn.microsoft.com/zh-cn/library/system.net.sockets.socket.endreceive.aspx</span>
                var length = socket.EndReceive(ar);
                <span class="rem">//读取出来消息内容</span>
                var message = Encoding.Unicode.GetString(buffer, 0, length);
                <span class="rem">//显示消息</span>
                Console.WriteLine(message);

                <span class="rem">//接收下一个消息(因为这是一个递归的调用，所以这样就可以一直接收消息了）</span>
                socket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, <span class="kwrd">new</span> AsyncCallback(ReceiveMessage), socket);
            }
            <span class="kwrd">catch</span>(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>最后调试起来看到的效果如下图</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924343690.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201109/201109100924345392.png" width="686" height="651"></a></p>
<p>&nbsp;</p>



<p>本文源代码，可以通过这里下载 <a title="http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar" href="http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar">http://files.cnblogs.com/chenxizhang/SocketWorkshop.rar</a></p>]]></description></item><item><title>在Silverlight中对多个异步任务的调用</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/30/2159124.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 30 Aug 2011 01:27:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/30/2159124.html</guid><description><![CDATA[<p>这是一个常见的问题，由于Silverlight只支持异步调用后台的服务，而如果有多个任务的话，可能就很麻烦，往往就是要在一个异步任务结束事件中去调用另外一个任务，以此类推。典型的问题就是，代码很复杂，而且几乎很难维护。看看下面的代码吧</p><pre class="csharpcode">            <span class="rem">//传统的多个异步任务的调用方法，必须是一层一层嵌套的方式</span>
            
            var proxy = <span class="kwrd">new</span> ServiceReference1.WebService1SoapClient();
            proxy.Endpoint.Address = <span class="kwrd">new</span> System.ServiceModel.EndpointAddress(
                <span class="kwrd">new</span> Uri(App.Current.Host.Source, <span class="str">"../WebService1.asmx"</span>));

            proxy.HelloWorldCompleted += (o, a) =&gt;
            {
                
                proxy.GetEmployeeCompleted += (o1, a1) =&gt;
                {
                    proxy.GetCustomersCompleted += (o2, a1) =&gt;
                    {

                    };
                    proxy.GetCustomersAsync();
                };

                proxy.GetEmployeeAsync();
            };
            proxy.HelloWorldAsync();</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>为了解决这个问题，我自己也想过一些办法，同时参考了<a href="http://www.cnblogs.com/beginor/">张志敏</a>的如下文章</p>
<p><a href="http://www.cnblogs.com/beginor/archive/2010/12/24/1915910.html">http://www.cnblogs.com/beginor/archive/2010/12/24/1915910.html</a></p>
<p>&nbsp;</p>
<p>这篇文章提供了一个不错的思路。这篇文章的评论中，有朋友也提到了Reactive Framework，我看了看，还没有找到很好的应用方法。这个Framework是一个很强大的东西，但在本文讨论的场景中具体该如何应用，如果有这方面研究的朋友，请不吝赐教</p>
<p>&nbsp;</p>
<p>在这篇文章提供的简单模型基础上，我做了一些修改，并且也增加了一些更加实用的特性。共享出来给大家参考</p>
<p>&nbsp;</p>
<h1>添加和改进的功能主要是：</h1>
<p>1.使用更加便捷（原先是用IEnumerator去构造Runner，现在提供了更多的支持，可以是一个Array,也可以是一个List等等，因为我们很多时候任务是动态构造出来的）</p>
<p>2.提供了任务结果反馈（ActionResult)的功能</p>
<p>3.提供了任务之间约束的功能,在每个任务里面都可以得到前置任务的信息</p>
<p>&nbsp;</p>
<h1>如何使用？</h1>
<p>第一步：添加Nuget Package，关于什么是Nuget，请参考 <a href="http://www.cnblogs.com/dudu/archive/2011/07/15/nuget.html">http://www.cnblogs.com/dudu/archive/2011/07/15/nuget.html</a></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110830092641200.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108300926422185.png" width="804" height="609" /></a></p>
<p>第二步，参考如下的范例代码</p>
<p>&nbsp;</p>
<h1>运行效果</h1>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110830092642582.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110830092642615.png" width="1001" height="367" /></a></p>
<p>&nbsp;</p>
<h1>完整源代码</h1>
<p>如果你不想下载包，可以直接复制这个代码进行使用或者修改</p>
<p>&nbsp;</p><pre class="csharpcode"><font class="Apple-style-span" color="#0000ff"><div class="cnblogs_code"><div><span style="color: #0000FF;">using</span><span style="color: #000000;">&nbsp;System;<br /></span><span style="color: #0000FF;">using</span><span style="color: #000000;">&nbsp;System.Collections.Generic;<br /></span><span style="color: #0000FF;">using</span><span style="color: #000000;">&nbsp;System.Linq;<br /></span><span style="color: #008000;">/*</span><span style="color: #008000;"><br />&nbsp;*&nbsp;这个设计针对在Silverlight中经常需要对多个远程服务进行调用，而且我们可能需要让这些任务之间有固定的顺序，同时还希望能够在任务之间传递任务状态,还支持进度汇报的功能<br />&nbsp;*&nbsp;作者：陈希章<br />&nbsp;*&nbsp;时间：2011年8月30日<br />&nbsp;*&nbsp;反馈：ares@xizhang.com<br />&nbsp;</span><span style="color: #008000;">*/</span><span style="color: #000000;"><br /><br /></span><span style="color: #0000FF;">#region</span><span style="color: #000000;">&nbsp;Sample&nbsp;Code</span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/第一个任务</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">var&nbsp;task&nbsp;=&nbsp;new&nbsp;AsyncAction("Task&nbsp;1");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">task.SetAction(()&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;proxy&nbsp;=&nbsp;new&nbsp;ServiceReference1.WebService1SoapClient();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.Endpoint.Address&nbsp;=&nbsp;new&nbsp;System.ServiceModel.EndpointAddress(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Uri(App.Current.Host.Source,&nbsp;"../WebService1.asmx"));<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.HelloWorldCompleted&nbsp;+=&nbsp;(o,&nbsp;a)&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.ActionResult.Message&nbsp;=&nbsp;"Test&nbsp;test";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.ActionResult.Result&nbsp;=&nbsp;a.Result;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.ActionResult.Status&nbsp;=&nbsp;ActionStatus.Success;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.OnCompleted();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;};<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.HelloWorldAsync();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">},&nbsp;true);</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/第二个任务</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">var&nbsp;task2&nbsp;=&nbsp;new&nbsp;AsyncAction("Task&nbsp;2");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">task2.SetAction(()&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;proxy&nbsp;=&nbsp;new&nbsp;ServiceReference1.WebService1SoapClient();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.Endpoint.Address&nbsp;=&nbsp;new&nbsp;System.ServiceModel.EndpointAddress(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Uri(App.Current.Host.Source,&nbsp;"../WebService1.asmx"));<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.HelloWorldCompleted&nbsp;+=&nbsp;(o,&nbsp;a)&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task2.ActionResult.Message&nbsp;=&nbsp;"Test&nbsp;test";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task2.ActionResult.Result&nbsp;=&nbsp;a.Result;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task2.ActionResult.Status&nbsp;=&nbsp;ActionStatus.Success;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task2.OnCompleted();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;};<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;proxy.HelloWorldAsync();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">},&nbsp;true);</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/构造Runner</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">var&nbsp;runner&nbsp;=&nbsp;new&nbsp;AsyncActionRunner(new[]&nbsp;{&nbsp;task,&nbsp;task2&nbsp;});</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/注册完成事件</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">runner.Completed&nbsp;+=&nbsp;(o,&nbsp;a)&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">将界面设置为空闲<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;busyIndicator.IsBusy&nbsp;=&nbsp;false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">显示所有任务的执行结果<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;dgResult.ItemsSource&nbsp;=&nbsp;runner.TaskResults;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">};<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">runner.ProgressChanged&nbsp;+=&nbsp;(o,&nbsp;a)&nbsp;=&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;busyIndicator.BusyContent&nbsp;=&nbsp;string.Format("Current&nbsp;Step&nbsp;:{0},&nbsp;Percent:{1:p},&nbsp;Name:{2},Status:{3}",&nbsp;a.Current,&nbsp;a.Percent,&nbsp;a.ActionResult.TaskName,&nbsp;a.ActionResult.Status);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">};</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/将界面设置为忙碌</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">busyIndicator.IsBusy&nbsp;=&nbsp;true;</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">/执行</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">runner.Execute();</span><span style="color: #008000;"><br /></span><span style="color: #0000FF;">#endregion</span><span style="color: #000000;"><br /><br /><br /></span><span style="color: #0000FF;">namespace</span><span style="color: #000000;">&nbsp;System<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;这个枚举记录了任务的状态，默认为Ready<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">enum</span><span style="color: #000000;">&nbsp;ActionStatus<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ready,</span><span style="color: #008000;">//</span><span style="color: #008000;">准备好，如果最后检查仍然为这个状态，则通常表示该任务被跳过了</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Success,</span><span style="color: #008000;">//</span><span style="color: #008000;">成功</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Failure,</span><span style="color: #008000;">//</span><span style="color: #008000;">失败</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Completed</span><span style="color: #008000;">//</span><span style="color: #008000;">完成</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;这个记录了任务的结果<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">class</span><span style="color: #000000;">&nbsp;ActionResult<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ActionResult()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Status&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;ActionStatus.Ready;</span><span style="color: #008000;">//</span><span style="color: #008000;">默认为ready</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartTime&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;DateTime.Now;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;任务名称<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;TaskName&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;状态<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ActionStatus&nbsp;Status&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;消息<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;Message&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;任务结果<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">object</span><span style="color: #000000;">&nbsp;Result&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;开始时间<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;DateTime&nbsp;StartTime&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;结束时间<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;DateTime&nbsp;EndTime&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;异步任务的接口<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">interface</span><span style="color: #000000;">&nbsp;IAsyncAction<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">void</span><span style="color: #000000;">&nbsp;Execute();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">event</span><span style="color: #000000;">&nbsp;EventHandler&nbsp;Completed;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionResult&nbsp;PreActionResult&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionResult&nbsp;ActionResult&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;TaskName&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;异步任务的实现类型<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">class</span><span style="color: #000000;">&nbsp;AsyncAction&nbsp;:&nbsp;IAsyncAction<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;AsyncAction(</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;name):</span><span style="color: #0000FF;">this</span><span style="color: #000000;">()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskName&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;AsyncAction()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionResult&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">new</span><span style="color: #000000;">&nbsp;ActionResult();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">bool</span><span style="color: #000000;">&nbsp;AutoComplete&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">false</span><span style="color: #000000;">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;Action&nbsp;Action&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;设置要执行的操作<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;param&nbsp;name="action"&gt;</span><span style="color: #008000;">操作</span><span style="color: #808080;">&lt;/param&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;param&nbsp;name="autoComplete"&gt;</span><span style="color: #008000;">是否自动完成</span><span style="color: #808080;">&lt;/param&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">void</span><span style="color: #000000;">&nbsp;SetAction(Action&nbsp;action,&nbsp;</span><span style="color: #0000FF;">bool</span><span style="color: #000000;">&nbsp;autoComplete)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Action&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;action;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoComplete&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;autoComplete;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">virtual</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">void</span><span style="color: #000000;">&nbsp;Execute()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(Action&nbsp;</span><span style="color: #000000;">!=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">null</span><span style="color: #000000;">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionResult.StartTime&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;DateTime.Now;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Action();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(</span><span style="color: #000000;">!</span><span style="color: #000000;">AutoComplete)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnCompleted();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">event</span><span style="color: #000000;">&nbsp;EventHandler&nbsp;Completed;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">void</span><span style="color: #000000;">&nbsp;OnCompleted()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;completed&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">.Completed;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(completed&nbsp;</span><span style="color: #000000;">!=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">null</span><span style="color: #000000;">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;completed(</span><span style="color: #0000FF;">this</span><span style="color: #000000;">,&nbsp;EventArgs.Empty);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;前置任务的结果，添加这个功能目的是，可能多个任务之间互相有所依赖，例如某个任务要根据前面任务的情况决定是否执行<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ActionResult&nbsp;PreActionResult&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;当前任务的结果<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ActionResult&nbsp;ActionResult&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;任务名称<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;taskName&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">.Empty;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">string</span><span style="color: #000000;">&nbsp;TaskName<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">return</span><span style="color: #000000;">&nbsp;taskName;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;taskName&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;value;&nbsp;ActionResult.TaskName&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;任务运行器<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">class</span><span style="color: #000000;">&nbsp;AsyncActionRunner<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;AsyncActionRunner()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskResults&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">new</span><span style="color: #000000;">&nbsp;List</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">ActionResult</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">readonly</span><span style="color: #000000;">&nbsp;IEnumerator</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">IAsyncAction</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">&nbsp;_enumerator;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">int</span><span style="color: #000000;">&nbsp;taskCount&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #800080;">0</span><span style="color: #000000;">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">public&nbsp;AsyncActionRunner(IEnumerator&lt;IAsyncAction&gt;&nbsp;enumerator)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;this()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">&nbsp;&nbsp;&nbsp;&nbsp;this._enumerator&nbsp;=&nbsp;enumerator;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #008000;">//</span><span style="color: #008000;">}</span><span style="color: #008000;"><br /></span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;AsyncActionRunner(IList</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">IAsyncAction</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">&nbsp;tasks)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;taskCount&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;tasks.Count();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_enumerator&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;tasks.GetEnumerator();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;完成事件及处理方法<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">event</span><span style="color: #000000;">&nbsp;EventHandler&nbsp;Completed;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;进度发生更改时发生<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">event</span><span style="color: #000000;">&nbsp;EventHandler</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">ProgressEventArgs</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">&nbsp;ProgressChanged;<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;保存所有任务的执行结果<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;List</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">ActionResult</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">&nbsp;TaskResults&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;临时保存的当前任务的执行结果<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;ActionResult&nbsp;tmp&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">null</span><span style="color: #000000;">;<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">private</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">int</span><span style="color: #000000;">&nbsp;index&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #800080;">1</span><span style="color: #000000;">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;执行所有任务<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">void</span><span style="color: #000000;">&nbsp;Execute()<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(</span><span style="color: #0000FF;">this</span><span style="color: #000000;">._enumerator.MoveNext())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;current&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">._enumerator.Current;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;current.ActionResult;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ci&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;index</span><span style="color: #000000;">++</span><span style="color: #000000;">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.Completed&nbsp;</span><span style="color: #000000;">+=</span><span style="color: #000000;">&nbsp;(sender,&nbsp;args)&nbsp;</span><span style="color: #000000;">=&gt;</span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;((IAsyncAction)sender).ActionResult;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.EndTime&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;DateTime.Now;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TaskResults.Add(tmp);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(ProgressChanged&nbsp;</span><span style="color: #000000;">!=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">null</span><span style="color: #000000;">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProgressChanged(</span><span style="color: #0000FF;">this</span><span style="color: #000000;">,&nbsp;</span><span style="color: #0000FF;">new</span><span style="color: #000000;">&nbsp;ProgressEventArgs(ci,&nbsp;(</span><span style="color: #0000FF;">double</span><span style="color: #000000;">)ci&nbsp;</span><span style="color: #000000;">/</span><span style="color: #000000;">&nbsp;taskCount,&nbsp;tmp));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">.Execute();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.PreActionResult&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;tmp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.Execute();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProgressChanged(</span><span style="color: #0000FF;">this</span><span style="color: #000000;">,&nbsp;</span><span style="color: #0000FF;">new</span><span style="color: #000000;">&nbsp;ProgressEventArgs(ci,&nbsp;(</span><span style="color: #0000FF;">double</span><span style="color: #000000;">)ci&nbsp;</span><span style="color: #000000;">/</span><span style="color: #000000;">&nbsp;taskCount,&nbsp;tmp));<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">else</span><span style="color: #000000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #800080;">1</span><span style="color: #000000;">;</span><span style="color: #008000;">//</span><span style="color: #008000;">将进度复位</span><span style="color: #008000;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;completed&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">.Completed;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">if</span><span style="color: #000000;">(completed&nbsp;</span><span style="color: #000000;">!=</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">null</span><span style="color: #000000;">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;completed(</span><span style="color: #0000FF;">this</span><span style="color: #000000;">,&nbsp;EventArgs.Empty);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;summary&gt;</span><span style="color: #008000;"><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;进度事件的参数<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #808080;">///</span><span style="color: #008000;">&nbsp;</span><span style="color: #808080;">&lt;/summary&gt;</span><span style="color: #808080;"><br /></span><span style="color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">class</span><span style="color: #000000;">&nbsp;ProgressEventArgs&nbsp;:&nbsp;EventArgs<br />&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">int</span><span style="color: #000000;">&nbsp;Current&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ActionResult&nbsp;ActionResult&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;ProgressEventArgs(</span><span style="color: #0000FF;">int</span><span style="color: #000000;">&nbsp;current,&nbsp;</span><span style="color: #0000FF;">double</span><span style="color: #000000;">&nbsp;percent,&nbsp;ActionResult&nbsp;result)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">this</span><span style="color: #000000;">.Current&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;current;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionResult&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;result;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Percent&nbsp;</span><span style="color: #000000;">=</span><span style="color: #000000;">&nbsp;percent;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000FF;">public</span><span style="color: #000000;">&nbsp;</span><span style="color: #0000FF;">double</span><span style="color: #000000;">&nbsp;Percent&nbsp;{&nbsp;</span><span style="color: #0000FF;">get</span><span style="color: #000000;">;&nbsp;</span><span style="color: #0000FF;">set</span><span style="color: #000000;">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}</span></div></div></font></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>在Silverlight中为DataGrid控件定制标题行样式实现多行文本</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/27/2155606.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 27 Aug 2011 08:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/27/2155606.html</guid><description><![CDATA[<p>项目中经常会用到DataGrid这个控件，而且有时候会需要在这个控件的标题行中显示多行文本。例如下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108271646092405.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108271646091292.png" width="471" height="110"></a></p> <p>如何实现这样的功能呢？答案是，通过定制HeaderStyle。我经常感慨说，在WPF和Silverlight开发里面，DataBinding和Style，以及Template的机制实在是很厉害，很好用。大家看看下面的例子 吧</p> <p>&nbsp;</p><pre class="csharpcode">        <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid.ColumnHeaderStyle</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Style</span>
                    <span class="attr">TargetType</span><span class="kwrd">="sdk:DataGridColumnHeader"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Setter</span>
                        <span class="attr">Property</span><span class="kwrd">="ContentTemplate"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">ContentControl</span>
                                    <span class="attr">Content</span><span class="kwrd">="{Binding Converter={StaticResource hv}}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ContentControl</span><span class="kwrd">&gt;</span>

                            <span class="kwrd">&lt;/</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">Setter.Value</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid.ColumnHeaderStyle</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid.Columns</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                    <span class="attr">Header</span><span class="kwrd">="Item,项目"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                    <span class="attr">Header</span><span class="kwrd">="Department,部门"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                    <span class="attr">Header</span><span class="kwrd">="Company,公司"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid.Columns</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p> 注意，我们这里定义了一个特殊的Style，设置了ColumnHeader的ContentTemplate。由于用户一般在设置列的标题的时候，是输入一个字符串。我们规定，如果要分多行显示的话，用逗号分开即可。</p>
<p>那么，如何将这个带有逗号的字符串转换为我们想要的标题呢？答案是，使用转换器。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Data;

<span class="kwrd">namespace</span> TechnologySample
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> HeaderConverter:IValueConverter
    {

        <span class="preproc">#region</span> IValueConverter Members

        <span class="kwrd">public</span> <span class="kwrd">object</span> Convert(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            var text = <span class="kwrd">value</span>.ToString();
            var panel = <span class="kwrd">new</span> StackPanel();
            Array.ForEach(text.Split(<span class="str">','</span>), s =&gt; panel.Children.Add(<span class="kwrd">new</span> TextBlock() { Text = s }));
            <span class="kwrd">return</span> panel;
        }

        <span class="kwrd">public</span> <span class="kwrd">object</span> ConvertBack(<span class="kwrd">object</span> <span class="kwrd">value</span>, Type targetType, <span class="kwrd">object</span> parameter, System.Globalization.CultureInfo culture)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="preproc">#endregion</span>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这个代码很好懂，根据传入的一个字符串，我们动态构造了一个StackPanel，并且插入了多个TextBlock</p>
<p>&nbsp;</p>
<p>要在界面中使用这个转换器，只需要将它定义为资源即可</p><pre class="csharpcode">
    <span class="kwrd">&lt;</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">ctrl:HeaderConverter</span>
            <span class="attr">x:Key</span><span class="kwrd">="hv"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ctrl:HeaderConverter</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style></p>]]></description></item><item><title>在Silverlight中将多页内容压缩实现单页打印</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/25/2153519.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 25 Aug 2011 08:59:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/25/2153519.html</guid><description><![CDATA[<p>这是一个小问题，但也有些参考价值，特意整理出来。</p> <p>&nbsp;</p> <p>Silverlight 4开始提供打印的功能，这无疑使得它更加易于在企业级别的项目中使用，而不仅仅是做些演示和单独的一些文件上传之类的小的组件。</p> <p>【备注】在这里，我自己的体会是，Silverlight在企业级应用中还是挺受欢迎的，如果运用得当，也确实可以有所作为。当然，我并不是说它已经很完善了，事实上，它还有不少要改进的，也许下一个版本能更好一些吧。有兴趣的朋友，可以持续关注 <a href="http://www.silverlight.net/">http://www.silverlight.net/</a></p> <p>&nbsp;</p> <p>不扯太远了，今天的问题是，如何将多页的内容压缩到一页打印？</p> <p>Silverlight所提供的打印功能，很简单易用，但也不是那么方便。官方的介绍，请参考这里 <a href="http://msdn.microsoft.com/zh-cn/library/ee671023(v=vs.95).aspx">http://msdn.microsoft.com/zh-cn/library/ee671023(v=vs.95).aspx</a></p> <p>&nbsp;</p> <p>一个最大的问题就是，它不知道我们提供的内容会有几页，我们必须自己去计算，然后告诉它到底有几页。网上已经有些文章，谈论多页打印的问题，例如这篇博客 ， <a href="http://silverlightips.net/2010/03/27/multi-page-printing-in-silverlight/">http://silverlightips.net/2010/03/27/multi-page-printing-in-silverlight/</a></p> <p>&nbsp;</p> <p>我要讨论的是另外一种情况，我知道我们的内容可能会超过一页，但是我不想打印成两页或者三页。假定我们的规则就是，即便内容超过一页，我也要压缩宽度或者高度，让它能打印在一页里面。</p> <p>【备注】我讨论的是一个特定的场景，这个规则在你的公司或者项目中可能不适用。</p> <p>&nbsp;</p> <p>给大家看一个例子就明白了，下图是一个最简单的Silverlight程序，首页上面有一个列表，显示了100行数据。很显然，它会超过一页，按照正常的打印，大致有三页。（A4纸）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108251659019598.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108251659025105.png" width="1028" height="772"></a></p> <p>【备注】今天全世界都在关注一个新闻，乔布斯退休了，帮主的身体也确实是不行了。这个例子里面用到了他的名字，以示尊敬</p> <p>&nbsp;</p> <p>经过代码处理，我让这100行的数据，打印在了一页上面，大致看起来是这样的。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108251659051154.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108251659059692.png" width="917" height="915"></a></p> <p>因为进行了缩放，所以在100%的比例下是看不清楚的，放大之后，可以看到最后一行确实是第100行。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108251659063530.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110825165907432.png" width="917" height="915"></a></p> <p>你可能会说，字体有些变形了嘛，而且也看不清楚呢？是的，我知道。我们讨论的是，如何将多页内容缩放成一页，其中一个重要假设就是，你的内容适合于缩放。现在是从三页缩放到一页当然是这个样子的。但如果从一页多一点压缩到一页，则可能就不太明显了。</p> <p>&nbsp;</p> <p>那么，我们是如何做到的呢？有代码有真相，有兴趣的同学可以照着做一下</p> <p>&nbsp;</p> <h1>页面定义</h1><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">xmlns:toolkit</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">xmlns:System</span><span class="kwrd">="clr-namespace:System;assembly=mscorlib"</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplication2.MainPage"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
    <span class="attr">xmlns:c</span><span class="kwrd">="clr-namespace:SilverlightApplication2"</span><span class="kwrd">&gt;</span>


    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">ScrollViewer</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ListBox</span>
                    <span class="attr">x:Name</span><span class="kwrd">="lstData"</span>
                    <span class="attr">Padding</span><span class="kwrd">="50"</span>
                    <span class="attr">BorderBrush</span><span class="kwrd">="Transparent"</span>
                    <span class="attr">ItemsSource</span><span class="kwrd">="{Binding}"</span><span class="kwrd">&gt;</span>
                    <span class="rem">&lt;!--定义这个转换器，可以对大小进行缩放，默认按照100%呈现--&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">ListBox.RenderTransform</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">ScaleTransform</span>
                            <span class="attr">x:Name</span><span class="kwrd">="st"</span>
                            <span class="attr">ScaleX</span><span class="kwrd">="1"</span>
                            <span class="attr">ScaleY</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ScaleTransform</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">ListBox.RenderTransform</span><span class="kwrd">&gt;</span>

                <span class="kwrd">&lt;/</span><span class="html">ListBox</span><span class="kwrd">&gt;</span>

                <span class="kwrd">&lt;</span><span class="html">Button</span>
                    <span class="attr">Content</span><span class="kwrd">="Print"</span>
                    <span class="attr">x:Name</span><span class="kwrd">="btPrint"</span>
                    <span class="attr">Width</span><span class="kwrd">="100"</span>
                    <span class="attr">Click</span><span class="kwrd">="btPrint_Click"</span>
                    <span class="attr">HorizontalAlignment</span><span class="kwrd">="Left"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>



        <span class="kwrd">&lt;/</span><span class="html">ScrollViewer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>


<h1>后台代码</h1><pre class="csharpcode"><span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Printing;

<span class="kwrd">namespace</span> SilverlightApplication2
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            <span class="rem">//准备的一些测试数据。100行</span>
            <span class="kwrd">this</span>.DataContext = Enumerable.Range(1, 100).Select(i =&gt; <span class="kwrd">new</span> Data()
            {
                ID = i,
                Name = <span class="str">"Steve Paul Jobs"</span>
            });

        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> btPrint_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {

            <span class="rem">//列表的实际高度</span>
            var ah = lstData.ActualHeight;
            <span class="rem">//列表的实际宽度</span>
            var aw = lstData.ActualWidth;
            <span class="rem">//新建一个打印文档</span>
            var doc = <span class="kwrd">new</span> PrintDocument();
            <span class="rem">//处理打印事件</span>
            doc.PrintPage += (o, a) =&gt;
            {
                <span class="rem">//用户选择打印机，最后提供的打印高度</span>
                var h = a.PrintableArea.Height;
                <span class="rem">//用户选择打印机，最后提供的打印宽度</span>
                var w = a.PrintableArea.Width;
                <span class="rem">//如果宽度不够，则要压缩宽度</span>
                <span class="kwrd">if</span>(aw &gt; w) st.ScaleX = w / aw;
                <span class="rem">//如果高度不够，则要压缩高度</span>
                <span class="kwrd">if</span>(ah &gt; h) st.ScaleY = h / ah;
                <span class="rem">//设置打印内容</span>
                a.PageVisual = lstData;

            };
            <span class="rem">//处理打印后事件</span>
            doc.EndPrint += (o, a) =&gt;
            {
                <span class="rem">//将列表重新缩放到100%</span>
                st.ScaleX = 1;
                st.ScaleY = 1;

            };
            <span class="rem">//开始打印</span>
            doc.Print(<span class="kwrd">null</span>);
        }
    }

    <span class="kwrd">class</span> Data
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }


        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> ToString()
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"ID={0:000},Name={1}"</span>, ID, Name);
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这个例子实现的关键就在于，Silverlight和WPF都支持在呈现时通过不同的转换器进行转换。ScaleTransform是其中一种最简单的，可以按照比例缩放。还有可以旋转的，可以变形的等等。这些特性也是Silverlight动画设计中的核心，今天就不展开了。</p>
<p>&nbsp;</p>
<p>上面的代码都有注释，我想已经很清楚了，大家一看就能明白。</p>]]></description></item><item><title>如何在Windows Forms应用程序中实现可组装式(Composite)的架构以及松耦合事件机制</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/15/2139317.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Mon, 15 Aug 2011 03:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/15/2139317.html</guid><description><![CDATA[<p>越来越多人都逐渐了解了在WPF和Silverlight平台上的一个可组装式框架，它的正式名称是Prism，你可以在下面的地址找到很多学习资源</p> <p><a href="http://compositewpf.codeplex.com/">http://compositewpf.codeplex.com/</a></p> <p>&nbsp;</p> <p>下面这里还有一套很不错的视频</p> <p><a href="http://www.tudou.com/playlist/id/9143859">http://www.tudou.com/playlist/id/9143859</a></p> <p>&nbsp;</p> <p>是的，据我对Prism的了解，我觉得它的确是一个很不错的框架，非常好的想法，我不得不说，大家都应该或多或少地对其有所学习和了解。事实上，很多想法，我们或许也有过，或者在以前的项目中实践过，而这是微软官方提供的框架，至少我是从中也学到了很多东西。</p> <p>&nbsp;</p> <p>那么，现在有一个问题就是，既然Prism是个不错的框架，那么能不能用在Windows Forms应用程序里面呢？答案是：不可以。</p> <p>噢。。。先不要着急沮丧，也不要开始扔你桌子上的东西，这并不是什么大不了的事情，世界不会停止转动。你懂的。</p> <p>&nbsp;</p> <p>我这里实现了一套类似的框架，出于演示目的，我大大简化了有关的细节，但大家通过学习也可以了解，并不是那么难，而且这是你自己的Prism，是你通过学习转换为自己的知识。</p> <p>&nbsp;</p> <p>那么，来看看这个演示程序吧</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156219185.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156223296.png" width="409" height="704"></a></p> <p>备注：</p> <ul> <li>Common目录中的东西是每个模块都要公用的，例如对象定义，事件定义等</li> <li>Modules目录中的东西是可以不断添加的模块，例如客户管理，订单管理等</li> <li>MainApplication是主程序</li></ul> <p>我知道有人已经等不及了，那么我们就来看看到底这是一个什么效果吧</p> <p>首先，这是一个可以组装的程序，就是可以通过添加Module来丰富MainApplication的功能，例如下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156226644.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110815115622755.png" width="660" height="278"></a></p> <p>我是将每个模块，都定义一个工具栏按钮。</p> <p>点击之后，两个模块的显示效果如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156223546.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156227657.png" width="660" height="553"></a></p> <p>&nbsp;</p> <p>如果光是这样，也没有什么大不了的。虽然它也很重要，它实现了模块化开发和组装。它们不管在开发阶段，还是在使用阶段，都是没有直接依赖的。</p> <p>然后，我这个例子还实现了松耦合的事件机制，就是：虽然这些模块之间确实没有任何依赖，但是，我们可以实现类似Prism那种EventAggregator机制，也就是说，它们之间仍然可以通讯。</p> <p>&nbsp;</p> <p>例如，<strong>如果这两个模块的窗口都显示出来的情况下，我可能希望在Customer Module里面下了一个订单，能立即在Order Module里面显示出来（请注意，Customer Module里面是不可能直接访问到Order Module的控件的，严格意义上说，它根本不知道是否有Order Module），我们该如何做到呢？</strong></p> <p><strong></strong>&nbsp;</p>  <p>Good question! 哲学告诉我们，问题的答案往往就在问题本身。所以，提问题，提正确的问题，是多么重要</p> <p>答案就是：Event Aggregation。你可以通过范例代码知道这个小精灵是如何工作的。现在，还是让我们来看一下效果吧</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156239053.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156233164.png" width="660" height="553"></a></p> <p>首先，我们在右侧的界面中添加订单信息，然后点击“Create Order”按钮</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156231179.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156233970.png" width="660" height="553"></a></p> <p>我们立即就发现，在左侧的订单列表中添加了一条记录。这就是我们需要的，对吧</p> <p>&nbsp;</p> <p>所以，综上所述，我在这个范例中实现了两个主要功能</p> <p>1.动态组装模块</p> <p>2.模块之间的松耦合事件</p> <p>&nbsp;</p> <p>下面我将大致解释一下内部的原理，大家可以通过下面链接下载到源代码，并且跟我的步骤来进行学习。这些代码并不见得是最优化的，欢迎自行修改</p> <p><a title="http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar" href="http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar">http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar</a></p>  <p>&nbsp;</p> <p>整个架构的核心技术是：MEF,Managed Extensibility Framework <p>这一篇文章并不是普及MEF的基础文章，事实上，我发现有很多这方面的文章，例如 <p><a href="http://zzk.cnblogs.com/s?w=MEF">http://zzk.cnblogs.com/s?w=MEF</a> <p>MEF的官方站点是： <p><a href="http://mef.codeplex.com/">http://mef.codeplex.com/</a> <p>顺便说一下，Prism从4.0开始，也直接支持MEF来做为组装技术，之前它仅支持Unity Container的方式。 <p>&nbsp; <p>我依次来解释一下有关组件以及他们的关系 <h1>Framework项目</h1> <p>这个项目是定义了框架级别的一些接口和类型，例如事件的基类，事件聚合器及其实现。这是一个Class Library项目，需要添加一个特殊的引用：System.ComponentModel.Composition.dll</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156241985.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156243065.png" width="360" height="262"></a></p> <p>&nbsp;</p> <p>IEventAgregator,这是一个接口，因为我们是要实现聚合器，所以需要支持多个事件。这里我们公开了一个方法，GetEvent，可以根据事件类型获取事件的实例</p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> Framework
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 事件聚合器的接口</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">interface</span> IEventAggregator
    {
        T GetEvent&lt;T&gt;();
    }
}
</pre>
<p>EventAggregator:这是对IEventAggregator的具体实现。这里用一个列表保存了所有的事件的实例。</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.ComponentModel.Composition;


<span class="kwrd">namespace</span> Framework
{
    [Export(<span class="kwrd">typeof</span>(IEventAggregator))]
    <span class="kwrd">public</span> <span class="kwrd">class</span> EventAggregator:IEventAggregator
    {

        <span class="kwrd">private</span> List&lt;EventBase&gt; events = <span class="kwrd">new</span> List&lt;EventBase&gt;();


        <span class="preproc">#region</span> IEventAggregator Members

        <span class="kwrd">public</span> T GetEvent&lt;T&gt;()
        {
            <span class="rem">//如果事件存在就返回，否则创建一个新的</span>
            <span class="kwrd">if</span>(events.OfType&lt;T&gt;().FirstOrDefault() == <span class="kwrd">null</span>)
            {
                var evt = Activator.CreateInstance&lt;T&gt;();
                events.Add(evt <span class="kwrd">as</span> EventBase);
            }


            var result = events.OfType&lt;T&gt;().FirstOrDefault();

            <span class="kwrd">return</span> result;

        }

        <span class="preproc">#endregion</span>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>EventBase和CompositePresentationEvent，这两个是定义事件的基类。我们规定，在模块中所有的事件，必须基于ComositePresentationEvent进行实现。这个类型，我们提供了两个方法，Publish是触发某个事件，而Subscribe则是订阅某个事件。</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> Framework
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> EventBase
    {
    }


    <span class="kwrd">public</span> <span class="kwrd">class</span> CompositePresentationEvent&lt;T&gt;:EventBase
        <span class="kwrd">where</span> T:<span class="kwrd">new</span>()
    {
        <span class="rem">//这里保存所有的处理程序</span>
        <span class="kwrd">private</span> List&lt;Action&lt;T&gt;&gt; handlers = <span class="kwrd">new</span> List&lt;Action&lt;T&gt;&gt;();


        <span class="kwrd">public</span> <span class="kwrd">void</span> Subscribe(Action&lt;T&gt; callback)
        {
            <span class="rem">///将处理程序添加到集合中</span>
            handlers.Add(callback);
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> Publish(T parameter)
        {
            <span class="rem">///依次执行所有的处理程序</span>
            handlers.ForEach(a =&gt; a(parameter));
        }

    }
}
</pre><pre class="csharpcode">&nbsp;</pre>
<p>&nbsp;</p>
<h1>Events项目</h1>
<p>这个项目定义了在当前应用程序，所有模块之间需要公用的一些事件定义，它需要引用两个程序集：Framework,和Models</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156243904.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110815115624524.png" width="292" height="248"></a></p>
<p>这里只有一个类型，定义了一个事件类别，CreateOrderEvent，它的基类是CompositePresentationEvent，需要传递的数据是Order</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> Framework;
<span class="kwrd">using</span> Models;

<span class="kwrd">namespace</span> Events
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> CreateOrderEvent:CompositePresentationEvent&lt;Order&gt;
    {
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>Models项目</h1>
<p>这个项目定义了在所有模块之间共享的业务实体类型，例如本例中用到的Order类型，它表示一个订单信息</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Order
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> OrderID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID { get; set; }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> ToString()
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"OrderID:{0}, CustomerID:{1}"</span>, OrderID, CustomerID);
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>接下来，我们看看模块里面应该如何实现</p>
<p>本例中我已经实现了两个简单的模块，他们都是标准的Class Library项目。里面各自包含了一个控件，我让每个控件成为该模块的主界面。</p>
<h1>CustomerModule项目</h1>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156247459.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156253523.png" width="352" height="366"></a></p>
<p>该项目，需要有四个外部引用（换句话说，任何模块都应该需要这四个引用）</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108151156252966.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110815115625458.png" width="392" height="484"></a></p>
<p>我们提供了一个用户控件做为主界面。它看起来像是上面这样。并且它拥有下面这样的后台代码</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ComponentModel.Composition;
<span class="kwrd">using</span> System.Windows.Forms;
<span class="kwrd">using</span> Events;
<span class="kwrd">using</span> Framework;
<span class="kwrd">using</span> Models;


<span class="kwrd">namespace</span> CustomerModule
{
    [Export(<span class="kwrd">typeof</span>(UserControl))]
    [ExportMetadata(<span class="str">"ModuleName"</span>,<span class="str">"Customer Module"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> UserControl1 : UserControl
    {
        <span class="kwrd">public</span> UserControl1()
        {
            InitializeComponent();
        }


        [Import]
        <span class="kwrd">public</span> IEventAggregator EventAggregator { get; set; }

        <span class="kwrd">private</span> <span class="kwrd">void</span> button1_Click(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">if</span>(EventAggregator != <span class="kwrd">null</span>)
            {
                EventAggregator.GetEvent&lt;CreateOrderEvent&gt;().Publish(<span class="kwrd">new</span> Order()
                {
                    OrderID = <span class="kwrd">int</span>.Parse(txtOrderID.Text),
                    CustomerID = txtCustomerID.Text
                });
            }
        }
        
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>首先，我们看到在Class上面，添加了Export和ExportMetadata两个Attribute，这是MEF的核心要素，也就是说，如果这个部件需要能够动态组合，它就必须导出(Export)。</p>
<p>&nbsp;</p>
<p>然后，这里比较特殊的还有那个EventAggregator的属性，我们添加了一个Import的Attribute。这是干什么的呢？我们这里也没有看到谁对它进行赋值。其实，这个属性肯定不是在Module里面赋值的，是由主程序提供的。这也就是MEF的魔力之一：</p>
<ul>
<li>某个部件需要支持动态组装，就提供Export</li>
<li>我需要用到其他一个部件，虽然我不知道谁会给我，我只要声明Import</li></ul>
<p>仔细想想吧，很酷，不是吗？</p>
<p>我们现在是在Customer 模块里，刚才说了，我希望在这个模块里面做的一个操作，能够用某种方式通知其他模块。所以，请注意，在Button1_Click事件中，我们Publish了一个事件，或者称之为触发了某个事件。松耦合在这里表现得淋漓尽致：<strong>你发布事件，你不需要知道谁会响应事件，或者用什么形式响应。</strong></p>
<p>我们再来看一下订单模块吧</p>
<h1>OrderModule项目</h1>
<p>这个项目与CustomerModule有很多相似之处，除了代码。它作为事件的消费者，在启动之后，订阅了CreateOrderEvent事件。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ComponentModel.Composition;
<span class="kwrd">using</span> System.Windows.Forms;
<span class="kwrd">using</span> Events;
<span class="kwrd">using</span> Framework;

<span class="kwrd">namespace</span> OrderModule
{
    [Export(<span class="kwrd">typeof</span>(UserControl))]
    [ExportMetadata(<span class="str">"ModuleName"</span>,<span class="str">"Order Module"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> UserControl1 : UserControl
    {
        <span class="kwrd">public</span> UserControl1()
        {
            InitializeComponent();


            Load += <span class="kwrd">new</span> EventHandler(UserControl1_Load);
        }

        <span class="kwrd">void</span> UserControl1_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {

            EventAggregator.GetEvent&lt;CreateOrderEvent&gt;().Subscribe((o) =&gt;
            {
                listBox1.Items.Add(o);
            });
        }

        [Import]
        <span class="kwrd">public</span> IEventAggregator EventAggregator { get; set; }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>MainApplication项目</h1>
<p>这个项目，实现了动态加载模块，并且将它们绑定在工具栏上面，请参考下面代码和注释吧</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.ComponentModel.Composition;
<span class="kwrd">using</span> System.ComponentModel.Composition.Hosting;
<span class="kwrd">using</span> System.IO;
<span class="kwrd">using</span> System.Windows.Forms;
<span class="kwrd">using</span> Framework;


<span class="kwrd">namespace</span> MainApplication
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Form1 : Form,IPartImportsSatisfiedNotification
    {
        <span class="kwrd">public</span> Form1()
        {
            InitializeComponent();
        }

        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnLoad(EventArgs e)
        {

            <span class="rem">//这里一方面要加载那些模块，还要加载Framework，因为里面有一个默认实现好的EventAggregator</span>
            var catalog = <span class="kwrd">new</span> AggregateCatalog(
                <span class="kwrd">new</span> DirectoryCatalog(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span class="str">"modules"</span>)),<span class="rem">//所有的模块必须放在应用程序根目录下面的modules目录</span>
                <span class="kwrd">new</span> AssemblyCatalog(<span class="kwrd">typeof</span>(EventAggregator).Assembly));

            var container = <span class="kwrd">new</span> CompositionContainer(catalog);

            <span class="rem">//立即组装这个EventAggregator部件,明确地定义</span>
            container.ComposeExportedValue&lt;IEventAggregator&gt;(<span class="kwrd">new</span> EventAggregator());

            <span class="rem">//执行导入</span>
            container.SatisfyImportsOnce(<span class="kwrd">this</span>);


            <span class="kwrd">base</span>.OnLoad(e);

        }

        <span class="rem">//导入多个模块，以及它们的元数据</span>
        [ImportMany(<span class="kwrd">typeof</span>(UserControl),AllowRecomposition=<span class="kwrd">true</span>)]
        <span class="kwrd">public</span> Lazy&lt;UserControl,Dictionary&lt;<span class="kwrd">string</span>,<span class="kwrd">object</span>&gt;&gt;[] Modules { get; set; }

        <span class="preproc">#region</span> IPartImportsSatisfiedNotification Members

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 当导入成功时触发该方法</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">void</span> OnImportsSatisfied()
        {
            <span class="rem">//循环所有模块，并且添加工具栏按钮，绑定事件</span>
            Array.ForEach&lt;Lazy&lt;UserControl, Dictionary&lt;<span class="kwrd">string</span>, <span class="kwrd">object</span>&gt;&gt;&gt;(Modules, l =&gt;
            {
                var toolItem = <span class="kwrd">new</span> ToolStripButton(l.Metadata[<span class="str">"ModuleName"</span>].ToString());
                toolItem.Click += (o, a) =&gt; {
                    var form = <span class="kwrd">new</span> Form();
                    form.Text = toolItem.Text;
                    l.Value.Dock = DockStyle.Fill;
                    form.Controls.Add(l.Value);
                    form.MdiParent = <span class="kwrd">this</span>;
                    form.Show();
                    <span class="kwrd">this</span>.LayoutMdi(MdiLayout.TileVertical);
                };

                toolStrip1.Items.Add(toolItem);
            });
        }

        <span class="preproc">#endregion</span>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>这个项目介绍到这里，有兴趣的朋友，可以研究一下，并且尝试添加一些新模块。欢迎你在这个基础上进行修改，实现真正能满足你需求的框架。</p>
<p>&nbsp;</p>
<p>本文代码，请通过下面地址下载</p>
<p><a title="http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar" href="http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar">http://files.cnblogs.com/chenxizhang/WindowsFormsCompisitionFrameworkSample.rar</a></p>]]></description></item><item><title>SQL Server 2008中的CDC(Change Data Capture)功能使用及释疑</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/10/2133408.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 10 Aug 2011 02:58:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/10/2133408.html</guid><description><![CDATA[<p>CDC（Change Data Capture:<a href="http://technet.microsoft.com/zh-cn/library/bb522489.aspx">变更数据捕获</a>）这个功能是SQL Server 2008企业版的功能，它提供了一种新的机制，对表格数据的更新进行跟踪，在数据仓库的建设过程中，通过这种技术，可以简化从业务数据库导入数据的复杂度。</p> <p>&nbsp;</p> <p>之前我有过两篇文章介绍，最近因为又在和有关客户介绍这方面的应用。发现之前的例子不是那么完整和清楚，特此再整理一篇出来，给大家参考</p> <p>&nbsp;</p> <ul> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2009/04/28/1445297.html">SQL Server 2008 的CDC功能</a></p></li> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2009/05/16/1458388.html">关于CDC功能的答疑</a></p></li></ul> <p>&nbsp;</p> <h1>1. 准备一个数据库，里面准备一个表，Orders</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058187912.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058181259.png" width="268" height="209"></a></p> <h1>2. 启用数据库级别的CDC选项</h1><pre class="csharpcode">--在数据库级别启用CDC功能
<span class="kwrd">EXEC</span> sys.sp_cdc_enable_db <style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style></pre>
<p>这个命令执行完之后，会在系统表里面添加6个表格</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058188195.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058189274.png" width="276" height="229"></a></p>

<p>&nbsp;</p>
<h1>3.在需要做数据捕获的表上面启用CDC选项</h1><pre class="csharpcode"><span class="kwrd">EXEC</span> sys.sp_cdc_enable_table @source_schema=<span class="str">'dbo'</span>,@source_name=<span class="str">'Orders'</span>,@capture_instance=<span class="str">'Orders'</span>,@supports_net_changes=0,@role_name=null</pre>
<p>&nbsp;</p>
<p>【备注】关于这个存储过程的具体用法和有关参数的含义，请参考
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><a href="http://msdn.microsoft.com/en-us/library/bb522475.aspx">http://msdn.microsoft.com/en-us/library/bb522475.aspx</a></p>
<p>&nbsp;</p>
<p>执行之后，会有如下的输出消息</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058198718.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058195653.png" width="650" height="133"></a></p>
<p>这个提示的意思是说，要启动SQL Server Agent。因为CDC功能是要通过一个两个作业来自动化完成的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058196733.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058194225.png" width="310" height="105"></a></p>
<p>&nbsp;</p>
<p>与此同时，执行上面的命令还将在系统表中添加一个表格</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058191717.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058192796.png" width="266" height="230"></a></p>
<p>&nbsp;</p>
<p>还会添加一个函数</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058199732.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058195587.png" width="430" height="454"></a></p>
<p>&nbsp;</p>
<h1>4.插入或者更新数据测试CDC功能</h1><pre class="csharpcode">--插入或者更新数据测试CDC功能
INSERT Orders(CustomerID) <span class="kwrd">VALUES</span>(<span class="str">'Microsoft'</span>);
INSERT Orders(CustomerID) <span class="kwrd">VALUES</span>(<span class="str">'Google'</span>);

<span class="kwrd">UPDATE</span> Orders <span class="kwrd">SET</span> CustomerID=<span class="str">'Yahoo'</span> <span class="kwrd">WHERE</span> OrderID=1
<span class="kwrd">DELETE</span> <span class="kwrd">FROM</span> Orders <span class="kwrd">WHERE</span> OrderID=2</pre>
<p>这个范例插入两行数据，紧接着又对第一行更新，然后还删除了第二行，所以最终只有一行数据</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058196667.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058204159.png" width="459" height="124"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>那么，我们来看看CDC做了什么事情呢？</p><pre class="csharpcode"><span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.Orders_CT</pre>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058203602.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058206078.png" width="908" height="197"></a></p>
<p>我们可以来解释一下上面结果的含义</p>
<p>__$operation=2的情况，表示新增</p>
<p>__$operation=3或者4，表示更新，3表示旧值，4表示新值</p>
<p>__$operation=1的情况，表示删除</p>
<p>&nbsp;</p>
<p>很好理解，不是吗？</p>
<p>但是，我们一般都是需要按照时间范围进行检索，对吧，所以，需要使用下面的语法进行查询</p><pre class="csharpcode">--按照时间范围查询CDC结果
<span class="kwrd">DECLARE</span> @from_lsn <span class="kwrd">BINARY</span>(10),@end_lsn <span class="kwrd">BINARY</span>(10)
<span class="kwrd">DECLARE</span> @start_time DATETIME = <span class="str">'2011-8-10 00:00:00'</span>
<span class="kwrd">DECLARE</span> @end_time DATETIME =<span class="str">'2011-8-11 00:00:00'</span>
<span class="kwrd">SELECT</span> @from_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">'smallest greater than or equal'</span>,@start_time)
<span class="kwrd">SELECT</span> @end_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">' largest less than or equal'</span>,@end_time)
<span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.fn_cdc_get_all_changes_Orders(@from_lsn,@end_lsn,<span class="str">'all'</span>)</pre>
<p>&nbsp;</p>
<p>关于sys.fn_cdc_map_time_to_lsn这个函数，请参考</p>
<p><a href="http://msdn.microsoft.com/en-us/library/bb500137.aspx">http://msdn.microsoft.com/en-us/library/bb500137.aspx</a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>查询的结果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058205521.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058206601.png" width="904" height="183"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>






<p>&nbsp;</p>
<p>如果需要包含更新操作的旧值，则可以以下的语法</p><pre class="csharpcode"><span class="kwrd">DECLARE</span> @from_lsn <span class="kwrd">BINARY</span>(10),@end_lsn <span class="kwrd">BINARY</span>(10)
<span class="kwrd">DECLARE</span> @start_time DATETIME = <span class="str">'2011-8-10 00:00:00'</span>
<span class="kwrd">DECLARE</span> @end_time DATETIME =<span class="str">'2011-8-11 00:00:00'</span>
<span class="kwrd">SELECT</span> @from_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">'smallest greater than or equal'</span>,@start_time)
<span class="kwrd">SELECT</span> @end_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">' largest less than or equal'</span>,@end_time)
<span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.fn_cdc_get_all_changes_Orders(@from_lsn,@end_lsn,<span class="str">'all update old'</span>)</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058206045.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058219600.png" width="887" height="167"></a></p>
<p>&nbsp;</p>
<p>通常，为了方便起见，我们会将这个查询定义为一个存储过程，如下</p><pre class="csharpcode">--定义存储过程来进行查询
<span class="kwrd">CREATE</span> <span class="kwrd">PROC</span> GetOrdersCDCResult(@start_time DATETIME,@end_time DATETIME)
<span class="kwrd">AS</span>
<span class="kwrd">BEGIN</span>
    <span class="kwrd">DECLARE</span> @from_lsn <span class="kwrd">BINARY</span>(10),@end_lsn <span class="kwrd">BINARY</span>(10)
    <span class="kwrd">SELECT</span> @from_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">'smallest greater than or equal'</span>,@start_time)
    <span class="kwrd">SELECT</span> @end_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">' largest less than or equal'</span>,@end_time)
    <span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.fn_cdc_get_all_changes_Orders(@from_lsn,@end_lsn,<span class="str">'all'</span>)
END</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后，每次需要用的时候，就直接调用即可</p><pre class="csharpcode">--执行存储过程
EXEC GetOrdersCDCResult <span class="str">'2011-8-10'</span>,<span class="str">'2011-8-11'</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>5.结合SSIS实现事实表的增量更新</h1>
<p>下面展示了一个SSIS 包的设计，这里面读取CDC的数据，先进行一些查找，然后按照__$operation的值拆分成为三个操作，分别进行插入，更新和删除，这样就可以实现对事实表的增量更新</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058212631.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108101058218487.png" width="762" height="700"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>本文所有的代码如下</p><pre class="csharpcode"><span class="kwrd">USE</span> SampleDatabase
<span class="kwrd">GO</span>

--在数据库级别启用CDC功能
<span class="kwrd">EXEC</span> sys.sp_cdc_enable_db 

--在需要做数据捕获的表格上面启用CDC功能
<span class="kwrd">EXEC</span> sys.sp_cdc_enable_table @source_schema=<span class="str">'dbo'</span>,@source_name=<span class="str">'Orders'</span>,@capture_instance=<span class="str">'Orders'</span>,@supports_net_changes=0,@role_name=<span class="kwrd">null</span>

--插入或者更新数据测试CDC功能
INSERT Orders(CustomerID) <span class="kwrd">VALUES</span>(<span class="str">'Microsoft'</span>);
INSERT Orders(CustomerID) <span class="kwrd">VALUES</span>(<span class="str">'Google'</span>);

<span class="kwrd">UPDATE</span> Orders <span class="kwrd">SET</span> CustomerID=<span class="str">'Yahoo'</span> <span class="kwrd">WHERE</span> OrderID=1
<span class="kwrd">DELETE</span> <span class="kwrd">FROM</span> Orders <span class="kwrd">WHERE</span> OrderID=2

--查询CDC的结果
<span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.Orders_CT


--按照时间范围查询CDC结果
<span class="kwrd">DECLARE</span> @from_lsn <span class="kwrd">BINARY</span>(10),@end_lsn <span class="kwrd">BINARY</span>(10)
<span class="kwrd">DECLARE</span> @start_time DATETIME = <span class="str">'2011-8-10 00:00:00'</span>
<span class="kwrd">DECLARE</span> @end_time DATETIME =<span class="str">'2011-8-11 00:00:00'</span>
<span class="kwrd">SELECT</span> @from_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">'smallest greater than or equal'</span>,@start_time)
<span class="kwrd">SELECT</span> @end_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">' largest less than or equal'</span>,@end_time)
<span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.fn_cdc_get_all_changes_Orders(@from_lsn,@end_lsn,<span class="str">'all'</span>)

--定义存储过程来进行查询
<span class="kwrd">CREATE</span> <span class="kwrd">PROC</span> GetOrdersCDCResult(@start_time DATETIME,@end_time DATETIME)
<span class="kwrd">AS</span>
<span class="kwrd">BEGIN</span>
    <span class="kwrd">DECLARE</span> @from_lsn <span class="kwrd">BINARY</span>(10),@end_lsn <span class="kwrd">BINARY</span>(10)
    <span class="kwrd">SELECT</span> @from_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">'smallest greater than or equal'</span>,@start_time)
    <span class="kwrd">SELECT</span> @end_lsn=sys.fn_cdc_map_time_to_lsn(<span class="str">' largest less than or equal'</span>,@end_time)
    <span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> cdc.fn_cdc_get_all_changes_Orders(@from_lsn,@end_lsn,<span class="str">'all'</span>)
<span class="kwrd">END</span>

--执行存储过程
<span class="kwrd">EXEC</span> GetOrdersCDCResult <span class="str">'2011-8-10'</span>,<span class="str">'2011-8-11'</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>发布了一个新的Silverlight导航项目模板（左侧导航）</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/07/2129935.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 07 Aug 2011 05:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/07/2129935.html</guid><description><![CDATA[<p>在使用Silverlight开发项目的时候，大部分程序应该是都有导航的，Visual Studio自带了一个导航的模板 ，它是将导航链接放在顶部（右上角的），通常如下图所示</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314291446.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314319612.png" width="1003" height="325"></a></p> <p>&nbsp;</p> <p>但有的时候（很多时候）我们可能希望导航菜单是放在左侧的。例如下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314331050.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314357264.png" width="1003" height="325"></a></p> <p>&nbsp;</p> <p>我自己整理过一个模板，今天上传到了微软的visualstudiogallery,有兴趣的童鞋们可以下载来使用</p> <p><a href="http://visualstudiogallery.msdn.microsoft.com/a8c67c90-45dc-49ea-a031-5fe4f42930ae">http://visualstudiogallery.msdn.microsoft.com/a8c67c90-45dc-49ea-a031-5fe4f42930ae</a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314361592.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314379475.png" width="956" height="609"></a></p> <p>&nbsp;</p> <p>你可以直接在Visual Studio中，通过Tools==&gt;Extension Manager…打开下面的窗口下载到</p> <p><strong><font color="#ff0000">【注意】由于visualstudiogallery中的好东西很多，所以请选择“Online Gallery”,并且在右上角输入leftnavigation关键字进行搜索</font></strong></p> <p>&nbsp;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314399310.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314421455.png" width="959" height="664"></a></p> <p>点击“Download”即可，然后点击 “Install”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314447353.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314467155.png" width="445" height="360"></a></p> <p>&nbsp;</p> <p>然后，在 Visual Studio中就可以看到 这个模板 </p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314484939.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314501120.png" width="959" height="664"></a></p> <p>创建好的项目是很简单的，如下图所示 </p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314538937.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314559262.png" width="1028" height="729"></a></p> <p>运行起来看的效果如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071314598833.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071315041336.png" width="1003" height="645"></a></p> <p>接下来，你只需要根据情况修改MainPage中的如下部分，添加需要的HyperlinkButton即可 </p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071315068597.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071315088398.png" width="1028" height="729"></a></p> <p>&nbsp;</p> <p>希望对大家有点帮助吧</p>]]></description></item><item><title>Silverlight:通过模板定制设置日期选择器的格式</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/07/2129869.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 07 Aug 2011 03:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/07/2129869.html</guid><description><![CDATA[<p>这是日前被问到的一个小问题，情况是这样的：Silverlight里面有一个DatePicker控件，它可以让用户选择或者输入日期。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071117416092.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071117414074.png" width="526" height="196"></a></p> <p>这个控件其实很不错，既可选择，又可以输入。</p> <p>但问题就出在这个输入上面，有时候我们可能不希望用户去输入，而是必须选择。但是，我们在DatePicker控件上面却找不到类似于IsReadOnly这样的属性。</p> <p>其实，这样的需求，可以通过修改DatePicker控件的模板来实现。下面是一个示例</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
<strong>    <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span></strong>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplication3.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
<strong>    <span class="attr">xmlns:dp</span><span class="kwrd">="clr-namespace:System.Windows.Controls.Primitives;assembly=System.Windows.Controls"</span></strong><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:DatePicker</span>
            <span class="attr">Height</span><span class="kwrd">="40"</span>
            <span class="attr">Width</span><span class="kwrd">="300"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">sdk:DatePicker.Template</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ControlTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">Border</span>
                        <span class="attr">BorderBrush</span><span class="kwrd">="Black"</span>
                        <span class="attr">BorderThickness</span><span class="kwrd">="1"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">Grid</span>
                            <span class="attr">x:Name</span><span class="kwrd">="Root"</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span>
                                    <span class="attr">Width</span><span class="kwrd">="*"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
                                <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span>
                                    <span class="attr">Width</span><span class="kwrd">="Auto"</span><span class="kwrd">&gt;&lt;/</span><span class="html">ColumnDefinition</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">dp:DatePickerTextBox</span>
                               <strong> <span class="attr">IsReadOnly</span><span class="kwrd">="True"</span></strong>
                                <span class="attr">x:Name</span><span class="kwrd">="TextBox"</span>
                                <span class="attr">Margin</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">dp:DatePickerTextBox</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">Button</span>
                                <span class="attr">Content</span><span class="kwrd">="Pick"</span>
                                <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
                                <span class="attr">x:Name</span><span class="kwrd">="Button"</span>
                                <span class="attr">Margin</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Button</span><span class="kwrd">&gt;</span>
                            <span class="kwrd">&lt;</span><span class="html">Popup</span>
                                <span class="attr">x:Name</span><span class="kwrd">="Popup"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Popup</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">Border</span><span class="kwrd">&gt;</span>

                <span class="kwrd">&lt;/</span><span class="html">ControlTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">sdk:DatePicker.Template</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">sdk:DatePicker</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/20110807111742420.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108071117437846.png" width="541" height="165"></a></p>
<p>&nbsp;</p>
<p>怎么理解上面的定义呢？我们用了一个Grid,里面放了三个控件。这里的关键就在于，包括Grid在内的四个控件的名称都是有规定的，而且控件类型也是规定的。请参考下面的文档就知道了</p>
<p><a href="http://msdn.microsoft.com/en-us/library/cc278067(v=vs.95).aspx">http://msdn.microsoft.com/en-us/library/cc278067(v=vs.95).aspx</a></p>
<p>&nbsp;</p><span style="text-align: left; line-height: normal; widows: 2; text-transform: none; text-indent: 0px; letter-spacing: normal; font-family: ; white-space: normal; orphans: 2; color: ; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" class="Apple-style-span">
<p style="line-height: normal" xmlns="http://www.w3.org/1999/xhtml"><font face="Segoe UI"><font style="background-color: #ffffff; font-size: 9.8pt">The following table lists the named parts for the<span class="Apple-converted-space">&nbsp;</span><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.datepicker(v=vs.95).aspx"><font color="#1364c4">DatePicker</font></a></span><span class="Apple-converted-space">&nbsp;</span>control.</font></font></p>
<div style="height: 20px !important; color: ; clear: both !important" class="caption" xmlns="http://www.w3.org/1999/xhtml"></div>
<div class="tableSection" xmlns="http://www.w3.org/1999/xhtml">
<table style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; border-collapse: collapse; color: #000000; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid" width="1060">
<tbody>
<tr style="vertical-align: top">
<th style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 4px; background-color: rgb(229,229,229); padding-left: 4px; padding-right: 4px; font-family: ; color: ; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 4px" height="21" align="left">
<p style="line-height: normal; text-indent: 0pt"><font face="Segoe UI"><font style="font-size: 15pt">DatePicker Part</font></font></p></th>
<th style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 4px; background-color: rgb(229,229,229); padding-left: 4px; padding-right: 4px; font-family: ; color: ; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 4px" height="21" align="left">
<p style="line-height: normal; text-indent: 0pt"><font face="Segoe UI"><font style="font-size: 15pt">Type</font></font></p></th>
<th style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 4px; background-color: rgb(229,229,229); padding-left: 4px; padding-right: 4px; font-family: ; color: ; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 4px" height="21" align="left">
<p style="line-height: normal; text-indent: 0pt"><font face="Segoe UI"><font style="font-size: 15pt">Description</font></font></p></th></tr>
<tr style="vertical-align: top">
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">Root</font></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.grid(v=vs.95).aspx"><font color="#1364c4" face="Segoe UI">Grid</font></a></span></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">The root of the control.</font></p></td></tr>
<tr style="vertical-align: top">
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">Button</font></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.button(v=vs.95).aspx"><font color="#1364c4" face="Segoe UI">Button</font></a></span></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">The button that opens and closes the<span class="Apple-converted-space">&nbsp;</span><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.calendar(v=vs.95).aspx"><font color="#1364c4">Calendar</font></a></span>.</font></p></td></tr>
<tr style="vertical-align: top">
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">TextBox</font></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.datepickertextbox(v=vs.95).aspx"><font color="#1364c4" face="Segoe UI">DatePickerTextBox</font></a></span></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">The text box that allows you to input a date.</font></p></td></tr>
<tr style="vertical-align: top">
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">Popup</font></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.popup(v=vs.95).aspx"><font color="#1364c4" face="Segoe UI">Popup</font></a></span></p></td>
<td style="border-bottom: rgb(187,187,187) 1px solid; border-left: rgb(187,187,187) 1px solid; padding-bottom: 9px; line-height: 18px; background-color: rgb(255,255,255); margin: 1px; padding-left: 4px; padding-right: 4px; border-top: rgb(187,187,187) 1px solid; border-right: rgb(187,187,187) 1px solid; padding-top: 9px">
<p style="position: relative; line-height: 18px; margin-top: 0px; text-indent: 0pt; margin-bottom: 0px"><font face="Segoe UI">The popup for the<span class="Apple-converted-space">&nbsp;</span><span><a style="color: ; text-decoration: " href="http://msdn.microsoft.com/en-us/library/system.windows.controls.datepicker(v=vs.95).aspx"><font color="#1364c4">DatePicker</font></a></span><span class="Apple-converted-space">&nbsp;</span>control.</font></p></td></tr></tbody></table></div></span>
<p>&nbsp;</p>
<p>也就是说，这个控件为了支持定制，内部是定制好了所谓的Part，这都是可以替换的，只要名称和类型一样即可。</p>
<p>&nbsp;</p>
<p>从这个例子看来，其他很多控件也是可以定制的，只要参考下面的介绍即可</p>
<p><a href="http://msdn.microsoft.com/en-us/library/cc278075(v=VS.95).aspx">http://msdn.microsoft.com/en-us/library/cc278075(v=VS.95).aspx</a></p>
<p>&nbsp;</p>


<p>所以说，理解模板，对于Silvelight或者WPF开发来说，是很重要的，给大家参考</p>]]></description></item><item><title>有关在SharePoint Server中Infopath表单无法呈现的问题及解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/08/06/2129659.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 06 Aug 2011 12:47:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/08/06/2129659.html</guid><description><![CDATA[<p>今天在我的笔记本电脑上配置基于SharePoint 2010的Forms Service，但是遇到一些问题，就是表单模板上传之后，点击创建后却无法呈现。错误消息如下：</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108062046471967.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108062046496404.png" width="1003" height="645"></a></p> <p>关于这个问题，大致的意思是，可能没有启用状态服务。</p> <p>&nbsp;</p> <p>为了解决这个问题，我参考了下面的文章</p> <p><a title="http://www.nanmu.net/sharepoint2010/sharepoint-2010-english/Lists/Posts/Post.aspx?ID=20" href="http://www.nanmu.net/sharepoint2010/sharepoint-2010-english/Lists/Posts/Post.aspx?ID=20">http://www.nanmu.net/sharepoint2010/sharepoint-2010-english/Lists/Posts/Post.aspx?ID=20</a></p> <p>&nbsp;</p> <p>按照下面的红色标出的命令，依次执行之后，问题已经解决。摘录如下，给有同样问题的朋友参考</p> <p>The form cannot be rendered. This may be due to a misconfiguration of the Microsoft SharePoint Server State Service. For more information, contact your server administrator <p>You may receive this error when trying to publish a page in SharePoint 2010 <p>The form cannot be rendered. This may be due to a misconfiguration of the Microsoft SharePoint Server State Service. For more information, contact your server administrator. <p>Solution:<br>You would need to install the ‘State Service’ via the Configuration wizard in Central Administration or via PowerShell. <p>To configure the State Service by using Windows PowerShell:<br>1. Click Start, Administrative Tools, Windows PowerShell Modules.<br>2. In Windows PowerShell, type <strong><font color="#ff0000">$serviceApp = New-SPStateServiceApplication -Name “State Service”<br></font></strong>3. Create a State Service database and associate it with a service application, by typing <font color="#ff0000"><strong>New-SPStateServiceDatabase -Name “StateServiceDatabase” -ServiceApplication $serviceApp<br></strong></font>4. Create a State Service Application Proxy and associate it with the service application by typing <font color="#ff0000"><strong>New-SPStateServiceApplicationProxy -Name “State Service” -ServiceApplication $serviceApp -DefaultProxyGroup</strong></font><br>(You can use another proxy group if necessary by changing the DefaultProxyGroup parameter)</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>启动之后的State Service</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108062046504079.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201108/201108062046521962.png" width="1165" height="118"></a></p>]]></description></item><item><title>SQL SERVER 数据挖掘中的几个问题（四）：如何实现Web 路径流挖掘</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115643.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 24 Jul 2011 14:38:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115643.html</guid><description><![CDATA[<p>最近与一个客户的开发团队探讨和学习SQL Server的数据挖掘及其应用。有几个比较有意思的问题，整理出来 <p>关于数据挖掘的基本知识和学习资料，可以参考<a href="http://msdn.microsoft.com/zh-cn/library/bb510517.aspx">http://msdn.microsoft.com/zh-cn/library/bb510517.aspx</a> <p>&nbsp; <p>上一篇：<a href="http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115331.html">SQL SERVER 数据挖掘中的几个问题（三）：理解聚类算法和顺序聚类算法</a> <p>&nbsp; <p>上一篇解释了聚类算法和顺序聚类算法，这一篇讲解一个实例，就是我们常说的Web 路径流挖掘分析。Web路径流是让我们发现用户使用网站的习惯的一种表示方式，例如我们想知道用户是先到什么页面，然后再到什么页面，由此我们可以给用户分组，并且根据他们的习惯定制更好的页面导航设计。 <p>按照数据挖掘的基本流程，我们一步一步来做 <p>&nbsp; <h1>1.定义问题：通过分析得到不同用户群使用网站的路径及其规律</h1> <h1>2.准备数据：</h1> <p>为此，我们准备两个表格，分别保存客户信息（如下）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242236555469.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724223657745.png" width="1040" height="784"></a></p> <p>以及客户点击页面的记录表（这里作为演示，我只填写了一些范例数据）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237011461.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724223704608.png" width="1040" height="784"></a></p> <h1>3.建立模型：</h1> <p>准备数据源和数据源视图</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237059919.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237067279.png" width="695" height="569"></a></p> <p>创建挖掘模型。这个业务场景，我们适合用“顺序分析和聚类分析”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237084082.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237091932.png" width="644" height="586"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237115322.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237136029.png" width="644" height="586"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237155515.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237195925.png" width="644" height="586"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237227264.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237265689.png" width="650" height="1014"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237272002.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237299362.png" width="650" height="620"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237309263.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237319097.png" width="650" height="620"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237333949.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237353336.png" width="650" height="620"></a></p> <p>点击“Finish”之后，检查模型的设计</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237362157.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724223737663.png" width="722" height="525"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237381054.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237411695.png" width="726" height="401"></a></p> <h1>4.部署和处理</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237421563.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237434495.png" width="721" height="514"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237455726.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724223747511.png" width="726" height="527"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237481426.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107242237523472.png" width="722" height="534"></a></p> <p>【备注】因为数据不多，所以看到的结果比较简单。有兴趣的朋友可以实际准备一些数据进行分析</p>]]></description></item><item><title>SQL SERVER 数据挖掘中的几个问题（三）：理解聚类算法和顺序聚类算法</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115331.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 24 Jul 2011 05:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115331.html</guid><description><![CDATA[<p>最近与一个客户的开发团队探讨和学习SQL Server的数据挖掘及其应用。有几个比较有意思的问题，整理出来 <p>关于数据挖掘的基本知识和学习资料，可以参考<a href="http://msdn.microsoft.com/zh-cn/library/bb510517.aspx">http://msdn.microsoft.com/zh-cn/library/bb510517.aspx</a> <p>&nbsp; <p>上一篇： <a href="http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115304.html">SQL SERVER 数据挖掘中的几个问题（二）：理解列的用法（Predict和PredictOnly)</a> <p>&nbsp; <p>这一篇我们来探讨一下两个有时候会引起混淆的算法：聚类和顺序聚类 <p>&nbsp; <p>聚类算法是使用非常多的一种算法，它的作用是对数据进行分组，将特征相近的实体组织在一起，以便帮助我们对于目标实体分类决策。典型的情况，例如人口分析，客户分析。 <p>聚类算法大致的效果如下（下面的分类名都可以修改，定义成我们更加容易理解的，例如“金牌客户”，“银牌客户”等等） <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724130051197.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300523752.png" width="1081" height="782"></a> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300525115.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300529542.png" width="1082" height="886"></a> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300531701.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300536685.png" width="1088" height="844"></a>   <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300533587.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300533031.png" width="1096" height="558"></a></p> <p>&nbsp;</p> <p>有关聚类算法，有一个常见的问题就是：<strong><font color="#ff0000">同一个实体会不会出现在不同的类里面呢？也就是说是否有可能会有重叠的情况？</font></strong></p> <p>这个问题的答案是：是否有重叠的情况，取决于算法的设置，默认情况下，是可能重叠的。</p> <p>下面这个算法参数列表中，有一个CLUSTERING_METHOD，默认为1.就是所谓的EM（Expectation Maximization）这种算法，这是允许重叠的。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300546062.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300547981.png" width="624" height="478"></a></p> <p>如果设置为3或者4，则不允许重叠。至于是否可以伸缩（Scalable）表示的是该算法读取数据的规则，如果可伸缩，则表示会先读取50000条记录作为种子进行建模，如果足够，则停止读取。否则继续读取下50000个。而不可伸缩则每次都读取所有的实体。</p> <p>&nbsp;</p> <p>那么，什么是“顺序聚类”呢？其实它的完整名称应该是”Microsoft 顺序分析和聚类分析”，也就是结合了顺序分析和聚类分析的一种特殊的算法。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300547425.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300542408.png" width="644" height="586"></a></p> <p>这个算法建立模型之后，大致看到的效果是下面这样的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300566322.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300582568.png" width="1099" height="912"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300597453.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241300598848.png" width="1105" height="484"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241301001290.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241301006241.png" width="1101" height="385"></a></p> <p>&nbsp;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241301011682.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724130101220.png" width="1102" height="668"></a></p> <p>【备注】这里一定要注意，除了标准的属性之外，顺序聚类会多出来所谓的“Transitions”，这里也就是体现了顺序的概念。并且顺序聚类算法与标准的聚类算法相比，更多出来另外一个专门的图形，请看下图</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241301039565.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/2011072413010355.png" width="1100" height="873"></a></p> <p>&nbsp;</p> <p>关键就在于，这个图你该如何理解呢？我总结这么几点</p> <p><strong><font color="#ff0000">1. 顺序聚类算法，首先它是一个聚类算法，他会对输入的实体进行分组。</font></strong></p> <p><strong><font color="#ff0000">2. 之所以称为顺序聚类，是说它可以在分完组之后，针对这些组的实体的一些行为（主要是与时间有关的行为）进行分析，展示。</font></strong></p> <p><strong><font color="#ff0000">典型的情况有：分析不同客户群体将物品放入购物篮的顺序，分析不同用户群体访问公司网页的点击顺序流。</font></strong></p> <p>&nbsp;</p> <p>上面这个图的举例解释就是：“分类1”的这个组，通常是买了“Road-750”这个产品后，有77%的可能性买”Road Bottle Cage”，然后又有93%的可能性买“Water Bottle”</p>]]></description></item><item><title>SQL SERVER 数据挖掘中的几个问题（二）：理解列的用法（Predict和PredictOnly)</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115304.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 24 Jul 2011 03:45:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115304.html</guid><description><![CDATA[<p>最近与一个客户的开发团队探讨和学习SQL Server的数据挖掘及其应用。有几个比较有意思的问题，整理出来 <p>关于数据挖掘的基本知识和学习资料，可以参考<a href="http://msdn.microsoft.com/zh-cn/library/bb510517.aspx">http://msdn.microsoft.com/zh-cn/library/bb510517.aspx</a> <p>上一篇: <a href="http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115281.html">SQL SERVER 数据挖掘中的几个问题（一）：理解内容类型</a> <p>&nbsp; <p>这是一个小的细节问题,我们在定义挖掘模型的时候,会指定不同的列的用法,基本上有如下几种 <ul> <li>Ignore(忽略）</li> <li>Input（输入）</li> <li>Predict（预测）</li> <li>PredictOnly（仅预测）</li></ul> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144472611.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144473658.png" width="704" height="510"></a></p> <p>前面两个很容易理解，“忽略”就是说这个列不在当前算法中使用，例如某些列在某些算法里面不受支持。而“输入”则是最常见的一种用法，就是说这个列作为算法作为预测分析的输入数据。</p> <p>关键在于如何理解“预测”与“仅预测”</p> <ul> <li>预测：这种列的意思是，该列既作为输入列（输入的数据），也作为输出列（预测的结果）</li> <li>仅预测：该列只作为输出列，不能作为输入列。也就是说它不会作为对其他因素做分析或者预测的因素。</li></ul> <p>这里面有两个主要层面的意思</p> <ul> <li>如果是选择“预测”这种用法，那么这种列可以作为“输入”的性质，对其他列（尤其是其他预测列）产生影响。而“仅预测”这种则是说自己只是仅仅作为预测的目的存在，它本身不能作为预测其他列的前提。</li> <ul> <li>所以，<strong><font color="#ff0000">如果有多个预测列（这在有的时候也是可能的），那么对于某些列，设置为“预测”而不是“仅预测”应该是很有必要的；而对于在模型中只有唯一的预测目标列时，可以设置为“仅预测”来提高模型的准确性和效率。</font></strong></li></ul> <li>在对新数据做预测的时候，我们也可以看到这样的意思</li></ul> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144483102.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144486134.png" width="853" height="452"></a></p> <p>在这种情况下，Bike Buyer这个列，也可以作为输入进行映射</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144488052.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241144487496.png" width="670" height="486"></a></p>]]></description></item><item><title>SQL SERVER 数据挖掘中的几个问题（一）：理解内容类型</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115281.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 24 Jul 2011 03:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/24/2115281.html</guid><description><![CDATA[<p>最近与一个客户的开发团队探讨和学习SQL Server的数据挖掘及其应用。有几个比较有意思的问题，整理出来</p> <p>关于数据挖掘的基本知识和学习资料，可以参考<a href="http://msdn.microsoft.com/zh-cn/library/bb510517.aspx">http://msdn.microsoft.com/zh-cn/library/bb510517.aspx</a></p> <p>&nbsp;</p> <h1>1. 如何理解Continuous（连续）,Discretized（离散化）和Discreted（离散的）的区别</h1> <p>这是对于在数据挖掘结构中，对于内容类型设置的几个常用的值，如下图所示</p> <p>【备注】其实除了这三个，还有其他好多个不同的ContentType，具体的请参考<a href="http://msdn.microsoft.com/zh-cn/library/ms174572.aspx">http://msdn.microsoft.com/zh-cn/library/ms174572.aspx</a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111122605.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724111113588.png" width="644" height="586"></a></p> <p>我的理解是这样的</p> <ul> <li>首先，这个ContentType是指定在挖掘模型中将如何这些属性，而并非说这个属性本身是连续的或者离散的。</li> <li>其次，不同的挖掘算法对于ContentType的支持是不一样的。例如贝叶斯算法就不支持连续的类型。其他一些算法也或多或少会有些自己的限制等</li> <li>如果使用“连续(Continuous)”，则表示这一列的数据，最终可以在分析的时候，按照一定的规则划分一些范围，而不是单一的某个值。典型的连续类型，例如年收入，年龄等。因为年收入的值可能是很多的，如果每一个值都作为一个分析的个体去做，那么会导致太过细枝末节。我们通常在分析的时候，习惯将收入分段，例如1000～30000之间当做一个个体。如果要实现这样的效果，那么年收入就要设置为“连续”。下图是在决策树中看到的一个效果</li></ul> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111136443.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111139475.png" width="388" height="606"></a></p> <ul> <li>那么什么是“离散（Discreted）”的内容类型呢？和“连续”正好相反，它表示将每个数据都作为单一的个体进行分析，如果数据包含有限的几个可选值，则很适合用这种类型。例如性别，职业等等。下图是在贝叶斯算法中看到的一个效果。除了第一个属性“Age”之外，其他的其实都是离散的。</li></ul> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724111113522.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111145788.png" width="700" height="795"></a></p> <ul> <li>那么，什么是离散化（Discretized）的呢？其实上面这个图中看到的Age就是离散化的。为什么这么说呢？首先它肯定不是连续的，因为贝叶斯不支持连续的内容类型，其次它又不是离散的，离散的是将每个数据作为个体，而这里的Age其实是有范围的意思。那么，这样你就大致理解了为什么会有“离散化”这么一个类型了吧？就是说，在某些算法里面，既不支持连续的内容类型，而且你分析的时候，又不希望用离散的内容类型进行分析（因为个体可能很多），那么可以选择将这些数据转换为离散的，这个过程叫离散化。我们来看看是怎么做到的？</li></ul> <p>首先，设置为Discretized，</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111146311.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111144883.png" width="307" height="510"></a></p> <p>然后一定要设置另外两个属性：DiscretizationBucketCount，和DiscretizationMethod,第一个属性表示分成多少组（最多），第二个属性表示要用什么方法分组。这个Method有下面三种选择</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110724111114738.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107241111155722.png" width="120" height="67"></a></p> <p>&nbsp;</p> <p>通过这样的比较，大家应该就能较好地理解这三种内容类型的区别了</p>]]></description></item><item><title>如何为SharePoint 2010中配置Performance Point Service</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/20/2111510.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 20 Jul 2011 04:17:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/20/2111510.html</guid><description><![CDATA[<p>今天在我的笔记本电脑上，要配置一个完整的商务智能（BI）的演示环境，遇到一些小问题，下面将解决的方法记录一下。</p> <p>&nbsp;</p> <p>我们知道微软最新的BI平台是一个完整的端到端的平台，它包含了所有的前后端应用解决方案.通过下面的地址可以了解到微软最新的产品，技术，范例等等</p> <p><a href="http://www.microsoft.com/bi">http://www.microsoft.com/bi</a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216252360.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216256787.png" width="244" height="160"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216255882.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216264769.png" width="244" height="160"></a><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216269719.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110720121626243.png" width="244" height="160"></a></p> <p>&nbsp;</p> <p>我今天在配置的时候,遇到的问题是Performance Point Service（简称PPS)无法正常工作。PPS原先是一个独立的服务器产品，现在已经集成在SharePoint 2010 里面。</p> <p>如果你以后也遇到了这个问题，请按下面的步骤检查</p> <h1>1.确认 PerformancePoint Service Application和Secure Store Service已经启动</h1> <p>System Settings=&gt;Manager services on server</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216276589.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/2011072012162878.png" width="1003" height="653"></a></p> <p>&nbsp;</p> <h1>2.SharePoint Server管理中心中，设置Service application association</h1> <p>Application Management =&gt;Configure service application associations |</p>    <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216288965.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216289455.png" width="1003" height="376"></a></p> <p>点击default，会出来下面的一个窗口，请确认选中了PerformancePoint Service Application和Secure Store Service</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216291898.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216303435.png" width="1003" height="653"></a></p> <h1>3.确保Secure Store Service已经进行了基本的配置</h1> <p>Application Management =&gt;Manager services applications</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216316160.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216317206.png" width="1003" height="653"></a></p> <h1>4.配置PerformancePoint Service</h1> <p>这里的关键是设置Secure Store Service Application和Unattended Service Account</p> <p>Application Management =&gt;Manager services applications</p>    <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216313270.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216328187.png" width="1003" height="653"></a></p> <p>&nbsp;</p> <h1>5. 确保网站集和网站中启用了有关的Features</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216332025.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216343354.png" width="1003" height="653"></a></p> <p>&nbsp;</p> <h1>6.进入BI Center，启动Deshboard Designer</h1> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216352350.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216363090.png" width="1003" height="653"></a></p>  <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216375532.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216377692.png" width="983" height="540"></a></p> <p>这样就可以开始你的PPS之旅了，enjoy <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-openmouthedsmile" alt="Open-mouthed smile" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107201216377135.png"></p>]]></description></item><item><title>自定义Domain Service时遇到实体不能更新的问题及其解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/19/2110979.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 19 Jul 2011 11:56:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/19/2110979.html</guid><description><![CDATA[<p>这是在项目中的一个小问题。我们用到了自定义的Domain Service和自定义Entity，如果仅仅是读取数据，没有任何问题。但如果需要通过双向绑定，实现更新，则可能会遇到一个错误。类似下面这样</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956268170.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956265106.png" width="456" height="256"></a></p> <p>本文将重现这个问题，并分析原因和提供解决方案。</p> <p>&nbsp;</p> <p>【备注】Domain Service看起来很不错，尤其是结合LINQ to Entity的话。但在使用自定义Domain Service时会遇到各种各样的问题，很多问题是让人莫名其妙的。我个人觉得这个设计模型还需要进一步完善的</p> <p>&nbsp;</p> <h1>1. 自定义业务实体</h1> <p>下面这个类型会被用到服务中返回文件类型映射的信息</p><pre class="csharpcode"><span class="kwrd">using</span> System.ComponentModel.DataAnnotations;

<span class="kwrd">namespace</span> SilverlightApplication3.Web
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        [Key]
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        [Editable(<span class="kwrd">true</span>)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        [Editable(<span class="kwrd">true</span>)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>2. 自定义Domain Service</h1><pre class="csharpcode">
<span class="kwrd">namespace</span> SilverlightApplication3.Web
{
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        <span class="kwrd">public</span> IQueryable&lt;Employee&gt; GetEmployees()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,FirstName=<span class="str">"ares"</span>,LastName=<span class="str">"chen"</span>},
                <span class="kwrd">new</span> Employee(){ID=2,FirstName=<span class="str">"bill"</span>,LastName=<span class="str">"gate"</span>}}.AsQueryable();

        }
    }
}


</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h1>3. 客户端的ViewModel</h1><pre class="csharpcode"><span class="kwrd">using</span> System.Collections.ObjectModel;
<span class="kwrd">using</span> Microsoft.Practices.Prism.ViewModel;
<span class="kwrd">using</span> SilverlightApplication3.Web;
<span class="kwrd">using</span> System.ComponentModel;

<span class="kwrd">namespace</span> SilverlightApplication3.ViewModels
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> MainPageViewModel:NotificationObject
    {

        <span class="kwrd">public</span> MainPageViewModel()
        {

            <span class="kwrd">if</span>(DesignerProperties.IsInDesignTool) <span class="kwrd">return</span>;

            var ctx = <span class="kwrd">new</span> SampleDomainContext();
            ctx.Load&lt;Employee&gt;(ctx.GetEmployeesQuery(), (op) =&gt; {
                Employees = <span class="kwrd">new</span> ObservableCollection&lt;Employee&gt;(op.Entities);
            }, <span class="kwrd">true</span>);
        }


        <span class="kwrd">private</span> ObservableCollection&lt;Employee&gt; _Employees;
        <span class="kwrd">public</span> ObservableCollection&lt;Employee&gt; Employees
        {
            get { <span class="kwrd">return</span> _Employees; }
            set
            {
                <span class="kwrd">if</span>(_Employees != <span class="kwrd">value</span>)
                {
                    _Employees = <span class="kwrd">value</span>;
                    RaisePropertyChanged(<span class="str">"Employees"</span>);
                }
            }
        }

    }
}
</pre>
<h1>4. 页面定义</h1><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplication3.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span>
    <span class="attr">xmlns:vm</span><span class="kwrd">="clr-namespace:SilverlightApplication3.ViewModels"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">UserControl.DataContext</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">vm:MainPageViewModel</span><span class="kwrd">&gt;&lt;/</span><span class="html">vm:MainPageViewModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">UserControl.DataContext</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span>
        <span class="attr">Margin</span><span class="kwrd">="20"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                <span class="attr">Text</span><span class="kwrd">="Employee List"</span>
                <span class="attr">FontSize</span><span class="kwrd">="20"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span>
                <span class="attr">Margin</span><span class="kwrd">="10"</span>
                <span class="attr">ItemsSource</span><span class="kwrd">="{Binding Employees}"</span>
                <span class="attr">AutoGenerateColumns</span><span class="kwrd">="False"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid.Columns</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                        <span class="attr">Binding</span><span class="kwrd">="{Binding ID}"</span>
                        <span class="attr">Header</span><span class="kwrd">="ID"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                        <span class="attr">Binding</span><span class="kwrd">="{Binding FirstName,Mode=TwoWay}"</span>
                        <span class="attr">Header</span><span class="kwrd">="FirstName"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">sdk:DataGridTextColumn</span>
                        <span class="attr">Binding</span><span class="kwrd">="{Binding LastName,Mode=TwoWay}"</span>
                        <span class="attr">Header</span><span class="kwrd">="LastName"</span><span class="kwrd">&gt;&lt;/</span><span class="html">sdk:DataGridTextColumn</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid.Columns</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h1>5. 测试运行</h1>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956266501.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956263436.png" width="1003" height="328"></a></p>
<p>读取数据是没有问题的，但是如果我们去编辑FirstName或者LastName，就会发生如下的错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956266468.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956273088.png" width="995" height="364"></a></p>
<p>这个错误确实让人看得云里雾里的。不是吗？你绝不会想到是要像下面这样解决</p>
<p>&nbsp;</p>
<h1>6. 添加一个Updatexxxx方法，使得Employee这个EntitySet可以被编辑</h1>
<p>解决方案居然是要为Employee这个类型，添加一个特殊的方法，用Update做为前缀。看下面的例子</p><pre class="csharpcode">
<span class="kwrd">namespace</span> SilverlightApplication3.Web
{
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        <span class="kwrd">public</span> IQueryable&lt;Employee&gt; GetEmployees()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,FirstName=<span class="str">"ares"</span>,LastName=<span class="str">"chen"</span>},
                <span class="kwrd">new</span> Employee(){ID=2,FirstName=<span class="str">"bill"</span>,LastName=<span class="str">"gate"</span>}}.AsQueryable();

        }

<strong><font color="#ff0000">        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法用来更新员工</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">void</span> UpdateEmployee(Employee e)
        {
        }</font></strong>

    }
}


</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>当然，也可以不叫UpdateEmployee的名字，但参数必须必须是Employee类型</p>
<p>例如下面这样</p><pre class="csharpcode">
<span class="kwrd">namespace</span> SilverlightApplication3.Web
{
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        <span class="kwrd">public</span> IQueryable&lt;Employee&gt; GetEmployees()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee(){ID=1,FirstName=<span class="str">"ares"</span>,LastName=<span class="str">"chen"</span>},
                <span class="kwrd">new</span> Employee(){ID=2,FirstName=<span class="str">"bill"</span>,LastName=<span class="str">"gate"</span>}}.AsQueryable();

        }


<strong><font color="#ff0000">        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法用来更新员工</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="e"&gt;&lt;/param&gt;</span>
        [Update]
        <span class="kwrd">public</span> <span class="kwrd">void</span> ModifyEmployee(Employee e)
        {
        }</font></strong>
    }
}


</pre>
<h1>7.再次运行测试（客户端代码无需任何修改）</h1>
<p>请注意，第一行的FirstName已经被修改了（由ares改成了mike）</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956274483.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956271418.png" width="1003" height="328"></a></p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>8. 分析问题的根源</h1>
<p>那么，到底发生了什么呢？为什么添加了那个方法就又可以编辑了呢</p>
<p>我们可以打开客户端自动生成的那个文件来看一下，里面有一段代码很特殊</p><pre class="csharpcode">        <span class="kwrd">internal</span> <span class="kwrd">sealed</span> <span class="kwrd">class</span> SampleDomainContextEntityContainer : EntityContainer
        {
            
            <span class="kwrd">public</span> SampleDomainContextEntityContainer()
            {
                <span class="kwrd">this</span>.CreateEntitySet&lt;Employee&gt;(EntitySetOperations.Edit);
            }
        }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>是在这里，在这个内部密封的类型里面，它设置了Employee这个EntitySet是可以编辑的，而其实这个EntitySetOperation是一个枚举，具有下面可用的值</p><pre class="csharpcode"><span class="preproc">#region</span> Assembly System.ServiceModel.DomainServices.Client.dll, v2.0.50727
<span class="rem">// C:\Program Files (x86)\Microsoft SDKs\RIA Services\v1.0\Libraries\Silverlight\System.ServiceModel.DomainServices.Client.dll</span>
<span class="preproc">#endregion</span>

<span class="kwrd">using</span> System;

<span class="kwrd">namespace</span> System.ServiceModel.DomainServices.Client
{
    <span class="rem">// Summary:</span>
    <span class="rem">//     Enumeration of the types of operations permissable on an System.ServiceModel.DomainServices.Client.EntitySet.</span>
    [Flags]
    <span class="kwrd">public</span> <span class="kwrd">enum</span> EntitySetOperations
    {
        <span class="rem">// Summary:</span>
        <span class="rem">//     Only read operations are permitted, no update operations are allowed.</span>
        None = 0,
        <span class="rem">//</span>
        <span class="rem">// Summary:</span>
        <span class="rem">//     New entities may be added</span>
        Add = 1,
        <span class="rem">//</span>
        <span class="rem">// Summary:</span>
        <span class="rem">//     Entities may be updated</span>
        Edit = 2,
        <span class="rem">//</span>
        <span class="rem">// Summary:</span>
        <span class="rem">//     Entities may be removed</span>
        Remove = 4,
        <span class="rem">//</span>
        <span class="rem">// Summary:</span>
        <span class="rem">//     Entities may be added, updated and removed</span>
        All = 7,
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h1>9.题外话：</h1>
<p>我们在使用LINQ to Entity作为Domain Service的数据模型的时候，可能就意识不到这个问题，是因为我们可以在创建Domain Service的时候设置是否允许编辑</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956273022.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107191956274417.png" width="464" height="554"></a></p>
<p>然后自动生成的Domain Service里面就自动具有了Update,Delete,Insert之类的方法，这样就允许这些业务实体支持更新了。</p>]]></description></item><item><title>如何在RIA应用中实现用户授权</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/14/2106767.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 14 Jul 2011 12:46:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/14/2106767.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/archive/2011/07/13/2105204.html">上一篇</a>我讲到了在RIA应用中的身份验证，其实在做一个应用系统的时候，身份验证只是第一步，验证是确认谁可以访问我们的系统。然后授权就是第二步，授权是确认谁可以在系统中做什么事情。</p> <p>那么，接着上面这个例子，我们现在有一个方法如下</p><pre class="csharpcode">        [Query][RequiresAuthentication]
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法返回一些客户名称</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {

            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Customer(){ID=1,Name=<span class="str">"Microsoft"</span>},
                <span class="kwrd">new</span> Customer(){ID=2,Name=<span class="str">"Google"</span>},
                <span class="kwrd">new</span> Customer(){ID=3,Name=<span class="str">"Apple"</span>},
                <span class="kwrd">new</span> Customer(){ID=4,Name=<span class="str">"Facebook"</span>},
                <span class="kwrd">new</span> Customer(){ID=5,Name=<span class="str">"Yahoo"</span>},
                <span class="kwrd">new</span> Customer(){ID=16,Name=<span class="str">"AOL"</span>}
            }.AsQueryable();
        }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这个方法返回了一些客户名称。那么，假设我们希望这个方法的调用者必须在我们的系统里面具有某个角色，例如Sales角色。只有在这个角色里面的用户，我们才授权给他调用该方法。</p>
<p>接下来我就把这个例子继续做下去，添加这部分功能。</p>
<p>&nbsp;</p>
<h1>1. 启用授权</h1>
<p>其实要说起来，要给某个方法进行授权很简单，我们只需要在方面上面添加一个Attribute即可，请注意看下面红色的部分</p><pre class="csharpcode">        [Query][RequiresAuthentication]<strong><font color="#ff0000">[RequiresRole(<span class="str">"Sales"</span>)]</font></strong>
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法返回一些客户名称</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {

            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Customer(){ID=1,Name=<span class="str">"Microsoft"</span>},
                <span class="kwrd">new</span> Customer(){ID=2,Name=<span class="str">"Google"</span>},
                <span class="kwrd">new</span> Customer(){ID=3,Name=<span class="str">"Apple"</span>},
                <span class="kwrd">new</span> Customer(){ID=4,Name=<span class="str">"Facebook"</span>},
                <span class="kwrd">new</span> Customer(){ID=5,Name=<span class="str">"Yahoo"</span>},
                <span class="kwrd">new</span> Customer(){ID=16,Name=<span class="str">"AOL"</span>}
            }.AsQueryable();
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>我们可以先测试一下，现在运行起来会发生什么样的情况？一点都不意外，肯定是要报告错误的，因为我们现在的用户身份没有关联到任何的角色。如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107142046038781.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107142046047012.png" width="920" height="395"></a></p>
<p>&nbsp;</p>
<h1>2. 实现角色管理</h1>
<p>我们需要在服务器端实现角色管理，就是要能够根据用户身份判断他所拥有的角色信息。</p>
<p>为了简单起见，我添加了一个SimpleRoleProvider，而且只重写了其中的一个方法，请注意下面红色的部分</p>
<p>【备注】这里只是做例子，重点是给大家讲它的原理。所以直接用硬编码的方式。</p>
<p>&nbsp;</p><pre class="csharpcode">  <span class="kwrd">public</span> <span class="kwrd">class</span> SimpleRoleProvider : System.Web.Security.RoleProvider
    {

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> AddUsersToRoles(<span class="kwrd">string</span>[] usernames, <span class="kwrd">string</span>[] roleNames)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> ApplicationName
        {
            get
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
            }
            set
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> CreateRole(<span class="kwrd">string</span> roleName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> DeleteRole(<span class="kwrd">string</span> roleName, <span class="kwrd">bool</span> throwOnPopulatedRole)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span>[] FindUsersInRole(<span class="kwrd">string</span> roleName, <span class="kwrd">string</span> usernameToMatch)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span>[] GetAllRoles()
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

<strong><font color="#ff0000">        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span>[] GetRolesForUser(<span class="kwrd">string</span> username)
        {
            <span class="kwrd">if</span>(username == <span class="str">"chenxizhang"</span>)
                <span class="kwrd">return</span> <span class="kwrd">new</span>[] { 
                    <span class="str">"Sales"</span>
                };
            <span class="kwrd">return</span> <span class="kwrd">null</span>;
        }</font></strong>

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span>[] GetUsersInRole(<span class="kwrd">string</span> roleName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> IsUserInRole(<span class="kwrd">string</span> username, <span class="kwrd">string</span> roleName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> RemoveUsersFromRoles(<span class="kwrd">string</span>[] usernames, <span class="kwrd">string</span>[] roleNames)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> RoleExists(<span class="kwrd">string</span> roleName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>如何注册使用这个Provider呢？我们需要修改web.config文件</p>
<p>在system.web里面添加了这么一段</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">roleManager</span> <span class="attr">enabled</span><span class="kwrd">="true"</span> <span class="attr">defaultProvider</span><span class="kwrd">="simple"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">providers</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">clear</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="simple"</span> <span class="attr">type</span><span class="kwrd">="SilverlightRIAAuthenticationSample.Web.SimpleRoleProvider"</span><span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">providers</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">roleManager</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
再次运行程序，我们会发现已经能返回数据了，为什么呢，因为chenxizhang这个用户是Sales角色的，所以他就有权限查询。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107142046051025.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107142046078941.png" width="1003" height="656"></a></p>
<p>这就是在RIA Service中进行授权的简单例子。虽然简单，但已经能够说明问题了。</p>
<p>讲到这里，有很多朋友都理解了。但也许有人会对写这个SimpleRoleProvider感到疑惑，为什么要这么写呢？能不能用数据库里面的信息来授权呢？当然是可以的，在真正的系统中，我是推荐你用数据库来做身份验证和授权的。</p>
<p>&nbsp;</p>
<p>下面有些参考链接</p>
<p><a href="http://msdn.microsoft.com/en-us/library/6e9y4s5t.aspx">http://msdn.microsoft.com/en-us/library/6e9y4s5t.aspx</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/879kf95c.aspx">http://msdn.microsoft.com/en-us/library/879kf95c.aspx</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/2fx93s7w.aspx">http://msdn.microsoft.com/en-us/library/2fx93s7w.aspx</a></p>
<p>&nbsp;</p>
<p>简而言之，其实从ASP.NET 2.0开始就提供了一套标准的服务来完成身份验证，授权，个性化，配置等等功能，而且有一个非常标准的数据库——传说中的“aspnetdb”.</p>
<p>&nbsp;</p>
<h1>3.两个相关问题</h1>
<p>有网友之前问到，如何实现更加动态化的授权呢？我是这么理解的，有两个层面</p>
<ul>
<li>我们有些方法，可能需要根据当前用户的身份，对数据进行过滤。也就是说，其实方法都是可以被用户调用的，只不过每个人调用的结果不一样。这也是一种特殊的授权吧。</li></ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个问题的关键在于，如何在方法里面获取得到当前用户的身份。请参考下面这个代码。既然能得到用户的信息，那么在查询的时候，就可以用这个作为参数传递到数据库进行过滤。这样就实现了刚才所说的需求。</p>
<blockquote><pre class="csharpcode">            var currentUser = <span class="kwrd">this</span>.ServiceContext.User.Identity.Name;</pre></blockquote>
<ul>
<li>有的朋友可能会觉得系统自带的这个RequiresRole属性不够灵活。我之前接触过一个客户，他们的情况是，他们不想将角色名称写死在代码里面。希望能够读取配置文件的方式。这当然也不是说做不到。我下面用一个小例子来演示</li></ul>
<p>首先，我可以定义一个特殊的类型，继承自AuthorizationAttribute </p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
<span class="kwrd">using</span> System.Configuration;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample.Web
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> DynamicRequiresRole:AuthorizationAttribute
    {
        <span class="kwrd">protected</span> <span class="kwrd">override</span> AuthorizationResult IsAuthorized(System.Security.Principal.IPrincipal principal, AuthorizationContext authorizationContext)
        {
            Role = ConfigurationManager.AppSettings[RoleNameInConfig];

            <span class="kwrd">if</span>(principal.IsInRole(Role))
                <span class="kwrd">return</span> AuthorizationResult.Allowed;
            <span class="kwrd">return</span> <span class="kwrd">new</span> AuthorizationResult(<span class="str">"Access deny"</span>);
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个属性指定在配置文件中设置角色的AppSettings的键名</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">string</span> RoleNameInConfig { get; set; }
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这是内部保存的角色信息</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">private</span> <span class="kwrd">string</span> Role { get; set; }



    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>然后，我在配置文件中添加一个设置</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">appSettings</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">key</span><span class="kwrd">="SalesRoleName"</span> <span class="attr">value</span><span class="kwrd">="Sales"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">appSettings</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>接下来，我就可以在方法上面使用这个Attribute了</p><pre class="csharpcode">        [Query][RequiresAuthentication]
        [DynamicRequiresRole(RoleNameInConfig=<span class="str">"SalesRoleName"</span>)]
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法返回一些客户名称</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {
            var currentUser = <span class="kwrd">this</span>.ServiceContext.User.Identity.Name;

            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Customer(){ID=1,Name=<span class="str">"Microsoft"</span>},
                <span class="kwrd">new</span> Customer(){ID=2,Name=<span class="str">"Google"</span>},
                <span class="kwrd">new</span> Customer(){ID=3,Name=<span class="str">"Apple"</span>},
                <span class="kwrd">new</span> Customer(){ID=4,Name=<span class="str">"Facebook"</span>},
                <span class="kwrd">new</span> Customer(){ID=5,Name=<span class="str">"Yahoo"</span>},
                <span class="kwrd">new</span> Customer(){ID=16,Name=<span class="str">"AOL"</span>}
            }.AsQueryable();
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这样就可以完成特殊的授权了。当然我上面只是一个演示，你还可以写更多的逻辑在里面</p>
<p>&nbsp;</p>
<p>这个范例的完整代码，请通过下面的链接下载</p>
<p><a title="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthentication_AuthorizationSample.rar" href="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthentication_AuthorizationSample.rar">http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthentication_AuthorizationSample.rar</a></p>
<p>【备注】这个代码还修正了关于OOB中不能正确进行身份验证的问题</p>]]></description></item><item><title>SQL SERVER本地管理员和SA帐号都无法访问的问题和解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/14/2106673.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 14 Jul 2011 10:07:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/14/2106673.html</guid><description><![CDATA[<p>这几天在讲SQL Server 2008的课程，今天头一天，因为主办方准备的环境是用做好的同一个虚拟机，然后分发到很多台实验用的机器后，用<a href="http://support.microsoft.com/kb/298491/zh-tw">sysprepare</a>这种工具，修改了电脑名称。一早就遇到大家无法登录到SQL Server的问题，不管是用本地管理员，还是SA帐号。</p> <p>&nbsp;</p> <p>我分析下来，本地管理员无法登录的原因就是因为电脑名称修改了之后，现在的本地管理员的SID已经不是修改之前那个本地管理员的SID了，而SQL Server里面其实保存的是SID，并不是用户名称，所以导致他无法登录服务器。而至于用SA帐号无法登录，是因为主办方在准备这个环境的时候，并没有启用混合验证模式。</p> <p>&nbsp;</p> <p>以前也遇到过类似的一个问题，但一下子忘记怎么解决的了。不管怎样，我们还是想办法解决掉了这个问题，参考了下面的博客文章</p> <p><a href="http://blogs.msdn.com/b/raulga/archive/2007/07/12/disaster-recovery-what-to-do-when-the-sa-account-password-is-lost-in-sql-server-2005.aspx">http://blogs.msdn.com/b/raulga/archive/2007/07/12/disaster-recovery-what-to-do-when-the-sa-account-password-is-lost-in-sql-server-2005.aspx</a></p> <p>&nbsp;</p> <p>大致的步骤就是：</p> <ol> <li>用本地管理员登录，停止SQL Server服务</li> <li>修改SQL Server服务的启动参数，在原先的启动参数后面添加 “;-m”（不要带双引号），这是将SQL Server设置进入单用户模式</li> <li>启动SQL Server服务，使用sqlcmd登录到SQL Server服务器</li> <li>执行exec sp_addsvrrolemember ‘<strong><font color="#ff0000">MachineName\Administrator</font></strong>’ ‘sysadmin’;GO;(请注意，红色部分要替换为你的本地管理员帐号）</li> <li>停止SQL Server服务，将原先添加的启动参数“；-m”删除掉</li> <li>启动SQL Server服务</li></ol> <p>建议大家安装SQL Server的时候，还是设置混合验证模式和SA密码，然后要保护好这个密码。</p>]]></description></item><item><title>如何在RIA Service中启用身份验证</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/07/13/2105204.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 13 Jul 2011 05:04:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/07/13/2105204.html</guid><description><![CDATA[<p>本文我将结合一个实例，一步一步地演示，然后在RIA Service中启用身份验证。包括在服务端的设计，和客户端的设计。</p> <p>本文实例源代码，可以通过下面地址下载</p> <p><a title="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar" href="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar">http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar</a></p> <p>&nbsp;</p> <h1>1. 创建项目，并添加一个业务用的Domain Service</h1> <p>作为演示，我们这里写了一个简单的方法</p><pre class="csharpcode"> </pre><pre class="csharpcode"><span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample.Web
{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.Collections.Generic;
    <span class="kwrd">using</span> System.ComponentModel;
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;
    <span class="kwrd">using</span> System.Runtime.Serialization;

    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeDomainService : DomainService
    {
        [Query]
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法返回一些客户名称</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Customer(){ID=1,Name=<span class="str">"Microsoft"</span>},
                <span class="kwrd">new</span> Customer(){ID=2,Name=<span class="str">"Google"</span>},
                <span class="kwrd">new</span> Customer(){ID=3,Name=<span class="str">"Apple"</span>},
                <span class="kwrd">new</span> Customer(){ID=4,Name=<span class="str">"Facebook"</span>},
                <span class="kwrd">new</span> Customer(){ID=5,Name=<span class="str">"Yahoo"</span>},
                <span class="kwrd">new</span> Customer(){ID=16,Name=<span class="str">"AOL"</span>}
            }.AsQueryable();
        }
    }

    [DataContract]
    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer
    {
        [Key][DataMember]
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }
    }


}


</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>





<p>写好之后，分别编译网站项目和Silverlight项目。在Silverlight中应该可以看到一个自动生成的类型</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303175896.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110713130319432.png" width="1028" height="729"></a></p>
<h1>2. 编写客户端代码</h1>
<p>我简单地做了一个界面，用来显示由服务器返回的客户列表</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303192351.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110713130319366.png" width="1028" height="729"></a></p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightRIAAuthenticationSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span>
    <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                <span class="attr">Text</span><span class="kwrd">="Customers List"</span>
                <span class="attr">FontSize</span><span class="kwrd">="40"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">ListBox</span>
                <span class="attr">ItemsSource</span><span class="kwrd">="{Binding}"</span>
                <span class="attr">Padding</span><span class="kwrd">="10"</span> <span class="attr">Margin</span><span class="kwrd">="10"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">ListBox.ItemTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                            <span class="attr">Text</span><span class="kwrd">="{Binding Name}"</span>
                            <span class="attr">FontSize</span><span class="kwrd">="16"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">ListBox.ItemTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">ListBox</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">StackPanel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>同时，编写一些简单的后台代码（直接写在xaml.cs中）</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> SilverlightRIAAuthenticationSample.Web;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> HomeDomainContext();
            var op=ctx.Load&lt;Customer&gt;(ctx.GetCustomersQuery());
            <span class="kwrd">this</span>.DataContext = op.Entities; 
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>运行起来，我们可以看到如下的一个效果</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303211040.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303218498.png" width="1003" height="656"></a></p>
<p>到这里为止，我们就已经实现了一个简单的Silverlight+RIA Service的场景。这不是本文的重点，我们下面要实现的是，在这个设计的基础上添加身份验证的功能。</p>
<p>例如你可以假设一下：假如这个GetCustomers方法，并不是给所有用户都可以调用的，而是需要经过身份验证的用户才可以调用的</p>
<p>&nbsp;</p>
<h1>3. 修改Web.config</h1>
<p>我们需要修改宿主网站的web.config,设置身份验证提供程序，可以选择Forms或者Windows，我们这里选择Forms，就是所谓的表单验证，客户端需要提供一个用户名和密码来进行验证</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303228465.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303232445.png" width="1028" height="729"></a></p>
<p>&nbsp;</p>
<h1>4. 添加一个AuthenticationDomainService</h1>
<p>在网站项目中</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303244887.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303249870.png" width="959" height="664"></a></p>
<p>这个Domain Service不需要做任何修改。但也可以为User类型添加一些特殊的属性（称为Profile Property）,这里先不展开了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303246249.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303242313.png" width="1028" height="729"></a></p>
<p>但是，这里需要添加一个身份验证的提供程序。我写了一个最简单的MemberShipProvider</p>
<p>请注意，SimpleMembershipProvider，只实现一个方法：ValidateUser（请注意代码的底部，红色部分）</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Server.ApplicationServices;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample.Web
{
    [EnableClientAccess]
    <span class="kwrd">public</span> <span class="kwrd">class</span> AuthenticationDomainService : AuthenticationBase&lt;User&gt;
    {
        <span class="rem">// To enable Forms/Windows Authentication for the Web Application, edit the appropriate section of web.config file.</span>
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> User : UserBase
    {
        <span class="rem">// NOTE: Profile properties can be added here </span>
        <span class="rem">// To enable profiles, edit the appropriate section of web.config file.</span>

        <span class="rem">// public string MyProfileProperty { get; set; }</span>
    }

    <span class="kwrd">public</span> <span class="kwrd">class</span> SimpleMembershipProvider : System.Web.Security.MembershipProvider
    {

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> ApplicationName
        {
            get
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
            }
            set
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> ChangePassword(<span class="kwrd">string</span> username, <span class="kwrd">string</span> oldPassword, <span class="kwrd">string</span> newPassword)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> ChangePasswordQuestionAndAnswer(<span class="kwrd">string</span> username, <span class="kwrd">string</span> password, <span class="kwrd">string</span> newPasswordQuestion, <span class="kwrd">string</span> newPasswordAnswer)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUser CreateUser(<span class="kwrd">string</span> username, <span class="kwrd">string</span> password, <span class="kwrd">string</span> email, <span class="kwrd">string</span> passwordQuestion, <span class="kwrd">string</span> passwordAnswer, <span class="kwrd">bool</span> isApproved, <span class="kwrd">object</span> providerUserKey, <span class="kwrd">out</span> System.Web.Security.MembershipCreateStatus status)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> DeleteUser(<span class="kwrd">string</span> username, <span class="kwrd">bool</span> deleteAllRelatedData)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> EnablePasswordReset
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> EnablePasswordRetrieval
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUserCollection FindUsersByEmail(<span class="kwrd">string</span> emailToMatch, <span class="kwrd">int</span> pageIndex, <span class="kwrd">int</span> pageSize, <span class="kwrd">out</span> <span class="kwrd">int</span> totalRecords)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUserCollection FindUsersByName(<span class="kwrd">string</span> usernameToMatch, <span class="kwrd">int</span> pageIndex, <span class="kwrd">int</span> pageSize, <span class="kwrd">out</span> <span class="kwrd">int</span> totalRecords)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUserCollection GetAllUsers(<span class="kwrd">int</span> pageIndex, <span class="kwrd">int</span> pageSize, <span class="kwrd">out</span> <span class="kwrd">int</span> totalRecords)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span> GetNumberOfUsersOnline()
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> GetPassword(<span class="kwrd">string</span> username, <span class="kwrd">string</span> answer)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUser GetUser(<span class="kwrd">string</span> username, <span class="kwrd">bool</span> userIsOnline)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipUser GetUser(<span class="kwrd">object</span> providerUserKey, <span class="kwrd">bool</span> userIsOnline)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> GetUserNameByEmail(<span class="kwrd">string</span> email)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span> MaxInvalidPasswordAttempts
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span> MinRequiredNonAlphanumericCharacters
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span> MinRequiredPasswordLength
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">int</span> PasswordAttemptWindow
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> System.Web.Security.MembershipPasswordFormat PasswordFormat
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> PasswordStrengthRegularExpression
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> RequiresQuestionAndAnswer
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> RequiresUniqueEmail
        {
            get { <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException(); }
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> ResetPassword(<span class="kwrd">string</span> username, <span class="kwrd">string</span> answer)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> UnlockUser(<span class="kwrd">string</span> userName)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> UpdateUser(System.Web.Security.MembershipUser user)
        {
            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();
        }

<font color="#ff0000"><strong>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> ValidateUser(<span class="kwrd">string</span> username, <span class="kwrd">string</span> password)
        {
            <span class="kwrd">return</span> username == <span class="str">"chenxizhang"</span> &amp;&amp; password == <span class="str">"password"</span>;
        }</strong></font>
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>然后，我们还需要修改web.config，指定这个MembershipProvider,请注意下面的粗体部分</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>

<span class="rem">&lt;!--</span>
<span class="rem">  For more information on how to configure your ASP.NET application, please visit</span>
<span class="rem">  http://go.microsoft.com/fwlink/?LinkId=169433</span>
<span class="rem">  --&gt;</span>

<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span> <span class="attr">runAllManagedModulesForAllRequests</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="DomainServiceModule"</span> <span class="attr">preCondition</span><span class="kwrd">="managedHandler"</span>
          <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.DomainServiceHttpModule, System.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">modules</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">validation</span> <span class="attr">validateIntegratedModeConfiguration</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="DomainServiceModule"</span> <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.DomainServiceHttpModule, System.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">authentication</span> <span class="attr">mode</span><span class="kwrd">="Forms"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">authentication</span><span class="kwrd">&gt;</span>

<strong>    <span class="kwrd">&lt;</span><span class="html">membership</span> <span class="attr">defaultProvider</span><span class="kwrd">="simple"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">providers</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">clear</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="simple"</span> <span class="attr">type</span><span class="kwrd">="SilverlightRIAAuthenticationSample.Web.SimpleMembershipProvider"</span><span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">providers</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">membership</span><span class="kwrd">&gt;</span></strong>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
        <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h1>6. 如何在服务器端启用身份验证</h1>
<p>请注意下面代码的修改，在GetCustomers方法上面，我们添加一个RequiresAuthetication的Attribute。</p><pre class="csharpcode"><span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample.Web
{
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.Runtime.Serialization;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;

    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> HomeDomainService : DomainService
    {
        [Query][<strong><font color="#ff0000">RequiresAuthentication</font></strong>]
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 这个方法返回一些客户名称</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Customer(){ID=1,Name=<span class="str">"Microsoft"</span>},
                <span class="kwrd">new</span> Customer(){ID=2,Name=<span class="str">"Google"</span>},
                <span class="kwrd">new</span> Customer(){ID=3,Name=<span class="str">"Apple"</span>},
                <span class="kwrd">new</span> Customer(){ID=4,Name=<span class="str">"Facebook"</span>},
                <span class="kwrd">new</span> Customer(){ID=5,Name=<span class="str">"Yahoo"</span>},
                <span class="kwrd">new</span> Customer(){ID=16,Name=<span class="str">"AOL"</span>}
            }.AsQueryable();
        }
    }

    [DataContract]
    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer
    {
        [Key][DataMember]
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get; set; }
        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }
    }


}

</pre>
<p>到这里为止，服务器端的设计就完成了，我们可以将两个项目都重新生成一下</p>
<p>然后，按下F5,重新运行一下Silverlight程序，不出意外的话，我们会看到下面一个错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303252280.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303255311.png" width="412" height="447"></a></p>
<p>如果想要看到错误消息，可以对代码稍作修改</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> SilverlightRIAAuthenticationSample.Web;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> HomeDomainContext();
            var op = ctx.Load&lt;Customer&gt;(ctx.GetCustomersQuery(), (result) =&gt; {
                <span class="kwrd">if</span>(result.HasError)
                {
                    MessageBox.Show(result.Error.Message);
                    result.MarkErrorAsHandled();
                }
            }, <span class="kwrd">true</span>);
            <span class="kwrd">this</span>.DataContext = op.Entities;
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
再次运行的话，就可以看到如下的消息提供</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110713130325610.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303266641.png" width="909" height="561"></a></p>
<p>事情很清楚了，因为服务端要求要做身份验证，而客户端没有提供有关的用户信息，所以就报告了如上的错误</p>
<p>&nbsp;</p>
<h1>7. 如何在客户端中使用身份验证</h1>
<p>有很多个做法可以实现客户端的身份验证，通常是用一个窗口让用户输入用户名和密码。</p>
<p>为了简单起见，我先用最简单的方法来实现。我们可以修改App.xaml.cs文件</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Client.ApplicationServices;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> App : Application
    {

        <span class="kwrd">public</span> App()
        {
            <span class="kwrd">this</span>.Startup += <span class="kwrd">this</span>.Application_Startup;
            <span class="kwrd">this</span>.Exit += <span class="kwrd">this</span>.Application_Exit;
            <span class="kwrd">this</span>.UnhandledException += <span class="kwrd">this</span>.Application_UnhandledException;

            InitializeComponent();

<strong>            <span class="rem">//创建一个上下文，这是在RIA Service中的一个对象</span>
<font color="#ff0000">            var webcontext = <span class="kwrd">new</span> WebContext();
            webcontext.Authentication = <span class="kwrd">new</span> FormsAuthentication();
            <span class="kwrd">this</span>.ApplicationLifetimeObjects.Add(webcontext);</font></strong>


        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_Startup(<span class="kwrd">object</span> sender, StartupEventArgs e)
        {

<strong><font color="#ff0000">            <span class="rem">//直接使用硬编码的方式进行登录，注意这里是异步的</span>
            var param = <span class="kwrd">new</span> LoginParameters(<span class="str">"chenxizhang"</span>, <span class="str">"password"</span>); 
            WebContext.Current.Authentication.Login(param, (op) =&gt;
            {
                <span class="kwrd">if</span>(op.User != <span class="kwrd">null</span>
                    &amp;&amp; op.User.Identity.IsAuthenticated)
                    <span class="kwrd">this</span>.RootVisual = <span class="kwrd">new</span> MainPage();
                <span class="kwrd">else</span>
                {
                    MessageBox.Show(<span class="str">"Login fail, please try again. "</span>);
                }
            }, <span class="kwrd">null</span>);</font></strong>
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_Exit(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_UnhandledException(<span class="kwrd">object</span> sender, ApplicationUnhandledExceptionEventArgs e)
        {
            <span class="rem">// If the app is running outside of the debugger then report the exception using</span>
            <span class="rem">// the browser's exception mechanism. On IE this will display it a yellow alert </span>
            <span class="rem">// icon in the status bar and Firefox will display a script error.</span>
            <span class="kwrd">if</span>(!System.Diagnostics.Debugger.IsAttached)
            {

                <span class="rem">// NOTE: This will allow the application to continue running after an exception has been thrown</span>
                <span class="rem">// but not handled. </span>
                <span class="rem">// For production applications this error handling should be replaced with something that will </span>
                <span class="rem">// report the error to the website and stop the application.</span>
                e.Handled = <span class="kwrd">true</span>;
                Deployment.Current.Dispatcher.BeginInvoke(<span class="kwrd">delegate</span> { ReportErrorToDOM(e); });
            }
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> ReportErrorToDOM(ApplicationUnhandledExceptionEventArgs e)
        {
            <span class="kwrd">try</span>
            {
                <span class="kwrd">string</span> errorMsg = e.ExceptionObject.Message + e.ExceptionObject.StackTrace;
                errorMsg = errorMsg.Replace(<span class="str">'"'</span>, <span class="str">'\''</span>).Replace(<span class="str">"\r\n"</span>, <span class="str">@"\n"</span>);

                System.Windows.Browser.HtmlPage.Window.Eval(<span class="str">"throw new Error(\"Unhandled Error in Silverlight Application "</span> + errorMsg + <span class="str">"\");"</span>);
            }
            <span class="kwrd">catch</span>(Exception)
            {
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>然后，再运行程序，我们就可以看到查询结果了</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303268559.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303262114.png" width="1003" height="368"></a></p>









<p>这就表示，我们已经登录成功了，所有后续代码就生效了。</p>
<p>除了上面那种用代码方式在App类型的构造器实例化身份验证方式之外，还可以通过下面这样修改xaml来实现</p>
<p>【备注】关于ApplicationLifetimeObjects，这是WPF和Silverlight的一个特殊功能，可以将一个对象在整个应用程序生命周期里面都有效，相当于是全局的对象。有兴趣可以参考<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.application.applicationlifetimeobjects(v=vs.95).aspx">这里</a>的说明</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Application</span> <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
             <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span> 
             <span class="attr">x:Class</span><span class="kwrd">="SilverlightRIAAuthenticationSample.App"</span>
             <span class="attr">xmlns:local</span><span class="kwrd">="clr-namespace:SilverlightRIAAuthenticationSample"</span>
             <span class="attr">xmlns:appsvc</span><span class="kwrd">="clr-namespace:System.ServiceModel.DomainServices.Client.ApplicationServices;assembly=System.ServiceModel.DomainServices.Client.Web"</span>
             <span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Application.Resources</span><span class="kwrd">&gt;</span>
        
    <span class="kwrd">&lt;/</span><span class="html">Application.Resources</span><span class="kwrd">&gt;</span>
<strong>    <span class="kwrd">&lt;</span><span class="html">Application.ApplicationLifetimeObjects</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">local:WebContext</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">local:WebContext.Authentication</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">appsvc:FormsAuthentication</span><span class="kwrd">&gt;&lt;/</span><span class="html">appsvc:FormsAuthentication</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">local:WebContext.Authentication</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">local:WebContext</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Application.ApplicationLifetimeObjects</span><span class="kwrd">&gt;</span></strong>
<span class="kwrd">&lt;/</span><span class="html">Application</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h1>8. 实现用户登录窗口</h1>
<p>接下来，我们实现一个简单的用户登录窗口吧。假设我们希望任何用户在使用这个程序之前，必须首先要登录</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110713130327445.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303272605.png" width="1028" height="729"></a></p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">controls:ChildWindow</span>
    <span class="attr">x:Class</span><span class="kwrd">="SilverlightRIAAuthenticationSample.LoginWindow"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:controls</span><span class="kwrd">="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls"</span>
    <span class="attr">Width</span><span class="kwrd">="445"</span>
    <span class="attr">Height</span><span class="kwrd">="227"</span>
    <span class="attr">Title</span><span class="kwrd">="LoginWindow"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span>
        <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span>
        <span class="attr">Margin</span><span class="kwrd">="2"</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBlock"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="FontSize"</span>
                    <span class="attr">Value</span><span class="kwrd">="14"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="HorizontalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Right"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>

            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="TextBox"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="VerticalAlignment"</span>
                    <span class="attr">Value</span><span class="kwrd">="Center"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Height"</span>
                    <span class="attr">Value</span><span class="kwrd">="23"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Style</span>
                <span class="attr">TargetType</span><span class="kwrd">="CheckBox"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">Setter</span>
                    <span class="attr">Property</span><span class="kwrd">="Margin"</span>
                    <span class="attr">Value</span><span class="kwrd">="5"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.Resources</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span>
                <span class="attr">Width</span><span class="kwrd">="150*"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span>
                <span class="attr">Width</span><span class="kwrd">="273*"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span>
                <span class="attr">Height</span><span class="kwrd">="40"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span>
                <span class="attr">Height</span><span class="kwrd">="40"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span>
                <span class="attr">Height</span><span class="kwrd">="*"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">RowDefinition</span>
                <span class="attr">Height</span><span class="kwrd">="Auto"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Grid.RowDefinitions</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="UserName"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
            <span class="attr">Text</span><span class="kwrd">="Password"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBox</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
            <span class="attr">x:Name</span><span class="kwrd">="txtUserName"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">TextBox</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="1"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
            <span class="attr">x:Name</span><span class="kwrd">="txtPassword"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBox</span><span class="kwrd">&gt;</span>

        <span class="kwrd">&lt;</span><span class="html">CheckBox</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="2"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span>
            <span class="attr">Content</span><span class="kwrd">="Remember me?"</span>
            <span class="attr">x:Name</span><span class="kwrd">="chkRemember"</span><span class="kwrd">&gt;&lt;/</span><span class="html">CheckBox</span><span class="kwrd">&gt;</span>


        <span class="kwrd">&lt;</span><span class="html">Button</span>
            <span class="attr">x:Name</span><span class="kwrd">="CancelButton"</span>
            <span class="attr">Content</span><span class="kwrd">="Cancel"</span>
            <span class="attr">Click</span><span class="kwrd">="CancelButton_Click"</span>
            <span class="attr">Width</span><span class="kwrd">="75"</span>
            <span class="attr">Height</span><span class="kwrd">="23"</span>
            <span class="attr">HorizontalAlignment</span><span class="kwrd">="Right"</span>
            <span class="attr">Margin</span><span class="kwrd">="0,12,0,0"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="3"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Button</span>
            <span class="attr">x:Name</span><span class="kwrd">="OKButton"</span>
            <span class="attr">Content</span><span class="kwrd">="OK"</span>
            <span class="attr">Click</span><span class="kwrd">="OKButton_Click"</span>
            <span class="attr">Width</span><span class="kwrd">="75"</span>
            <span class="attr">Height</span><span class="kwrd">="23"</span>
            <span class="attr">HorizontalAlignment</span><span class="kwrd">="Right"</span>
            <span class="attr">Margin</span><span class="kwrd">="0,12,79,0"</span>
            <span class="attr">Grid</span>.<span class="attr">Row</span><span class="kwrd">="3"</span>
            <span class="attr">Grid</span>.<span class="attr">Column</span><span class="kwrd">="1"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">controls:ChildWindow</span><span class="kwrd">&gt;</span></pre>
<p>后台代码如下</p><pre class="csharpcode"><span class="kwrd">using</span> System.ServiceModel.DomainServices.Client.ApplicationServices;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> LoginWindow : ChildWindow
    {
        <span class="kwrd">public</span> LoginWindow()
        {
            InitializeComponent();
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> OKButton_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {

            <span class="rem">//直接使用硬编码的方式进行登录，注意这里是异步的</span>
<strong>            var param = <span class="kwrd">new</span> LoginParameters(txtUserName.Text,txtPassword.Text);
            WebContext.Current.Authentication.Login(param, (op) =&gt;
            {
                <span class="kwrd">if</span>(op.User != <span class="kwrd">null</span>
                    &amp;&amp; op.User.Identity.IsAuthenticated)
                {
                    (App.Current.RootVisual <span class="kwrd">as</span> ContentControl).Content = <span class="kwrd">new</span> MainPage();
                    <span class="kwrd">this</span>.DialogResult = <span class="kwrd">true</span>;
                }
                <span class="kwrd">else</span>
                {
                    MessageBox.Show(<span class="str">"Login fail, please try again. "</span>);
                    <span class="kwrd">this</span>.DialogResult = <span class="kwrd">null</span>;
                }
            }, <span class="kwrd">null</span>);</strong>


        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> CancelButton_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            <span class="kwrd">this</span>.DialogResult = <span class="kwrd">false</span>;
        }
    }
}

</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>接下来，我们需要对App.xaml.cs做点修改</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Client.ApplicationServices;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> SilverlightRIAAuthenticationSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> App : Application
    {

        <span class="kwrd">public</span> App()
        {
            <span class="kwrd">this</span>.Startup += <span class="kwrd">this</span>.Application_Startup;
            <span class="kwrd">this</span>.Exit += <span class="kwrd">this</span>.Application_Exit;
            <span class="kwrd">this</span>.UnhandledException += <span class="kwrd">this</span>.Application_UnhandledException;

            InitializeComponent();

        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_Startup(<span class="kwrd">object</span> sender, StartupEventArgs e)
        {

            <span class="rem">//使用用户登录对话框进行登录</span>
<strong>            var content = <span class="kwrd">new</span> ContentControl()
            {
                VerticalContentAlignment = System.Windows.VerticalAlignment.Stretch,
                HorizontalContentAlignment = System.Windows.HorizontalAlignment.Stretch
            };

            content.Content = <span class="kwrd">new</span> TextBlock()
            {
                Text = <span class="str">"Please login first"</span>,
                FontSize = 50
            };
            <span class="kwrd">this</span>.RootVisual = content;

            var form = <span class="kwrd">new</span> LoginWindow();
            form.Show();</strong>


        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_Exit(<span class="kwrd">object</span> sender, EventArgs e)
        {

        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_UnhandledException(<span class="kwrd">object</span> sender, ApplicationUnhandledExceptionEventArgs e)
        {
            <span class="rem">// If the app is running outside of the debugger then report the exception using</span>
            <span class="rem">// the browser's exception mechanism. On IE this will display it a yellow alert </span>
            <span class="rem">// icon in the status bar and Firefox will display a script error.</span>
            <span class="kwrd">if</span>(!System.Diagnostics.Debugger.IsAttached)
            {

                <span class="rem">// NOTE: This will allow the application to continue running after an exception has been thrown</span>
                <span class="rem">// but not handled. </span>
                <span class="rem">// For production applications this error handling should be replaced with something that will </span>
                <span class="rem">// report the error to the website and stop the application.</span>
                e.Handled = <span class="kwrd">true</span>;
                Deployment.Current.Dispatcher.BeginInvoke(<span class="kwrd">delegate</span> { ReportErrorToDOM(e); });
            }
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> ReportErrorToDOM(ApplicationUnhandledExceptionEventArgs e)
        {
            <span class="kwrd">try</span>
            {
                <span class="kwrd">string</span> errorMsg = e.ExceptionObject.Message + e.ExceptionObject.StackTrace;
                errorMsg = errorMsg.Replace(<span class="str">'"'</span>, <span class="str">'\''</span>).Replace(<span class="str">"\r\n"</span>, <span class="str">@"\n"</span>);

                System.Windows.Browser.HtmlPage.Window.Eval(<span class="str">"throw new Error(\"Unhandled Error in Silverlight Application "</span> + errorMsg + <span class="str">"\");"</span>);
            }
            <span class="kwrd">catch</span>(Exception)
            {
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>这两段代码的意思是，先启动LoginWindow，然后根据用户输入的信息进行登录，成功的话，就显示主窗口，调试起来看的效果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303274000.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303275396.png" width="1003" height="656"></a></p>
<p>输入用户名和密码，例如</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303271459.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303287489.png" width="1003" height="656"></a></p>
<p>然后点击“Ok”，因为我提供的用户是合法的，所以会显示MainPage</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/20110713130328247.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303292689.png" width="1003" height="656"></a></p>
<p>如果我提供的用户信息不合法呢？</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303296244.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303303670.png" width="1003" height="656"></a></p>
<p>一点都不意外，我们将收到一个提示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303302557.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303312209.png" width="213" height="158"></a></p>



<p>&nbsp;</p>
<h1>9.实现用户自动登录</h1>
<p>假设我们希望这个程序能够实现用户的自动登录，也就是说不要每次都输入用户名和密码，该怎么办呢？</p><pre class="csharpcode">        <span class="kwrd">private</span> <span class="kwrd">void</span> Application_Startup(<span class="kwrd">object</span> sender, StartupEventArgs e)
        {
<strong>            <span class="rem">///用LoadUser方法可以自动将保存在本地的用户凭据去做身份验证</span>
            WebContext.Current.Authentication.LoadUser((result) =&gt; {

                <span class="kwrd">if</span>(result.User != <span class="kwrd">null</span> &amp;&amp; result.User.Identity.IsAuthenticated)
                {<span class="rem">//如果成功的话，就直接显示MainPage</span>
                    <span class="kwrd">this</span>.RootVisual = <span class="kwrd">new</span> MainPage();
                }
                <span class="kwrd">else</span>
                {
                    <span class="rem">//使用用户登录对话框进行登录</span>
                    var content = <span class="kwrd">new</span> ContentControl()
                    {
                        VerticalContentAlignment = System.Windows.VerticalAlignment.Stretch,
                        HorizontalContentAlignment = System.Windows.HorizontalAlignment.Stretch
                    };

                    content.Content = <span class="kwrd">new</span> TextBlock()
                    {
                        Text = <span class="str">"Please login first"</span>,
                        FontSize = 50
                    };
                    <span class="kwrd">this</span>.RootVisual = content;

                    var form = <span class="kwrd">new</span> LoginWindow();
                    form.Show();

                }
            }, <span class="kwrd">null</span>);</strong>
        }
</pre><pre class="csharpcode">&nbsp;</pre>
<h1></h1>
<p>同时，我们还需要修改LoginWindow，让他可以保存用户凭据（你是否记得我们在那个窗口上有一个复选框呢？），请注意下面红色的部分</p><pre class="csharpcode">       <span class="kwrd">private</span> <span class="kwrd">void</span> OKButton_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {

            <span class="rem">//直接使用硬编码的方式进行登录，注意这里是异步的</span>
<strong><font color="#ff0000">            var param = <span class="kwrd">new</span> LoginParameters(
                txtUserName.Text, 
                txtPassword.Text, 
                (<span class="kwrd">bool</span>)chkRemember.IsChecked, 
                <span class="kwrd">string</span>.Empty);</font></strong>

            WebContext.Current.Authentication.Login(param, (op) =&gt;
            {
                <span class="kwrd">if</span>(op.User != <span class="kwrd">null</span>
                    &amp;&amp; op.User.Identity.IsAuthenticated)
                {
                    (App.Current.RootVisual <span class="kwrd">as</span> ContentControl).Content = <span class="kwrd">new</span> MainPage();
                    <span class="kwrd">this</span>.DialogResult = <span class="kwrd">true</span>;
                }
                <span class="kwrd">else</span>
                {
                    MessageBox.Show(<span class="str">"Login fail, please try again. "</span>);
                    <span class="kwrd">this</span>.DialogResult = <span class="kwrd">null</span>;
                }
            }, <span class="kwrd">null</span>);


        }</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre>
<p>&nbsp;</p>
<p>这样修改完之后，重新运行项目，第一次的时候，因为本地没有保存凭据，所以我们会被要求进行登录</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303319667.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303317126.png" width="1003" height="656"></a></p>
<p>请注意，我们选中“Remember me”，然后点击“Ok”</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303326013.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303321520.png" width="1003" height="656"></a></p>
<p>然后，我们可以关掉浏览器，重新启动程序。因为之前保存了用户凭据，所以你将直接可以看到MainPage，而无需登录</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303324834.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201107/201107131303331454.png" width="1003" height="656"></a></p>
<p>很不错，对吧？最后遗留了一个问题，就是如果我想用其他用户登录的话，怎么办呢？我肯定希望将原先保存好的用户凭据删除掉。如何实现这样的功能呢？</p>
<h1>10. 实现用户注销</h1><pre class="csharpcode">            <span class="kwrd">&lt;</span><span class="html">HyperlinkButton</span>
                <span class="attr">Content</span><span class="kwrd">="Logout"</span>
                <span class="attr">HorizontalAlignment</span><span class="kwrd">="Right"</span> <span class="attr">Margin</span><span class="kwrd">="10"</span> <span class="attr">x:Name</span><span class="kwrd">="btLogout"</span> <span class="attr">Click</span><span class="kwrd">="btLogout_Click"</span><span class="kwrd">&gt;&lt;/</span><span class="html">HyperlinkButton</span><span class="kwrd">&gt;</span>

                <span class="kwrd">&lt;</span><span class="html">TextBlock</span>
                <span class="attr">Text</span><span class="kwrd">="Customers List"</span>
                <span class="attr">FontSize</span><span class="kwrd">="40"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>为了实现注销，我们一般在主窗口上面，添加一个HyperLinkButton，如上所示。它的代码也很简单</p><pre class="csharpcode">        <span class="kwrd">private</span> <span class="kwrd">void</span> btLogout_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            WebContext.Current.Authentication.Logout(<span class="kwrd">true</span>);
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>11.总结</h1>
<p>本文，我用一个实例讲解了如何在RIA Service中启用身份验证。这是很实用的技术，我们使用到了Authentication Domain Service,和自定义的MembershipProvider，在客户端我们还实现了登录窗口以及自动登录。</p>
<p>&nbsp;</p>
<p>本文实例源代码，可以通过下面地址下载</p>
<p><a title="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar" href="http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar">http://files.cnblogs.com/chenxizhang/SilverlightRIAAuthenticationSample.rar</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>通过t4模板结合XML定义文件生成MVVM中的Model Entity Class 代码</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/25/2090324.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 25 Jun 2011 11:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/25/2090324.html</guid><description><![CDATA[<p>在之前的两篇文章，我针对MVVM项目实践中如何简化Model和ViewModel类型的编码工作，提供了两种不同的方法。它们分别是</p> <ul> <li> <h4><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html">如何利用AOP简化MVVM中Model和ViewModel的设计</a></h4></li> <ul> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html">http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html</a></li></ul> <li> <h4><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089431.html">如何利用Interception简化MVVM中的Model和ViewModel的设计</a></h4></li> <ul> <li> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089431.html">http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089431.html</a></p></li></ul></ul> <p>这一篇是这个话题的最后一篇，将提供第三种方法。</p> <p>我们的思路就是，AOP和Interception都是需要做代码注入的，它们的使用也或多越少会有一些特殊的要求，例如Interception这种做法，它将使得我们无法直接通过new的方式创建Model的实例。那么是否可以有办法不进行这些复杂的步骤，而只是通过一些自动化的方式来生成我们需要的Model类型代码呢？</p> <p>答案是：有。在Visual Studio 2010中全新支持的t4模板将很好地支持这一点。我记得多年前，我用过CodeSmith等一些工具生成代码，感觉还是不错的。但这些工具或多或少都需要收费，现在Visual Studio 2010既然内置支持代码生成，对我们来说绝对是一个好消息。</p> <p>&nbsp;</p> <p>关于t4模板，以及一些基本概念，请参考</p> <p><a href="http://msdn.microsoft.com/en-us/library/bb126445.aspx">http://msdn.microsoft.com/en-us/library/bb126445.aspx</a></p> <p>&nbsp;</p> <p>好了，我介绍一下我编写的这个模板吧。我的思路是这样的</p> <p>1. 通过一个XML文件，定义项目中所需要的Model类型以及他们的属性</p> <p>2. 通过一个t4模板，读取该XML文件，并且生成所有有关的Class，包括ModelBase，和每个Model</p> <p>&nbsp;</p> <h1>第一步，定义XML文件(我称其为ModelsDef文件）</h1><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ModelsDef</span><span class="kwrd">&gt;</span>
  
  <span class="rem">&lt;!--根节点上面还可以指定所有模型的基类，默认为ModelBase--&gt;</span>
  
  <span class="rem">&lt;!--</span>
<span class="rem">    MVVM实体模型定义文件</span>
<span class="rem">    作者：陈希章</span>
<span class="rem">    时间：2011年6月</span>
<span class="rem">    说明：该文件是用来生成业务实体模型代码的，将结合t4模板生成。</span>
<span class="rem">    反馈：ares@xizhang.com</span>
<span class="rem">  --&gt;</span>

  <span class="rem">&lt;!--</span>
<span class="rem">    这里开始定义模型（下面是几个范例，你可以根据它们进行修改</span>
<span class="rem">    规范：</span>
<span class="rem">    1. 每个业务实体，定义一个Model元素，必须要有name（整个定义文件中，至少得有一个Model元素）</span>
<span class="rem">    2. 每个实体至少要有一个属性:Property</span>
<span class="rem">    3. 属性有三种定义方式</span>
<span class="rem">       3.1 只提供name属性，则表示该Property为string类型</span>
<span class="rem">       3.2 如果不是string类型，则需要指定type</span>
<span class="rem">       3.3 如果是一个集合类型，则需要指定Collection, 并且此时就要指定collectionType</span>
<span class="rem">  --&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">Model</span> <span class="attr">name</span><span class="kwrd">="Customer"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="CustomerID"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="CompanyName"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">Model</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">Model</span> <span class="attr">name</span><span class="kwrd">="Order"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="OrderID"</span> <span class="attr">type</span><span class="kwrd">="int"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="OrderDate"</span> <span class="attr">type</span><span class="kwrd">="DateTime"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="CustomerID"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="Items"</span> <span class="attr">type</span><span class="kwrd">="Collection"</span> <span class="attr">collectionType</span><span class="kwrd">="OrderItem"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">Model</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">Model</span> <span class="attr">name</span><span class="kwrd">="OrderItem"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="OrderID"</span> <span class="attr">type</span><span class="kwrd">="int"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="ProductName"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="UnitPrice"</span> <span class="attr">type</span><span class="kwrd">="decimal"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Property</span> <span class="attr">name</span><span class="kwrd">="Quantity"</span> <span class="attr">type</span><span class="kwrd">="int"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">Model</span><span class="kwrd">&gt;</span>
  
  
  
  <span class="rem">&lt;!--</span>
<span class="rem">    架构定义，这是为了提供智能提示（通常你不需要做任何修改）</span>
<span class="rem">  --&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">xs:schema</span> 
    <span class="attr">xmlns:xs</span><span class="kwrd">="http://www.w3.org/2001/XMLSchema"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">xs:element</span> <span class="attr">name</span><span class="kwrd">="ModelsDef"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:sequence</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">xs:element</span> <span class="attr">name</span><span class="kwrd">="Model"</span> <span class="attr">minOccurs</span><span class="kwrd">="1"</span> <span class="attr">maxOccurs</span><span class="kwrd">="unbounded"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
              <span class="kwrd">&lt;</span><span class="html">xs:sequence</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">xs:element</span> <span class="attr">name</span><span class="kwrd">="Property"</span> <span class="attr">minOccurs</span><span class="kwrd">="1"</span> <span class="attr">maxOccurs</span><span class="kwrd">="unbounded"</span><span class="kwrd">&gt;</span>
                  <span class="kwrd">&lt;</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">xs:attribute</span> <span class="attr">name</span><span class="kwrd">="name"</span> <span class="attr">type</span><span class="kwrd">="xs:string"</span> <span class="attr">use</span><span class="kwrd">="required"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">xs:attribute</span> <span class="attr">name</span><span class="kwrd">="type"</span> <span class="attr">type</span><span class="kwrd">="systemTypes"</span> <span class="attr">default</span><span class="kwrd">="string"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">xs:attribute</span> <span class="attr">name</span><span class="kwrd">="collectionType"</span> <span class="attr">type</span><span class="kwrd">="xs:string"</span> <span class="attr">use</span><span class="kwrd">="optional"</span> <span class="kwrd">/&gt;</span>
                  <span class="kwrd">&lt;/</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">xs:element</span><span class="kwrd">&gt;</span>
              <span class="kwrd">&lt;/</span><span class="html">xs:sequence</span><span class="kwrd">&gt;</span>
              <span class="kwrd">&lt;</span><span class="html">xs:attribute</span> <span class="attr">name</span><span class="kwrd">="name"</span> <span class="attr">type</span><span class="kwrd">="xs:string"</span> <span class="attr">use</span><span class="kwrd">="required"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">xs:element</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">xs:sequence</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:attribute</span> <span class="attr">name</span><span class="kwrd">="baseClass"</span> <span class="attr">type</span><span class="kwrd">="xs:string"</span> <span class="attr">default</span><span class="kwrd">="ModelBase"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">xs:complexType</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">xs:element</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">xs:simpleType</span> <span class="attr">name</span><span class="kwrd">="systemTypes"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">xs:restriction</span> <span class="attr">base</span><span class="kwrd">="xs:string"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="string"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="int"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="decimal"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="double"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="DateTime"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">xs:enumeration</span> <span class="attr">value</span><span class="kwrd">="Collection"</span><span class="kwrd">&gt;&lt;/</span><span class="html">xs:enumeration</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">xs:restriction</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">xs:simpleType</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">xs:schema</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">ModelsDef</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>定义好了一个XSD Schema（这是为了便于使用，在Visual Studio中可以提供智能提示），并且提供了几个Model的范例。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913502736.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913508624.png" width="704" height="530"></a></p>
<p>&nbsp;</p>
<h1>第二步，定义一个t4模板</h1>
<p>&nbsp;</p><pre class="csharpcode">&lt;#@ template debug=<span class="str">"false"</span> hostspecific=<span class="str">"true"</span> language=<span class="str">"C#"</span> #&gt;
&lt;#@ output extension=<span class="str">".cs"</span> #&gt;
&lt;#@ assembly name=<span class="str">"System.Core.dll"</span> #&gt;
&lt;#@ assembly name=<span class="str">"System.Xml"</span> #&gt;
&lt;#@ assembly name=<span class="str">"System.Xml.Linq"</span> #&gt;
&lt;#@ assembly name=<span class="str">"EnvDTE"</span> #&gt;
&lt;#@ import <span class="kwrd">namespace</span>=<span class="str">"EnvDTE"</span> #&gt;
&lt;#@ import <span class="kwrd">namespace</span>=<span class="str">"System"</span> #&gt;
&lt;#@ import <span class="kwrd">namespace</span>=<span class="str">"System.Linq"</span> #&gt;
&lt;#@ import <span class="kwrd">namespace</span>=<span class="str">"System.Xml.Linq"</span> #&gt;
&lt;# 
    <span class="rem">/*</span>
<span class="rem">        MVVM业务实体代码生成模板</span>
<span class="rem">        作者：陈希章</span>
<span class="rem">        时间：2011年6月</span>
<span class="rem">        说明：这个模板会读取一个XML文件，并且根据该文件定义生成业务实体代码。该文件有规定的架构。请参考ModelsDef.xml</span>
<span class="rem">        反馈：ares@xizhang.com</span>
<span class="rem">        </span>
<span class="rem">    */</span>

<span class="kwrd">string</span> defaultNamespace =<span class="kwrd">string</span>.Empty;<span class="rem">//这里可以替换为你需要的命名空间，如果不指定，则自动获取当前项目的命名空间下面，再加一个Models的子空间</span>
<span class="kwrd">string</span> definitionFile =<span class="str">"ModelsDef.xml"</span>;<span class="rem">//这是默认的定义文件，可以替换掉</span>

IServiceProvider serviceProvider = (IServiceProvider)<span class="kwrd">this</span>.Host;
DTE dte = serviceProvider.GetService(<span class="kwrd">typeof</span>(DTE)) <span class="kwrd">as</span> DTE;  

<span class="kwrd">try</span>{
    definitionFile = Host.ResolvePath(definitionFile);
    Project p = ((Array)dte.ActiveSolutionProjects).GetValue(0) <span class="kwrd">as</span> Project;
    <span class="kwrd">if</span>(<span class="kwrd">string</span>.IsNullOrEmpty(defaultNamespace)) 
        defaultNamespace=p.Properties.Item(<span class="str">"RootNamespace"</span>).Value.ToString()+<span class="str">".Models"</span>;
    
    
    var doc = XDocument.Load(Host.ResolvePath(definitionFile));
    <span class="kwrd">string</span> baseClass= <span class="kwrd">this</span>.GetAttributeValue(doc.Root,<span class="str">"baseClass"</span>,<span class="str">"ModelBase"</span>);
#&gt;

<span class="kwrd">namespace</span> &lt;#= defaultNamespace #&gt;{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.ComponentModel;
    <span class="kwrd">using</span> System.Collections.ObjectModel;
    <span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> &lt;#= baseClass #&gt; : MarshalByRefObject, INotifyPropertyChanged
    {

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">protected</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> OnPropertyChanged(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(name));
        }

    }
&lt;#
<span class="kwrd">foreach</span> (var item <span class="kwrd">in</span> doc.Root.Elements(<span class="str">"Model"</span>))
{
    <span class="kwrd">string</span> modelName =<span class="kwrd">this</span>.GetAttributeValue(item,<span class="str">"name"</span>,<span class="kwrd">string</span>.Empty);
    <span class="kwrd">if</span>(<span class="kwrd">string</span>.IsNullOrEmpty(modelName))<span class="kwrd">continue</span>;#&gt;
            
    <span class="kwrd">public</span> <span class="kwrd">class</span> &lt;#= modelName #&gt; : &lt;#= baseClass #&gt;
    {&lt;#
    
        <span class="kwrd">foreach</span> (var property <span class="kwrd">in</span> item.Elements(<span class="str">"Property"</span>))
        {
            <span class="kwrd">string</span> propName =<span class="kwrd">this</span>.GetAttributeValue(property,<span class="str">"name"</span>,<span class="kwrd">string</span>.Empty);
            <span class="kwrd">string</span> type =<span class="kwrd">this</span>.GetPropertyTypeString(property);
            <span class="kwrd">string</span> fieldName = <span class="kwrd">string</span>.Format(<span class="str">"_{0}"</span>,propName.First().ToString().ToLower()+propName.Substring(1));
            <span class="kwrd">if</span>(<span class="kwrd">string</span>.IsNullOrEmpty(propName))<span class="kwrd">continue</span>;#&gt;

        <span class="kwrd">private</span> &lt;#= type #&gt; &lt;#= fieldName #&gt;;
        <span class="kwrd">public</span> &lt;#= type #&gt; &lt;#= propName #&gt;
        {
            get{<span class="kwrd">return</span> &lt;#= fieldName #&gt;;}
            set{
                <span class="kwrd">if</span>(&lt;#= fieldName #&gt;!=<span class="kwrd">value</span>){
                    &lt;#= fieldName #&gt;=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"&lt;#= propName #&gt;"</span>);
                }
            }
        }
        &lt;#}#&gt;
        
    }
    
&lt;#

}
#&gt;}&lt;#

}
<span class="kwrd">catch</span>(Exception ex){
    Write(ex.Message);
    Error(ex.Message);
}
#&gt;


&lt;#+ 
    <span class="kwrd">public</span> <span class="kwrd">string</span> GetAttributeValue(XElement element,<span class="kwrd">string</span> attr,<span class="kwrd">string</span> defaultValue){
        <span class="kwrd">return</span> element.Attribute(attr)!=<span class="kwrd">null</span>?element.Attribute(attr).Value:defaultValue;
    }
    
    <span class="kwrd">public</span> <span class="kwrd">string</span> GetPropertyTypeString(XElement element){
        var type = <span class="kwrd">this</span>.GetAttributeValue(element,<span class="str">"type"</span>,<span class="str">"string"</span>);
        var collectionType = <span class="kwrd">this</span>.GetAttributeValue(element,<span class="str">"collectionType"</span>,<span class="kwrd">string</span>.Empty);
        
        <span class="kwrd">if</span>(type==<span class="str">"Collection"</span>){
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"ObservableCollection&lt;{0}&gt;"</span>,collectionType);
        }
        <span class="kwrd">else</span>
            <span class="kwrd">return</span> type;
    }
#&gt;
</pre>
<p>这个模板的原理是，读取模板文件同一个目录下面的ModelsDef.xml文件，并且生成全部的代码。下面是一个例子</p><pre class="csharpcode">
<span class="kwrd">namespace</span> ConsoleApplication1.Models{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.ComponentModel;
    <span class="kwrd">using</span> System.Collections.ObjectModel;
    <span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> ModelBase : MarshalByRefObject, INotifyPropertyChanged
    {

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">protected</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> OnPropertyChanged(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(name));
        }

    }
            
    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer : ModelBase
    {
        <span class="kwrd">private</span> <span class="kwrd">string</span> _customerID;
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID
        {
            get{<span class="kwrd">return</span> _customerID;}
            set{
                <span class="kwrd">if</span>(_customerID!=<span class="kwrd">value</span>){
                    _customerID=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"CustomerID"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _companyName;
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName
        {
            get{<span class="kwrd">return</span> _companyName;}
            set{
                <span class="kwrd">if</span>(_companyName!=<span class="kwrd">value</span>){
                    _companyName=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"CompanyName"</span>);
                }
            }
        }
                
    }
    
            
    <span class="kwrd">public</span> <span class="kwrd">class</span> Order : ModelBase
    {
        <span class="kwrd">private</span> <span class="kwrd">int</span> _orderID;
        <span class="kwrd">public</span> <span class="kwrd">int</span> OrderID
        {
            get{<span class="kwrd">return</span> _orderID;}
            set{
                <span class="kwrd">if</span>(_orderID!=<span class="kwrd">value</span>){
                    _orderID=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"OrderID"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> DateTime _orderDate;
        <span class="kwrd">public</span> DateTime OrderDate
        {
            get{<span class="kwrd">return</span> _orderDate;}
            set{
                <span class="kwrd">if</span>(_orderDate!=<span class="kwrd">value</span>){
                    _orderDate=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"OrderDate"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _customerID;
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID
        {
            get{<span class="kwrd">return</span> _customerID;}
            set{
                <span class="kwrd">if</span>(_customerID!=<span class="kwrd">value</span>){
                    _customerID=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"CustomerID"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> ObservableCollection&lt;OrderItem&gt; _items;
        <span class="kwrd">public</span> ObservableCollection&lt;OrderItem&gt; Items
        {
            get{<span class="kwrd">return</span> _items;}
            set{
                <span class="kwrd">if</span>(_items!=<span class="kwrd">value</span>){
                    _items=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"Items"</span>);
                }
            }
        }
                
    }
    
            
    <span class="kwrd">public</span> <span class="kwrd">class</span> OrderItem : ModelBase
    {
        <span class="kwrd">private</span> <span class="kwrd">int</span> _orderID;
        <span class="kwrd">public</span> <span class="kwrd">int</span> OrderID
        {
            get{<span class="kwrd">return</span> _orderID;}
            set{
                <span class="kwrd">if</span>(_orderID!=<span class="kwrd">value</span>){
                    _orderID=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"OrderID"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _productName;
        <span class="kwrd">public</span> <span class="kwrd">string</span> ProductName
        {
            get{<span class="kwrd">return</span> _productName;}
            set{
                <span class="kwrd">if</span>(_productName!=<span class="kwrd">value</span>){
                    _productName=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"ProductName"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">decimal</span> _unitPrice;
        <span class="kwrd">public</span> <span class="kwrd">decimal</span> UnitPrice
        {
            get{<span class="kwrd">return</span> _unitPrice;}
            set{
                <span class="kwrd">if</span>(_unitPrice!=<span class="kwrd">value</span>){
                    _unitPrice=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"UnitPrice"</span>);
                }
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">int</span> _quantity;
        <span class="kwrd">public</span> <span class="kwrd">int</span> Quantity
        {
            get{<span class="kwrd">return</span> _quantity;}
            set{
                <span class="kwrd">if</span>(_quantity!=<span class="kwrd">value</span>){
                    _quantity=<span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"Quantity"</span>);
                }
            }
        }
                
    }
    
}

</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>看起来还不错，不是吗？那么，你将如何获得这个模板，以及在你的项目中使用呢？</p>
<p>其实很简单，你可以在Nuget gallary中找到我发布的这个Package。</p>
<p>如果你对Nuget不了解，请参考 <a href="http://www.nuget.org/">http://www.nuget.org/</a></p>
<p>&nbsp;</p>
<p>在项目中，”Manage NuGet Packages…”</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913507229.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913505833.png" width="704" height="530"></a></p>
<p>用“MVVM_ModelEntity”作为关键字进行搜索</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913512802.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913519770.png" width="801" height="315"></a></p>
<p>点击“Install”，这个工具会在你的项目中创建一个Models目录，并且添加两个文件</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913516738.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913513707.png" width="919" height="729"></a></p>
<p>选择“ModelTemplate.tt”，然后”Run Custom Tool”</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913515899.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913511232.png" width="704" height="530"></a></p>
<p>然后，你可以去查看ModelTemplate.cs文件</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913519836.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251913521265.png" width="917" height="379"></a></p>
<p>&nbsp;</p>
<p>有兴趣的朋友，赶紧试试看吧</p>]]></description></item><item><title>XMLDatabase项目已经发布到nuget gallery</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/25/2090180.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 25 Jun 2011 06:41:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/25/2090180.html</guid><description><![CDATA[<p>如果你在使用Visual Studio 2010，你应该了解nuget。如果你还是不了解，可以参考下面这些介绍</p> <p><a href="http://zzk.cnblogs.com/s?w=nuget">http://zzk.cnblogs.com/s?w=nuget</a></p> <p>&nbsp;</p> <p>今天介绍一下，之前我开发过的一个开源数据库项目（XMLDatabase）也已经发布到了unget gallery,有兴趣的朋友可以在项目中使用</p> <p>该项目的永久位置在：<a href="http://xmldatabase.codeplex.com/">http://xmldatabase.codeplex.com/</a></p> <p>该项目的文档和范例程序在：<a href="http://xmldatabase.codeplex.com/releases/view/32227">http://xmldatabase.codeplex.com/releases/view/32227</a></p> <p>以前在我的博客中也讨论过这个项目</p> <ul> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/08/1541888.html">http://www.cnblogs.com/chenxizhang/archive/2009/08/08/1541888.html</a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/09/1542354.html">http://www.cnblogs.com/chenxizhang/archive/2009/08/09/1542354.html</a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/11/1543908.html">http://www.cnblogs.com/chenxizhang/archive/2009/08/11/1543908.html</a></li> <li><a href="http://www.cnblogs.com/chenxizhang/archive/2009/08/12/1544105.html">http://www.cnblogs.com/chenxizhang/archive/2009/08/12/1544105.html</a></li></ul> <p>回过去看这些文字，一晃又是两年快要过去了啊，虽然又是感慨时间是过得真快。呵呵</p> <p>这个项目上次发布之后，我在一些项目中用过，还没有大面积使用。源代码也没有太太改动，之前有些朋友跟我联系过，期间也修正了一些小的bug。以后看情况也可能会继续做些升级。例如支持Silverlight等。(目前还没有时间表）</p> <p>如果有兴趣的朋友，也可以研究一下代码，我也欢迎大家提出一些建设性的建议和想法。</p> <p>&nbsp;</p> <p>如何在你的项目中使用它呢？你需要确保你安装好了nuget这个插件。如果你还没有下载，请访问官方站点 <a href="http://www.nuget.org/">http://www.nuget.org/</a></p> <p>如果安装好了，则可以在项目中，选择“References”，右键，然后选择”Manag NuGet Packages…”</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110625144044990.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440447119.png" width="704" height="530"></a></p> <p>然后在接下来的这个对话框中，输入xmldatabase进行搜索，就可以找到这个package</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110625144044184.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440448024.png" width="802" height="608"></a></p> <p>点击“install”按钮，会有一个License Acceptance的对话框。该开源项目使用的协议是：Microsoft Public License (Ms-PL)</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440457185.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440454153.png" width="354" height="304"></a></p> <p>点击“I Accept”,就可以完成安装</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440459726.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440459203.png" width="804" height="609"></a></p> <p>完成安装之后，会自动添加好dll引用，而且会有一个readme文件，帮助大家更好地了解这个开源项目</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440453140.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106251440463696.png" width="307" height="234"></a></p> <p>【备注】目前只支持.NET Framework 3.5和.NET Framework 4.0</p> <p>&nbsp;</p> <p>然后，你可以参考下面范例代码进行数据库的操作</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="preproc">#region</span> 添加两个命名空间
<span class="kwrd">using</span> XmlDatabase.Core;
<span class="kwrd">using</span> DataEntities;
<span class="preproc">#endregion</span>

<span class="kwrd">namespace</span> SampleApp
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            <span class="rem">//这个程序演示了XmlDatabase的简单使用方式.注意，目前的版本是alpha，后续可能还会有所更改</span>


            <span class="rem">//第一步：创建或者打开一个数据库</span>
            <span class="kwrd">using</span> (XDatabase db = XDatabase.Open(<span class="str">"Test"</span>))
            {
                <span class="rem">//如果要重定向日志输出，请使用下面的语法即可</span>
                db.Log = Console.Out;


                <span class="preproc">#region</span> <span class="rem">//第二步：创建几个数据实体类型.</span>
                <span class="rem">//值得说明一下，这些数据实体类型没有任何特殊的要求，不需要添加任何的Attribute。但最好是遵守以下的两条简单的规则</span>
                <span class="rem">//1.属性都是可读可写的，都是Public的</span>
                <span class="rem">//2.重写ToString方法，这是为了让引擎在做日志记录的时候用的</span>

                Customer customer = <span class="kwrd">new</span> Customer()
                {
                    CustomerID = <span class="str">"ALFKI"</span>,
                    CompanyName = <span class="str">"Alfreds Futterkiste"</span>,
                    Country = <span class="str">"Germany"</span>,
                    Region = <span class="str">"BC"</span>,
                    City = <span class="str">"Berlin"</span>,
                    ContactName = <span class="str">"Maria Anders"</span>,
                    Address = <span class="str">"Obere Str. 57"</span>
                };

                Employee employee = <span class="kwrd">new</span> Employee()
                {
                    EmployeeId = 1,
                    FirstName = <span class="str">"Nancy"</span>,
                    LastName = <span class="str">"Davolio"</span>,
                    Title = <span class="str">"Sales Representative"</span>
                };


                Product product = <span class="kwrd">new</span> Product()
                {
                    ProductId = 1,
                    ProductName = <span class="str">"Chai"</span>
                };
                
                Order Order = <span class="kwrd">new</span> Order()
                {
                    OrderID = 10248,
                    OrderDate = DateTime.Now,
                    Customer = customer,
                    Employee = employee,
                    OrderItems = <span class="kwrd">new</span> List&lt;OrderItem&gt;()
                    {
                        <span class="kwrd">new</span> OrderItem(){
                            Product=product,
                            UnitPrice=20.5m,
                            Quantity=3
                        },
                        <span class="kwrd">new</span> OrderItem(){
                            Product=<span class="kwrd">new</span> Product(){ 
                                ProductId=2, 
                                ProductName=<span class="str">"Grandma's Boysenberry Spread"</span>},
                            UnitPrice=333,
                            Quantity=1
                        }
                    }
                };

                <span class="preproc">#endregion</span>


                <span class="rem">//第三步：插入对象</span>
                db.Store(Order);<span class="rem">//只要调用该方法就可以了。默认情况下，这是立即生效的</span>

                Customer c = <span class="kwrd">new</span> Customer() { CustomerID = <span class="str">"ABCD"</span> };
                db.Store(c);
                var cs = db.Query&lt;Customer&gt;().First();
                Console.WriteLine(cs);

                
                <span class="rem">//第四步：读取对象 （这里还可以做任何的LINQ查询操作）</span>
                var query = from o <span class="kwrd">in</span> db.Query&lt;Order&gt;()
                            <span class="kwrd">where</span> o.OrderID==10248
                            select o;
                Order firstOrder = query.First();
                Console.WriteLine(<span class="str">"{0},总金额为:{1}"</span>, firstOrder, firstOrder.OrderItems.Sum(i =&gt; i.Quantity * i.UnitPrice));


                <span class="rem">//第五步：更新对象</span>
                firstOrder.OrderID = 10249;<span class="rem">//假设我们修改一下订单编号</span>
                <span class="rem">//你还可以对该对象做任何的修改，例如增加一个订单记录</span>
                firstOrder.OrderItems.Add(<span class="kwrd">new</span> OrderItem()
                {
                    Product = <span class="kwrd">new</span> Product() { ProductId = 3, ProductName = <span class="str">"Mishi Kobe Niku"</span> },
                    UnitPrice = 10000,
                    Quantity = 1
                });

                db.Store(firstOrder);<span class="rem">//更新的语法与刚才插入的时候是一模一样的，内部会判断出来到底是更新还是新增</span>
                Console.WriteLine(<span class="str">"{0},总金额为:{1}"</span>, firstOrder, firstOrder.OrderItems.Sum(i =&gt; i.Quantity * i.UnitPrice));


                <span class="rem">//第六步：删除对象</span>
                db.Delete(firstOrder);

                <span class="rem">//第七步：批处理（上面的操作都是立即生效的，如果操作数不多的话，很简单也很直接，但因为每次都涉及到数据文件的读写，如果我们有一个循环，要批量做一些事情，则可能会有性能方面的问题，所以下面提供了批处理模式）</span>

                <span class="rem">//首先得将数据库的模式切换到批处理模式</span>
                db.AutoSubmitMode = <span class="kwrd">false</span>;
                <span class="kwrd">for</span> (<span class="kwrd">int</span> i = 0; i &lt; 10; i++)
                {
                    Order temp = <span class="kwrd">new</span> Order()
                    {
                        OrderID = 10248,
                        OrderDate = DateTime.Now,
                        Customer = customer,
                        Employee = employee,
                        OrderItems = <span class="kwrd">new</span> List&lt;OrderItem&gt;()
                    {
                        <span class="kwrd">new</span> OrderItem(){
                            Product=product,
                            UnitPrice=20.5m,
                            Quantity=3
                        },
                        <span class="kwrd">new</span> OrderItem(){
                            Product=<span class="kwrd">new</span> Product(){ 
                                ProductId=2, 
                                ProductName=<span class="str">"Grandma's Boysenberry Spread"</span>},
                            UnitPrice=333,
                            Quantity=1
                        }
                    }
                    };

                    db.Store(temp);<span class="rem">//语法还是一模一样的</span>
                }

                <span class="rem">//区别在于，如果是批处理模式，则必须明确地调用SubmitChanges才生效</span>
                XSubmitStatus status = db.SubmitChanges();
                <span class="rem">//这个SubmitChanges方法默认情况下，如果遇到某个操作出错，那么后面的操作就不会进行了。</span>
                <span class="rem">//如果希望出错后继续，那么应该使用下面的语法</span>
                <span class="rem">//XSubmitStatus status=db.SubmitChanges(true);</span>

                <span class="rem">//第八步：事务性操作</span>
                <span class="rem">//要进行事务性操作，必须处于批处理模式中。我最后将它做了简化，调用下面的方法即可</span>
                <span class="rem">//XSubmitStatus status = db.SubmitChangesWithTransaction();</span>


                <span class="rem">//第九步：关闭数据库</span>
                db.Close();
            }

            Console.Read();
            <span class="rem">//后续任务</span>
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>希望这样可以更加方便大家使用这个组件。如果有什么反馈建议，请给我留言或者邮件。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>最后，很多朋友可能都感兴趣，我自己如何发布Package呢？其实不难，请参考下面的两个链接</p>
<h3>Creating and Publishing a Package</h3>
<p><a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package">http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package</a></p>
<p>&nbsp;</p>
<h3>Using A GUI (Package Explorer) to build packages</h3>
<p><a href="http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages#Creating_a_Package">http://docs.nuget.org/docs/creating-packages/using-a-gui-to-build-packages#Creating_a_Package</a></p>]]></description></item><item><title>如何利用Interception简化MVVM中的Model和ViewModel的设计</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089431.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 24 Jun 2011 15:55:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089431.html</guid><description><![CDATA[<p>这一篇是“<a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html">如何利用AOP简化MVVM中Model和ViewModel的设计</a>”一文的姊妹篇。阅读本文之前，请一定要先阅读上一篇，否则你可能对有关问题理解不深。</p> <p>&nbsp;</p> <p>上一篇说到，我们可以用AOP的方式，具体来说，我们使用了一个第三方的框架（PostSharp)来实现了代码注入。PostSharp的方式是静态注入，它是需要改变IL代码的。</p> <p>请看下面这个截图,Customer类型里面的IL代码其实是被改过的。PostSharp会改变Visual Studio的编译行为。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354538006.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354535531.png" width="962" height="740"></a></p> <p>&nbsp;</p> <p>除了用这种方式之外，是否有其他方法呢？其实是有，我这一篇就给大家介绍另外一种做法：使用微软官方提供的Enterprise Library中的Interception功能（由Unity提供的拦截功能）</p> <p>&nbsp;</p> <p>关于Enterprise Library的介绍和下载，请访问下面的地址</p> <p><a href="http://entlib.codeplex.com/">http://entlib.codeplex.com/</a></p> <p>本文演示的例子，是基于Enterprise Library 5.0</p> <p>&nbsp;</p> <p>我们来看下面的例子。假如我们还有一个Model类型，叫Order，表示订单。我们希望它的代码能像下面这样简练。</p><pre class="csharpcode"><span class="kwrd">using</span> System;

<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Order:ModelBase
    {
        <span class="kwrd">public</span> <span class="kwrd">int</span> OrderID { get; set; }
        <span class="kwrd">public</span> DateTime OrderDate { get; set; }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【注意】我们这里只继承了ModelBase，没有其他任何特别的东西。</p>
<p>请放心，我们可以做到。你只要继续往下读就可以了。</p>
<p>&nbsp;</p>
<h2>1. 添加引用</h2>
<p>我们需要引用一个程序集</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354548911.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354546993.png" width="829" height="542"></a></p>
<p>&nbsp;</p>
<h2>2. 编写一个InterceptionBehavior</h2>
<p>Behavior是指我们需要注入的一种行为。这是Interception中的专业术语。</p>
<p>【注意】这一篇文章不是专门来讲Policy Injection的，有兴趣的朋友，可以参考Enterprise Library中的说明文档</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> Microsoft.Practices.Unity.InterceptionExtension;

<span class="kwrd">namespace</span> WPFMVVMSample
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> NotifyPropertyChangedBahavior:IInterceptionBehavior
    {


        <span class="kwrd">public</span> System.Collections.Generic.IEnumerable&lt;System.Type&gt; GetRequiredInterfaces()
        {
            <span class="kwrd">return</span> Enumerable.Empty&lt;System.Type&gt;();

        }

        <span class="kwrd">public</span> IMethodReturn Invoke(IMethodInvocation input, GetNextInterceptionBehaviorDelegate getNext)
        {


            var result= getNext()(input, getNext);<span class="rem">//先执行方法</span>


            var methodName = input.MethodBase.Name;
            var type = input.Target.GetType();
            var targetMethod = type.GetMethod(<span class="str">"OnPropertyChanged"</span>,
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            <span class="kwrd">if</span> (methodName.StartsWith(<span class="str">"set_"</span>) &amp;&amp; targetMethod != <span class="kwrd">null</span>)<span class="rem">//只针对这种方法器进行注入</span>
            {
                var propertyName = methodName.Substring(4);<span class="rem">//解析得到属性名称</span>
                targetMethod.Invoke(input.Target, <span class="kwrd">new</span>[] { propertyName });<span class="rem">//执行该方法</span>
            }

            <span class="kwrd">return</span> result;
        }

        <span class="kwrd">public</span> <span class="kwrd">bool</span> WillExecute
        {
            get { <span class="kwrd">return</span> <span class="kwrd">true</span>; }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【注意】上述代码与之前用PostSharp的做法是很相似的，不是吗</p>
<p>&nbsp;</p>



<h2>3. 修改ModelBase类型</h2>
<p>Unity默认提供的Intercept，支持两种主要的拦截器：TransparentProxyInterceptor和VirtualMethodInterceptor。我们这里准备用第一种。它有一个简单要求，就是需要拦截的类型，继承<strong><font color="#ff0000">MarshalByRefObject即可</font></strong></p>
<p>代码修改如下</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ComponentModel;
<span class="kwrd">using</span> System.Diagnostics;

<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> ModelBase : <strong><font color="#ff0000">MarshalByRefObject</font></strong>, INotifyPropertyChanged
    {

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">protected</span> <span class="kwrd">void</span> OnPropertyChanged(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(name));

            <span class="rem">//为了便于调试，我们在Output窗口输出一行信息</span>
            Debug.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">"{0} Changed"</span>, name));
        }

    }
}
</pre>
<h2>4.编写代码实现拦截和注入</h2><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows;

<span class="kwrd">using</span> Microsoft.Practices.Unity.InterceptionExtension;


<span class="kwrd">namespace</span> WPFMVVMSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainWindow_Loaded);
        }





        <span class="kwrd">void</span> MainWindow_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {

            var order = Intercept.ThroughProxy(<span class="kwrd">new</span> Models.Order(),
                <span class="kwrd">new</span> TransparentProxyInterceptor(),
                <span class="kwrd">new</span>[] { <span class="kwrd">new</span> NotifyPropertyChangedBahavior() });

            order.OrderDate = DateTime.Now;
            order.OrderID = 5;

            
        }
    }
}
</pre><pre class="csharpcode"><font face="Verdana">请注意，这里不能再直接用new的方式创建Order的实例，而是需要通过Intercept来创建。</font></pre><pre class="csharpcode"><font face="Verdana"></font>&nbsp;</pre><pre class="csharpcode"><font face="Verdana">按下F5进行调试，我们同样可以在Output窗口看到有关的消息输出，这说明那个自定义Behavior在起作用，因为是它在调用基类中那个OnPropertyChanged方法</font></pre><pre class="csharpcode"><font face="Verdana"></font>&nbsp;</pre><pre class="csharpcode"><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354543961.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354547026.png" width="695" height="288"></a></pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><font face="Verdana">值得一提的是,与PostSharp不同，我们这里使用的Interception，是动态拦截，它不会修改我们的代码。请看Order这个类型的代码，与我们在Visual Studio里面是一样的</font></pre><pre class="csharpcode"><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110624235455647.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242354555663.png" width="962" height="740"></a></pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>如何利用AOP简化MVVM中Model和ViewModel的设计</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 24 Jun 2011 14:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/24/2089392.html</guid><description><![CDATA[<p>这一篇谈一个MVVM中的一个虽然小但却很实际的问题，就是如何简化Model和ViewModel的设计。这是我们在项目中总结提炼的一些做法。</p> <blockquote> <p>【备注】关于MVVM的概念，并不是本文的重点。如果你对MVVM还不熟悉，可以参考<a href="http://msdn.microsoft.com/en-us/library/gg430857(v=pandp.40).aspx">这里</a>。关于MVVM与之前的MVP，MVC设计模式的渊源和比较，还有目前主流的几个MVVM框架的大致情况，我最近可能再会抽时间另外整理一篇，有兴趣的朋友关注一下。</p></blockquote> <p>有用过MVVM的朋友，都知道我们在项目中需要定义Model和ViewModel。Model指的是数据实体，它负责存储数据，并且提供了与外部资源（例如数据库或者远程服务）的交互。ViewModel是指View与Model之间的一个桥梁，通常情况下，View是指界面（例如WPF中的Window，或者Silverlight中的Page等等），使用MVVM的核心目的是让View的设计能够更加独立，它不应该包含太多的数据逻辑。极端情况下，它不应该有一行自定义代码。那么，你可能会问，不用代码怎么显示和更新数据呢？答案就是，View通过绑定（Binding)连接到ViewModel，在WPF和Silverlight中都可以实现双向（TwoWay）的绑定。这样就能实现数据的显示和更新。同时，ViewModel中还可以公开一些Command,以便可以让View中的特殊操作可以绑定。——<strong><font color="#ff0000">这就是MVVM的核心理论</font></strong>。</p> <p>&nbsp;</p> <p>那么，言归正传吧，在介绍我们的问题之前，我先给大家看一个典型的Model类型</p><pre class="csharpcode">
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.ComponentModel;

<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee:INotifyPropertyChanged
    {

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">private</span> <span class="kwrd">void</span> OnPropertyChanged(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(name));

            <span class="rem">//为了便于调试，我们在Output窗口输出一行信息</span>
            Debug.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">"{0} Changed"</span>, name));
        }


        <span class="kwrd">private</span> <span class="kwrd">string</span> firstName = <span class="kwrd">string</span>.Empty;
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName
        {
            get { <span class="kwrd">return</span> firstName; }
            set {
                <span class="kwrd">if</span> (<span class="kwrd">value</span> != firstName)
                {
                    firstName = <span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"FirstName"</span>);
                }
            }
        }

        <span class="kwrd">private</span> <span class="kwrd">string</span> lastName = <span class="kwrd">string</span>.Empty;
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName
        {
            get { <span class="kwrd">return</span> lastName; }
            set
            {
                <span class="kwrd">if</span> (<span class="kwrd">value</span> != lastName)
                {
                    lastName = <span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"LastName"</span>);
                }
            }
        }


        <span class="kwrd">private</span> <span class="kwrd">int</span> age = 18;
        <span class="kwrd">public</span> <span class="kwrd">int</span> Age
        {
            get { <span class="kwrd">return</span> age; }
            set {
                <span class="kwrd">if</span> (<span class="kwrd">value</span> != age)
                {
                    age = <span class="kwrd">value</span>;
                    OnPropertyChanged(<span class="str">"Age"</span>);
                }
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>




<p>是不是很熟悉这个代码呢？这是一个表示员工信息的Model类型。</p>
<ol>
<li>为了实现双向绑定，并且在属性发生变化时接收通知，我们通常需要实现一个接口，叫INotifyPropertyChanged。</li>
<li>这个接口只有一个事件（PropertyChanged）。通常为了触发该事件，我们会定义一个统一的方法（OnPropertyChanged）</li>
<li>通常在每个属性中的set方法器中，我们要去调用OnPropertyChanged，发出属性已更改的通知。</li></ol>

<p>也不算复杂对吧，但问题在于，如果这个Model类型有很多属性的话，那么这个类就会变得很冗长。而且很多代码其实都是同样的写法。更何况，一个项目里面可能会有很多个Model类型呢？</p>
<p>&nbsp;</p>
<p>我们的问题就是：有没有什么方式来让自动完成这样的工作呢？也就是说，每个属性的Set方法执行完之后，自动地调用OnPropertyChanged这个方法。</p>
<p>&nbsp;</p>
<p>例如，我们能不能还是按照下面这样定义Model类型呢？</p><pre class="csharpcode">
<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName { get; set; }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>我想，一个Model类型本应就这么简单，你不这么觉得吗？那么，就随我一步一步来做个实验吧</p>
<p>&nbsp;</p>
<p>首先，考虑到可能有很多个Model类型，每个类型都去实现那个INotifyPropertyChanged接口，就显得不是那么理想。针对这个问题，我们很自然地想到将这部分实现提取到一个基类去。我们确实是这么做的。例如，下面这里我们定义一个ModelBase类型</p><pre class="csharpcode"><span class="kwrd">using</span> System.ComponentModel;
<span class="kwrd">using</span> System.Diagnostics;

<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    <span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> ModelBase:INotifyPropertyChanged
    {

        <span class="kwrd">public</span> <span class="kwrd">event</span> PropertyChangedEventHandler PropertyChanged;

        <span class="kwrd">protected</span> <span class="kwrd">void</span> OnPropertyChanged(<span class="kwrd">string</span> name)
        {
            <span class="kwrd">if</span> (PropertyChanged != <span class="kwrd">null</span>)
                PropertyChanged(<span class="kwrd">this</span>, <span class="kwrd">new</span> PropertyChangedEventArgs(name));

            <span class="rem">//为了便于调试，我们在Output窗口输出一行信息</span>
            Debug.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">"{0} Changed"</span>, name));
        }

    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>那么，接下来，我们就要让Customer类型继承ModelBase</p><pre class="csharpcode">
<span class="kwrd">namespace</span> WPFMVVMSample.Models
{

    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer:ModelBase
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName { get; set; }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>我们已经简化了实现接口的那部分工作。但是，还有一个关键点，如何让每个属性的set方法器中自动调用基类中定义好的OnPropertyChanged方法呢？也就是说，我们希望通过一个什么样的方式在每个set方法后面插入一个特殊的代码逻辑。是不是这样呢？</p>
<p>&nbsp;</p>
<p>我联想到以前用过的一个所谓的AOP（面向方面的编程）的框架，当初还写过一篇文章介绍，请参考下面的链接</p>
<h4><a href="http://www.cnblogs.com/chenxizhang/archive/2008/08/03/1259103.html"><font size="2"><font style="font-weight: normal">PostSharp的AOP设计在.NET Remoting中的应用</font></font></a></h4>
<p><font size="2">我曾经用过一个业界比较认可的静态AOP框架，叫做Postsharp。它的官方网站在下面</font></p>
<h4><a href="http://www.sharpcrafters.com/"><font size="2"><font style="font-weight: normal">http://www.sharpcrafters.com/</font></font></a></h4>
<p>有了Postsharp，我们的问题就很容易可以解决了。请大家下载，安装，然后在项目中添加两个引用</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242241352187.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242241359396.png" width="827" height="274"></a></p>
<p>我们可以编写下面一个特殊的Attribute</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> PostSharp.Laos;

<span class="kwrd">namespace</span> WPFMVVMSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 陈希章</span>
    <span class="rem">/// 2011-6-24</span>
    <span class="rem">/// 这是一个特殊的Attribute，是postsharp中实现方法注入的一个做法</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [Serializable]
    [AttributeUsage(AttributeTargets.Class,Inherited=<span class="kwrd">true</span>,AllowMultiple=<span class="kwrd">false</span>)]
    <span class="kwrd">public</span> <span class="kwrd">class</span> NotifyPropertyChangeAttribute:OnMethodBoundaryAspect
    {
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnSuccess(MethodExecutionEventArgs eventArgs)
        {
            var methodName = eventArgs.Method.Name;
            var type = eventArgs.Instance.GetType();
            var targetMethod= type.GetMethod(<span class="str">"OnPropertyChanged"</span>, 
                System.Reflection.BindingFlags.NonPublic| System.Reflection.BindingFlags.Instance);

            <span class="kwrd">if</span> (methodName.StartsWith(<span class="str">"set_"</span>) &amp;&amp;  targetMethod != <span class="kwrd">null</span>)<span class="rem">//只针对这种方法器进行注入</span>
            {
                var propertyName = methodName.Substring(4);<span class="rem">//解析得到属性名称</span>
                targetMethod.Invoke(eventArgs.Instance, <span class="kwrd">new</span>[] { propertyName });<span class="rem">//执行该方法</span>
            }
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>那么，如何实现这个特殊的Attribute呢？我们只要在Customer这个类型上添加它就可以了。最终设计好的Customer类型如下</p><pre class="csharpcode">
<span class="kwrd">namespace</span> WPFMVVMSample.Models
{
    [NotifyPropertyChange]
    <span class="kwrd">public</span> <span class="kwrd">class</span> Customer:ModelBase
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID { get; set; }
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName { get; set; }

    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
大家可以将这个类型与本文最开头的Employee类型比较一下，代码明显精简了很多很多。</p>
<p>至于ViewModel，也是同样的做法即可。</p>
<p>&nbsp;</p>
<p>你可能会疑惑地说，真有这么神奇吗？上面这样做了之后，有没有真正地生效呢？</p>
<p>为了让你看到效果，又不免很复杂，还记得我们在ModelBase里面有下面一句代码吗？</p><pre class="csharpcode">            <span class="rem">//为了便于调试，我们在Output窗口输出一行信息</span>
            Debug.WriteLine(<span class="kwrd">string</span>.Format(<span class="str">"{0} Changed"</span>, name));
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
也就是说，只要属性发生了变化，就发出通知，并且在Output窗口中显示一些信息。</p>
<p>&nbsp;</p>
<p>我们可以做一个简单的测试，在MainWindow中加入如下的代码</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Data;
<span class="kwrd">using</span> System.Windows.Documents;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> System.Windows.Media;
<span class="kwrd">using</span> System.Windows.Media.Imaging;
<span class="kwrd">using</span> System.Windows.Navigation;
<span class="kwrd">using</span> System.Windows.Shapes;

<span class="kwrd">namespace</span> WPFMVVMSample
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainWindow_Loaded);
        }

        <span class="kwrd">void</span> MainWindow_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var customer = <span class="kwrd">new</span> Models.Customer();
            customer.CustomerID = <span class="str">"microsoft"</span>;
            customer.CompanyName = <span class="str">"microsoft company"</span>;
            <span class="kwrd">this</span>.DataContext = customer;

        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
我们这里初始化了一个Customer对象，并且对它两个属性都做了更改。</p>
<p>按下F5进行调试，注意将Output窗口显示出来。我们会发现有下面的输出</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242241354412.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106242241367793.png" width="680" height="266"></a></p>
<p>这样就证明了我们刚才的假设：属性值修改之后，我们收到了通知，而且执行了OnPropertyChanged方法。</p>]]></description></item><item><title>在Silverlight中使用HierarchicalDataTemplate为TreeView实现递归树状结构</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/22/2087692.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 22 Jun 2011 15:20:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/22/2087692.html</guid><description><![CDATA[<p>这是项目中一个页面上的一个功能。我们需要在界面上通过一个TreeView控件显示一个递归的树状结构，也就是说会很多层嵌套的节点，而且层数是不确定的。</p> <p>这个功能，可以通过HierarchicalDataTemplate来很方便地实现</p> <h2>1. 业务实体</h2> <p>作为举例，我定义了一个大家都很熟悉的Folder类型，即文件夹。我们都知道，文件夹又可以包含子文件夹，而且可以多层嵌套。所以，这是一个递归的结构体。</p><pre class="csharpcode">    <span class="kwrd">public</span> <span class="kwrd">class</span> Folder
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }
        <span class="kwrd">public</span> ObservableCollection&lt;Folder&gt; Folders { get; set; }
    }
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>2. 准备数据</h2>
<p>我用下面的代码，模拟一个数据读取操作。下面是硬编码出来的数据。实际情况下，可以读取数据库。</p><pre class="csharpcode">        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var result = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Folder(){Name=<span class="str">"Test"</span>,Folders =<span class="kwrd">new</span> ObservableCollection&lt;Folder&gt;(
                    <span class="kwrd">new</span>[]{
                        <span class="kwrd">new</span> Folder(){Name=<span class="str">"Test4"</span>},
                        <span class="kwrd">new</span> Folder(){Name=<span class="str">"Test3"</span>},
                        <span class="kwrd">new</span> Folder(){Name=<span class="str">"Test4"</span>,Folders=<span class="kwrd">new</span> ObservableCollection&lt;Folder&gt;(
                            <span class="kwrd">new</span> []{<span class="kwrd">new</span> Folder(){Name =<span class="str">"Test5"</span>}})
                        }
                    })}};

            tvFolders.ItemsSource = result;
        }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<h2>3. 绑定控件</h2><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="SilverlightTreeviewSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span> <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span> <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:HierarchicalDataTemplate</span> <span class="attr">x:Key</span><span class="kwrd">="FolderItemTemplate"</span> <span class="attr">ItemsSource</span><span class="kwrd">="{Binding Folders}"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Text</span><span class="kwrd">="{Binding Name}"</span><span class="kwrd">&gt;&lt;/</span><span class="html">TextBlock</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">sdk:HierarchicalDataTemplate</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">Style</span> <span class="attr">TargetType</span><span class="kwrd">="sdk:TreeViewItem"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">Setter</span> <span class="attr">Property</span><span class="kwrd">="IsExpanded"</span> <span class="attr">Value</span><span class="kwrd">="True"</span><span class="kwrd">&gt;&lt;/</span><span class="html">Setter</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">Style</span><span class="kwrd">&gt;</span>
       
    <span class="kwrd">&lt;/</span><span class="html">UserControl.Resources</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span> <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:TreeView</span>  <span class="attr">Name</span><span class="kwrd">="tvFolders"</span> <span class="attr">ItemTemplate</span><span class="kwrd">="{StaticResource FolderItemTemplate}"</span><span class="kwrd">&gt;</span>
  
        <span class="kwrd">&lt;/</span><span class="html">sdk:TreeView</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<p>请注意，我们这里用到一个特殊的DataTemplate：HierarchicalDataTemplate，并且将其设置为Treeview的ItemTemplate。
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<h2>4. 查看效果</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106222319461124.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106222319469521.png" width="641" height="229"></a></p>]]></description></item><item><title>WCF技术的不同应用场景及其实现分析(续）</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2086314.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 21 Jun 2011 11:02:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2086314.html</guid><description><![CDATA[<p><a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2085979.html#commentform">上一篇</a> 我总结介绍了WCF技术的背景，核心要素，和典型场景，目的是希望让大家更好地掌握WCF技术，并且在工作中知道如何选择。</p> <p>由于篇幅较长，这一篇继续写完第二部分。</p> <h4>应用场景：</h4> <p>WCF 从发布到现在的将近5年左右的时间，经过了多次增强和改进，从最开始单纯的SOAP Service的方式，发展出来其他多种应用场景，分别是 <blockquote> <p>1. SOAP Services <p>2. WebHttp Services <p>3. Data Services <p>4. Workflow Services <p>5. RIA Services</p></blockquote> <p>本文将讨论后面3种应用场景。 <p>&nbsp; <h2>3. Data Services</h2> <p>Data Service，顾名思义，是指数据服务。最开始的名称叫做ADO.NET Data Service，是从.NET Framework 3.5 SP1开始提供的功能。在.NET Framework 4.0中，已经改名为WCF Data Service. <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902033086.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902031724.png" width="722" height="358"></a> <p>&nbsp; <p>这个服务类型是WebHttp Service的一种特殊实现，也就是说，它延续了WebHttp Service的Restful的特点。但与标准的WebHttp Service，不同的是，它具有一套完整的API，包括客户端的访问API。这样也就允许，它既支持类似于Javascript这样的脚本访问，也支持在传统客户端中进行访问。 <p>需要注意的是，WCF Data Service既然是数据服务，它天生就是为数据访问有关。这是它最强的地方，它的出现大大简化了我们编写数据访问服务的工作。好不夸张地说，确实很酷。你可以想象一下，你有一个数据库，有N张表，你想实现对这些表的增删改查操作，如果你一个一个去编写，显然是一件非常辛苦而且没有效率的事情。 <p>&nbsp; <p>WCF Data Service支持两种数据模型，一种是LINQ to SQL, 一种是ADO.NET Entity Frmawork。下面的例子使用了LINQ to SQL. 使用的数据库是微软提供的范例数据库<a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=06616212-0356-46a0-8da2-eebc53a68034">Northwind</a>. <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902044298.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902048235.png" width="919" height="727"></a> <p>有了上面这个模型之后，我们就可以添加一个WCF Data Service了。这是一个继承子DataService的类型，并且通过svc这种Self Host的方式提供宿主。<pre class="csharpcode"><span class="kwrd">using</span> System.Data.Services;
<span class="kwrd">using</span> System.Data.Services.Common;

<span class="kwrd">namespace</span> WebApplication_WCFDataService_
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> NorthwindDataService : DataService&lt;<strong><font color="#ff0000">NorthwindDataClassesDataContext</font></strong>&gt;
    {
        <span class="rem">// This method is called only once to initialize service-wide policies.</span>
        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> InitializeService(DataServiceConfiguration config)
        {
            <span class="rem">// TODO: set rules to indicate which entity sets and service operations are visible, updatable, etc.</span>
            <span class="rem">// Examples:</span>
            <font color="#ff0000"><strong>config.SetEntitySetAccessRule(<span class="str">"*"</span>, EntitySetRights.AllRead);</strong></font>
            <span class="rem">// config.SetServiceOperationAccessRule("MyServiceOperation", ServiceOperationRights.All);</span>
            config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V2;
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp; <p>这样就完成了所有的操作，在浏览器中可以通过REST的风格测试该服务。例如，下面的语法是查看所有Customers的
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902044680.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902058857.png" width="1028" height="701"></a>
<p>下面是查看某个Customer信息的
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902053874.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902057811.png" width="1028" height="701"></a>
<p>我们可以看到，默认情况下,WCF服务是用XML返回数据的。关于如何让它返回JSON数据，我之前有一篇文章专门探讨。请参考：<a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078830.html">http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078830.html</a>
<p>&nbsp; <p>值得注意的是，与WebHttp Service不同的是，Data Service可以在标准客户端中进行访问。而且它的方式是有些特殊的，具体来说，客户端也是通过一个DataServiceContext的类型来访问的. 例如下面这样（这个文件是我们添加服务引用时自动生成的）
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902054463.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902061432.png" width="1012" height="278"></a>
<p>我们可以通过如下这样的代码进行调用<pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            var ctx = <span class="kwrd">new</span> DataModel.NorthwindDataClassesDataContext(
                <span class="kwrd">new</span> Uri(<span class="str">"http://localhost.:9475/NorthwindDataService.svc/"</span>));

            var query = from c <span class="kwrd">in</span> ctx.Customers
                        select c;

            <span class="kwrd">foreach</span> (var item <span class="kwrd">in</span> query)
            {
                Console.WriteLine(item.CompanyName);
            }
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>【注意】这里调用的方式，返回的数据是XML格式的，而不是SOAP Envelope的那种方式。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902068956.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902065925.png" width="1012" height="761"></a></p>
<p>&nbsp;</p>
<p>关于Data Service与WebHttp Service的相同之处，还体现在它也可以添加自定义的Operation，例如下面这篇文章介绍的那样</p>
<p><a href="http://www.cnblogs.com/chenxizhang/archive/2010/02/28/1675270.html">http://www.cnblogs.com/chenxizhang/archive/2010/02/28/1675270.html</a></p>
<p>&nbsp;</p>
<p>常见的问题还有：Data Service如何做身份验证？我之前写过一篇文章介绍这个问题：<a href="http://www.cnblogs.com/chenxizhang/archive/2010/02/28/1675307.html">http://www.cnblogs.com/chenxizhang/archive/2010/02/28/1675307.html</a></p>
<p>&nbsp;</p>
<p><strong><font color="#ff0000">总结</font></strong>：Data Service是一种结合数据模型快速实现数据访问的方式。它依赖LINQ to SQL或者ADO.NET Entity Framework，并且提供了RESTFul的实现（它所使用的绑定就是WebHttpBinding)。它有一套专用的安全模型，与标准的WCF不一样。</p>
<p>&nbsp;</p>





<h2>4. Workflow Services</h2>
<p>这是一个很有意思的服务。这是在.NET Framework 4.0中开始出现的，也就是随着Workflow Foundation升级到4.0之后，提供了一种全新的服务类型，简单地来说，它是可以直接与Workflow Foundation(工作流）想结合的一种服务。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902065401.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902068466.png" width="735" height="243"></a></p>
<p>创建好的项目中，包含了一个特殊的文件，叫xamlx。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902079579.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902085010.png" width="919" height="727"></a></p>
<p>虽然该文件很怪异，但它在浏览器中打开来看的效果却有标准的WCF服务没有什么区别，如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902083615.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902087269.png" width="1028" height="701"></a></p>
<p>不少朋友都不理解为什么需要这样一个服务，我相信正在看这篇文章的你也一定心存疑惑吧？</p>
<p>这是一个WCF服务，但为什么要与Workflow(工作流）扯上关系呢？</p>
<p>答案就是：<strong><font color="#ff0000">如果你这个WCF服务，要提供的功能，希望用工作流的方式来设计和实现的话，你就可以用这个服务</font></strong>。</p>
<p>换句话说，这里的重点，仍然是WCF服务，而不是Workflow。Workflow是实现的一种方式。具体来说，在这种方式中，你可以不写任何代码就能实现一些流程功能。</p>
<p>Workflow的讨论显然超出了本文的范畴，这里就不多展开了。</p>
<p>以上面这个服务为例，它是公开了一个方法叫“GetData”，该方法接受一个参数，叫“data”，是整数型的。默认情况下，这个服务会将用户传入的参数data作为响应直接发给调用方。</p>
<p>&nbsp;</p>
<p>那么，如何理解工作流设计呢？假设我们希望为该服务添加一个简单逻辑，用户如果传入的data是偶数，则返回“偶数”，否则返回“奇数”这样的文本字符串。我们可以将这个服务稍做修改。如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902091238.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902098240.png" width="948" height="732"></a></p>
<p>大家请注意，实现这个功能，我们并不需要编写代码。</p>
<p>实际上，上面这个服务就是一段XAML的定义。这种做法自有它的好处，但这里不深入讨论了。</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">WorkflowService</span> <span class="attr">mc:Ignorable</span><span class="kwrd">="sap"</span> <span class="attr">ConfigurationName</span><span class="kwrd">="Service1"</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="561,620"</span> <span class="attr">Name</span><span class="kwrd">="Service1"</span> <span class="attr">mva:VisualBasic</span>.<span class="attr">Settings</span><span class="kwrd">="Assembly references and imported namespaces serialized as XML namespaces"</span> <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/netfx/2009/xaml/servicemodel"</span> <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span> <span class="attr">xmlns:mv</span><span class="kwrd">="clr-namespace:Microsoft.VisualBasic;assembly=System"</span> <span class="attr">xmlns:mva</span><span class="kwrd">="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"</span> <span class="attr">xmlns:p</span><span class="kwrd">="http://tempuri.org/"</span> <span class="attr">xmlns:p1</span><span class="kwrd">="http://schemas.microsoft.com/netfx/2009/xaml/activities"</span> <span class="attr">xmlns:s</span><span class="kwrd">="clr-namespace:System;assembly=mscorlib"</span> <span class="attr">xmlns:s1</span><span class="kwrd">="clr-namespace:System;assembly=System"</span> <span class="attr">xmlns:s2</span><span class="kwrd">="clr-namespace:System;assembly=System.Xml"</span> <span class="attr">xmlns:s3</span><span class="kwrd">="clr-namespace:System;assembly=System.Core"</span> <span class="attr">xmlns:s4</span><span class="kwrd">="clr-namespace:System;assembly=System.ServiceModel"</span> <span class="attr">xmlns:sa</span><span class="kwrd">="clr-namespace:System.Activities;assembly=System.Activities"</span> <span class="attr">xmlns:sad</span><span class="kwrd">="clr-namespace:System.Activities.Debugger;assembly=System.Activities"</span> <span class="attr">xmlns:sap</span><span class="kwrd">="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"</span> <span class="attr">xmlns:scg</span><span class="kwrd">="clr-namespace:System.Collections.Generic;assembly=System"</span> <span class="attr">xmlns:scg1</span><span class="kwrd">="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel"</span> <span class="attr">xmlns:scg2</span><span class="kwrd">="clr-namespace:System.Collections.Generic;assembly=System.Core"</span> <span class="attr">xmlns:scg3</span><span class="kwrd">="clr-namespace:System.Collections.Generic;assembly=mscorlib"</span> <span class="attr">xmlns:sd</span><span class="kwrd">="clr-namespace:System.Data;assembly=System.Data"</span> <span class="attr">xmlns:sl</span><span class="kwrd">="clr-namespace:System.Linq;assembly=System.Core"</span> <span class="attr">xmlns:st</span><span class="kwrd">="clr-namespace:System.Text;assembly=mscorlib"</span> <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">p1:Sequence</span> <span class="attr">DisplayName</span><span class="kwrd">="Sequential Service"</span> <span class="attr">sad:XamlDebuggerXmlReader</span>.<span class="attr">FileName</span><span class="kwrd">="d:\temp\WCFTechonologyComparaionSolution\DeclarativeServiceLibrary1\Service1.xamlx"</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="531,590"</span> <span class="attr">mva:VisualBasic</span>.<span class="attr">Settings</span><span class="kwrd">="Assembly references and imported namespaces serialized as XML namespaces"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p1:Sequence.Variables</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">p1:Variable</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="CorrelationHandle"</span> <span class="attr">Name</span><span class="kwrd">="handle"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">p1:Variable</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:Int32"</span> <span class="attr">Name</span><span class="kwrd">="data"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">p1:Variable</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span> <span class="attr">Name</span><span class="kwrd">="result"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">p1:Sequence.Variables</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">sap:WorkflowViewStateService.ViewState</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">scg3:Dictionary</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String, x:Object"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">x:Boolean</span> <span class="attr">x:Key</span><span class="kwrd">="IsExpanded"</span><span class="kwrd">&gt;</span>True<span class="kwrd">&lt;/</span><span class="html">x:Boolean</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">scg3:Dictionary</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">sap:WorkflowViewStateService.ViewState</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Receive</span> <span class="attr">x:Name</span><span class="kwrd">="__ReferenceID0"</span> <span class="attr">CanCreateInstance</span><span class="kwrd">="True"</span> <span class="attr">DisplayName</span><span class="kwrd">="ReceiveRequest"</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="509,90"</span> <span class="attr">OperationName</span><span class="kwrd">="GetData"</span> <span class="attr">ServiceContractName</span><span class="kwrd">="p:IService"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">Receive.CorrelationInitializers</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">RequestReplyCorrelationInitializer</span> <span class="attr">CorrelationHandle</span><span class="kwrd">="[handle]"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">Receive.CorrelationInitializers</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">ReceiveMessageContent</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p1:OutArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:Int32"</span><span class="kwrd">&gt;</span>[data]<span class="kwrd">&lt;/</span><span class="html">p1:OutArgument</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">ReceiveMessageContent</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Receive</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">p1:If</span> <span class="attr">Condition</span><span class="kwrd">="[data Mod 2 = 0]"</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="509,206"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">p1:If.Then</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p1:Assign</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="242,100"</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">p1:Assign.To</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">p1:OutArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span><span class="kwrd">&gt;</span>[result]<span class="kwrd">&lt;/</span><span class="html">p1:OutArgument</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">p1:Assign.To</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">p1:Assign.Value</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">p1:InArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span><span class="kwrd">&gt;</span>偶数<span class="kwrd">&lt;/</span><span class="html">p1:InArgument</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">p1:Assign.Value</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">p1:Assign</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">p1:If.Then</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">p1:If.Else</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p1:Assign</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="242,100"</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">p1:Assign.To</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">p1:OutArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span><span class="kwrd">&gt;</span>[result]<span class="kwrd">&lt;/</span><span class="html">p1:OutArgument</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">p1:Assign.To</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">p1:Assign.Value</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">p1:InArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span><span class="kwrd">&gt;</span>奇数<span class="kwrd">&lt;/</span><span class="html">p1:InArgument</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">p1:Assign.Value</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">p1:Assign</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">p1:If.Else</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">p1:If</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">SendReply</span> <span class="attr">Request</span><span class="kwrd">="{x:Reference __ReferenceID0}"</span> <span class="attr">DisplayName</span><span class="kwrd">="SendResponse"</span> <span class="attr">sap:VirtualizedContainerService</span>.<span class="attr">HintSize</span><span class="kwrd">="509,90"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">SendMessageContent</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">p1:InArgument</span> <span class="attr">x:TypeArguments</span><span class="kwrd">="x:String"</span><span class="kwrd">&gt;</span>[result]<span class="kwrd">&lt;/</span><span class="html">p1:InArgument</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">SendMessageContent</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">SendReply</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">p1:Sequence</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">WorkflowService</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>那么，这个服务怎么使用呢？没有什么特别的，就和正常的WCF服务一样就可以了：添加服务引用，然后调用服务。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902096844.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902106321.png" width="635" height="514"></a></p>
<p>需要注意的是，这个服务是使用basicHttpBinding的，而且也无法修改</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">bindings</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">basicHttpBinding</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">binding</span> <span class="attr">name</span><span class="kwrd">="BasicHttpBinding_IService"</span> <span class="attr">closeTimeout</span><span class="kwrd">="00:01:00"</span>
                    <span class="attr">openTimeout</span><span class="kwrd">="00:01:00"</span> <span class="attr">receiveTimeout</span><span class="kwrd">="00:10:00"</span> <span class="attr">sendTimeout</span><span class="kwrd">="00:01:00"</span>
                    <span class="attr">allowCookies</span><span class="kwrd">="false"</span> <span class="attr">bypassProxyOnLocal</span><span class="kwrd">="false"</span> <span class="attr">hostNameComparisonMode</span><span class="kwrd">="StrongWildcard"</span>
                    <span class="attr">maxBufferSize</span><span class="kwrd">="65536"</span> <span class="attr">maxBufferPoolSize</span><span class="kwrd">="524288"</span> <span class="attr">maxReceivedMessageSize</span><span class="kwrd">="65536"</span>
                    <span class="attr">messageEncoding</span><span class="kwrd">="Text"</span> <span class="attr">textEncoding</span><span class="kwrd">="utf-8"</span> <span class="attr">transferMode</span><span class="kwrd">="Buffered"</span>
                    <span class="attr">useDefaultWebProxy</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">readerQuotas</span> <span class="attr">maxDepth</span><span class="kwrd">="32"</span> <span class="attr">maxStringContentLength</span><span class="kwrd">="8192"</span> <span class="attr">maxArrayLength</span><span class="kwrd">="16384"</span>
                        <span class="attr">maxBytesPerRead</span><span class="kwrd">="4096"</span> <span class="attr">maxNameTableCharCount</span><span class="kwrd">="16384"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">security</span> <span class="attr">mode</span><span class="kwrd">="None"</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">transport</span> <span class="attr">clientCredentialType</span><span class="kwrd">="None"</span> <span class="attr">proxyCredentialType</span><span class="kwrd">="None"</span>
                            <span class="attr">realm</span><span class="kwrd">=""</span> <span class="kwrd">/&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">message</span> <span class="attr">clientCredentialType</span><span class="kwrd">="UserName"</span> <span class="attr">algorithmSuite</span><span class="kwrd">="Default"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">security</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">binding</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">basicHttpBinding</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">bindings</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">client</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="http://localhost:14262/Service1.xamlx"</span> <span class="attr">binding</span><span class="kwrd">="basicHttpBinding"</span>
                <span class="attr">bindingConfiguration</span><span class="kwrd">="BasicHttpBinding_IService"</span> <span class="attr">contract</span><span class="kwrd">="WorkflowService.IService"</span>
                <span class="attr">name</span><span class="kwrd">="BasicHttpBinding_IService"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">client</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>






<p>我们看看程序调用的效果吧</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Linq;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            var proxy = <span class="kwrd">new</span> WorkflowService.ServiceClient();
            Console.WriteLine(proxy.GetData(20));<span class="rem">//这个会返回“偶数”</span>
            Console.WriteLine(proxy.GetData(215));<span class="rem">//这个会返回“奇数”</span>

            Console.Read();
        }
    }
}
</pre>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902103289.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902107434.png" width="416" height="139"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p><strong><font color="#ff0000">总结</font></strong>：Workflow Services是一种将Workflow Foundation与WCF结合的实现，它采用了basicHttpBinding, 允许我们通过声明（Declarative）而不是代码（Code）设计一个服务。</p>
<p>【备注】需要注意的是，在Workflow 的设计中，也可以发起WCF 调用，但这是另外一个问题了。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902106354.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902109419.png" width="236" height="206"></a></p>
<p>大家有点晕了对吧，我就不再往下展开了吧。</p>
<p>&nbsp;</p>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>5. RIA Services</h2>
<p>这是本文最后一个小节，将介绍RIA Services。</p>
<p>RIA的意思是，Rich Internet Application。在微软平台上，Silverlight就是RIA战略中的核心产品，所以很显然，RIA Service主要就是为Silverlight服务的。这个是.NET Framework 4.0中才有的功能，并且还需要安装RIA Service Toolkit。</p>
<p>推荐你使用微软免费提供的<a href="http://www.microsoft.com/web/downloads/platform.aspx">Web Platform Installer</a>来安装必要的一些组件</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621190211324.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902113978.png" width="784" height="544"></a></p>
<p>如果你对RIA Service一些基本概念不熟悉，请参考微软官方介绍 <a href="http://www.silverlight.net/getstarted/riaservices/">http://www.silverlight.net/getstarted/riaservices/</a></p>
<p>我们一般可以在新建Silverlight应用程序的时候，选择是否启用WCF RIA Services,如下图所示</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621190211946.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902111503.png" width="538" height="449"></a></p>
<p>启用该服务的意思是，让Silverlight程序链接到Web程序</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902125157.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902128014.png" width="866" height="693"></a></p>
<p>为什么需要这样一个链接呢？这是因为RIA Service会有一个特殊的机制，在Silverlight应用程序编译的时候，会自动去找到所链接的Web项目，将里面的RIA Service在本地生成一个代理类。</p>
<p>&nbsp;</p>
<p>RIA Services，具体到Web项目中来，其实是所谓的Domain Service。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902126618.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902138047.png" width="734" height="362"></a></p>
<p>与WCF Data Service相似的是，Domain Service也需要有一个数据模型。但不同的是，它支持ADO.NET Entity Framework之外，还支持自定义业务模型。</p>
<p>【注意】Domain Service目前不支持LINQ to SQL模型了。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902138669.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902151866.png" width="919" height="727"></a></p>
<p>创建Domain Service的时候可以选择到这个数据模型</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902153851.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621190215819.png" width="464" height="553"></a></p><pre class="csharpcode"> </pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>该工具会自动生成如下代码</p><pre class="csharpcode">
<span class="kwrd">namespace</span> SilverlightApplication1.Web
{
    <span class="kwrd">using</span> System.Data;
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.EntityFramework;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// Implements application logic using the NorthwindEntities context.</span>
    <span class="rem">// TODO: Add your application logic to these methods or in additional methods.</span>
    <span class="rem">// TODO: Wire up authentication (Windows/ASP.NET Forms) and uncomment the following to disable anonymous access</span>
    <span class="rem">// Also consider adding roles to restrict access as appropriate.</span>
    <span class="rem">// [RequiresAuthentication]</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> NorthwindDomainService : LinqToEntitiesDomainService&lt;NorthwindEntities&gt;
    {

        <span class="rem">// TODO:</span>
        <span class="rem">// Consider constraining the results of your query method.  If you need additional input you can</span>
        <span class="rem">// add parameters to this method or create additional query methods with different names.</span>
        <span class="rem">// To support paging you will need to add ordering to the 'Customers' query.</span>
        [Query(IsDefault = <span class="kwrd">true</span>)]
        <span class="kwrd">public</span> IQueryable&lt;Customer&gt; GetCustomers()
        {
            <span class="kwrd">return</span> <span class="kwrd">this</span>.ObjectContext.Customers;
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> InsertCustomer(Customer customer)
        {
            <span class="kwrd">if</span> ((customer.EntityState != EntityState.Detached))
            {
                <span class="kwrd">this</span>.ObjectContext.ObjectStateManager.ChangeObjectState(customer, EntityState.Added);
            }
            <span class="kwrd">else</span>
            {
                <span class="kwrd">this</span>.ObjectContext.Customers.AddObject(customer);
            }
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> UpdateCustomer(Customer currentCustomer)
        {
            <span class="kwrd">this</span>.ObjectContext.Customers.AttachAsModified(currentCustomer, <span class="kwrd">this</span>.ChangeSet.GetOriginal(currentCustomer));
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> DeleteCustomer(Customer customer)
        {
            <span class="kwrd">if</span> ((customer.EntityState != EntityState.Detached))
            {
                <span class="kwrd">this</span>.ObjectContext.ObjectStateManager.ChangeObjectState(customer, EntityState.Deleted);
            }
            <span class="kwrd">else</span>
            {
                <span class="kwrd">this</span>.ObjectContext.Customers.Attach(customer);
                <span class="kwrd">this</span>.ObjectContext.Customers.DeleteObject(customer);
            }
        }
    }
}

</pre>
<p>与此同时，由于我的Silverlight 应用程序是链接到了这个Web项目的，所以如果此时编译Silverlight应用程序的话，会自动根据这个DomainService生成一个类型</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902158344.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902169490.png" width="920" height="723"></a></p>
<p>这个类型的大致代码如下</p><pre class="csharpcode"><span class="rem">//------------------------------------------------------------------------------</span>
<span class="rem">// &lt;auto-generated&gt;</span>
<span class="rem">//     This code was generated by a tool.</span>
<span class="rem">//     Runtime Version:4.0.30319.235</span>
<span class="rem">//</span>
<span class="rem">//     Changes to this file may cause incorrect behavior and will be lost if</span>
<span class="rem">//     the code is regenerated.</span>
<span class="rem">// &lt;/auto-generated&gt;</span>
<span class="rem">//------------------------------------------------------------------------------</span>

<span class="kwrd">namespace</span> SilverlightApplication1
{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Context for the RIA application.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;remarks&gt;</span>
    <span class="rem">/// This context extends the base to make application services and types available</span>
    <span class="rem">/// for consumption from code and xaml.</span>
    <span class="rem">/// &lt;/remarks&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">sealed</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> WebContext : WebContextBase
    {
        
        <span class="preproc">#region</span> Extensibility Method Definitions

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// This method is invoked from the constructor once initialization is complete and</span>
        <span class="rem">/// can be used for further object setup.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreated();

        <span class="preproc">#endregion</span>
        
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the WebContext class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> WebContext()
        {
            <span class="kwrd">this</span>.OnCreated();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets the context that is registered as a lifetime object with the current application.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;exception cref="InvalidOperationException"&gt; is thrown if there is no current application,</span>
        <span class="rem">/// no contexts have been added, or more than one context has been added.</span>
        <span class="rem">/// &lt;/exception&gt;</span>
        <span class="rem">/// &lt;seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">new</span> <span class="kwrd">static</span> WebContext Current
        {
            get
            {
                <span class="kwrd">return</span> ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
<span class="kwrd">namespace</span> SilverlightApplication1.Web
{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.Collections.Generic;
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Runtime.Serialization;
    <span class="kwrd">using</span> System.ServiceModel;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Client;
    <span class="kwrd">using</span> System.ServiceModel.Web;
    
    
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// The 'Customer' entity class.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [DataContract(Namespace=<span class="str">"http://schemas.datacontract.org/2004/07/SilverlightApplication1.Web"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">sealed</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Customer : Entity
    {
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _address;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _city;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _companyName;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _contactName;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _contactTitle;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _country;
        
        <span class="kwrd">private</span> Nullable&lt;DateTime&gt; _creationDate;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _customerID;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _fax;
        
        <span class="kwrd">private</span> Nullable&lt;DateTime&gt; _lastEditDate;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _phone;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _postalCode;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _region;
        
        <span class="preproc">#region</span> Extensibility Method Definitions

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// This method is invoked from the constructor once initialization is complete and</span>
        <span class="rem">/// can be used for further object setup.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreated();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnAddressChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnAddressChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCityChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCityChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCompanyNameChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCompanyNameChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnContactNameChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnContactNameChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnContactTitleChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnContactTitleChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCountryChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCountryChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreationDateChanging(Nullable&lt;DateTime&gt; <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreationDateChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCustomerIDChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCustomerIDChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnFaxChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnFaxChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnLastEditDateChanging(Nullable&lt;DateTime&gt; <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnLastEditDateChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnPhoneChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnPhoneChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnPostalCodeChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnPostalCodeChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnRegionChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnRegionChanged();

        <span class="preproc">#endregion</span>
        
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="Customer"/&gt; class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> Customer()
        {
            <span class="kwrd">this</span>.OnCreated();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Address' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(60)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Address
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._address;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._address != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnAddressChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Address"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Address"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._address = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Address"</span>);
                    <span class="kwrd">this</span>.OnAddressChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'City' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(15)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> City
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._city;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._city != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnCityChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"City"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"City"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._city = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"City"</span>);
                    <span class="kwrd">this</span>.OnCityChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'CompanyName' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [Required()]
        [StringLength(40)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> CompanyName
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._companyName;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._companyName != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnCompanyNameChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"CompanyName"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"CompanyName"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._companyName = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"CompanyName"</span>);
                    <span class="kwrd">this</span>.OnCompanyNameChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'ContactName' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(30)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> ContactName
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._contactName;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._contactName != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnContactNameChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"ContactName"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"ContactName"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._contactName = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"ContactName"</span>);
                    <span class="kwrd">this</span>.OnContactNameChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'ContactTitle' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(30)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> ContactTitle
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._contactTitle;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._contactTitle != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnContactTitleChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"ContactTitle"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"ContactTitle"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._contactTitle = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"ContactTitle"</span>);
                    <span class="kwrd">this</span>.OnContactTitleChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Country' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(15)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Country
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._country;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._country != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnCountryChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Country"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Country"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._country = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Country"</span>);
                    <span class="kwrd">this</span>.OnCountryChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'CreationDate' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        <span class="kwrd">public</span> Nullable&lt;DateTime&gt; CreationDate
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._creationDate;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._creationDate != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnCreationDateChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"CreationDate"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"CreationDate"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._creationDate = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"CreationDate"</span>);
                    <span class="kwrd">this</span>.OnCreationDateChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'CustomerID' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [Editable(<span class="kwrd">false</span>, AllowInitialValue=<span class="kwrd">true</span>)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(5)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> CustomerID
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._customerID;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._customerID != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnCustomerIDChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"CustomerID"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._customerID = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaisePropertyChanged(<span class="str">"CustomerID"</span>);
                    <span class="kwrd">this</span>.OnCustomerIDChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Fax' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(24)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Fax
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._fax;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._fax != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnFaxChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Fax"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Fax"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._fax = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Fax"</span>);
                    <span class="kwrd">this</span>.OnFaxChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'LastEditDate' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        <span class="kwrd">public</span> Nullable&lt;DateTime&gt; LastEditDate
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._lastEditDate;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._lastEditDate != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnLastEditDateChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"LastEditDate"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"LastEditDate"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._lastEditDate = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"LastEditDate"</span>);
                    <span class="kwrd">this</span>.OnLastEditDateChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Phone' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(24)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Phone
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._phone;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._phone != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnPhoneChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Phone"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Phone"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._phone = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Phone"</span>);
                    <span class="kwrd">this</span>.OnPhoneChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'PostalCode' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(10)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> PostalCode
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._postalCode;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._postalCode != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnPostalCodeChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"PostalCode"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"PostalCode"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._postalCode = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"PostalCode"</span>);
                    <span class="kwrd">this</span>.OnPostalCodeChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Region' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [StringLength(15)]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Region
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._region;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._region != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnRegionChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Region"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Region"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._region = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Region"</span>);
                    <span class="kwrd">this</span>.OnRegionChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Computes a value from the key fields that uniquely identifies this entity instance.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;An object instance that uniquely identifies this entity instance.&lt;/returns&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">object</span> GetIdentity()
        {
            <span class="kwrd">return</span> <span class="kwrd">this</span>._customerID;
        }
    }
    
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// The DomainContext corresponding to the 'NorthwindDomainService' DomainService.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">sealed</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> NorthwindDomainContext : DomainContext
    {
        
        <span class="preproc">#region</span> Extensibility Method Definitions

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// This method is invoked from the constructor once initialization is complete and</span>
        <span class="rem">/// can be used for further object setup.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreated();

        <span class="preproc">#endregion</span>
        
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="NorthwindDomainContext"/&gt; class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> NorthwindDomainContext() : 
                <span class="kwrd">this</span>(<span class="kwrd">new</span> WebDomainClient&lt;INorthwindDomainServiceContract&gt;(<span class="kwrd">new</span> Uri(<span class="str">"SilverlightApplication1-Web-NorthwindDomainService.svc"</span>, UriKind.Relative)))
        {
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="NorthwindDomainContext"/&gt; class with the specified service URI.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="serviceUri"&gt;The NorthwindDomainService service URI.&lt;/param&gt;</span>
        <span class="kwrd">public</span> NorthwindDomainContext(Uri serviceUri) : 
                <span class="kwrd">this</span>(<span class="kwrd">new</span> WebDomainClient&lt;INorthwindDomainServiceContract&gt;(serviceUri))
        {
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="NorthwindDomainContext"/&gt; class with the specified &lt;paramref name="domainClient"/&gt;.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="domainClient"&gt;The DomainClient instance to use for this DomainContext.&lt;/param&gt;</span>
        <span class="kwrd">public</span> NorthwindDomainContext(DomainClient domainClient) : 
                <span class="kwrd">base</span>(domainClient)
        {
            <span class="kwrd">this</span>.OnCreated();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets the set of &lt;see cref="Customer"/&gt; entity instances that have been loaded into this &lt;see cref="NorthwindDomainContext"/&gt; instance.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> EntitySet&lt;Customer&gt; Customers
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">base</span>.EntityContainer.GetEntitySet&lt;Customer&gt;();
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets an EntityQuery instance that can be used to load &lt;see cref="Customer"/&gt; entity instances using the 'GetCustomers' query.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;An EntityQuery that can be loaded to retrieve &lt;see cref="Customer"/&gt; entity instances.&lt;/returns&gt;</span>
        <span class="kwrd">public</span> EntityQuery&lt;Customer&gt; GetCustomersQuery()
        {
            <span class="kwrd">this</span>.ValidateMethod(<span class="str">"GetCustomersQuery"</span>, <span class="kwrd">null</span>);
            <span class="kwrd">return</span> <span class="kwrd">base</span>.CreateQuery&lt;Customer&gt;(<span class="str">"GetCustomers"</span>, <span class="kwrd">null</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>);
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Creates a new EntityContainer for this DomainContext's EntitySets.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;A new container instance.&lt;/returns&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">override</span> EntityContainer CreateEntityContainer()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span> NorthwindDomainContextEntityContainer();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Service contract for the 'NorthwindDomainService' DomainService.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [ServiceContract()]
        <span class="kwrd">public</span> <span class="kwrd">interface</span> INorthwindDomainServiceContract
        {
            
            <span class="rem">/// &lt;summary&gt;</span>
            <span class="rem">/// Asynchronously invokes the 'GetCustomers' operation.</span>
            <span class="rem">/// &lt;/summary&gt;</span>
            <span class="rem">/// &lt;param name="callback"&gt;Callback to invoke on completion.&lt;/param&gt;</span>
            <span class="rem">/// &lt;param name="asyncState"&gt;Optional state object.&lt;/param&gt;</span>
            <span class="rem">/// &lt;returns&gt;An IAsyncResult that can be used to monitor the request.&lt;/returns&gt;</span>
            [FaultContract(<span class="kwrd">typeof</span>(DomainServiceFault), Action=<span class="str">"http://tempuri.org/NorthwindDomainService/GetCustomersDomainServiceFault"</span>, Name=<span class="str">"DomainServiceFault"</span>, Namespace=<span class="str">"DomainServices"</span>)]
            [OperationContract(AsyncPattern=<span class="kwrd">true</span>, Action=<span class="str">"http://tempuri.org/NorthwindDomainService/GetCustomers"</span>, ReplyAction=<span class="str">"http://tempuri.org/NorthwindDomainService/GetCustomersResponse"</span>)]
            [WebGet()]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, <span class="kwrd">object</span> asyncState);
            
            <span class="rem">/// &lt;summary&gt;</span>
            <span class="rem">/// Completes the asynchronous operation begun by 'BeginGetCustomers'.</span>
            <span class="rem">/// &lt;/summary&gt;</span>
            <span class="rem">/// &lt;param name="result"&gt;The IAsyncResult returned from 'BeginGetCustomers'.&lt;/param&gt;</span>
            <span class="rem">/// &lt;returns&gt;The 'QueryResult' returned from the 'GetCustomers' operation.&lt;/returns&gt;</span>
            QueryResult&lt;Customer&gt; EndGetCustomers(IAsyncResult result);
            
            <span class="rem">/// &lt;summary&gt;</span>
            <span class="rem">/// Asynchronously invokes the 'SubmitChanges' operation.</span>
            <span class="rem">/// &lt;/summary&gt;</span>
            <span class="rem">/// &lt;param name="changeSet"&gt;The change-set to submit.&lt;/param&gt;</span>
            <span class="rem">/// &lt;param name="callback"&gt;Callback to invoke on completion.&lt;/param&gt;</span>
            <span class="rem">/// &lt;param name="asyncState"&gt;Optional state object.&lt;/param&gt;</span>
            <span class="rem">/// &lt;returns&gt;An IAsyncResult that can be used to monitor the request.&lt;/returns&gt;</span>
            [FaultContract(<span class="kwrd">typeof</span>(DomainServiceFault), Action=<span class="str">"http://tempuri.org/NorthwindDomainService/SubmitChangesDomainServiceFault"</span>, Name=<span class="str">"DomainServiceFault"</span>, Namespace=<span class="str">"DomainServices"</span>)]
            [OperationContract(AsyncPattern=<span class="kwrd">true</span>, Action=<span class="str">"http://tempuri.org/NorthwindDomainService/SubmitChanges"</span>, ReplyAction=<span class="str">"http://tempuri.org/NorthwindDomainService/SubmitChangesResponse"</span>)]
            IAsyncResult BeginSubmitChanges(IEnumerable&lt;ChangeSetEntry&gt; changeSet, AsyncCallback callback, <span class="kwrd">object</span> asyncState);
            
            <span class="rem">/// &lt;summary&gt;</span>
            <span class="rem">/// Completes the asynchronous operation begun by 'BeginSubmitChanges'.</span>
            <span class="rem">/// &lt;/summary&gt;</span>
            <span class="rem">/// &lt;param name="result"&gt;The IAsyncResult returned from 'BeginSubmitChanges'.&lt;/param&gt;</span>
            <span class="rem">/// &lt;returns&gt;The collection of change-set entry elements returned from 'SubmitChanges'.&lt;/returns&gt;</span>
            IEnumerable&lt;ChangeSetEntry&gt; EndSubmitChanges(IAsyncResult result);
        }
        
        <span class="kwrd">internal</span> <span class="kwrd">sealed</span> <span class="kwrd">class</span> NorthwindDomainContextEntityContainer : EntityContainer
        {
            
            <span class="kwrd">public</span> NorthwindDomainContextEntityContainer()
            {
                <span class="kwrd">this</span>.CreateEntitySet&lt;Customer&gt;(EntitySetOperations.All);
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>我们看到，其实在客户端是有一个WebContext的类型的。下面演示一下，我们具体在Silverlight里面如何使用该服务吧</p>
<p>MainPage.xaml</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplication1.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span> <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span> <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span> <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="true"</span> <span class="attr">Margin</span><span class="kwrd">="20,26,23,12"</span> <span class="attr">Name</span><span class="kwrd">="dataGrid1"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>MainPage.xaml.cs</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> SilverlightApplication1.Web;

<span class="kwrd">namespace</span> SilverlightApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> NorthwindDomainContext();
            var op = ctx.Load&lt;Customer&gt;(ctx.GetCustomersQuery());
            dataGrid1.ItemsSource = op.Entities;
        }
    }
}
</pre>
<p>【备注】我们都知道Silverlight中访问数据都是异步的（一般编写代码都比较繁琐），RIA Service对此做了优化，但实际上上面这个Load方法也是一个异步方法。</p>
<p>&nbsp;</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902178160.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621190218768.png" width="1028" height="701"></a></p>
<p>如果我们需要对数据进行过滤，服务器不需要做任何修改。只要在Silverlight中用下面这样的语法就可以了</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> SilverlightApplication1.Web;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.ServiceModel.DomainServices.Client;

<span class="kwrd">namespace</span> SilverlightApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> NorthwindDomainContext();
            var query = from c <span class="kwrd">in</span> ctx.GetCustomersQuery()
                        <span class="kwrd">where</span> c.Country == <span class="str">"USA"</span>
                        select c;

                        
            var op = ctx.Load&lt;Customer&gt;(query);
            dataGrid1.ItemsSource = op.Entities;
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902189197.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621190219900.png" width="1028" height="701"></a></p>
<p>这是多么方便啊。所以，我有时候也喜欢将RIA解读为:Rapid Internet Application. 它大大地提高了Silverlight应用程序开发的生产力。</p>
<p>&nbsp;</p>
<p>那么，RIA Service后台到底是如何实现的呢？与前面几种都不同的是，它是通过一个特殊的HttpModule实现的</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">configSections</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">sectionGroup</span> <span class="attr">name</span><span class="kwrd">="system.serviceModel"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">section</span> <span class="attr">name</span><span class="kwrd">="domainServices"</span> <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.DomainServicesSection, System.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="attr">allowDefinition</span><span class="kwrd">="MachineToApplication"</span> <span class="attr">requirePermission</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">sectionGroup</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">configSections</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span> <span class="attr">runAllManagedModulesForAllRequests</span><span class="kwrd">="true"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="DomainServiceModule"</span> <span class="attr">preCondition</span><span class="kwrd">="managedHandler"</span>
        <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.DomainServiceHttpModule, System.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">modules</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">validation</span> <span class="attr">validateIntegratedModeConfiguration</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="DomainServiceModule"</span> <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.DomainServiceHttpModule, System.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">assemblies</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">assembly</span><span class="kwrd">="System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">assemblies</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">compilation</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【备注】RIA Service并没有显式的SVC文件，但会有一个隐含的svc路径可以访问。（请参考下图）</p>
<p>&nbsp;</p>
<p>那么，RIA Service是使用什么样的Binding呢？根据资料，它应该支持下面三种Binding。默认是第三种，它用二进制的方式发送数据，目的主要是提高传输效率。</p>
<ol>
<li>For WebHttpBinding: “baseAddress" (REST with JSON Endpoint)</li>
<li>For BasicHttpBinding: “baseAddress” + “/soap” (SOAP with XML Endpoint)</li>
<li>For BinaryHttpBinding: “baseAddress” + “/binary” (SOAP with Binary Endpoint)</li></ol>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902209919.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902216953.png" width="1028" height="701"></a></p>
<p>&nbsp;</p>
<p>那么，是否可以让RIA Service支持标准的SOAP endpoint呢？</p>
<p>这个问题，之前有一个专门的文章介绍，请参考这里：<a href="http://www.cnblogs.com/chenxizhang/archive/2011/06/14/2080887.html">http://www.cnblogs.com/chenxizhang/archive/2011/06/14/2080887.html</a></p>
<p>&nbsp;</p>
<p><strong><font color="#ff0000">总结</font></strong>：RIA Service是一种主要用于Silverlight应用程序的服务。它可以结合ADO.NET Entity Framework数据模型，或者自定义数据模型，极大地方便了Silverlight应用程序进行数据访问的设计。它默认是用二进制的binding，但也可以通过一些配置添加soap endpoint.</p>
<p>&nbsp;</p>
<p>最后，本文总结分析了五种主要的WCF服务类型，以及他们的一些内在设计原理，下面这个表格可以做一个综合比较</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902217510.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211902216430.png" width="865" height="188"></a></p>]]></description></item><item><title>WCF技术的不同应用场景及其实现分析</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2085979.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 21 Jun 2011 05:53:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/21/2085979.html</guid><description><![CDATA[<p>这一篇文章，是总结一下WCF技术，以及基于这个技术发展出来的几个典型应用场景，并且我将尝试对这些不同的WCF实现的原理进行一些比较分析。</p> <p>关于WCF这个技术的基本概念，如果你不是很清楚，可以参考一下有关的文档</p> <p>微软开发者中心</p> <p><a href="http://msdn.microsoft.com/en-us/netframework/aa663324">http://msdn.microsoft.com/en-us/netframework/aa663324</a></p> <p>&nbsp;</p> <p>我的博客中先前也有很多这方面的介绍</p> <p><a href="http://zzk.cnblogs.com/s?w=blog%3achenxizhang+wcf&amp;p=1">http://zzk.cnblogs.com/s?w=blog%3achenxizhang+wcf&amp;p=1</a></p> <p>&nbsp;</p> <p>言归正传，我将先概括一下WCF技术的背景、核心要素、目前的典型应用场景。然后针对这些应用场景进一步地展开一些分析和比较，以便帮助大家更好地理解，并且知道在何时应该选用哪一种场景。（即便你没有时间去看那么多资料，通过本文也将有一个提纲挈领的认识）</p> <p>&nbsp;</p> <h2>历史背景：</h2> <p>WCF，全称是Windows Communication Founcation，它作为微软新一代的通讯技术，首先正式出现在.NET Framework 3.0中，伴随着Windows Vista的发布而名噪一时。在此之前，曾经作为Winfx的一部分为人所知，其代号为indigo。</p> <p>作为Foundation（基础模块），WCF是定位在微软.NET平台上实现统一的消息服务通讯机制。它很好地吸收了之前的多种分布式开发技术的优点，并且提供了统一的编程和访问的模型，逐渐成为SOA解决方案中的主流技术，受到了广泛的关注和使用。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353035673.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353031594.png" width="915" height="693"></a><br></p> <h2>核心要素：</h2> <p>从技术层面理解WCF，可以分为三个要素（俗称WCF的ABC)</p> <blockquote> <p>1.<strong><font color="#ff0000">A</font></strong>ddress（where)：地址，是指访问服务的URI（可以是一个http地址，也可以是tcp的地址）</p> <p>2.<font color="#ff0000"><strong>B</strong></font>inding（how）：绑定，是指通讯所使用的协议，例如http,net.tcp,msmq等等</p> <p>3.<strong><font color="#ff0000">C</font></strong>ontract（what）：合约，是指通讯的规范，例如服务的合约，数据的合约等等。</p></blockquote> <p>&nbsp;</p> <p>从系统层面理解WCF,可以分为四个要素</p> <blockquote> <p>1.Contract：合约，定义一套合约，通常是WCF开发的起点。这也是唯一需要在宿主和客户端之间共享的信息，通常是一些接口(interface)定义。</p> <p>2.Service：服务，基于合约实现的一个具体服务。通常是一些类型（class)定义，实现了业务逻辑。</p> <p>3.Host：宿主，既然服务是一个class，它自身是无法对客户端请求进行响应的。所以需要有一个宿主程序来提供持续的监听。WCF的宿主可以是任意的应用程序，非常灵活。</p> <p>4.Client：客户端，任何客户端（例如Windows Forms，WPF, Silverlight，Console Application，甚至Javascript，或者java，php等等）都可以通过自己的方式来访问WCF.</p></blockquote> <p>&nbsp;</p> <h2>应用场景：</h2> <p>WCF 从发布到现在的将近5年左右的时间，经过了多次增强和改进，从最开始单纯的SOAP Service的方式，发展出来其他多种应用场景，分别是</p> <blockquote> <p>1. SOAP Services</p> <p>2. WebHttp Services</p> <p>3. Data Services</p> <p>4. Workflow Services</p> <p>5. RIA Services</p></blockquote> <p>&nbsp;</p> <p>下面我将针对这些应用场景一一进行讲解</p> <p>【注意】我经常使用WCF技术以及一些讲座中，都会感慨WCF配置的强大。宿主和客户端都可以通过配置文件的方式定义、更改WCF服务的行为。可以这么说，在WCF中，几乎什么都可以配置。这确实很酷。所以下面的讲解，很多都是用配置文件的方式来说明问题。</p> <p>&nbsp;</p> <h2>1. SOAP Services</h2> <p>这种场景是WCF一开始就支持的，也是最完整的一个。</p> <p>为什么称为SOAP Services呢？这是因为WCF服务是基于消息的通讯机制，而它的消息是被封装为一个SOAP Envelope（SOAP 信封的）</p> <p>【备注】SOAP的全称是Simple Object Access Protocol，我们一般翻译为简单对象访问协议。</p> <p>一个典型的SOAP Request（代表了客户端发到服务器的请求）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353031071.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353036087.png" width="805" height="320"></a></p> <p>一个典型的SOAP Response</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353049152.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353042217.png" width="925" height="688"></a></p> <p>这种服务是以操作(Operation)为中心的，也就是说，我们可以完全控制服务的所有细节，包括定义合约，实现服务，实现宿主等等。这里面有两层意思，我们将有足够的灵活性，因为所有一切都是可以控制的；同时，我们也需要具备足够的专业知识，因为所有一切都需要你自己控制。</p> <p>我们来看一个典型的WCF SOAP Service的配置文件</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">name</span><span class="kwrd">="WcfService2.Service1"</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WcfService2.Service1Behavior"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!-- Service Endpoints --&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">binding</span><span class="kwrd">="wsHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WcfService2.IService1"</span><span class="kwrd">&gt;</span>
          <span class="rem">&lt;!-- </span>
<span class="rem">              Upon deployment, the following identity element should be removed or replaced to reflect the </span>
<span class="rem">              identity under which the deployed service runs.  If removed, WCF will infer an appropriate identity </span>
<span class="rem">              automatically.</span>
<span class="rem">          --&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">identity</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">dns</span> <span class="attr">value</span><span class="kwrd">="localhost"</span><span class="kwrd">/&gt;</span>
          <span class="kwrd">&lt;/</span><span class="html">identity</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">endpoint</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="mex"</span> <span class="attr">binding</span><span class="kwrd">="mexHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="IMetadataExchange"</span><span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WcfService2.Service1Behavior"</span><span class="kwrd">&gt;</span>
          <span class="rem">&lt;!-- To avoid disclosing metadata information, set the value below to false and remove the metadata endpoint above before deployment --&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
          <span class="rem">&lt;!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information --&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>SOAP Services是从.NET Framework 3.0一开始就提供的，在后续版本中，也有很多改进，包括对WS-*标准更好的支持，以及提供了很多默认的配置选项，简化了配置的工作。</p>
<p>【备注】值得一提的是，微软研发集团上海办公室这边有一个团队，直接参与了WCF的新版本的很多功能和工具的设计和开发，包括对于配置的简化设计。感谢他们的工作。</p>
<p>&nbsp;</p>
<p>我们来看一个.NET Framework 4.0下面的WCF服务默认的配置文件</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
          <span class="rem">&lt;!-- To avoid disclosing metadata information, set the value below to false and remove the metadata endpoint above before deployment --&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
          <span class="rem">&lt;!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information --&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span><span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span></pre>
<p>通过简单地比较就可以知道，在.NET Framework 4.0中，我们并没有看到端点（EndPoint）的定义，这是怎么回事呢？难道现在不需要定义端点了吗？当然不是，区别在于，.NET Framework4的ServiceHost将自动地注册几个默认的EndPoint。</p>
<p>【备注】如果不是为了在开发阶段调试需要而开启元数据和调试支持，上面的配置文件，甚至可以是空的，什么都不需要定义。</p>
<p>&nbsp;</p>
<p>关于ServiceHost以及默认的端点的信息，有兴趣可以参考</p>
<p><a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehost.aspx">http://msdn.microsoft.com/en-us/library/system.servicemodel.servicehost.aspx</a></p>
<p>&nbsp;</p>
<p><font color="#ff0000"><strong>总结</strong></font>：采用这种方式进行开发的WCF，可以根据我们的需求，使用任意的Binding，以支持不同的客户端，并且提供在不同的场合下最好的速度，还可以实现诸如缓存，队列，事务协调等高级功能。</p>
<p>&nbsp;</p>
<h2>2. WebHttp Services</h2>
<p>这种服务的出现，是基于一个比较热的概念：RESTFul。可以这么说，这是WCF Restful的一个具体实现。从.NET Framework 3.5开始提供。</p>
<p>所谓RESTFul的概念，有兴趣可以参考 <a href="http://zh.wikipedia.org/wiki/REST">http://zh.wikipedia.org/wiki/REST</a> 以及我之前写过的一些博客文章：<a href="http://zzk.cnblogs.com/s?w=blog%3Achenxizhang%20rest">http://zzk.cnblogs.com/s?w=blog%3Achenxizhang%20rest</a></p>
<p>&nbsp;</p>
<p>大致的意思是：</p>
<blockquote>
<p><b>表象化状态转变</b>（英文：<b>Representational State Transfer</b>，简称<b>REST</b>）是<a href="http://zh.wikipedia.org/w/index.php?title=Roy_Fielding&amp;action=edit&amp;redlink=1">Roy Fielding</a>博士在2000年他的博士论文中提出来的一种<a href="http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>风格。
<p>目前在三种主流的<a href="http://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1">Web服务</a>实现方案中，因为REST模式的<a href="http://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1">Web服务</a>与复杂的<a href="http://zh.wikipedia.org/wiki/SOAP">SOAP</a>和<a href="http://zh.wikipedia.org/wiki/XML-RPC">XML-RPC</a>对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，<a href="http://zh.wikipedia.org/wiki/Amazon.com">Amazon.com</a>提供接近REST风格的Web服务进行图书查找；<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E8%99%8E">雅虎</a>提供的Web服务也是REST风格的。</p></blockquote>
<blockquote>
<p>REST 从资源的角度来观察整个网络，分布在各处的资源由<a href="http://zh.wikipedia.org/wiki/URI">URI</a>确定，而客户端的应用通过URI来获取资源的表形。获得这些表形致使这些应用程序转变了其状态。随着不断获取资源的表形，客户端应用不断地在转变着其状态，所谓表形化的状态转变（Representational State Transfer）。</p></blockquote>
<p>今天不是专门来探讨REST的，我们主要看看WCF是如何实现对REST支持，以及如何使用这种风格的服务。
<p>实现WCF Restful，关键在于一个新的Binding方式，也就是WebHttpBinding。所以这种服务，我这里将其称为WebHttp Services。
<p>WebHttp Services是在传统的SOAP Services基础上的一个增强，它仍然是基于操作（Operation）的，只不过这些Operation可以直接通过Uri访问到，而无需客户去编写一个特殊的客户端。
<p>同时，WebHttp Services提供了两种不同的消息格式，第一种是XML，第二种是Json。这将更加有利于诸如Javascript这种客户端来访问服务。
<p>要实现WebHttp，我们首先要添加一个引用，如下
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353042250.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353042283.png" width="743" height="467"></a>
<p>&nbsp; <p>然后 ，我们可以定义一个特殊的Operation<pre class="csharpcode">
        [OperationContract]
        [WebGet]
        <span class="kwrd">string</span> HelloWorld();
</pre>
<p>【注意】这里通过WebGet这个Attribute，声明该操作是可以直接在Http访问中访问的</p>
<p>下面是该操作的实现</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.ServiceModel.Activation;

<span class="kwrd">namespace</span> WcfService1
{
    <span class="rem">// NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.</span>
  <strong><font color="#ff0000">  [AspNetCompatibilityRequirements(RequirementsMode= AspNetCompatibilityRequirementsMode.Required)]</font></strong>
    <span class="kwrd">public</span> <span class="kwrd">class</span> Service1 : IService1
    {
        <span class="kwrd">public</span> <span class="kwrd">string</span> GetData(<span class="kwrd">int</span> <span class="kwrd">value</span>)
        {
            <span class="kwrd">return</span> <span class="kwrd">string</span>.Format(<span class="str">"You entered: {0}"</span>, <span class="kwrd">value</span>);
        }

        <span class="kwrd">public</span> CompositeType GetDataUsingDataContract(CompositeType composite)
        {
            <span class="kwrd">if</span> (composite == <span class="kwrd">null</span>)
            {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> ArgumentNullException(<span class="str">"composite"</span>);
            }
            <span class="kwrd">if</span> (composite.BoolValue)
            {
                composite.StringValue += <span class="str">"Suffix"</span>;
            }
            <span class="kwrd">return</span> composite;
        }


    <strong><font color="#ff0000">    <span class="kwrd">public</span> <span class="kwrd">string</span> HelloWorld()
        {
            <span class="kwrd">return</span> <span class="str">"Hello,world"</span>;
        }</font></strong>
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【备注】该服务必须声明为AspNetCompatibility</p>
<p>&nbsp;</p>
<p>为了使用该服务支持WebHttpBinding,我们需要修改配置文件如下（粗体部分是我们这次添加的）</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
   <strong><font color="#ff0000"> <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">name</span><span class="kwrd">="WcfService1.Service1"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WcfService1.Service1AspNetAjaxBehavior"</span>
          <span class="attr">binding</span><span class="kwrd">="webHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WcfService1.IService1"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span></font></strong>
    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
     <strong> <span class="kwrd">&lt;</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WcfService1.Service1AspNetAjaxBehavior"</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">enableWebScript</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span></strong>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">=""</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
      <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
 <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span> <span class="attr">runAllManagedModulesForAllRequests</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
  
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>如果是这样的定义，那么在浏览器中我们就可以直接访问该服务及其操作</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353058728.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353054301.png" width="1028" height="701"></a></p>
<p>既然是RESTful，那么就可以直接在地址栏像下面这样访问</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353059317.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353058478.png" width="1028" height="701"></a></p>
<p>我们发现它的返回值是application/json格式的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353067398.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353067955.png" width="852" height="314"></a></p>
<p>具体返回的是什么内容呢？</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353067431.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621135306496.png" width="799" height="294"></a></p>
<p>&nbsp;</p>
<p>也就是说,WebHttp Service默认是返回json格式的数据的，这就很容易在JAVASCRIPT中使用该服务。例如</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="default.aspx.cs" Inherits="WcfService1._default" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="kwrd">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="jquery-1.4.3.min.js"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script type=<span class="str">"text/javascript"</span> language=<span class="str">"javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {
            $(<span class="str">"#btHelloworld"</span>).click(<span class="kwrd">function</span> () {
                <span class="kwrd">var</span> uri = <span class="str">"Service1.svc/HelloWorld"</span>;
                $.getJSON(uri, <span class="kwrd">null</span>, <span class="kwrd">function</span> (result) {
                    alert(result.d);
                });
            });

        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="button"</span> <span class="attr">id</span><span class="kwrd">="btHelloworld"</span>  <span class="attr">value</span><span class="kwrd">="call webhttp Service"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<p>在页面中测试的效果如下
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353067464.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353064433.png" width="699" height="358"></a></p>
<p>&nbsp;</p>
<p>值得注意的是，WebHttp Service除了支持Json格式之外，也支持XML格式，我们可以通过修改WebGet这个Attribute的设置来达到目的</p><pre class="csharpcode">
        [OperationContract]
        [WebGet(ResponseFormat=WebMessageFormat.Xml)]
        <span class="kwrd">string</span> HelloWorld();</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>也可以通过配置文件的方式来设置（注意粗体部分）</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">name</span><span class="kwrd">="WcfService1.Service1"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WcfService1.Service1AspNetAjaxBehavior"</span>
          <span class="attr">binding</span><span class="kwrd">="webHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WcfService1.IService1"</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WcfService1.Service1AspNetAjaxBehavior"</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">enableWebScript</span> <span class="kwrd">/&gt;</span>
          <strong><span class="kwrd">&lt;</span><span class="html">webHttp</span> <span class="attr">defaultOutgoingResponseFormat</span><span class="kwrd">="Xml"</span><span class="kwrd">/&gt;</span></strong>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">endpointBehaviors</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">=""</span><span class="kwrd">&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
          <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
      <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
 <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span> <span class="attr">runAllManagedModulesForAllRequests</span><span class="kwrd">="true"</span><span class="kwrd">/&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
  
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>如果用XML格式的话，那么在浏览器测试的效果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353077530.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353087106.png" width="1028" height="701"></a></p>






<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106211353086583.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110621135308204.png" width="1028" height="701"></a></p>
<p>&nbsp;</p>
<p><strong><font color="#ff0000">总结</font></strong>：WebHttp Services是在SOAP Services基础上的一个改进，它不是返回SOAP Evenlope，而是根据需要返回XML或者JSON数据。这样的设计，目的是让服务更加易于使用。同时，该服务是WCF Restful的具体实现。</p>
<p>&nbsp;</p>
<p>【备注】 由于篇幅过长，另外三种服务，我将另外单独用一篇文章来分析比较，敬请期待</p>
<p>3. Data Services</p>
<p>4. Workflow Services</p>
<p>5. RIA Services</p>]]></description></item><item><title>如何理解IIS 7的两种应用程序池的管道模式（Managed Pipeline Mode)</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/19/2084579.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 Jun 2011 03:18:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/19/2084579.html</guid><description><![CDATA[<p>之前我写过一篇<a href="http://www.cnblogs.com/chenxizhang/archive/2010/06/02/1750236.html">博客文章</a>，讲的是.NET 4.0的应用程序部署问题。有网友问到一个相关问题就是：如何理解IIS 7中的应用程序池的管道模式，尤其是如何理解“托管模型（integrated mode)”，今天特意再写一篇文章来介绍这个问题。</p> <p>&nbsp;</p> <p>IIS 7是微软最新版本的IIS版本，从Vista开始提供，目前在Vista，Windows 7，Windows Server 2008中提供。这个全新的版本中，一个突出的亮点就是，它提供了两种管道模式，来支持不同的应用程序场景。</p> <p>&nbsp;</p> <p>这里提到的管道模式，指的是应用程序池（Application Pool）的一个属性</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191116522902.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191116556546.png" width="897" height="346"></a><br></p> <p>上图中可以看到，这两种管道模式分别为Integrated(集成）和 Classic(经典）</p> <p>那么，到底如何理解这两种模式呢？</p> <p><strong><font color="#ff0000">Classic模式：</font></strong>指的是与IIS 6或者之前版本保持兼容的一种模式，一个典型问题就是，在处理ASP.NET这种动态网站的时候，它是通过一个所谓的ISAPI程序，作为插件的方式来工作的。针对不同的动态应用程序（例如ASP,PHP等），会需要不同的ISAPI。</p> <p>例如，下面就是一个注册号的ISAPI映射</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191116575905.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191116594467.png" width="475" height="388"></a></p> <p>从上图可以看出，不同的Request,指定了不同的ISAPI程序。下图是对于这种Pipeline的一个图形化说明</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110619111701205.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="iis 6 pipelines" border="0" alt="iis 6 pipelines" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117055618.jpg" width="836" height="649"></a></p> <p>&nbsp;</p> <p><strong><font color="#ff0000">Integrated模式</font></strong>：这种全新的模式，允许我们将ASP.NET更好地与IIS集成，甚至允许我们在ASP.NET中编写一些功能（例如Module）来改变IIS的行为（扩展）。集成的好处是，不再通过ISAPI的方式，提高了速度和稳定性。至于扩展，则可以使得我们对于IIS，以及其他类型的请求有更多的控制。（例如，我们希望静态网页也具备一些特殊的行为）</p> <p>下图解释了这一点。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117076405.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="iis 7 integrated mode" border="0" alt="iis 7 integrated mode" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117097476.jpg" width="836" height="649"></a></p> <p>以上两个图片来自与下面这个文章，并且该文章有更详细的一些理论介绍。</p> <p><a href="http://learn.iis.net/page.aspx/243/aspnet-integration-with-iis-7/">http://learn.iis.net/page.aspx/243/aspnet-integration-with-iis-7/</a></p> <p>&nbsp;</p> <p>下面，我就通过一个例子，来帮助大家更好地了解集成模型。</p> <p>这个例子里面，我有一个特殊的需求就是，我希望对网站里面所有请求做一个日志监控，不管是动态网页，还是静态网页。</p> <p>&nbsp;</p> <h2>1. 创建一个Web Application</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117134873.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117179447.png" width="919" height="727"></a></p> <p>&nbsp;</p> <h2>2. 添加一个HttpModule</h2> <p>为了对用户请求进行监控，我们一般会编写一个HttpModule</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117203157.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117273818.png" width="959" height="664"></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117312885.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117345723.png" width="919" height="727"></a></p> <p>我为该模块实现简单的功能（将用户的请求地址打印出来在页面上）</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">namespace</span> WebApplication2
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> MyModule1 : IHttpModule
    {
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// You will need to configure this module in the web.config file of your</span>
        <span class="rem">/// web and register it with IIS before being able to use it. For more information</span>
        <span class="rem">/// see the following link: http://go.microsoft.com/?linkid=8101007</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="preproc">#region</span> IHttpModule Members

        <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose()
        {
            <span class="rem">//clean-up code here.</span>
        }

        <span class="kwrd">public</span> <span class="kwrd">void</span> Init(HttpApplication context)
        {
            <span class="rem">// Below is an example of how you can handle LogRequest event and provide </span>
            <span class="rem">// custom logging implementation for it</span>
            context.LogRequest += <span class="kwrd">new</span> EventHandler(OnLogRequest);
        }

        <span class="preproc">#endregion</span>

        <span class="kwrd">public</span> <span class="kwrd">void</span> OnLogRequest(Object source, EventArgs e)
        {
            <span class="rem">//custom logging logic can go here</span>
            var app = (HttpApplication)source;
            app.Response.Write(app.Request.Url.ToString());
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<h2>3.注册该模块</h2>
<p>模块是需要注册才能够使用的。我们一般会想到以前的做法</p><pre class="csharpcode">  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="test"</span> <span class="attr">type</span><span class="kwrd">="WebApplication2.MyModule1,WebApplication2"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">httpModules</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>但这样注册，会遇到一个错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117351395.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117372923.png" width="456" height="260"></a></p>
<p>这个错误的意思是，LogRequest这个操作，是必须运行在集成模式下的。</p>
<p>那么，到底如何注册成集成模式的模块呢？</p>
<p>我们需要将配置文件修改成下面这样</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span>

<span class="rem">&lt;!--</span>
<span class="rem">  For more information on how to configure your ASP.NET application, please visit</span>
<span class="rem">  http://go.microsoft.com/fwlink/?LinkId=169433</span>
<span class="rem">  --&gt;</span>

<span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">system.web</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">compilation</span> <span class="attr">debug</span><span class="kwrd">="true"</span> <span class="attr">targetFramework</span><span class="kwrd">="4.0"</span> <span class="kwrd">/&gt;</span>
    <span class="rem">&lt;!--&lt;httpModules&gt;</span>
<span class="rem">      &lt;add name="test" type="WebApplication2.MyModule1,WebApplication2"/&gt;</span>
<span class="rem">    &lt;/httpModules&gt;--&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.web</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">modules</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="test"</span> <span class="attr">type</span><span class="kwrd">="WebApplication2.MyModule1,WebApplication2"</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">modules</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>请注意，现在多了一个system.webServer的节，里面有一个modules的节，可以配置需要注册的一些HttpModule</p>
<p>因为是注册为system.webServer的Module，所以，在visual studio中调试是没有效果的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117386709.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117405238.png" width="738" height="196"></a></p>
<p>我们需要将该应用程序发布到IIS，并且设置为integrated mode。</p>
<p>&nbsp;</p>
<h2>4.发布到IIS</h2>
<p>有很多办法进行发布，我所推荐的是用deploy package的方式。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117426582.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117442287.png" width="344" height="365"></a></p>
<p>请注意，我们使用的Application Pool是integrated mode的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117485540.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117518935.png" width="891" height="365"></a></p>
<p>&nbsp;</p>
<p>发布之后，我们在浏览器中浏览首页，我们会发现在底部会有一个特殊的输出，就是我们当前请求的地址信息。这说明，我们那个Module已经在工作了。</p>
<p>&nbsp;</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117534673.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117551000.png" width="612" height="199"></a></p>
<p>&nbsp;</p>
<h2>5.测试该模块对于静态页面的支持</h2>











<p>如果仅仅是上面这样，我们似乎看不出这种模式到底有何优势。我们以前不也是可以实现这样的效果吗？</p>
<p>请你主要的是，以前的HttpModule只能影响到动态网页，例如我们的ASPX网页，而对于静态网页（例如html)，或者其他类型的动态网页（例如php等）是无能为力的。</p>
<p>那么，现在这种模式下情况是怎样的呢？</p>
<p>我们可以添加一个简单的html页面，放在网站根目录下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/2011061911175619.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191117585168.png" width="876" height="111"></a></p>
<p>然后，我们去请求该页面</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191118007351.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106191118011943.png" width="802" height="189"></a></p>
<p>是不是很神奇呢？虽然是静态网页，但因为我们那个模块是注册在IIS里面的，它改变了IIS的行为，所以仍然会在页面底部插入一段输出。</p>
<p>&nbsp;</p>
<h2>6.总结</h2>
<p>希望上面这样的例子可以帮助大家更好地理解Integrated mode。它是允许我们将代码插入到IIS内核中，而不再通过ISAPI的方式。这将带来更好的性能和扩展性。</p>]]></description></item><item><title>Silverlight有限支持WCF的binding问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/19/2084524.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 19 Jun 2011 01:06:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/19/2084524.html</guid><description><![CDATA[<p>这是最近遇到的一个小问题。情况是这样的：</p> <p>1.我们有一个网站，是用<font color="#ff0000" size="5"><strong>.NET Framework 3.5</strong></font>编写的，里面有一些WCF的服务。作为演示，我下面有一个范例服务</p> <p>&nbsp;</p> <h2>合约</h2><pre class="csharpcode"><span class="kwrd">using</span> System.ServiceModel;

<span class="kwrd">namespace</span> WebApplication1
{
    <span class="rem">// NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IService1" in both code and config file together.</span>
    [ServiceContract]
    <span class="kwrd">public</span> <span class="kwrd">interface</span> IService1
    {
        [OperationContract]
        <span class="kwrd">void</span> DoWork();

        [OperationContract]
        <span class="kwrd">string</span> Helloworld();
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>服务</h2><pre class="csharpcode">
<span class="kwrd">namespace</span> WebApplication1
{
    <span class="rem">// NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> Service1 : IService1
    {
        <span class="kwrd">public</span> <span class="kwrd">void</span> DoWork()
        {
        }


        <span class="kwrd">public</span> <span class="kwrd">string</span> Helloworld()
        {
            <span class="kwrd">return</span> <span class="str">"hello,world"</span>;
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>2.我们需要在一个新的Silverlight应用程序中访问这些WCF服务，但是无论我们选择Silverlight的版本是3.0，还是4.0（注意，这不是.NET Framework的版本），都无法完成服务引用。</p>
<p>具体的症状就是，添加引用之后，Silverlight无法正确生成那个配置文件</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190905108870.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190905111511.png" width="635" height="514"></a></p>
<p>会有两个警告</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906059175.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906079373.png" width="898" height="279"></a></p>
<p>具体的信息是</p>
<p>Warning&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; Custom tool warning: No endpoints compatible with Silverlight 3 were found. The generated client class will not be usable unless endpoint information is provided via the constructor.&nbsp;&nbsp;&nbsp; d:\temp\WebApplication1\SilverlightApplication1\Service References\DataModel\Reference.svcmap&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp; SilverlightApplication1<br></p>
<p>&nbsp;</p>
<p>然后，我们去看那个生成的配置文件的话，会看到一片空白</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906076374.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906082296.png" width="731" height="112"></a></p>
<p>&nbsp;</p>
<p>这样的问题要怎么解决呢？我们首先要把问题找到，从上面的错误消息，它的意思应该是说，不支持目前提供的EndPoint。</p>
<p>那么，服务端到底使用了什么样的EndPoint呢</p>
<p>我们转到web应用程序中的web.config文件，可以看到如下的设置</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1Behavior"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WebApplication1.Service1Behavior"</span>
                <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">binding</span><span class="kwrd">="wsHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WebApplication1.IService1"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">dns</span> <span class="attr">value</span><span class="kwrd">="localhost"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">endpoint</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="mex"</span> <span class="attr">binding</span><span class="kwrd">="mexHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="IMetadataExchange"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>也就是说，默认情况下，.NET Framework 3.5提供的WCF，是使用wsHttpBinding的。难道是Silverlight不支持这种EndPoint吗？</p>
<p>为了做测验，我们可以将其修改为相对简单的basicHttpBinding</p><pre class="csharpcode">
    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1Behavior"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WebApplication1.Service1Behavior"</span>
                <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">binding</span><span class="kwrd">="basicHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WebApplication1.IService1"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">dns</span> <span class="attr">value</span><span class="kwrd">="localhost"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">endpoint</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="mex"</span> <span class="attr">binding</span><span class="kwrd">="mexHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="IMetadataExchange"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<br></p>
<p>然后，我们再去Silverlight中添加引用看看是否能解决问题</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906096540.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906107261.png" width="916" height="373"></a></p>
<p>我们发现，这次成功了，ClientConfig中也正确生成了WCF的配置,并且通过如下的代码可以完成服务的调用</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.ServiceModel;

<span class="kwrd">namespace</span> SilverlightApplication1
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();
        }

        <span class="kwrd">private</span> <span class="kwrd">void</span> Button_Click(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> DataModel.Service1Client();
            proxy.Endpoint.Address = <span class="kwrd">new</span> EndpointAddress(<span class="kwrd">new</span> Uri(Application.Current.Host.Source, <span class="str">"../Service1.svc"</span>));


            proxy.HelloworldCompleted += (o, a) =&gt;
            {
                MessageBox.Show(a.Result);
            };


            proxy.HelloworldAsync();
            
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>&nbsp;</p>
<p>好的，看起来问题是解决了，也就是说Silverlight只支持使用basicHttpBinding?如果我们非要改成wsHttpBinding ，行不行呢？</p>
<p>我尝试将clientconfig文件修改为</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">client</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="http://localhost:2514/Service1.svc"</span> <span class="attr">binding</span><span class="kwrd">="wsHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="DataModel.IService1"</span>
                <span class="attr">name</span><span class="kwrd">="BasicHttpBinding_IService1"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">client</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">configuration</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>并且将服务端的web.config，也修改为</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">behavior</span> <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1Behavior"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceMetadata</span> <span class="attr">httpGetEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">serviceDebug</span> <span class="attr">includeExceptionDetailInFaults</span><span class="kwrd">="false"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">behavior</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">serviceBehaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">behaviors</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">services</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">service</span> <span class="attr">behaviorConfiguration</span><span class="kwrd">="WebApplication1.Service1Behavior"</span>
                <span class="attr">name</span><span class="kwrd">="WebApplication1.Service1"</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">=""</span> <span class="attr">binding</span><span class="kwrd">="wsHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="WebApplication1.IService1"</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                        <span class="kwrd">&lt;</span><span class="html">dns</span> <span class="attr">value</span><span class="kwrd">="localhost"</span> <span class="kwrd">/&gt;</span>
                    <span class="kwrd">&lt;/</span><span class="html">identity</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">endpoint</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">endpoint</span> <span class="attr">address</span><span class="kwrd">="mex"</span> <span class="attr">binding</span><span class="kwrd">="mexHttpBinding"</span> <span class="attr">contract</span><span class="kwrd">="IMetadataExchange"</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">service</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">services</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span></pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>运行程序的结果是，会报告如下的错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906114295.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106190906127426.png" width="456" height="260"></a></p>
<p>也就是说，确实不支持wsHttpBinding</p>
<p><strike></strike>&nbsp;</p>
<p>关于这一点，有兴趣的朋友，也可以参考一下微软官方的文档说明</p>
<p><a href="http://msdn.microsoft.com/en-us/library/cc896571(v=VS.95).aspx">http://msdn.microsoft.com/en-us/library/cc896571(v=VS.95).aspx</a></p>
<p>&nbsp;</p>
<p>【又及】</p>
<p>在Silverlight中，最简单易用的服务是RIA Service，关于这一点，我已经写过很多文章介绍。</p>
<p>那么，RIA Service是使用什么binding呢？</p>
<p>请参考下面这篇文章</p>
<p><a href="http://weblogs.asp.net/fredriknormen/archive/2009/11/27/wcf-ria-services-binding-deep-dive.aspx">http://weblogs.asp.net/fredriknormen/archive/2009/11/27/wcf-ria-services-binding-deep-dive.aspx</a></p>]]></description></item><item><title>RIA Service 的 SOAP EndPoint</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/14/2080887.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 14 Jun 2011 10:36:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/14/2080887.html</guid><description><![CDATA[<p>越来越多的朋友都在使用Silverlight开发应用程序，其中我们常用的还会有一个特殊的服务，就是RIA Service,具体来说，它是一个所谓的Domain Service. 关于这个服务的基本概念，如果有不清楚，请参考下面这个网址</p> <p><a href="http://www.silverlight.net/getstarted/riaservices/">http://www.silverlight.net/getstarted/riaservices/</a></p> <p>&nbsp;</p> <p>今天这一篇是要谈谈一个问题，就是如何让RIA Service支持WPF此类客户端来访问？</p> <p>你可能会疑惑，这难道是一个问题吗？是的，RIA Service默认只能在Silverlight里面访问到。我们还是通过一个例子来讲解一下吧</p> <p>&nbsp;</p> <h2>1. 定义一个业务实体类</h2><pre class="csharpcode">
<span class="kwrd">namespace</span> WebApplication1
{
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Runtime.Serialization;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    [DataContract]
    <span class="kwrd">public</span> <span class="kwrd">class</span> Employee
    {
        [Key][DataMember]
        <span class="kwrd">public</span> <span class="kwrd">int</span> ID { get { <span class="kwrd">return</span> <span class="kwrd">this</span>.GetHashCode(); } }


        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> FirstName { get; set; }
        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> LastName { get; set; }
    }
}</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<h2>2. 创建一个Domain Service</h2><pre class="csharpcode">
<span class="kwrd">namespace</span> WebApplication1
{
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        [Query]
        <span class="kwrd">public</span> IQueryable&lt;Employee&gt; GetEmployees()
        {
            <span class="kwrd">return</span> <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Employee{FirstName=<span class="str">"ares"</span>,LastName=<span class="str">"chen"</span>},
                <span class="kwrd">new</span> Employee{FirstName=<span class="str">"mike"</span>,LastName=<span class="str">"fei"</span>},
                <span class="kwrd">new</span> Employee{FirstName=<span class="str">"tom"</span>,LastName=<span class="str">"jerry"</span>}
            }.AsQueryable();
        }
    }
}


</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【备注】需要注意的是，Domain Service是没有svc文件的，这与标准的WCF服务是完全不同的。</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/2011061418354835.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835493099.png" width="288" height="156"></a></p>
<h2>3. 在Silverlight应用程序中访问这个服务</h2>
<p>作为演示，我们做了一个很简单的界面</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="SilverlightApplication1.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span> <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span> <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span> <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="True"</span> <span class="attr">Margin</span><span class="kwrd">="24,53,21,25"</span> <span class="attr">Name</span><span class="kwrd">="dataGrid1"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Height</span><span class="kwrd">="33"</span> <span class="attr">HorizontalAlignment</span><span class="kwrd">="Left"</span> <span class="attr">Margin</span><span class="kwrd">="25,14,0,0"</span> <span class="attr">Name</span><span class="kwrd">="textBlock1"</span> <span class="attr">Text</span><span class="kwrd">="Employee List"</span> <span class="attr">VerticalAlignment</span><span class="kwrd">="Top"</span> <span class="attr">Width</span><span class="kwrd">="219"</span> <span class="attr">FontSize</span><span class="kwrd">="25"</span>  <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后通过如下的代码调用数据</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;

<span class="kwrd">namespace</span> SilverlightApplication1
{

    <span class="kwrd">using</span> WebApplication1;

    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> SampleDomainContext();
            var op = ctx.Load&lt;Employee&gt;(ctx.GetEmployeesQuery());
            dataGrid1.ItemsSource = op.Entities;
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>从上面的代码不难看出，在Silverlight调用RIA Service的时候，是相当容易的，这里不用指定路径，也无需有其他更多设置。</p>
<p>得到的页面效果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835496720.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110614183549657.png" width="820" height="247"></a></p>
<p>你可能会有一个疑问，那么到底是调用了什么服务呢？</p>
<p>我们通过IE 9自带的开发工具，可以监控一下得到一个特殊的WCF地址</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835509295.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835501280.png" width="1028" height="732"></a></p>
<p>最后一行，很明显是一个WCF的调用地址，我们很好奇的是，它到底传递了什么东西过来呢？</p>




<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835508248.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835505216.png" width="1015" height="344"></a></p>
<p>该服务返回的其实是一个二进制的包，具体内容如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835506886.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110614183551266.png" width="870" height="346"></a></p>
<p>虽然不能完全看懂，但可以确定的是，这是二进制序列化的结果。</p>
<p>那好，我们回到刚才的话题，既然这是一个WCF服务，而且也确实有一个隐含的svc地址（注意，我说的是隐含，因为物理上并不存在该文件），那么是否可以通过该地址，发起普通的服务调用呢？</p>
<p>我们尝试将<a title="http://localhost:11547/ClientBin/WebApplication1-SampleDomainService.svc" href="http://localhost:11547/ClientBin/WebApplication1-SampleDomainService.svc">http://localhost:11547/ClientBin/WebApplication1-SampleDomainService.svc</a> 这个地址输入到浏览器地址栏</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835513330.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835519983.png" width="1028" height="732"></a></p>
<p>令人欣喜的是，我们看到了熟悉的WCF WSDL的界面。</p>
<p>那么，这是否意味着，我们可以在除了Silverlight之外的其他应用程序中调用该服务呢？</p>
<p>&nbsp;</p>
<h2>4. 创建WPF应用程序，添加服务引用</h2>
<p>很不幸的是，我们在WPF中尝试添加服务引用时，却会遇到下面的错误</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835519460.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835516428.png" width="635" height="514"></a></p>
<p>详细的错误如下，意思是说，没有找到有关的endpoint.</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835519493.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835526461.png" width="710" height="350"></a></p>
<p>&nbsp;</p>
<h2>5. 安装RIA Service Toolkit以便添加SOAP EndPoint支持</h2>
<p>为了解决如上的问题，微软在4月份发布了一个Toolkit,可以为RIA Service添加SOAP EndPoint支持</p>
<p>请先通过下面的地址下载</p>
<p><a href="http://www.microsoft.com/download/en/details.aspx?id=2384">http://www.microsoft.com/download/en/details.aspx?id=2384</a></p>
<p>具体来说，这个工具包提供了很多增强的功能</p>
<blockquote>
<p><b>What is available in the Toolkit?</b><br>The following functionality are available in this release of the Toolkit:-<br>1. LinqToSql DomainService<br>2. Soap endpoint - This enables you to expose a soap endpoint for your DomainService<br>3. JSON endpoint - This enables you to expose a JSON endpoint for your DomainService<br>4. ASP.NET DomainDataSource - This control will enable you to create an ASP.net application that can talk to your DomainService<br>5. WCF client proxy auto generation/updating for WCF Core Service – This enables you to get up-to-date WCF proxy and configuration each time you build your solution, when you add Silverlight-enable WCF service in your Silverlight application.<br>6. Domain Service support for Windows Azure Table Storage. When hosting WCF RIA Services in Windows Azure, you can now easily leverage Windows Azure Table Storage as your data backend. (Requires Windows Azure SDK 1.3)<br>7. T4 template based client code generation. The feature leverages the code generation extensibility point added to the product and provides a well factored and granular mechanism to customize client code generation logic using T4 templates.<br>8. CollectionView to enable MVVM Patterns<br>9. An early preview of the jQuery client for WCF RIA Services (RIA/JS)</p></blockquote>
<p>&nbsp; <p>安装好之后，我们会得到一些Assembly，在如下的目录
<p>C:\Program Files (x86)\Microsoft SDKs\RIA Services\v1.0\Toolkit\Libraries\Server
<p>&nbsp; <p>本例中，我们将使用其中一个Microsoft.ServiceModel.DomainServices.Hosting.dll 来提供SOAP EndPoint支持，所以我们要将其添加到Web项目的引用列表中来
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835527018.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835525938.png" width="390" height="317"></a>
<p>&nbsp; <h2>6. 修改Web.config，添加SOAP EndPoint</h2>






<p>熟悉WCF的朋友都知道，WCF是基于配置的，无处不在的配置使得服务很灵活并且强大。本例中，我们也只需要修改配置文件，就可以完成添加SOAP EndPoint的工作。下面的粗体部分是我们添加的</p><pre class="csharpcode">    <span class="kwrd">&lt;</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">domainServices</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">endpoints</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="OData"</span> <span class="attr">type</span><span class="kwrd">="System.ServiceModel.DomainServices.Hosting.ODataEndpointFactory, System.ServiceModel.DomainServices.Hosting.OData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span>
         <strong>     <span class="kwrd">&lt;</span><span class="html">add</span> <span class="attr">name</span><span class="kwrd">="Soap"</span> <span class="attr">type</span></strong><strong><span class="kwrd">="Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory, 
                       Microsoft.ServiceModel.DomainServices.Hosting, Version=4.0.0.0, Culture=neutral, 
                       PublicKeyToken=31bf3856ad364e35"</span> <span class="kwrd">/&gt;</span></strong>
            <span class="kwrd">&lt;/</span><span class="html">endpoints</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">domainServices</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">serviceHostingEnvironment</span> <span class="attr">aspNetCompatibilityEnabled</span><span class="kwrd">="true"</span>
            <span class="attr">multipleSiteBindingsEnabled</span><span class="kwrd">="true"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">system.serviceModel</span><span class="kwrd">&gt;</span></pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre>
<p><span class="kwrd">保存配置文件，我们再去浏览器中访问该服务。你有没有发现有什么不同呢？如果有，请告诉我吧</span></p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835527051.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835522067.png" width="1028" height="732"></a></p>
<p>&nbsp;</p>
<h2>7. 在WPF中完成服务引用，并且使用它发起调用</h2>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835525447.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835532657.png" width="635" height="514"></a></p>
<p>是的，你没有看错，我们找到了这个服务。</p>
<p>好吧，既然能够添加引用，接下来的事情你应该会做了吧？当然，不是很难，你懂的</p>
<p>MainWindow.xaml</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Window</span> <span class="attr">x:Class</span><span class="kwrd">="WpfApplication1.MainWindow"</span>
        <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="attr">Title</span><span class="kwrd">="MainWindow"</span> <span class="attr">Height</span><span class="kwrd">="350"</span> <span class="attr">Width</span><span class="kwrd">="525"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">DataGrid</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="True"</span> <span class="attr">Margin</span><span class="kwrd">="12,62,12,12"</span> <span class="attr">Name</span><span class="kwrd">="dataGrid1"</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">TextBlock</span> <span class="attr">Height</span><span class="kwrd">="33"</span> <span class="attr">HorizontalAlignment</span><span class="kwrd">="Left"</span> <span class="attr">Margin</span><span class="kwrd">="12,23,0,0"</span> <span class="attr">Name</span><span class="kwrd">="textBlock1"</span> <span class="attr">Text</span><span class="kwrd">="Employee List"</span> <span class="attr">FontSize</span><span class="kwrd">="25"</span> <span class="attr">VerticalAlignment</span><span class="kwrd">="Top"</span> <span class="attr">Width</span><span class="kwrd">="224"</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">Window</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>&nbsp;</p>
<p>MainWindow.xaml.cs</p><pre class="csharpcode"><span class="kwrd">using</span> System.Windows;

<span class="kwrd">namespace</span> WpfApplication1
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Interaction logic for MainWindow.xaml</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainWindow : Window
    {
        <span class="kwrd">public</span> MainWindow()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainWindow_Loaded);
        }

        <span class="kwrd">void</span> MainWindow_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var proxy = <span class="kwrd">new</span> RIA.SampleDomainServiceSoapClient();
            dataGrid1.ItemsSource = proxy.GetEmployees().RootResults;
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835539625.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106141835536593.png" width="529" height="354"></a></p>
<p>BTW:我觉得WPF的界面（例如这个DataGrid)看起来没有Silverlight那么好看，不是吗？ 当然，这个话题还是等我们以后有机会再来谈谈吧</p>
<p>&nbsp;</p>
<h2>总结</h2>
<p>RIA Service默认只能被Silverlight访问，它确实极其方便。如果希望它能被其他客户代码访问到，则可以通过安装RIA Service Toolkit，为其添加SOAP Endpoint来实现。</p>]]></description></item><item><title>在jquery中处理带有命名空间的XML数据</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078975.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 12 Jun 2011 10:04:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078975.html</guid><description><![CDATA[<p>这一篇记录一个小技巧。</p> <p>如果你在做AJAX应用，则你可能经常会用到jquery（或者其他框架）处理服务返回的数据。如果用Jquery处理Json格式，将是相当方便的。但不幸的是，很多服务返回的数据仍然是XML格式的。</p> <p>jquery对于xml这种数据的处理是内置支持的，这一点没有任何问题。但前提是返回的数据没有带任何命名空间。例如下面这份数据</p><pre class="csharpcode">&lt;?xml version=<span class="str">"1.0"</span> encoding=<span class="str">"utf-8"</span> ?&gt;
&lt;data&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
  &lt;Employee id=<span class="str">"1"</span> firstName=<span class="str">"ares"</span> lastName=<span class="str">"chen"</span>&gt;&lt;/Employee&gt;
&lt;/data&gt;</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>要处理这样的数据，jquery代码大致如下</p><pre class="csharpcode">            <span class="kwrd">var</span> div = $(<span class="str">"#placeholder"</span>);

            

            <span class="rem">// 处理不带命名空间的xml</span>
            $.get(<span class="str">"data.xml"</span>, <span class="kwrd">null</span>, <span class="kwrd">function</span> (data) {
                <span class="kwrd">var</span> employees = $(<span class="str">"Employee"</span>, data); <span class="rem">//找到所有的Employee节点</span>

                <span class="kwrd">var</span> ul = $(<span class="str">"&lt;ul /&gt;"</span>);

                employees.each(<span class="kwrd">function</span> () {
                    $(<span class="str">"&lt;li /&gt;"</span>).text($(<span class="kwrd">this</span>).attr(<span class="str">"firstName"</span>) + <span class="str">" "</span> + $(<span class="kwrd">this</span>).attr(<span class="str">"lastName"</span>)).appendTo(ul);<span class="rem">// 将每一行数据构造一个新的li标签，并且将其插入到ul中</span>

                });

                ul.appendTo(div);
            });
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>但如果我们的XML数据带有命名空间，则上述代码就会无效。原因是因为jquery默认处理不了命名空间</p><pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">data</span> <span class="attr">xmlns:d</span><span class="kwrd">="http://tech.xizhang.com"</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">d:Employee</span> <span class="attr">id</span><span class="kwrd">="1"</span> <span class="attr">firstName</span><span class="kwrd">="bill"</span> <span class="attr">lastName</span><span class="kwrd">="gates"</span><span class="kwrd">&gt;&lt;/</span><span class="html">d:Employee</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;/</span><span class="html">data</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
<br>为了解决这个问题，有热心的网友，编写了一个jquery插件，叫做jquery.xmlns.js，有兴趣可以通过下面了解和下载
<p><a href="http://www.rfk.id.au/blog/entry/xmlns-selectors-jquery/">http://www.rfk.id.au/blog/entry/xmlns-selectors-jquery/</a></p>
<p>那么，我们可以用如下的方法来解决问题</p><pre class="csharpcode">     
            $.xmlns[<span class="str">"d"</span>] = <span class="str">"http://tech.xizhang.com"</span>;
            <span class="rem">// 处理带命名空间的xml</span>
            $.get(<span class="str">"datawithnamespace.xml"</span>, <span class="kwrd">null</span>, <span class="kwrd">function</span> (data) {
                <span class="kwrd">var</span> employees = $(<span class="str">"d|Employee"</span>, data); <span class="rem">//找到所有的Employee节点</span>

                <span class="kwrd">var</span> ul = $(<span class="str">"&lt;ul /&gt;"</span>);

                employees.each(<span class="kwrd">function</span> () {
                    $(<span class="str">"&lt;li /&gt;"</span>).text($(<span class="kwrd">this</span>).attr(<span class="str">"firstName"</span>) + <span class="str">" "</span> + $(<span class="kwrd">this</span>).attr(<span class="str">"lastName"</span>)).appendTo(ul);

                });

                ul.appendTo(div);

            });
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>不得不说，XML这个技术规范中的命名空间真是一个很不好的设计。增加了很多麻烦，胜过于它带来的好处。</p>
<p>&nbsp;</p>
<p>本文的例子完整代码如下</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="WebApplication1.WebForm1" %&gt;</span>

<span class="kwrd">&lt;!</span><span class="html">DOCTYPE</span> <span class="attr">html</span> <span class="attr">PUBLIC</span> <span class="kwrd">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="kwrd">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="kwrd">&gt;</span>

<span class="kwrd">&lt;</span><span class="html">html</span> <span class="attr">xmlns</span><span class="kwrd">="http://www.w3.org/1999/xhtml"</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">head</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">title</span><span class="kwrd">&gt;&lt;/</span><span class="html">title</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-1.4.1.min.js"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script src=<span class="str">"Scripts/jquery.xmlns.js"</span> type=<span class="str">"text/javascript"</span>&gt;&lt;/script&gt;
    &lt;script language=<span class="str">"javascript"</span> type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {

            <span class="kwrd">var</span> div = $(<span class="str">"#placeholder"</span>);

            

            <span class="rem">// 处理不带命名空间的xml</span>
            $.get(<span class="str">"data.xml"</span>, <span class="kwrd">null</span>, <span class="kwrd">function</span> (data) {
                <span class="kwrd">var</span> employees = $(<span class="str">"Employee"</span>, data); <span class="rem">//找到所有的Employee节点</span>

                <span class="kwrd">var</span> ul = $(<span class="str">"&lt;ul /&gt;"</span>);

                employees.each(<span class="kwrd">function</span> () {
                    $(<span class="str">"&lt;li /&gt;"</span>).text($(<span class="kwrd">this</span>).attr(<span class="str">"firstName"</span>) + <span class="str">" "</span> + $(<span class="kwrd">this</span>).attr(<span class="str">"lastName"</span>)).appendTo(ul);<span class="rem">// 将每一行数据构造一个新的li标签，并且将其插入到ul中</span>

                });

                ul.appendTo(div);
            });


            $(<span class="str">"&lt;br /&gt;"</span>).appendTo(div);

     
            $.xmlns[<span class="str">"d"</span>] = <span class="str">"http://tech.xizhang.com"</span>;
            <span class="rem">// 处理带命名空间的xml</span>
            $.get(<span class="str">"datawithnamespace.xml"</span>, <span class="kwrd">null</span>, <span class="kwrd">function</span> (data) {
                <span class="kwrd">var</span> employees = $(<span class="str">"d|Employee"</span>, data); <span class="rem">//找到所有的Employee节点</span>

                <span class="kwrd">var</span> ul = $(<span class="str">"&lt;ul /&gt;"</span>);

                employees.each(<span class="kwrd">function</span> () {
                    $(<span class="str">"&lt;li /&gt;"</span>).text($(<span class="kwrd">this</span>).attr(<span class="str">"firstName"</span>) + <span class="str">" "</span> + $(<span class="kwrd">this</span>).attr(<span class="str">"lastName"</span>)).appendTo(ul);

                });

                ul.appendTo(div);

            });


        });
    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">head</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">body</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="form1"</span> <span class="attr">runat</span><span class="kwrd">="server"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="placeholder"</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">body</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">html</span><span class="kwrd">&gt;</span>
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>最后，在浏览器中看到的效果如下。有图有真相</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121803311987.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121803315924.png" width="589" height="519"></a></p>]]></description></item><item><title>再谈谈ADO.NET Data Service 数据格式(xml和json）</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078830.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 12 Jun 2011 05:10:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/12/2078830.html</guid><description><![CDATA[<p>去年的时候，我写过一篇文章，介绍如何让ADO.NET Data Service返回json数据格式。如果有兴趣，可以参考下面这个链接</p> <p><a href="http://www.cnblogs.com/chenxizhang/archive/2010/10/27/1862898.html">http://www.cnblogs.com/chenxizhang/archive/2010/10/27/1862898.html</a></p> <p>&nbsp;</p> <p>近日被网友问起，为什么这个成熟的框架（ADO.NET Data Service, 现在新版本里面叫WCF Data Service)，居然还需要用自定义的Behavior来改变这种输出格式。</p> <p>事实上，我认为这个问题问得很好，有些事情多问几个为什么，真相将会显现。</p> <p>&nbsp;</p> <p>那么，我们来多问几个问题</p> <h2>1. 什么是json</h2> <p>json的全称是指Javascript object notation, 这种数据格式顾名思义，是用于Javascript的一种原生的数据格式，它一方面较之xml或者html，有体积小的优点，同时它最适合javascript对其进行解析和处理</p> <p>&nbsp;</p> <h2>2. 为什么ADO.NET Data Service需要支持json</h2> <p>ADO.NET Data Service作为一种服务，它可能被广泛用于各种业务场景，我们可能通过客户端程序来访问它，也可能通过javascript来访问它。既然希望在javascript中访问该服务，那么最好是能支持json格式。</p> <h2>3. ADO.NET Data Service如何支持json</h2> <p>其实这是内置支持的。去年写的那个文章是一个做法，本文在此基础上再一步地澄清一些技术点，给大家参考</p> <p>&nbsp;</p> <p>为了做演示，我准备了一个简单的项目</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309376086.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309373087.png" width="919" height="727"></a></p> <p>本例中，我采用LINQ to SQL作为数据模型，访问了Northwind数据库的Customers表</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309372564.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309382597.png" width="919" height="727"></a></p> <p>同时，我添加了一个最简单的Data Service</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309382630.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309388759.png" width="919" height="727"></a></p> <p>【备注】以上步骤如果你不清楚，请通过<a href="http://msdn.microsoft.com/en-us/library/cc907912.aspx">http://msdn.microsoft.com/en-us/library/cc907912.aspx</a> 进行一些基础的学习</p> <p>&nbsp;</p> <p>该服务运行起来之后的效果如下</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309381824.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309398792.png" width="926" height="367"></a></p> <p>如果我们访问Customers这个实体集合，则会有下面的结果</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309394681.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309393285.png" width="1028" height="732"></a></p> <p>我们看到，它默认是用XML（准确地说，是用Atom）格式返回数据的。</p> <p>&nbsp;</p> <p>好吧，我们回到原始的问题，那么如何返回json格式的数据呢？<a href="http://www.cnblogs.com/chenxizhang/archive/2010/10/27/1862898.html">http://www.cnblogs.com/chenxizhang/archive/2010/10/27/1862898.html</a> 这篇文章确实提供了一个做法，但事实上真的需要这么做吗？</p> <p>&nbsp;</p> <p>既然我们是要在javascript中访问服务，才需要json格式的数据，那么我们就用javascript来访问一下该服务，看看到底会怎么样？</p> <p>下面的例子，我用了最喜欢的jquery来编写脚本</p><pre class="csharpcode"><span class="asp">&lt;%@ Page Title="Home Page" Language="C#" MasterPageFile="~/Site.master" AutoEventWireup="true"
    CodeBehind="Default.aspx.cs" Inherits="WebApplication1._Default" %&gt;</span>

<span class="kwrd">&lt;</span><span class="html">asp:Content</span> <span class="attr">ID</span><span class="kwrd">="HeaderContent"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ContentPlaceHolderID</span><span class="kwrd">="HeadContent"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">src</span><span class="kwrd">="Scripts/jquery-1.4.1.min.js"</span> <span class="attr">type</span><span class="kwrd">="text/javascript"</span><span class="kwrd">&gt;&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
    &lt;script language=<span class="str">"javascript"</span> type=<span class="str">"text/javascript"</span>&gt;
        $(<span class="kwrd">function</span> () {

            <span class="kwrd">var</span> url = <span class="str">"NorthwindService.svc/Customers"</span>;
            $.getJSON(url, <span class="kwrd">null</span>, <span class="kwrd">function</span> (data) {
                <span class="kwrd">var</span> table = $(<span class="str">"&lt;table /&gt;"</span>);

                $(data.d).each(<span class="kwrd">function</span> () {
                    <span class="kwrd">var</span> tr = $(<span class="str">"&lt;tr /&gt;"</span>);
                    $(<span class="str">"&lt;td /&gt;"</span>).text(<span class="kwrd">this</span>.CompanyName).appendTo(tr);
                    tr.appendTo(table);
                });

                table.appendTo($(<span class="str">"#jsonHolder"</span>));

            });

        });

    <span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">asp:Content</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">asp:Content</span> <span class="attr">ID</span><span class="kwrd">="BodyContent"</span> <span class="attr">runat</span><span class="kwrd">="server"</span> <span class="attr">ContentPlaceHolderID</span><span class="kwrd">="MainContent"</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="jsonHolder"</span><span class="kwrd">&gt;</span>
        <span class="rem">&lt;!--这里通过json请求的方式读取Data Service，并且进行布局--&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">asp:Content</span><span class="kwrd">&gt;</span>
</pre>
<p>也就是说，我们只要在jquery中通过getJSON方法发起请求就可以了。通过Fiddler工具监控，我们看到Request里面其实有一个格式设置：application/json</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309395794.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309394714.png" width="589" height="203"></a></p>
<p>监控到的回复如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309398858.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309399415.png" width="941" height="689"></a></p>
<p>展现在页面上面的效果如下</p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309407321.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110612130940942.png" width="1028" height="732"></a></p>
<p>如此看来，<strong><font color="#ff0000">ADO.NET Data Service内置就是支持json格式的，重点就在于客户端发起请求的时候，指定需要返回json格式</font></strong>即可。</p>
<p>&nbsp;</p>
<p>那么，我们可以将话题再延伸一下，如果在一个普通的客户端程序中，也想返回json格式的数据的话，该怎么办呢？</p>
<p>其实也很简单，我们可以在发起请求的时候，指定要使用json格式返回数据，如下是一个简单的例子</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">using</span> System.Net;


<span class="kwrd">namespace</span> ConsoleApplication
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            var url = <span class="str">"http://localhost:9458/NorthwindService.svc/Customers"</span>;

            var client = <span class="kwrd">new</span> WebClient();
     <strong>       client.Headers.Add(<span class="str">"Accept:application/json"</span>);</strong>
            client.DownloadStringCompleted += (s, a) =&gt;
            {
                Console.WriteLine(a.Result);
            };

            client.DownloadStringAsync(<span class="kwrd">new</span> Uri(url));

            Console.Read();
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>


<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110612130942551.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106121309436713.png" width="673" height="998"></a></p>
<p>至于如何将这个json的字符串转换为对象进行处理，不是本文讨论的范围。有兴趣可以了解&nbsp; DataContractJsonSerializer 这个类型。</p>
<p>我可以预见 的是，你真正了解这些之后，会和我一样的感慨</p>
<p>1.在托管代码中，尽量用XML，使用LINQ to XML这样的技术解析数据较为方便</p>
<p>2.在javascript代码中，尽量用JSON,直接就可以用对象的方式访问。</p>]]></description></item><item><title>如何在命令行脚本中启动带参数的Windows服务</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/10/2077931.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 10 Jun 2011 12:35:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/10/2077931.html</guid><description><![CDATA[<p>这是一个小问题：</p> <p>我们有一个自己编写的Windows服务，我们希望该服务在启动时可以根据用户输入的参数实现不同的功能。</p> <p>要实现这样的需求并不是很难，下面这个例子我用来示范如何编写该服务</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.ComponentModel;
<span class="kwrd">using</span> System.Data;
<span class="kwrd">using</span> System.Diagnostics;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.ServiceProcess;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">namespace</span> WindowsServiceSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> SampleService : ServiceBase
    {
        <span class="kwrd">public</span> SampleService()
        {
            InitializeComponent();
        }

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// 服务启动时触发</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;param name="args"&gt;用户可以设置的输入参数&lt;/param&gt;</span>
        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnStart(<span class="kwrd">string</span>[] args)
        {

            <span class="kwrd">if</span> (args.Length &gt; 0)
            {
                EventLog.WriteEntry(<span class="kwrd">string</span>.Format(<span class="str">"sample service is started with parameter :{0}"</span>, <span class="kwrd">string</span>.Join(<span class="str">","</span>, args)));
            }
            <span class="kwrd">else</span>
            {
                EventLog.WriteEntry(<span class="str">"sample service is started with non parameter"</span>);
            }
        }

        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> OnStop()
        {
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>在上述代码中，我区分了带参数启动和不带参数启动两种情况。很显然，在带参数的那种情况下，我们可以根据参数做不同的处理。本文仅为了说明参数问题，并不真的去考虑那些实际应用。我通过写日志的方式来区分即可。</p>
<p>&nbsp;</p>
<p>这个服务安装起来之后，在服务控制台中看起来是这样的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034421990.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/2011061020344271.png" width="824" height="604"></a></p>
<p>如果我们通过手工去启动的话，如何设置参数呢？很简单，双击该服务，在属性对话框中输入参数即可</p>
<p>【注意】是先输入参数，然后点击“Start”</p>
<p>【注意】不同的参数之间用空格隔开</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034422056.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034429581.png" width="418" height="474"></a></p>
<p>启动成功后，我们在事件日志中可以看到一条日志</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034436234.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034439614.png" width="805" height="562"></a></p>
<p>这说明，参数确实被捕捉到了。服务正常进行了工作。</p>
<p>还不错对吧？但本文的最大目的并不是解释这个，上面都是铺垫，如果我们是要通过命令行脚本的方式来启动服务，而不是手工启动服务，那么该如何设置参数呢？</p>
<p>&nbsp;</p>
<p>我们都知道要在命令行中启动服务，一般都是通过net start命令。这个工具的格式如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110610203443170.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034437139.png" width="998" height="346"></a></p>
<p>我们可以通过net start sampleservice启动服务</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034433791.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110610203443760.png" width="1002" height="346"></a></p>
<p>在事件日志中确实看到它是没有带参数启动的</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034446648.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034441665.png" width="805" height="562"></a></p>
<p>好吧，那么如何传递参数过去呢？</p>
<p>经过研究发现，net 工具要传递参数的话，有一个很特殊的做法</p>
<p>net start sampleservice /a /b /c /d</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034443857.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034449190.png" width="936" height="346"></a></p>
<p>但是这样启动之后，看日志却发现有一点点特殊</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034442254.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034449779.png" width="805" height="562"></a></p>
<p>请主要，参数确实传递进来了。但包含了“/”。如果说在程序中识别这个特殊的符号，那么也是没有问题的。只不过，这样就未必是增加了程序的复杂性啦。</p>
<p>那么，有没有更加简单的做法呢？（简单的意思是说与手工操作是一样的，不需要为此去修改代码）</p>
<p>我想起来，除了用net start之外，还可以通过sc start命令来启动服务</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034453400.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034456813.png" width="936" height="346"></a><br>这样的命令就直观多了。我们马上来看一下日志文件中的结果吧</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034466879.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106102034468025.png" width="805" height="562"></a></p>
<p>很好，这是我们需要的效果。也就是说用sc工具的话，可以很好地传递参数。</p>
<p>【备注】sc的意思是，service controller,关于该工具的详细介绍，请参考 <a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/sc.mspx?mfr=true">http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/sc.mspx?mfr=true</a></p>]]></description></item><item><title>RIA Service中对于递归实体类型处理的问题及解决方案</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/10/2077459.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 10 Jun 2011 03:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/10/2077459.html</guid><description><![CDATA[<p>故事是这样开始的：</p> <p>&nbsp;</p> <p>我们在开发一个Silverlight应用程序的时候使用到了RIA Service，我们需要通过该服务公开一个对文件夹的查询操作。</p> <p>为此，我们建立了如下的一个实体类型</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">using</span> System.Runtime.Serialization;
<span class="kwrd">using</span> System.ComponentModel.DataAnnotations;

<span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;

<span class="kwrd">namespace</span> DomainServiceSample.Web
{
    [DataContract]<span class="rem">//必须声明类别为DataContract</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> Folder
    {
        [DataMember]<span class="rem">//必须声明属性为DataMember</span>
        [Key]<span class="rem">//一个用于DomainService的Entity必须有一个Key</span>
        <span class="kwrd">public</span> Guid ID { get; set; }

        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }

        [DataMember]         </pre><pre class="csharpcode"><span class="kwrd">        public</span> Folder[] SubFolder { get; set; }
        
    }
}</pre>
<p>【注意】上面其实是有一个递归的类型，也就是Folder里面又包含Folder</p>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>然后，我们创建了一个DomainService</p><pre class="csharpcode">
<span class="kwrd">namespace</span> DomainServiceSample.Web
{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.Collections.Generic;
    <span class="kwrd">using</span> System.ComponentModel;
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        [Query]
        <span class="kwrd">public</span> IQueryable&lt;Folder&gt; GetFolder()
        {
            var folder = <span class="kwrd">new</span> Folder() { ID = Guid.NewGuid(), Name = <span class="str">"Level 1 Folder"</span> };
            var subFolders = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Folder(){ID=Guid.NewGuid(),Name=<span class="str">"Level 2 Folder"</span>},
                <span class="kwrd">new</span> Folder(){ID=Guid.NewGuid(),Name=<span class="str">"Level 2 Folder 2"</span>}
            };
            folder.SubFolder = subFolders;
            <span class="kwrd">return</span> <span class="kwrd">new</span>[] { folder }.AsQueryable();
        }
    }
}


</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
这个代码没有什么特别的,我们计划向客户端发送的结果是一个Folder,但同时它包含了两个子Folder。</p>
<p>编写上面两个类型很顺利，然后我们生成项目，因为使用了Domain Service，所以在Silverlight应用程序中会得到一个自动生成的类型</p>
<p>我们打开那个文件，确实里面是有一个Folder的类型</p><pre class="csharpcode">    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// The 'Folder' entity class.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [DataContract(Namespace=<span class="str">"http://schemas.datacontract.org/2004/07/DomainServiceSample.Web"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">sealed</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Folder : Entity
    {
        
        <span class="kwrd">private</span> Guid _id;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _name;
        
        <span class="preproc">#region</span> Extensibility Method Definitions

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// This method is invoked from the constructor once initialization is complete and</span>
        <span class="rem">/// can be used for further object setup.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreated();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnIDChanging(Guid <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnIDChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnNameChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnNameChanged();

        <span class="preproc">#endregion</span>
        
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="Folder"/&gt; class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> Folder()
        {
            <span class="kwrd">this</span>.OnCreated();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'ID' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [Editable(<span class="kwrd">false</span>, AllowInitialValue=<span class="kwrd">true</span>)]
        [Key()]
        [RoundtripOriginal()]
        <span class="kwrd">public</span> Guid ID
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._id;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._id != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnIDChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"ID"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._id = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaisePropertyChanged(<span class="str">"ID"</span>);
                    <span class="kwrd">this</span>.OnIDChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Name' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._name;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._name != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnNameChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Name"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Name"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._name = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Name"</span>);
                    <span class="kwrd">this</span>.OnNameChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Computes a value from the key fields that uniquely identifies this entity instance.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;An object instance that uniquely identifies this entity instance.&lt;/returns&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">object</span> GetIdentity()
        {
            <span class="kwrd">return</span> <span class="kwrd">this</span>._id;
        }
    }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
但是，让人疑惑的是，<strong><font color="#ff0000">这个类型里面并没有包含SubFolder这个属性</font></strong></p>
<p>这是什么情况呢？难道RIA Service不允许传递这种包含递归类型引用的实体？确实如此。</p>
<p>&nbsp;</p>
<p>我目前的解决方法是：</p>
<p>1. 为Folder类型添加一个ParentID属性</p>
<p>2. 为SubFolder设置关联，即子Folder的ParentID设置到父Folder的ID。并且定义他们的关联</p>
<p>3. 使用Include属性标记SubFolder是要包含进来的</p>
<p>&nbsp;</p>
<p>所以，这个类型修改为下面这样</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web;

<span class="kwrd">using</span> System.Runtime.Serialization;
<span class="kwrd">using</span> System.ComponentModel.DataAnnotations;

<span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;

<span class="kwrd">namespace</span> DomainServiceSample.Web
{
    [DataContract]<span class="rem">//必须声明类别为DataContract</span>
    <span class="kwrd">public</span> <span class="kwrd">class</span> Folder
    {
        [DataMember]<span class="rem">//必须声明属性为DataMember</span>
        [Key]<span class="rem">//一个用于DomainService的Entity必须有一个Key</span>
        <span class="kwrd">public</span> Guid ID { get; set; }

        [DataMember]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; set; }


        [DataMember]
<font color="#ff0000">        [Association(<span class="str">"Test"</span>,<span class="str">"ID"</span>,<span class="str">"ParentID"</span>)]
        [Include]</font>
        <span class="kwrd">public</span> Folder[] SubFolder { get; set; }


  <font color="#ff0000">      [DataMember]
        <span class="kwrd">public</span> Guid ParentID { get; set; }</font>
        
    }
}</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106101132137223.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106101132135096.png" width="919" height="727"></a></p>
<p>然后，我们再来看在Silverlight中生成的那个类型</p><pre class="csharpcode">   <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// The 'Folder' entity class.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    [DataContract(Namespace=<span class="str">"http://schemas.datacontract.org/2004/07/DomainServiceSample.Web"</span>)]
    <span class="kwrd">public</span> <span class="kwrd">sealed</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Folder : Entity
    {
        
        <span class="kwrd">private</span> Guid _id;
        
        <span class="kwrd">private</span> <span class="kwrd">string</span> _name;
        
        <span class="kwrd">private</span> Guid _parentID;
        
        <span class="kwrd">private</span> EntityCollection&lt;Folder&gt; _subFolder;
        
        <span class="preproc">#region</span> Extensibility Method Definitions

        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// This method is invoked from the constructor once initialization is complete and</span>
        <span class="rem">/// can be used for further object setup.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnCreated();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnIDChanging(Guid <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnIDChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnNameChanging(<span class="kwrd">string</span> <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnNameChanged();
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnParentIDChanging(Guid <span class="kwrd">value</span>);
        <span class="kwrd">partial</span> <span class="kwrd">void</span> OnParentIDChanged();

        <span class="preproc">#endregion</span>
        
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Initializes a new instance of the &lt;see cref="Folder"/&gt; class.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="kwrd">public</span> Folder()
        {
            <span class="kwrd">this</span>.OnCreated();
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'ID' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        [Editable(<span class="kwrd">false</span>, AllowInitialValue=<span class="kwrd">true</span>)]
        [Key()]
        [RoundtripOriginal()]
        <span class="kwrd">public</span> Guid ID
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._id;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._id != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnIDChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"ID"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._id = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaisePropertyChanged(<span class="str">"ID"</span>);
                    <span class="kwrd">this</span>.OnIDChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'Name' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._name;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._name != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnNameChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"Name"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"Name"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._name = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"Name"</span>);
                    <span class="kwrd">this</span>.OnNameChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets or sets the 'ParentID' value.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [DataMember()]
        <span class="kwrd">public</span> Guid ParentID
        {
            get
            {
                <span class="kwrd">return</span> <span class="kwrd">this</span>._parentID;
            }
            set
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._parentID != <span class="kwrd">value</span>))
                {
                    <span class="kwrd">this</span>.OnParentIDChanging(<span class="kwrd">value</span>);
                    <span class="kwrd">this</span>.RaiseDataMemberChanging(<span class="str">"ParentID"</span>);
                    <span class="kwrd">this</span>.ValidateProperty(<span class="str">"ParentID"</span>, <span class="kwrd">value</span>);
                    <span class="kwrd">this</span>._parentID = <span class="kwrd">value</span>;
                    <span class="kwrd">this</span>.RaiseDataMemberChanged(<span class="str">"ParentID"</span>);
                    <span class="kwrd">this</span>.OnParentIDChanged();
                }
            }
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Gets the collection of associated &lt;see cref="Folder"/&gt; entity instances.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        [Association(<span class="str">"Test"</span>, <span class="str">"ID"</span>, <span class="str">"ParentID"</span>)]
        <span class="kwrd">public</span> EntityCollection&lt;Folder&gt; SubFolder
        {
            get
            {
                <span class="kwrd">if</span> ((<span class="kwrd">this</span>._subFolder == <span class="kwrd">null</span>))
                {
                    <span class="kwrd">this</span>._subFolder = <span class="kwrd">new</span> EntityCollection&lt;Folder&gt;(<span class="kwrd">this</span>, <span class="str">"SubFolder"</span>, <span class="kwrd">this</span>.FilterSubFolder);
                }
                <span class="kwrd">return</span> <span class="kwrd">this</span>._subFolder;
            }
        }
        
        <span class="kwrd">private</span> <span class="kwrd">bool</span> FilterSubFolder(Folder entity)
        {
            <span class="kwrd">return</span> (entity.ParentID == <span class="kwrd">this</span>.ID);
        }
        
        <span class="rem">/// &lt;summary&gt;</span>
        <span class="rem">/// Computes a value from the key fields that uniquely identifies this entity instance.</span>
        <span class="rem">/// &lt;/summary&gt;</span>
        <span class="rem">/// &lt;returns&gt;An object instance that uniquely identifies this entity instance.&lt;/returns&gt;</span>
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">object</span> GetIdentity()
        {
            <span class="kwrd">return</span> <span class="kwrd">this</span>._id;
        }
    }</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>这时就看到SubFolder了，而且还包含了很多其他的属性。</p>
<p>&nbsp;</p>
<p>最后，我做了一个界面来显示给大家看看效果</p>
<p>MainPage.xaml的内容如下</p><pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">UserControl</span> <span class="attr">x:Class</span><span class="kwrd">="DomainServiceSample.MainPage"</span>
    <span class="attr">xmlns</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    <span class="attr">xmlns:x</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml"</span>
    <span class="attr">xmlns:d</span><span class="kwrd">="http://schemas.microsoft.com/expression/blend/2008"</span>
    <span class="attr">xmlns:mc</span><span class="kwrd">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    <span class="attr">mc:Ignorable</span><span class="kwrd">="d"</span>
    <span class="attr">d:DesignHeight</span><span class="kwrd">="300"</span> <span class="attr">d:DesignWidth</span><span class="kwrd">="400"</span> <span class="attr">xmlns:sdk</span><span class="kwrd">="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">Grid</span> <span class="attr">x:Name</span><span class="kwrd">="LayoutRoot"</span> <span class="attr">Background</span><span class="kwrd">="White"</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="True"</span> <span class="attr">Margin</span><span class="kwrd">="16,13,12,12"</span> <span class="attr">Name</span><span class="kwrd">="dataGrid1"</span> <span class="attr">ItemsSource</span><span class="kwrd">="{Binding}"</span> <span class="attr">RowDetailsVisibilityMode</span><span class="kwrd">="Visible"</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid.RowDetailsTemplate</span><span class="kwrd">&gt;</span>
                <span class="kwrd">&lt;</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
                    <span class="kwrd">&lt;</span><span class="html">sdk:DataGrid</span> <span class="attr">AutoGenerateColumns</span><span class="kwrd">="True"</span> <span class="attr">Margin</span><span class="kwrd">="20,20,20,20"</span> <span class="attr">Height</span><span class="kwrd">="300"</span> <span class="attr">ItemsSource</span><span class="kwrd">="{Binding SubFolder}"</span> <span class="kwrd">/&gt;</span>
                <span class="kwrd">&lt;/</span><span class="html">DataTemplate</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid.RowDetailsTemplate</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">sdk:DataGrid</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">Grid</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">UserControl</span><span class="kwrd">&gt;</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>MainPage.xaml.cs的内容如下</p>
<p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Net;
<span class="kwrd">using</span> System.Windows;
<span class="kwrd">using</span> System.Windows.Controls;
<span class="kwrd">using</span> System.Windows.Documents;
<span class="kwrd">using</span> System.Windows.Input;
<span class="kwrd">using</span> System.Windows.Media;
<span class="kwrd">using</span> System.Windows.Media.Animation;
<span class="kwrd">using</span> System.Windows.Shapes;

<span class="kwrd">using</span> DomainServiceSample.Web;

<span class="kwrd">namespace</span> DomainServiceSample
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> MainPage : UserControl
    {
        <span class="kwrd">public</span> MainPage()
        {
            InitializeComponent();

            Loaded += <span class="kwrd">new</span> RoutedEventHandler(MainPage_Loaded);
        }

        <span class="kwrd">void</span> MainPage_Loaded(<span class="kwrd">object</span> sender, RoutedEventArgs e)
        {
            var ctx = <span class="kwrd">new</span> SampleDomainContext();
            var op = ctx.Load&lt;Folder&gt;(ctx.GetFolderQuery());
            dataGrid1.DataContext = op.Entities;
        }
    }
}
</pre>
<p>&nbsp;</p>
<p>同时，服务端的代码我也稍作了修改</p><pre class="csharpcode">
<span class="kwrd">namespace</span> DomainServiceSample.Web
{
    <span class="kwrd">using</span> System;
    <span class="kwrd">using</span> System.Collections.Generic;
    <span class="kwrd">using</span> System.ComponentModel;
    <span class="kwrd">using</span> System.ComponentModel.DataAnnotations;
    <span class="kwrd">using</span> System.Linq;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Hosting;
    <span class="kwrd">using</span> System.ServiceModel.DomainServices.Server;


    <span class="rem">// TODO: Create methods containing your application logic.</span>
    [EnableClientAccess()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> SampleDomainService : DomainService
    {
        [Query]
        <span class="kwrd">public</span> IQueryable&lt;Folder&gt; GetFolder()
        {
            var folder = <span class="kwrd">new</span> Folder() { ID = Guid.NewGuid(), Name = <span class="str">"Level 1 Folder"</span> };
            var subFolders = <span class="kwrd">new</span>[]{
                <span class="kwrd">new</span> Folder(){ID=Guid.NewGuid(),Name=<span class="str">"Level 2 Folder"</span><font color="#ff0000">,ParentID=folder.ID</font>},
                <span class="kwrd">new</span> Folder(){ID=Guid.NewGuid(),Name=<span class="str">"Level 2 Folder 2"</span><font color="#ff0000">,ParentID=folder.ID</font>}
            };
            folder.SubFolder = subFolders;
            <span class="kwrd">return</span> <span class="kwrd">new</span>[] { folder }.AsQueryable();
        }
    }
}


</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>调试起来看到的效果如下</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106101132149830.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110610113214179.png" width="737" height="474"></a></p>
<p>&nbsp;</p>
<p>虽然解决了问题，但个人感觉Domain Service这个设计值得商榷。如果各位有更好的见解和解决方案，请不吝赐教</p>]]></description></item><item><title>【SSAS】Model-First Cube 设计的最佳实践</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/09/2076718.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 09 Jun 2011 10:11:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/09/2076718.html</guid><description><![CDATA[<p>【备注】这是最近在一个讲座中的例子，整理出来给大家参考</p> <p>&nbsp;</p> <p>相关名词解释</p> <h1>SSAS: SQL Server Analysis Service。</h1> <p>这是微软SQL Server BI（商务智能）平台的一个核心组件，它可以基于UDM（统一维度模型）构建多维数据集和挖掘模型，支持OLAP（在线分析）和Data Mining(数据挖掘）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810389103.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810394741.png" width="996" height="569" /></a></p> <h1>Cube: 多维数据集</h1> <p>这是SSAS项目设计的一个核心目的，创建多维数据集，以便支持OLAP分析。对于Cube而言，不再有行和列的概念，取而代之的是，维度和度量值（以及度量值组）</p> <p>&nbsp;</p> <h1>Model-First： 模型先行</h1> <p>这是SSAS从2005这个版本开始支持的一个新特性，也可以说是一个设计Cube的策略。Model-First指的是，在没有数据仓库的情况下，先设计模型（维度和度量值，以及他们之间的关系），然后可以根据这个模型，反向生成数据仓库。</p> <p>与该策略对应的另外一个策略是：Database-First（数据库先行），也就是说，在设计Cube之前，现有一个完整的数据仓库，该策略是指根据数据仓库的结构生成Cube。</p> <p>这两种策略各有优缺点。Database-first较为简单，能够很快生成Cube，快速验证和开始工作。而Model-First则更加适合于现实的工作中，因为很多时候，我们在做BI项目的时候，可能数据仓库是并不存在的。而且过早地关注数据仓库的物理设计，也不是一个非常好的方案。我们应该是先关注分析需求，并且将这些需求转换为我们的模型。</p> <p>&nbsp;</p> <p>这一篇文章用一个例子演示了如何使用Model-First策略设计Cube，并且反向工程生成数据仓库。</p> <h2>1.新建一个SSAS项目</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810403204.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810413270.png" width="1026" height="732" /></a></p> <h2>2.启动新建Cube向导（在Cubes文件夹处，右键）</h2> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810428909.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810428975.png" width="644" height="586" /></a></p> <p>选择Creation Method，&#8220; Create an empty cube&#8221;。注意，这里也可以根据模板创建。这两种都属于是Model-First的方式</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810438452.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810439598.png" width="644" height="586" /></a></p> <p>由于目前没有数据库，所以下图中只能选择&#8220;None&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810441059.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810446076.png" width="644" height="586" /></a></p> <p>接下来给Cube命名，完成操作</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810449730.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810451715.png" width="644" height="586" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810452861.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810468782.png" width="1026" height="732" /></a></p> <h2>3.创建度量值</h2> <p>度量值指的是我们在Cube里面需要进行分析的一些基础指标。本例中，我们假设要分析一个销售业务，有两个度量值，销售额和数量。</p> <p>首先，创建一个度量值组（Measure Group)，它是用来组织度量值的</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810461847.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810463832.png" width="704" height="530" /></a></p> <p>将度量值组命名为Sales，并且继续创建两个度量值，SalesAmount和Quantity</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181046277.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810475850.png" width="516" height="367" /></a></p> <h2>4.创建并编辑维度</h2> <p>维度代表了我们在Cube中分析业务的角度。本例中，我们创建两个维度，时间维度和客户维度</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181047343.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810478947.png" width="704" height="530" /></a></p> <p>首先，创建时间维度（注意，时间维度是一个很特殊的维度，有专门的向导）</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/2011060918104893.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181048442.png" width="644" height="586" /></a></p> <p>定义时间段以及我们关注的时间信息。这个时间段将决定后续生成数据的范围。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810496048.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810492700.png" width="644" height="586" /></a></p> <p>我们甚至还可以定义多个日历</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810494718.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810508099.png" width="644" height="586" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810505341.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810509277.png" width="644" height="586" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810517392.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810527458.png" width="1026" height="732" /></a></p> <p>接下来，我们创建一个客户维度.与时间维度不同的是，客户维度一般需要我们自己定义。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810526967.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810532017.png" width="644" height="586" /></a></p> <p>【注意】这里也可以使用模板，但为了演示如何设计维度，我不用模板</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181053621.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181053687.png" width="644" height="586" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810546576.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810549674.png" width="644" height="586" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810541102.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810559216.png" width="644" height="586" /></a></p> <p>【注意】这里所谓的SCD，指的是渐变维度。该内容的讨论超出了本文的范围，有兴趣的朋友请参考联机丛书或者我其他的文章。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810552837.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810563460.png" width="1026" height="732" /></a></p> <p>通过上面的步骤，我们已经创建了一个维度，我们还需要为该维度添加一些属性（Attribute），例如本例中，我们添加&#8220;国家&#8221;，&#8220;地区&#8221;，&#8220;城市&#8221;，&#8220;性别&#8221;四个属性，以便利用它们进行分析。</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181057527.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810581465.png" width="1026" height="732" /></a></p> <p>【注意】这里应该还需要创建层次（Hierarchies)，以便提供性能。限于篇幅，本文不做这个步骤</p> <p>&nbsp;</p> <h2>5.将维度与Cube关联</h2> <p>维度建立好之后，需要将它与Cube进行关联。我们可以先回到Cube Design界面</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810585119.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091810598217.png" width="1026" height="732" /></a></p> <p>在左下角的方块区域，可以添加维度</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181059235.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181100268.png" width="704" height="530" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811006713.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811001414.png" width="440" height="468" /></a></p> <p>将两个维度都添加进来</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811006746.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811013399.png" width="516" height="367" /></a></p> <p>光这样做还是不够的，我们需要设置维度与度量值的关系。切换到Dimension Usage界面</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811016463.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811011796.png" width="704" height="510" /></a></p> <p>点击每个维度右侧那个小按钮，设置关系为&#8221;Regular&#8221; ，下图是时间维度</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811016812.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811019005.png" width="890" height="530" /></a></p> <p>下图是客户维度</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811015973.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811017402.png" width="890" height="530" /></a></p> <h2>6.生成数据库</h2> <p>到上面这样，我们就完成了Cube的设计(当然，我们只是做了最简单的一个范例），那么如何根据这个设计，生成我们需要的数据仓库呢</p> <p>首先，在SQL Server中创建一个空的数据库，例如</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811033663.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811042126.png" width="1040" height="784" /></a></p> <p>然后，回到BI Studio中来，在顶部菜单中选择&#8220;Database&#8221;==&gt;&#8221;Generate Relational Schema&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811046270.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811049335.png" width="704" height="530" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811042715.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811055290.png" width="644" height="586" /></a></p> <p>点击&#8220;New&#8230;&#8221;来创建一个新的数据源</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811051942.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811063927.png" width="644" height="586" /></a></p> <p>再次点击&#8220;New&#8230;&#8221;，指定我们的服务器和数据库</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811063993.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811069566.png" width="614" height="628" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811075521.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/2011060918110814.png" width="644" height="586" /></a></p> <p>点击&#8220;Next&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811085030.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811086143.png" width="644" height="586" /></a></p> <p>【注意】这里选择&#8220;Use the service account&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811082588.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811095653.png" width="644" height="586" /></a></p> <p>点击&#8220;Finish&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811096799.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811091815.png" width="644" height="586" /></a></p> <p>点击&#8220;Next&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811108260.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181110278.png" width="644" height="586" /></a></p> <p>点击&#8220;Next&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811102471.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811105851.png" width="644" height="586" /></a></p> <p>点击&#8220;Next&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811116997.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181111377.png" width="644" height="586" /></a></p> <p>点击&#8220;Finish&#8221;</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811127935.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811122984.png" width="686" height="613" /></a></p> <p>这样就生成好了我们需要的数据库结构。我们可以在SSMS中查看得到</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811143706.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811149312.png" width="1040" height="784" /></a></p> <p>更加特别的地方是，Time这个维度表里面还包含了数据</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811173513.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811187756.png" width="1040" height="784" /></a></p> <p>当然，Customers表和Sales表目前是没有数据的，那就需要我们通过设计SSIS，将数据从业务数据库中抽取过来。这个内容已经超出了本文的范围。</p> <p>&nbsp;</p> <h2>7. 部署项目</h2>                     <p>我们可以将这个设计好的SSAS项目部署起来看看效果如何</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/20110609181118613.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811192806.png" width="704" height="530" /></a></p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811191235.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811201335.png" width="1026" height="732" /></a></p> <p>部署成功之后，下图就可以看到我们熟悉的OLAP分析的界面了</p> <p><a href="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811219449.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://images.cnblogs.com/cnblogs_com/chenxizhang/201106/201106091811217563.png" width="1026" height="732" /></a></p>]]></description></item><item><title>常见SQL Server导入导出数据的几个工具</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/09/2076542.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Thu, 09 Jun 2011 08:33:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/09/2076542.html</guid><description><![CDATA[<p>在我们的日常工作中，与数据库打交道的机会越来越多。这一篇文章我整理一下常见的SQL Server导入导出数据的几个工具</p> <p>&nbsp;</p> <h1>1. 数据导入导出向导</h1> <p>这是一个可视化的工具，我放在首位，是由于它可以极大灵活地满足导入导出功能，而且是所见即所得的，易于使用。</p> <p>启动数据导入导出向导的方式有好多种，我自己习惯直接通过如下的命令启动(开始=》运行）</p> <p>dtswizard（顾名思义，它是一个wizard——向导，而且是与dts——data transfomation service有关的)</p> <p>从下图可以看出，这个工具支持多种不同类型的数据源（以及数据目标），它其实不仅仅限于SQL Server服务器。</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb.png" width="239" height="244"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_3.png" width="239" height="244"></a></p> <p>【注意】如果是64位，这里的提供程序中找不到Excel和Access（我知道很多朋友都想导出这两种格式）</p> <p>&nbsp;</p> <p>该向导还可以通过在SQL Server Management Studio(SSMS)中启动。如果数据源或者数据目标是SQL Server的话，这是更加方便一些的。</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_4.png" width="244" height="184"></a></p> <p>【注意】通过这样的方式启动的向导，却又可以看到Excel和Access（很神奇吧，<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smilewithtongueout" alt="Smile with tongue out" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/wlEmoticon-smilewithtongueout.png">）</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_5.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_5.png" width="239" height="244"></a></p> <p>值得一提的是，这个导入导出向导还有一个好处，就是将我们经常需要导入导出的操作保存起来，如下图所示</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_6.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_6.png" width="239" height="244"></a></p> <p>这里有一个所谓的SSIS Package，是什么意思呢？SSIS指的是SQL Server Integration Service，它是微软SQL Server BI平台的一个重要组件，用来设计和管理ETL解决方案。</p> <p>这个SSIS Package是一个扩展名为dtsx的特殊文件包，它可以通过一个所谓的Business Intelligence Developement Studio(BI Studio）打开查看，并且还可以进一步地编辑</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_7.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_7.png" width="244" height="175"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_8.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_8.png" width="244" height="175"></a></p> <p>【备注】SSIS的讨论已经超出了本篇文章的范围。如有兴趣，请搜索我其他的文章。</p> <p>&nbsp;</p> <p>&nbsp;</p> <h1>2.BCP</h1> <p>如果你要实现简单的数据导入导出，并且希望用脚本命令的方式，而不是图形界面来实现。那么可以考虑SQL Server提供的BCP实用工具。</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_9.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_9.png" width="244" height="168"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_10.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_10.png" width="244" height="168"></a></p> <p>上图演示了如何将一个表导出为Excel文件，但如果想要根据一个查询导出的话，则可以按照下面这样的语法</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_11.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_11.png" width="244" height="168"></a></p> <p>使用BCP也可以进行数据，只要将out改成In即可。</p> <p>【注意】使用bcp导出数据最大一个问题就是没有标题行</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_12.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_12.png" width="244" height="145"></a></p> <p>&nbsp;</p> <h1>3. Bulk Insert和OpenRowSet</h1> <p>如果想在T-SQL中直接导入Excel文件的数据，或者TXT文件的数据，则可以了解一下如下两个特殊的T-SQL语法</p> <p>BulkInsert的语法大致如下</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_13.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_13.png" width="244" height="147"></a></p> <p>OpenRowSet的语法大致如下</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_14.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_14.png" width="244" height="83"></a></p> <p>&nbsp;</p> <p>【备注】关于这两个语句的详细用法，请参考SQL Server自带的联机丛书。</p> <p>&nbsp;</p> <h1>4.FORXML和OPENXML</h1> <p>如果想要导出导入XML格式的数据，则可以了解一下FORXML和OPENXML语法（它们是T-SQL语法，所以也可以很灵活地嵌入在我们的存储过程中）</p><pre class="csharpcode"><span class="kwrd">USE</span> Northwind
<span class="kwrd">GO</span>

<span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> Orders 
    <span class="kwrd">FOR</span> XML RAW(<span class="str">'OrderItem'</span>),
    ELEMENTS XSINIL,
    ROOT(<span class="str">'Orders'</span>) </pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>上面的语法，可以将查询用XML格式返回，如下图所示</p>
<p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_15.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_15.png" width="244" height="224"></a></p>
<p>【备注】FOR XML是SELECT的一个子句，有关更多用法，请参考SQL Server自带的联机丛书</p>
<p>【备注】导出为XML格式的目的是为了更好地在不同应用程序之间共享。</p>
<p>&nbsp;</p>
<p>反过来，如果我们得到了一段XML数据，想将其导入到SQL Server中某个表中。可以考虑用OPENXML的语法。它的作用就是将XML还原为行集数据，然后就可以插入到我们的目的表中去了。</p><pre class="csharpcode"><span class="kwrd">DECLARE</span> @x XML
<span class="kwrd">DECLARE</span> @docHandle <span class="kwrd">int</span>

<span class="kwrd">SET</span> @x=N<span class="str">'&lt;Orders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;OrderItem&gt;
    &lt;OrderID&gt;10248&lt;/OrderID&gt;
    &lt;CustomerID&gt;VINET&lt;/CustomerID&gt;
    &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;
    &lt;OrderDate&gt;1996-07-04T00:00:00&lt;/OrderDate&gt;
    &lt;RequiredDate&gt;1996-08-01T00:00:00&lt;/RequiredDate&gt;
    &lt;ShippedDate&gt;1996-07-16T00:00:00&lt;/ShippedDate&gt;
    &lt;ShipVia&gt;3&lt;/ShipVia&gt;
    &lt;Freight&gt;32.3800&lt;/Freight&gt;
    &lt;ShipName&gt;Vins et alcools Chevalier&lt;/ShipName&gt;
    &lt;ShipAddress&gt;59 rue de lAbbaye&lt;/ShipAddress&gt;
    &lt;ShipCity&gt;Reims&lt;/ShipCity&gt;
    &lt;ShipRegion xsi:nil="true" /&gt;
    &lt;ShipPostalCode&gt;51100&lt;/ShipPostalCode&gt;
    &lt;ShipCountry&gt;France&lt;/ShipCountry&gt;
  &lt;/OrderItem&gt;
  &lt;OrderItem&gt;
    &lt;OrderID&gt;10249&lt;/OrderID&gt;
    &lt;CustomerID&gt;TOMSP&lt;/CustomerID&gt;
    &lt;EmployeeID&gt;6&lt;/EmployeeID&gt;
    &lt;OrderDate&gt;1996-07-05T00:00:00&lt;/OrderDate&gt;
    &lt;RequiredDate&gt;1996-08-16T00:00:00&lt;/RequiredDate&gt;
    &lt;ShippedDate&gt;1996-07-10T00:00:00&lt;/ShippedDate&gt;
    &lt;ShipVia&gt;1&lt;/ShipVia&gt;
    &lt;Freight&gt;11.6100&lt;/Freight&gt;
    &lt;ShipName&gt;Toms Spezialitäten&lt;/ShipName&gt;
    &lt;ShipAddress&gt;Luisenstr. 48&lt;/ShipAddress&gt;
    &lt;ShipCity&gt;Münster&lt;/ShipCity&gt;
    &lt;ShipRegion xsi:nil="true" /&gt;
    &lt;ShipPostalCode&gt;44087&lt;/ShipPostalCode&gt;
    &lt;ShipCountry&gt;Germany&lt;/ShipCountry&gt;
  &lt;/OrderItem&gt;&lt;/Orders&gt;'</span>
  
  

--第一步，做准备
<span class="kwrd">EXEC</span> SP_XML_PREPAREDOCUMENT @docHandle <span class="kwrd">OUTPUT</span>,@x
--第二步，<span class="kwrd">openxml</span>
INSERT Orders <span class="kwrd">SELECT</span> * <span class="kwrd">FROM</span> <span class="kwrd">OPENXML</span>(@docHandle,N<span class="str">'/Orders/OrderItem'</span>,2) <span class="kwrd">WITH</span> Orders
--第三步，销毁
<span class="kwrd">EXEC</span> sp_xml_removedocument @docHandle
  </pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>【备注】OPENXML还有其他更加复杂的用法，请参考SQL Server自带的联机丛书</p>
<p>&nbsp;</p>
<h1>5.使用Excel导出数据，或者建立查询</h1>
<p>最后介绍一种更加简单的方法，如果经常需要在Excel中进行数据库查询，并且据此做一些进一步的分析。最好的方法是在Excel中直接去导出数据，或者建立查询</p>
<p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_16.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_16.png" width="244" height="184"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_17.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_17.png" width="244" height="172"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_18.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_18.png" width="244" height="174"></a></p>
<p><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_19.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_19.png" width="244" height="205"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_20.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_20.png" width="244" height="206"></a><a href="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_21.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server_D62C/image_thumb_21.png" width="244" height="145"></a></p>
<p>这个做法的好处，是可以在现有Excel中，任何位置放置你需要的数据，而且需要注意的是，这些数据是链接到数据库的，也就是说，如果数据库的数据发生了更新，则只要刷新一下就可以了。</p>]]></description></item><item><title>【VSTO】Office开发中遇到的兼容性检查问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/06/08/2075050.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 08 Jun 2011 04:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/06/08/2075050.html</guid><description><![CDATA[<p>事情是这样的：</p> <p>&nbsp;</p> <p>我们的一个应用程序需要通过VSTO代码方式操作本地的Excel，包括打开工作簿，生成新的工作簿，设置数据，并且保存为新文件等等。</p> <p>该程序在Excel 2003的环境下没有任何问题，但是在Excel 2007或者是Excel 2010中就老是遇到中途被卡住的状况。</p> <p>究其原因，是因为我们想将文件继续保存为Excel 2003格式，但Excel 2007或者Excel 2010默认会有一个兼容性检查的功能。如下</p> <p><a href="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image_thumb.png" width="416" height="334"></a></p> <p>如果将“Check compatiblity when saving this workbook”的选项关闭，则问题可以解决。</p> <p>&nbsp;</p> <p>但是，如果你无法确保用户那边关闭了该选项，也可以通过程序的方式临时关闭检查</p> <p>有两种方式实现这样的需求</p> <p>第一种：在Application级别关闭警告</p><pre class="csharpcode">        If (app Is Nothing) Then
            app = New Excel.Application
            app.Interactive = False
            app.UserControl = False
           <strong> app.DisplayAlerts = False</strong>
            app.Visible = False
            app.ScreenUpdating = False
        End If</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>第二种：在Workbook级别关闭警告</p><pre class="csharpcode">wb.CheckCompatibility=False</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode">&nbsp;</pre><pre class="csharpcode"><font face="Verdana">还有一个情况就是,如果你关闭了警告（不管是手工地，还是代码关闭），却又想恢复该选项。要按照下面这样做</font></pre><pre class="csharpcode"><font face="Verdana"></font>&nbsp;</pre><pre class="csharpcode"><a href="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image_thumb_3.png" width="933" height="551"></a></pre><pre class="csharpcode">在上面的对话框中，点击“Check Compatibility”，你将可以继续勾选上这个选项。</pre><pre class="csharpcode"><a href="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/VSTOOffice_ABA0/image_thumb_4.png" width="416" height="334"></a></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>在客户端程序中通过MDX查询SSAS的数据</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/28/2061073.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 28 May 2011 13:15:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/28/2061073.html</guid><description><![CDATA[<p>这两天在讲解SSAS（SQL Server Anaylysis Service)及其编程。其中有一个话题就是，如何将SSAS的查询结果，显示在我们自定义的应用程序里面。</p> <p>关于SSAS，是微软在商务智能（BI)平台上的一个最重要的组件，称为分析服务器。如果你还不熟悉，可以先参考<a href="http://msdn.microsoft.com/en-us/library/ms175609(v=sql.90).aspx">这里</a></p> <p>&nbsp;</p> <p>课堂上有一个小例子，演示了如何编写程序实现简单的查询。整理出来给有兴趣的朋友参考一下</p> <p>有几个要点</p> <h2>1。客户端与SSAS的通讯，其实传递是XML/A指令。发起这种指令，可以通过标准的Web Request(封装为一个SOAP包即可），也可以通过客户端API。</h2> <h2>2。SQL Server 自带了一个客户端API，Microsoft.AnalysisServices.AdomdClient.dll.这个程序集，一般是在C:\Program Files (x86)\Microsoft.NET\ADOMD.NET\100\Microsoft.AnalysisServices.AdomdClient.dll 这个路径下面。（备注，我是使用64位系统，SQL Server的版本是SQL Server 2008 R2)</h2> <h2>3。使用Adomd的方式与标准的ADO.NET还是有相似之处的，也需要有Connection以及Command之类的对象，只不过它的查询语法是所谓的MDX(<a href="http://msdn.microsoft.com/zh-CN/library/ms145506.aspx">多维表达式</a>），而且它返回的结果不是一个平面的二维结构，可能会有多个轴（最多可以有128个轴），所以解析的时候会更加复杂些。</h2> <p>&nbsp;</p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.ComponentModel;
<span class="kwrd">using</span> System.Data;
<span class="kwrd">using</span> System.Drawing;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Windows.Forms;
<span class="kwrd">using</span> Microsoft.AnalysisServices.AdomdClient;

<span class="kwrd">namespace</span> WindowsFormsApplicationSSASClient
{
    <span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> Form1 : Form
    {
        <span class="kwrd">public</span> Form1()
        {
            InitializeComponent();

            Load += <span class="kwrd">new</span> EventHandler(Form1_Load);
        }

        <span class="kwrd">void</span> Form1_Load(<span class="kwrd">object</span> sender, EventArgs e)
        {
            <span class="kwrd">using</span> (var conn = <span class="kwrd">new</span> AdomdConnection(<span class="str">"Data Source=localhost;Catalog=Adventure Works DW 2008;"</span>))
            {
                <span class="kwrd">using</span> (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = <span class="str">"SELECT [Customer].[Customer Geography].[Country] ON 0,[Product].[Product Categories].[Category] ON 1 FROM [Adventure Works]"</span>;<span class="rem">//这里使用的是MDX语法</span>
                    conn.Open();
                    var result = cmd.ExecuteCellSet();<span class="rem">//这是返回一个特殊的CellSet对象，因为SSAS的结果集可能是有多维的</span>

                    var tb = ToDataTable(result);<span class="rem">//通过一个标准方法将CellSet转换为DataTable</span>
                    dataGridView1.DataSource = tb;
                }

            }
        }


        <span class="kwrd">public</span> DataTable ToDataTable(CellSet cs)
        {
            DataTable dt = <span class="kwrd">new</span> DataTable();
            dt.TableName = <span class="str">"resulttable"</span>;
            DataColumn dc = <span class="kwrd">new</span> DataColumn();
            DataRow dr = <span class="kwrd">null</span>;

            <span class="rem">//第一列：必有为维度描述（行头）</span>
            dt.Columns.Add(<span class="kwrd">new</span> DataColumn(<span class="str">"Description"</span>));

            <span class="rem">//生成数据列对象</span>
            <span class="kwrd">string</span> name;

            <span class="kwrd">foreach</span> (Position p <span class="kwrd">in</span> cs.Axes[0].Positions)
            {
                dc = <span class="kwrd">new</span> DataColumn();
                name = <span class="str">""</span>;
                <span class="kwrd">foreach</span> (Member m <span class="kwrd">in</span> p.Members)
                {
                    name = name + m.Caption + <span class="str">" "</span>;
                }

                dc.ColumnName = name;
                dt.Columns.Add(dc);
            }

            <span class="rem">//添加行数据</span>
            <span class="kwrd">int</span> pos = 0;

            <span class="kwrd">foreach</span> (Position py <span class="kwrd">in</span> cs.Axes[1].Positions)
            {
                dr = dt.NewRow();

                <span class="rem">//维度描述列数据（行头）</span>
                name = <span class="str">""</span>;

                <span class="kwrd">foreach</span> (Member m <span class="kwrd">in</span> py.Members)
                {
                    name = name + m.Caption + <span class="str">"\r\n"</span>;
                }
                dr[0] = name;

                <span class="rem">//数据列</span>
                <span class="kwrd">for</span> (<span class="kwrd">int</span> x = 1; x &lt;= cs.Axes[0].Positions.Count; x++)
                {
                    dr[x] = cs[pos++].FormattedValue;
                }
                dt.Rows.Add(dr);
            }
            <span class="kwrd">return</span> dt;
        } 


    }
}
</pre><pre class="csharpcode"><a href="http://www.xizhang.com/blogimages/c39e7008c1f4_12524/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/c39e7008c1f4_12524/image_thumb.png" width="831" height="316"></a></pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>如何在SQL Server中使用正则表达式</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/27/2060319.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 27 May 2011 14:24:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/27/2060319.html</guid><description><![CDATA[<p>最近处理客户一个需求，是要在SQL Server中对某个列进行校验，使用正则表达式保证该列必须是一个邮件地址。</p> <p>我们都知道，SQL Server的T-SQL中默认是没有这样的语法的。找了一些资料，下面这个例子还不错，分享给大家参考</p> <p><a href="http://www.codeproject.com/KB/database/xp_pcre.aspx">http://www.codeproject.com/KB/database/xp_pcre.aspx</a></p> <p>大致步骤是</p> <p>1.下载他提供的那个压缩包，里面有源代码和安装脚本</p> <p>2.将DLL复制到SQL Server规定的目录</p> <p>3.运行INSTALL.sql这个脚本</p> <p>&nbsp;</p> <p>大致使用的效果如下</p><pre class="csharpcode"><span class="kwrd">SELECT</span> master.dbo.fn_pcre_match(<span class="str"><a href="mailto:'billg@microsoft.com','^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$'">'billg@microsoft.com'</span>,<span class="str">'^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$'</a></span>)</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>这句脚本的意思是，根据后面的正则表达式（一个email的规则）匹配前面的字符串.如果返回1的话，表示匹配到了，否则返回0.很显然，</p>
<p><a href="http://www.xizhang.com/blogimages/xp_pcre---Regular-Expressions-in-T-SQL_EA06/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/xp_pcre---Regular-Expressions-in-T-SQL_EA06/image_thumb.png" width="930" height="702"></a></p>
<p>&nbsp;</p>
<p>很显然，我们可以根据这个做法设置某个字段的约束。例如下面这样</p>
<p><a href="http://www.xizhang.com/blogimages/xp_pcre---Regular-Expressions-in-T-SQL_EA06/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/xp_pcre---Regular-Expressions-in-T-SQL_EA06/image_thumb_3.png" width="452" height="250"></a></p>
<p>&nbsp;</p>
<p>上述做法是通过扩展存储过程来实现的功能，需要通过C++来编写。</p>
<p>&nbsp;</p>
<p>当然，如果SQL Server 是2005或者以后的版本，也可以通过托管代码来实现。关于这个话题的基本概念，你可以参考 <a href="http://msdn.microsoft.com/en-us/library/ms254498(v=vs.80).aspx">http://msdn.microsoft.com/en-us/library/ms254498(v=vs.80).aspx</a></p>
<p>&nbsp;</p>
<p>我写好了一个例子，给大家参考</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Data;
<span class="kwrd">using</span> System.Data.SqlClient;
<span class="kwrd">using</span> System.Data.SqlTypes;
<span class="kwrd">using</span> Microsoft.SqlServer.Server;
<span class="kwrd">using</span> System.Collections;
<span class="kwrd">using</span> System.Text.RegularExpressions;

<span class="kwrd">public</span> <span class="kwrd">partial</span> <span class="kwrd">class</span> UserDefinedFunctions
{
    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// 这是一个进行正则表达式验证的函数.作者：陈希章</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;param name="ValidOption"&gt;选项，0为用户自定义，1为网址，2为邮件地址，3为邮政编码&lt;/param&gt;</span>
    <span class="rem">/// &lt;param name="ValidString"&gt;要验证的字符串&lt;/param&gt;</span>
    <span class="rem">/// &lt;param name="ValidPatten"&gt;用户自定义的正则表达式规则&lt;/param&gt;</span>
    <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
    [Microsoft.SqlServer.Server.SqlFunction]
    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">bool</span> RegExValidate(<span class="kwrd">int</span> ValidOption, <span class="kwrd">string</span> ValidString, <span class="kwrd">string</span> ValidPatten)
    {
        <span class="kwrd">string</span> strRegExPatten = <span class="kwrd">null</span>;
        <span class="kwrd">switch</span> (ValidOption)
        {
            <span class="kwrd">case</span> 0: { strRegExPatten = ValidPatten; <span class="kwrd">break</span>; }
            <span class="kwrd">case</span> 1: { strRegExPatten = <span class="str">@"^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$"</span>; <span class="kwrd">break</span>; }
            <span class="kwrd">case</span> 2: { strRegExPatten = <span class="str">@"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$"</span>; <span class="kwrd">break</span>; }
            <span class="kwrd">case</span> 3: { strRegExPatten = <span class="str">@"^[0-9]{4}\s{0,1}[a-zA-Z]{2}$"</span>; <span class="kwrd">break</span>; }
        }

        <span class="kwrd">if</span> (Regex.IsMatch(ValidString,strRegExPatten))
            <span class="kwrd">return</span> <span class="kwrd">true</span>;
        <span class="kwrd">else</span>
            <span class="kwrd">return</span> <span class="kwrd">false</span>;
    }
};

</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>SQL Server 2008 R2的StreamInsight 【文章转载】</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/21/2053082.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 21 May 2011 13:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/21/2053082.html</guid><description><![CDATA[<p>下面文章转载自：<a href="http://blogs.msdn.com/b/stbcblog/archive/2011/04/18/streaminsight-on-sql-server-2008-r2.aspx">http://blogs.msdn.com/b/stbcblog/archive/2011/04/18/streaminsight-on-sql-server-2008-r2.aspx</a> <p>&nbsp; <p>StreamInsight是SQL Server 2008 R2的新模块。它是一个基于.NET的平台，用于复杂事件处理（CEP，Complex Event<br>Processing），即对于来自多数据源的无限事件序列提供近乎零延时的连续处理。StreamInsight是一个临时查询处理引擎，它可以支持应用程序对时间窗口内的事件进行查询处理。它对流数据的处理范围包括简单聚合、多数据源事件相关性、事件模式检测、甚至建立复杂事件序列和分析模型。StreamInsight的程序模型可以让用户通过LINQ定义这些查询，同时支持将查询结果无缝整合到C#的代码中。 <p>最近，SQL Server 中国研发团队连续发表了一系列有关StreamInsight的博文，在此邀请感兴趣的朋友围观。如有问题，请直接在他们<a href="http://blogs.msdn.com/b/sqlcrd/">MSDN博客</a>或<a href="http://social.microsoft.com/Forums/zh-CN/sqlserverzhchs/threads">SQL<br>Server中文论坛</a>上留言和提问，谢谢。 <p>StreamInsight手札（一）——初识 <p><a href="http://blogs.msdn.com/b/sqlcrd/archive/2011/03/18/streaminsight-notes-1.aspx">http://blogs.msdn.com/b/sqlcrd/archive/2011/03/18/streaminsight-notes-1.aspx</a> <p>StreamInsight手札（二）——构建HelloInsight程序 <p><a href="http://blogs.msdn.com/b/sqlcrd/archive/2011/03/29/streaminsight-notes-2.aspx">http://blogs.msdn.com/b/sqlcrd/archive/2011/03/29/streaminsight-notes-2.aspx</a> <p>StreamInsight手札（三）——使用IObservable接口创建StreamInsight程序 <p><a href="http://blogs.msdn.com/b/sqlcrd/archive/2011/04/12/streaminsight-notes-3.aspx">http://blogs.msdn.com/b/sqlcrd/archive/2011/04/12/streaminsight-notes-3.aspx</a> <p>StreamInsight手札（四）——使用IEnumerable接口创建StreamInsight程序 <p><a href="http://blogs.msdn.com/b/sqlcrd/archive/2011/04/12/streaminsight-notes-4.aspx">http://blogs.msdn.com/b/sqlcrd/archive/2011/04/12/streaminsight-notes-4.aspx</a> <p>StreamInsight手札（五）——使用EventFlowDebugger调试事件流 <p><a href="http://blogs.msdn.com/b/sqlcrd/archive/2011/04/15/streaminsight-notes-5.aspx">http://blogs.msdn.com/b/sqlcrd/archive/2011/04/15/streaminsight-notes-5.aspx</a></p>]]></description></item><item><title>如何在SSIS的脚本组件中访问变量</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/21/2053055.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 21 May 2011 12:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/21/2053055.html</guid><description><![CDATA[<p>这是一个小问题，我们在SSIS的设计中很多地方都会用到变量，我习惯性地将“变量”和“表达式”称为SSIS的灵魂，虽然不见得绝对准确，但它们确实是保证一个SSIS包灵活性的根本。</p> <p>同时，我们可能也会在数据流任务中添加“脚本组件”，用我们熟知的C#或者VB.NET编写一些数据转换处理的逻辑。这里可能就有一个需求，我们希望在脚本组件中访问变量（读或者写），但默认情况下，这个需求并不是那么容易实现。我们来看下面的例子</p> <p>&nbsp;</p> <p>这个例子中，我们在Package级别定义了一个变量，名称为test</p> <p><a href="http://www.xizhang.com/blogimages/SSIS_11646/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SSIS_11646/image_thumb.png" width="1042" height="500"></a></p> <p>然后,我们在数据流中有一个Script Component，我们尝试在里面对上面这个变量进行读写</p> <p><a href="http://www.xizhang.com/blogimages/SSIS_11646/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SSIS_11646/image_thumb_3.png" width="838" height="528"></a></p> <p>代码大致如下</p><pre class="csharpcode"><span class="rem">/* Microsoft SQL Server Integration Services Script Component</span>
<span class="rem">*  Write scripts using Microsoft Visual C# 2008.</span>
<span class="rem">*  ScriptMain is the entry point class of the script.*/</span>

<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Data;
<span class="kwrd">using</span> Microsoft.SqlServer.Dts.Pipeline.Wrapper;
<span class="kwrd">using</span> Microsoft.SqlServer.Dts.Runtime.Wrapper;

<span class="kwrd">using</span> System.Windows.Forms;


[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
<span class="kwrd">public</span> <span class="kwrd">class</span> ScriptMain : UserComponent
{

    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> PreExecute()
    {
        <span class="kwrd">base</span>.PreExecute();
        <span class="rem">/*</span>
<span class="rem">          Add your code here for preprocessing or remove if not needed</span>
<span class="rem">        */</span>
    }

    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> PostExecute()
    {
        <span class="kwrd">base</span>.PostExecute();
        <span class="rem">/*</span>
<span class="rem">          Add your code here for postprocessing or remove if not needed</span>
<span class="rem">          You can set read/write variables here, for example:</span>
<span class="rem">          Variables.MyIntVar = 100</span>
<span class="rem">        */</span>
    }

    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Input0_ProcessInputRow(Input0Buffer Row)
    {
        <span class="rem">/*</span>
<span class="rem">          Add your code here</span>
<span class="rem">        */</span>


        <strong><font color="#ff0000">MessageBox.Show(Variables.test.ToString());</font></strong>
        
        
        
    }

}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>&nbsp;</p>
<p>代码很简单，也很自然。我只是作为演示，这里读取到那个变量之后，显示出来。</p>
<p>但是这个代码是不能运行的，有如下错误</p>
<p><a href="http://www.xizhang.com/blogimages/SSIS_11646/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SSIS_11646/image_thumb_4.png" width="505" height="367"></a></p>
<p>上述错误的意思是，除非在PostExecute方法里面，是不可以对变量进行读写的。这里的原因是，ProcessInputRow这个方法，因为是每一行数据都会执行一次，所以如果这里随意读写变量的话，会因为要频繁加锁和解锁，造成效率方面的问题。</p>
<p>&nbsp;</p>
<p>这里谈到了一个加锁的问题。为什么会有这个问题呢？其实很简单，因为变量是定义在Package级别，所以很可能几个任务在同时访问这些变量，都在对其进行读写。如果不加锁，则可能导致不可预期的结果。</p>
<p>&nbsp;</p>
<p>如果你理解了上述机制，而且也确定可以承担锁定可能带来的性能损耗，那么要解决问题，可以通过如下的方式实现</p>
<p>&nbsp;</p><pre class="csharpcode">
    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Input0_ProcessInputRow(Input0Buffer Row)
    {
        <span class="rem">/*</span>
<span class="rem">          Add your code here</span>
<span class="rem">        */</span>

        VariableDispenser.LockForRead(<span class="str">"User::test"</span>);<span class="rem">//这里先声明对某个变量进行锁定</span>

        IDTSVariables100 vs = <span class="kwrd">null</span>;
        <span class="kwrd">this</span>.VariableDispenser.GetVariables(<span class="kwrd">out</span> vs);<span class="rem">//通过VariableDispenser获取变量集合</span>
        MessageBox.Show(vs[<span class="str">"User::test"</span>].Value.ToString());

        vs.Unlock();<span class="rem">//解锁</span>
       
        
        
    }</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>.NET Framework 4新特性之 Type Equivalence（等价类型）</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/18/2050333.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 18 May 2011 10:14:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/18/2050333.html</guid><description><![CDATA[<p>这是新版本.NET Framework的一个重要特性，微软官方的介绍，请参考这里 <a href="http://msdn.microsoft.com/en-us/library/dd997297.aspx">http://msdn.microsoft.com/en-us/library/dd997297.aspx</a></p> <p>那么，到底如何理解并使用这个功能呢？</p> <p>&nbsp;</p> <h1>为什么需要这个功能？</h1> <p>这个功能，主要是解决COM interop的问题的。举个最常见的例子，如果我们需要在.NET程序里面调用Office组件，以前的情况是（以Excel为例）</p> <p>1.我们在开发的时候，需要选择一个有关的Excel版本的PIA(Primary Interop Assembly)，这是有版本的</p> <p>2.发布的时候，需要确认目标机器是否有一样的版本的Excel</p> <p>安装和部署Office PIA不是一个太简单的事情，完整的介绍，请参考 <a href="http://www.microsoft.com/china/msdn/library/office/office/BusinessApps0608.mspx?mfr=true">http://www.microsoft.com/china/msdn/library/office/office/BusinessApps0608.mspx?mfr=true</a></p> <p>&nbsp;</p> <p>这里的最大问题就是，如何确保开发环境与实际使用环境的Office版本一样。事实上，你无法确保这一点。</p> <p>等价类型的意思就是，将当前程序中所用到的有限的那些COM类型，导入到当前程序集中，并且生成等价的.NET类型，如此一来，就可以不再依赖PIA，而可以方便地部署了。</p> <p>&nbsp;</p> <h1>如何使用该功能？</h1> <p>使用该功能其实很简单。你可能在不知不觉中已经在使用了。</p> <h2>1.首先还是要添加引用</h2> <p><a href="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_thumb.png" width="880" height="659"></a></p> <h2>2.添加完之后，可以看到这个程序集的属性</h2> <p><a href="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_thumb_3.png" width="404" height="406"></a></p> <p>这里有一个特殊的属性，叫Embed Interop Types，设置为true即可（针对PIA，默认就是true)</p> <p>&nbsp;</p> <h2>3. 编写如下代码</h2><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">using</span> Microsoft.Office.Interop.Excel;


<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            var app = <span class="kwrd">new</span> Application();

            app.Visible = <span class="kwrd">true</span>;

            Console.Read();
        }
    }


}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>我们这里实现的功能很简单，只是启动了一个Excel的实例而已。</p>

<h2>4. 运行调试</h2>
<p>一个新的Excel程序窗口被打开了。</p>
<p>&nbsp;</p>
<p>那么，究竟发生了什么呢？既然说是等价类型，会将我们用到的COM类型导入，如何理解呢？</p>
<p><a href="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_thumb_4.png" width="762" height="431"></a></p>
<p>我们看到，在程序集里面，实际上多出来一个特殊的命名空间（Microsoft.Office.Interop.Excel)，然后它下面只包含当前我们的代码所必须访问的那些类型（实际上是导入过的），从这一点上看，Visual Studio是一个很智能的工具。</p>
<p>&nbsp;</p>
<p>而且更加有意思的是，我们在Main方法中的代码，其实最终会被转换成下面这样</p><pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
{
    Application application = (Application)Activator.CreateInstance(Type.GetTypeFromCLSID(<span class="kwrd">new</span> Guid(<span class="str">"00024500-0000-0000-C000-000000000046"</span>)));
    application.Visible = <span class="kwrd">true</span>;
    Console.Read();
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p><a href="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_5.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/29b0fe6e2a23.NET-Framework-4-Type_FC51/image_thumb_5.png" width="754" height="543"></a></p>]]></description></item><item><title>How to: Handle Data Conflicts and Errors 【转载】</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/10/2042652.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 10 May 2011 14:34:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/10/2042652.html</guid><description><![CDATA[<p>MSF(Microsoft Sync Framework）是微软的一套数据同步框架，其中一个典型场景就是实现本地数据库与远程数据库之间的数据同步，这样可以比较容易实现脱机应用程序的架构</p> <p>&nbsp;</p> <p>有关MSF的一些具体内容，可以参考微软的官方网站</p> <p><a href="http://msdn.microsoft.com/en-us/library/bb902854.aspx">http://msdn.microsoft.com/en-us/library/bb902854.aspx</a></p> <p>&nbsp;</p> <p>这一篇特别摘录一下有关数据同步时的冲突检测和处理，完整的文档参考下面</p> <p><a href="http://msdn.microsoft.com/en-us/library/bb725997.aspx">http://msdn.microsoft.com/en-us/library/bb725997.aspx</a></p> <p>&nbsp;</p> <h3>Understanding Data Conflicts and Errors</h3> <p>In Sync Framework, conflicts and errors are detected at the level of the row. A row is in conflict if it has been changed at more than one node between synchronizations. Errors during synchronization typically involve a constraint violation, such as a duplicate primary key. Applications should be designed to avoid conflicts if they can, because conflict detection and resolution introduce additional complexity, processing, and network traffic. The most common ways to avoid conflicts are as follows: to update a table at only one node (typically the server); or to filter data so that only one node updates a particular row. For more information about filtering, see <a href="http://msdn.microsoft.com/en-us/library/bb726003.aspx">How to: Filter Rows and Columns</a>. In some applications, conflicts cannot be avoided. For example, in a sales force application, two salespeople might share a territory. Both salespeople could update the data for the same customer and orders. Therefore, Sync Framework provides a set of features that can be used to detect and resolve conflicts. <p>Data conflicts can occur in any synchronization scenario in which changes are made at more than one node. Obviously, conflicts can occur in bidirectional synchronization, but they can also occur in download-only and upload-only synchronization. For example, if a row is deleted at the server and the same row is updated at the client, there is a conflict when Sync Framework tries to apply the update that is uploaded to the server. Conflicts are always between the server and the client that is currently synchronizing. Consider the following example: <ol> <li> <p>Client A and client B synchronize with the server.</p> <li> <p>A row is updated at client A, and then client A synchronizes. There is no conflict, and the row is applied at the server.</p> <li> <p>The same row is updated at client B, and then client B synchronizes. The row from client B is now in conflict with the row from the server because of the update that originated at client A.</p> <li> <p>If you resolve this conflict in favor of the server, Sync Framework can apply the row from the server to client B. If you resolve in favor of client B, Sync Framework can apply the row from client B to the server. During a later synchronization between client A and the server, the update that originated at client B is applied to client A.</p></li></ol>]]></description></item><item><title>Console的默认Encoding问题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/07/2039623.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 07 May 2011 02:21:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/07/2039623.html</guid><description><![CDATA[<pre class="csharpcode"><span class="kwrd">有时候我们需要在Console程序中，切换Console的OutputStream，大致的做法如下</span></pre><pre class="csharpcode"><span class="kwrd"></span>&nbsp;</pre><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.IO;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

          
            <span class="rem">//下面的输出是直接打印到屏幕上的</span>
            Console.WriteLine(<span class="str">"开始工作"</span> + DateTime.Now.ToString());

            <span class="rem">//下面的输出将重定向到日志文件中</span>
            var stream = <span class="kwrd">new</span> FileStream(<span class="str">"log.txt"</span>, FileMode.Create);
            Console.SetOut(<span class="kwrd">new</span> StreamWriter(stream));
            Console.WriteLine(<span class="str">"开始工作"</span> + DateTime.Now.ToString());
            Console.WriteLine(<span class="str">"结束工作"</span> + DateTime.Now.ToString());
            <span class="rem">//到这里结束重定向</span>
            Console.Out.Close();

            <span class="rem">//重新将输出设置到屏幕上</span>
            Console.SetOut(<span class="kwrd">new</span> StreamWriter(Console.OpenStandardOutput()));

            <span class="rem">//下面的输出将输出到屏幕上</span>
            Console.WriteLine(<span class="str">"结束工作"</span> + DateTime.Now.ToString());

            Console.Out.Close();
        }
    }
}
</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p><font color="#0000ff" size="3" face="Consolas">以上代码是不错的，但有一个问题，就是最后一句输出会出现乱码情况</font></p>
<p><a href="http://www.xizhang.com/blogimages/ConsoleEncoding_9010/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/ConsoleEncoding_9010/image_thumb.png" width="444" height="107"></a></p>
<p>从这个情况上看，应该是编码的问题，那么应该是什么编码呢？我尝试了UTF8或者其他的Encoding，都是不行。最后是如下这样解决</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.IO;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {
            var defaultEncoding = Console.Out.Encoding;
            Console.WriteLine(<span class="str">"默认的编码是:"</span> + defaultEncoding.ToString());
          
            <span class="rem">//下面的输出是直接打印到屏幕上的</span>
            Console.WriteLine(<span class="str">"开始工作"</span> + DateTime.Now.ToString());

            <span class="rem">//下面的输出将重定向到日志文件中</span>
            var stream = <span class="kwrd">new</span> FileStream(<span class="str">"log.txt"</span>, FileMode.Create);
            Console.SetOut(<span class="kwrd">new</span> StreamWriter(stream));
            Console.WriteLine(<span class="str">"开始工作"</span> + DateTime.Now.ToString());
            Console.WriteLine(<span class="str">"结束工作"</span> + DateTime.Now.ToString());
            <span class="rem">//到这里结束重定向</span>
            Console.Out.Close();

            <span class="rem">//重新将输出设置到屏幕上</span>
            Console.SetOut(<span class="kwrd">new</span> StreamWriter(Console.OpenStandardOutput(),defaultEncoding));

            <span class="rem">//下面的输出将输出到屏幕上</span>
            Console.WriteLine(<span class="str">"结束工作"</span> + DateTime.Now.ToString());

            Console.Out.Close();
        }
    }
}
</pre><a href="http://www.xizhang.com/blogimages/ConsoleEncoding_9010/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/ConsoleEncoding_9010/image_thumb_3.png" width="496" height="128"></a>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>


<p>我们看到，其实默认的那个编码方式是所谓的DBCSCodePageEncoding,而此时乱码问题也随之解决了</p>]]></description></item><item><title>IE9网站模式 技术白皮书</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/05/04/2036092.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 04 May 2011 01:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/05/04/2036092.html</guid><description><![CDATA[<p><b></b> <p><b></b> <p>微软最近发布了“IE 9网站模式技术白皮书”，给大家参考一下吧 <p>也可以下载附件：<a title="IE9_固定网站_技术白皮书.rar" href="http://files.cnblogs.com/chenxizhang/IE9_%E5%9B%BA%E5%AE%9A%E7%BD%91%E7%AB%99_%E6%8A%80%E6%9C%AF%E7%99%BD%E7%9A%AE%E4%B9%A6.rar">IE9_固定网站_技术白皮书.rar</a> <p>************************************************************************ <p><b><br></b><b></b><b>IE9固定网站功能简介</b> <p><b></b><b></b> <p>简单来说，IE9固定网站(Pinned Website)就是通过几行HTML代码(&lt;meta&gt;标签)，将网站应用访问方式提升为Windows客户端应用访问方式，增强用户体验，提升网站品牌标识度，并大幅提高用户使用粘性。 <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb.png" width="244" height="204"></a><b><br></b><b>实现代码示例：</b><b></b> <p>&lt;meta name="msapplication-task" content="name=我要付款;action-uri=https://abc.com/;icon-uri=https://imgabc.com/abc.ico " /&gt; <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_3.png" width="244" height="22"></a> <p>&nbsp; <p><b></b><b>为什么使用固定网站？</b><b></b> <p><b></b><b></b> <p>1. <b>全面提升用户使用体验。</b>通过整合用户体验，用户可以通过鼠标a.左键快速打开网站b.右键弹出网站应用列表c.获得网站更新通知提示 <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_4.png" width="205" height="159"></a> <p>2. <b>提升网站品牌认知度。</b>IE9可实现让站点变成Windows 7的一个应用程序固定在任务栏，用户可快速通过任务栏图标快速访问目标站点。锁定的站点会具备统一颜色的IE9界面，进一步增强网站品牌形象。 <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_5.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_5.png" width="181" height="142"></a> <p><b>3. </b><b>大幅提高网站访问及用户停留时间。</b>通过IE9网站模式，用户对网站的访问频率及单用户停留时间显著增加，页面跳出率明显降低。<b></b> <p>a. hi5(<a href="http://hi5.com">http://hi5.com</a>) 社交网站。通过网站分析显示，IE9网站模式用户，页面访问数量(discoverability) <b>+15%</b>，活动信息(new friends, game invites, messages)请求 <b>+200%</b> <p>b. Flixster(<a href="http://www.flixster.com/">http://www.flixster.com/</a>) 电影社交网站。通过网站分析显示，IE9网站模式用户相比其它浏览器用户，页面访问(PV) <b>+34%</b>，平均停留时间 <b>+57%</b> <p>c. Business Insider(<a href="http://www.businessinsider.com/">http://www.businessinsider.com/</a>) 商业评论类网站。通过网站分析显示，IE9网站模式用户相比其它浏览器用户，页面访问(PV) <b>+95%</b>，平均停留时间 <b>+57%</b> <p>d. Huffington Post(<a href="http://www.huffingtonpost.com/">http://www.huffingtonpost.com/</a>) 新闻类网站。通过网站分析显示，IE9网站模式用户相比其它浏览器用户，页面访问(PV) <b>+11%</b>，跳出率(bounce rate) <b>-14%</b>，平均停留时间 <b>+49%</b> <p><b></b><b>实现方法代码示例</b><b></b> <p><b></b><b></b> <p><b>1. </b><b>高清图标引用</b><b></b> <p>IE9全面支持64X64的高清图标显示，通过引用高清图标，最终用户将获得和应用程序一致的快速启动图标标识。美团网使用高清图标前后对比： <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_6.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_6.png" width="93" height="41"></a><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_7.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_7.png" width="93" height="41"></a> <p>引用高清图标代码示例：<br>&lt;link rel="icon" href="/favicon.ico?v=3" type="image/x-icon" /&gt; <p>高清图标在线制作及预览工具X-icon Editor <a href="http://www.xiconeditor.com/">http://www.xiconeditor.com/</a> <p><b>2. </b><b>实现快速跳转列表</b><b></b> <p>通过IE9实现快速跳转列表，最终用户可以快速访问网站相关频道，获取相关资讯。 <p>快速跳转列表实现代码示例及各字段含义： <p>&lt;meta name="msapplication-task" content="name=ABC;action-uri=https://abc.com/;icon-uri=https://imgabc.com/abc.ico" /&gt; <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_8.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_8.png" width="244" height="103"></a> <p><b>3. </b><b>自定义图标覆盖</b><b></b> <p>覆盖图标是一个小型的 16x16 像素的图形，它显示在任务栏按钮图标的顶部。通过自定义图标覆盖可以提示用户注意网站更新信息。 <p>例如：新浪微博使用网站模式，通过自定义图标覆盖提示有新微博通知。 <p><a href="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_9.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/b9c73eb2b967_7CE0/image_thumb_9.png" width="46" height="37"></a> <p>显示自定义覆盖图标代码示例： <p>window.external.msSiteModeSetIconOverlay('http://host/images/overlay1.ico', 'Overlay 1'); <p>移除自定义覆盖图标代码示例： <p>window.external.msSiteModeClearIconOverlay(); <p><b></b><b>开发参考</b><b>(MSDN)</b> <p><b></b><b></b> <p><b>固定网站开发人员文档</b> <p>了解开发人员如何实现 Windows Internet Explorer 9 的固定网站功能以将自己的网站与 Windows 7 桌面集成。 这些方案将引导您完成将网站元数据、自定义跳转列表、通知图标和缩略图预览工具栏控件添加到您开发的网站的过程。 <p><a href="http://msdn.microsoft.com/zh-cn/library/gg491731(v=VS.85).aspx">http://msdn.microsoft.com/zh-cn/library/gg491731(v=VS.85).aspx</a> <u></u> <p><b></b><b>技术博客文章</b><b></b> <p><b></b><b></b> <ul> <li><b>General Introduction, Internet Explorer 9 and Pinned Sites,</b> <a href="http://windowsteamblog.com/windows/b/developers/archive/2010/10/25/internet-explorer-9-and-pinned-sites.aspx">http://windowsteamblog.com/windows/b/developers/archive/2010/10/25/internet-explorer-9-and-pinned-sites.aspx</a><u> </u> <li><b>How to enable IE9 pinning and JumpLists on your website</b>, <a href="http://blogs.msdn.com/b/thebeebs/archive/2010/09/16/how-to-add-ie9-beta-pinning-to-you-website.aspx">http://blogs.msdn.com/b/thebeebs/archive/2010/09/16/how-to-add-ie9-beta-pinning-to-you-website.aspx</a><u> </u> <li><b>如何让你的网站支持</b><b> IE9 </b><b>网站模式</b><b> </b><b>(Part 1 - </b><b>理论</b><b>), </b><a href="http://www.cnblogs.com/cathsfz/archive/2010/11/16/1878816.html">http://www.cnblogs.com/cathsfz/archive/2010/11/16/1878816.html</a><u></u> <li><b>如何让你的网站支持</b><b> IE9 </b><b>网站模式</b><b> (Part 2 - </b><b>实战</b><b>), </b><a href="http://www.cnblogs.com/cathsfz/archive/2010/11/17/1878851.html">http://www.cnblogs.com/cathsfz/archive/2010/11/17/1878851.html</a><u></u> <li><b>迎接</b><b>IE9 - Pinned Sites</b><b>的个性化</b><b>, </b><a href="http://newkadbbz.spaces.live.com/blog/cns!B9B9D1C8892F9662!751.entry">http://newkadbbz.spaces.live.com/blog/cns!B9B9D1C8892F9662!751.entry</a> <li><b>IE9 </b><b>新功能探索：网站模式</b><b>(Pinning)</b><b>与跳转列表</b><b> </b><b>(Jump Lists)</b> , <a href="http://blog.miniasp.com/post/2010/09/21/IE9-Pinning-and-JumpLists-on-your-website.aspx">http://blog.miniasp.com/post/2010/09/21/IE9-Pinning-and-JumpLists-on-your-website.aspx</a></li></ul>]]></description></item><item><title>細微之處看看mysql與sql server的一些差別</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/04/24/2026223.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sun, 24 Apr 2011 06:42:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/04/24/2026223.html</guid><description><![CDATA[<p>以前不怎麼使用mysql，最近有些事情，需要用到php和mysql。目前使用的版本是5.5.1</p> <p>發現mysql與sql server有很多不同。可能逐漸地會整理一些文檔出來給大家參考。</p> <p>&nbsp;</p> <p>今天第一篇說說，update操作的差異。在mysql中，如果update語句要設置的新值，與數據庫中當前的值是一樣的，其實意味着無需更改。這種操作是不會被執行的。</p> <p>為什麼會發現這個問題呢？因為我在php程序中，需要獲取update語句所影響的行數。我發現很多時候為0. 追查下去，才明白他是這樣做的。從下圖中可以看到，我執行update語句兩次，第一次是修改了數據的(Changed:1)，而第二次則沒有修改（Changed:0)。</p> <p><a href="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image_thumb.png" width="1021" height="415"></a></p> <p>而查閱php的幫助文檔，也很清楚地定義了這個行為</p> <p><a href="http://php.net/manual/en/function.mysql-affected-rows.php">http://php.net/manual/en/function.mysql-affected-rows.php</a></p> <p>Returns the number of affected rows on success, and -1 if the last query failed. <p>If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero with MySQL versions prior to 4.1.2. <p><font color="#ff0000">When using UPDATE, MySQL will not update columns where the new value is the same as the old value. This creates the possibility that<b>mysql_affected_rows()</b> may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.</font> <p>The REPLACE statement first deletes the record with the same primary key and then inserts the new record. This function returns the number of deleted records plus the number of inserted records. <p>&nbsp; <p>同樣的語句，在sql server中就不是這樣。例如下面這樣，其實兩個語句是一模一樣的，但每個都會被執行，一行被更改 <p><a href="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image_thumb_3.png" width="635" height="469"></a> <p>為了證明這一點，我可以寫一個觸發器來檢測一下<pre class="csharpcode"><span class="kwrd">CREATE</span> <span class="kwrd">TRIGGER</span> TestTrigger
<span class="kwrd">ON</span> employees
<span class="kwrd">FOR</span> <span class="kwrd">UPDATE</span>

<span class="kwrd">AS</span>
<span class="kwrd">BEGIN</span>
    <span class="kwrd">DECLARE</span> @id <span class="kwrd">INT</span>
    <span class="kwrd">DECLARE</span> @name NVARCHAR(50)
    
    <span class="kwrd">SELECT</span> @id=UID,@name=Name <span class="kwrd">FROM</span> DELETED
    <span class="kwrd">PRINT</span> @id
    <span class="kwrd">PRINT</span> @name

END</pre>
<p>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>
</p>
<p>再次執行語句，我們可以看到如下結果</p>
<p><a href="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/mysqlsql-server_C958/image_thumb_4.png" width="641" height="534"></a></p>
<p>這說明什麼問題？說明sql server的update語句確實每次都會執行，不管值是否有必要進行變化。</p>
<p>在sql server中，update操作會有兩個步驟，首先執行delete操作，然後執行insert操作。</p>
<p>上面的觸發器代碼中，訪問的deleted表，是一個邏輯表，裡面保存的就是delete的數據，也就是我們經常所說的“舊值”</p>]]></description></item><item><title>如何通過編程獲取列表項目的附件以及多行文本中的文件內容</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/04/23/2025564.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 23 Apr 2011 03:29:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/04/23/2025564.html</guid><description><![CDATA[<p>我們都知道在SharePoint的列表中，可以有多種方式附加文件。例如下圖所示，在一個列表項目上，我們添加了多行文本字段，在該字段中，添加了兩個文件，並且我們在整個列表項目上，也添加了兩個附件。</p> <p>那麼對於這些文件的編程訪問，是否有比較標準和簡單的方法呢？今天我就整理一下給大家參考參考</p> <p><a href="http://www.xizhang.com/blogimages/44fd06a5d978_9CB1/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/44fd06a5d978_9CB1/image_thumb.png" width="656" height="468"></a></p> <p>&nbsp;</p> <p>那麼，首先來看一下，如何獲取多行文本中的附件內容呢？</p> <p>我們可以先看一下，多行文本裡面的內容是怎麼樣的</p> <p><a href="http://www.xizhang.com/blogimages/44fd06a5d978_9CB1/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/44fd06a5d978_9CB1/image_thumb_3.png" width="992" height="346"></a></p> <p>很顯然，這個字段的值一般都是一個DIV，說白了其實是一段HTML的內容</p> <p>那麼，這樣也就好辦了，通過如下代碼可以很容易獲得文件和文件內容</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;
<span class="kwrd">using</span> System.Xml.Linq;
<span class="kwrd">using</span> Microsoft.SharePoint;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            <span class="kwrd">using</span> (var site = <span class="kwrd">new</span> SPSite(<span class="str">@"http://chenxizhang-pc"</span>))
            {
                <span class="kwrd">using</span> (var web = site.OpenWeb())
                {
                    var list = web.Lists[<span class="str">"TestList"</span>];
                    var items = list.GetItems();

                    <span class="kwrd">foreach</span> (SPListItem item <span class="kwrd">in</span> items)<span class="rem">//遍歷所有的Item</span>
                    {

                        var content = item[<span class="str">"Test"</span>].ToString();<span class="rem">//獲得多行文本字段的值</span>
                        var element = XElement.Parse(content);<span class="rem">//轉換為一個XElement，以便進一步的操作</span>

                        var links = element.Descendants(<span class="str">"a"</span>);<span class="rem">//獲得內部所有的鏈接</span>
                        <span class="kwrd">foreach</span> (var link <span class="kwrd">in</span> links)
                        {
                            var fileName = link.Value;<span class="rem">//獲得鏈接的文本</span>
                            var fileUrl = link.Attribute(<span class="str">"href"</span>).Value;<span class="rem">//獲取鏈接的地址</span>
                            Console.WriteLine(<span class="str">"{0} :{1}"</span>, fileName, fileUrl);
                            var file = web.GetFile(fileUrl);<span class="rem">//獲取文件的引用</span>
                            var bytes = file.OpenBinary();<span class="rem">//獲取文件的內容</span>

                            var result = Encoding.UTF8.GetString(bytes);<span class="rem">//轉換為字符串，我測試的文件是文本文件，所以可以這樣直接轉換</span>
                            Console.WriteLine(result);
                        }
                    }
                }
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>接下來看一下如何獲取列表項目的附件（注意，這是直接附加到ListItem上面的），這個操作相對更加簡單一些，每個Item都有一個Attachments的屬性集合。</p><pre class="csharpcode"><span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Text;

<span class="kwrd">using</span> Microsoft.SharePoint;

<span class="kwrd">namespace</span> ConsoleApplication1
{
    <span class="kwrd">class</span> Program
    {
        <span class="kwrd">static</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
        {

            <span class="kwrd">using</span> (var site = <span class="kwrd">new</span> SPSite(<span class="str">@"http://chenxizhang-pc"</span>))
            {
                <span class="kwrd">using</span> (var web = site.OpenWeb())
                {
                    var list = web.Lists[<span class="str">"TestList"</span>];
                    var items = list.GetItems();

                    <span class="kwrd">foreach</span> (SPListItem item <span class="kwrd">in</span> items)<span class="rem">//遍歷所有的Item</span>
                    {
                        <span class="kwrd">foreach</span> (var att <span class="kwrd">in</span> item.Attachments)<span class="rem">//遍歷所有的Attachment</span>
                        {
                            var url=<span class="kwrd">string</span>.Format(<span class="str">"{0}{1}"</span>,item.Attachments.UrlPrefix,att);<span class="rem">//獲得文件路徑</span>
                            var file = web.GetFile(url);<span class="rem">//獲取文件引用</span>
                            var bytes = file.OpenBinary();<span class="rem">//取得文件內容</span>
                            var content = Encoding.UTF8.GetString(bytes);<span class="rem">//轉換為字符串，我的這個文件是文本文件，所以可以直接這樣轉</span>
                            Console.WriteLine(content);
                        }
                        
                    }
                }
            }
        }
    }
}
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>]]></description></item><item><title>Excel 2007 automation on top of a Windows Server 2008 x64</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/04/22/2025040.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Fri, 22 Apr 2011 08:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/04/22/2025040.html</guid><description><![CDATA[<p>今天在一个客户这边出来一个windows service的问题。这个service需要启动excel程序，并且对一些excel文件做一些操作。</p> <p>环境是：windows server 2008 x64+Excel 2007</p> <p>总是报告错误：(类似下面这样）</p> <p>Service cannot be started. System.Runtime.InteropServices.COMException (0x800A03EC): Microsoft Office Excel cannot access the file 'c:\temp\test.xls'. There are several possible reasons: <p>• The file name or path does not exist.<br>• The file is being used by another program.<br>• The workbook you are trying to save has the same name as a currently open workbook. <p>代码怎么看都是可以的，反复调试了service,问题最后解决了，大致有如下几点 <p>&nbsp; <h1>第一步：在服务器添加有关的一个目录</h1> <p>这个方案参考了<a href="http://social.msdn.microsoft.com/Forums/en-US/innovateonoffice/thread/b81a3c4e-62db-488b-af06-44421818ef91?prof=required">http://social.msdn.microsoft.com/Forums/en-US/innovateonoffice/thread/b81a3c4e-62db-488b-af06-44421818ef91?prof=required</a> <p>This solution is ... <p>・Windows 2008 Server x64<br>&nbsp; Please make this folder. <p>&nbsp; C:\Windows\SysWOW64\config\systemprofile\Desktop <p>・Windows 2008 Server x86 <p>&nbsp; Please make this folder. <p>&nbsp; C:\Windows\System32\config\systemprofile\Desktop <p>&nbsp; ...instead of dcomcnfg.exe. <p>This operation took away office automation problems in my system. <p>A Desktop folder seems to be necessary in the systemprofile folder to open file by Excel. <p>It disappears from Windows2008, Windows2003 had the folder,<br>and I think it cause this error. <p>I think it is safer than "registry hack". <p>If you try this solution, please let me know results. <p>&nbsp; <h1>第二步：设置服务与桌面交互</h1> <p><a href="http://www.xizhang.com/blogimages/2c5069bce804_E585/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/2c5069bce804_E585/image_thumb.png" width="424" height="478"></a> <p>&nbsp; <h1>第三步：关闭服务器的UAC（这一步至关重要，调试了一个下午，就是因为这个问题卡住）</h1> <p>&nbsp;</p> <p><a href="http://www.xizhang.com/blogimages/2c5069bce804_E585/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/2c5069bce804_E585/image_thumb_4.png" width="764" height="564"></a></p>]]></description></item><item><title>做软件也是要有点追求的</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/04/19/2020641.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Tue, 19 Apr 2011 03:01:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/04/19/2020641.html</guid><description><![CDATA[<p>作为软件这个行业的参与者，有时候也经常思考软件到底应该怎么做，软件业者如何在理想和现实之间取得平衡。当然，这方面没有标准答案的。</p> <p>有一个小软件，叫paint.net，是基于.NET做的一个很好用的图形编辑软件，很小，很实用，而且免费。</p> <p>经常会有更新，作者还在不断地改进他。今天在升级的时候，留意到下面一句话，很有意思的。呵呵<img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-winkingsmile" alt="Winking smile" src="http://www.xizhang.com/blogimages/dd6955aaeab7_9960/wlEmoticon-winkingsmile.png"></p> <p>所以，我觉得做软件，或者做其他任何事情，还是要有点精神境界的啊</p> <p>&nbsp;</p> <p><a href="http://www.xizhang.com/blogimages/dd6955aaeab7_9960/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/dd6955aaeab7_9960/image_thumb.png" width="517" height="425"></a></p>]]></description></item><item><title>SQL Server 2008性能数据收集（Data Collector)的一些扩展话题</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/03/16/1986293.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 16 Mar 2011 09:32:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/03/16/1986293.html</guid><description><![CDATA[<p>Data Collector是SQL Server 2008 新增的一个特性，位列管理员需知的top 10列表中。该功能在SQL Server 2008 R2中没有太大的变化</p> <h1>什么是Data Collector</h1> <p>关于这个主题，请直接参考微软官方的说明 <a title="http://msdn.microsoft.com/zh-CN/library/bb677248.aspx" href="http://msdn.microsoft.com/zh-CN/library/bb677248.aspx">http://msdn.microsoft.com/zh-CN/library/bb677248.aspx</a></p> <p>关于如何配置Data Collector的详细步骤，可以参考&nbsp; <a title="http://www.qudong.com/soft/program/Sql%20Server/jichujiaocheng/20090106/28656.html" href="http://www.qudong.com/soft/program/Sql%20Server/jichujiaocheng/20090106/28656.html">http://www.qudong.com/soft/program/Sql%20Server/jichujiaocheng/20090106/28656.html</a></p> <p>&nbsp;</p> <p>本文主要解释几个与该功能有关的扩展话题，也是我曾经被几次问到的</p> <p>&nbsp;</p> <h1>能不能收集多个实例的数据</h1> <p>很多管理员都关心这个话题，因为DBA需要管理多个实例，那么是不是需要在多个实例上面都去配置那个数据仓库呢？</p> <p>应该不是这样的。数据收集器功能的架构是下面这样</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/clip_image002.gif"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="clip_image002" border="0" alt="clip_image002" src="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/clip_image002_thumb.gif" width="483" height="364"></a></p> <p>&nbsp;</p> <p>也就是说，可以只有一个数据仓库（MDW:Management Data Warehouse)，然后在多个Target instance上面，配置收集，并且将其结果发送到这个中心的MDW中来。DBA们可以通过客户端机器，远程控制MDW，并且查看报表。</p> <p>&nbsp;</p> <h1></h1> <h1></h1> <h1>对性能的影响是怎么样的</h1> <p>既然数据收集是在每个需要收集的实例上面直接运行的，那么就有DBA问到，这样的话会不会对这个实例产生不利的影响呢？这个说法是这样，肯定是有影响的，因为性能收集说到底是一种查询，包括对DMV的查询，或者对性能计数器的查询。而它查询是定期运行的。例如Server Activity的话，默认都是60秒收集一次。据一般的估计，如果只是使用了默认的三个系统收集组，而且没有进行修改所有的默认收集或者上传的时间，那么配置了性能收集，对当前实例的影响主要体现在会加重CPU的一点点负担，具体大约是5%左右。数据的体积大约为300MB左右/天。</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_thumb.png" width="1075" height="751"></a></p> <h1>如何自定义数据集(Collection Set)</h1> <p>系统默认自带了3个（SQL SERVER 2008)或者4个（SQL Server 2008 R2)数据集</p> <p><a href="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_thumb_3.png" width="278" height="168"></a></p> <p>&nbsp;</p> <p>但是，如果我们需要自定义数据集，应该怎么做呢？下面有一个范例脚本</p> <p>请注意，这个脚本是在msdb中进行工作</p> <p>&nbsp;</p><pre class="csharpcode"><span class="kwrd">Use</span> msdb
<span class="kwrd">go</span>

<span class="kwrd">Declare</span> @collection_set_id_1 <span class="kwrd">int</span>
<span class="kwrd">Declare</span> @collection_set_uid_2 uniqueidentifier
<span class="kwrd">EXEC</span> [dbo].[sp_syscollector_create_collection_set] 
    @name=N<span class="str">'Disk Performance and SQL CPU'</span>, 
    @collection_mode=1, 
    @description=N<span class="str">'Collects logical disk performance counters and SQL Process CPU'</span>, 
    @target=N<span class="str">''</span>, 
    @logging_level=0, 
    @days_until_expiration=7, 
    @proxy_name=N<span class="str">''</span>, 
    @schedule_name=N<span class="str">'CollectorSchedule_Every_5min'</span>, 
    @collection_set_id=@collection_set_id_1 <span class="kwrd">OUTPUT</span>, 
    @collection_set_uid=@collection_set_uid_2 <span class="kwrd">OUTPUT</span>
<span class="kwrd">Select</span> collection_set_id_1=@collection_set_id_1, collection_set_uid_2=@collection_set_uid_2

<span class="kwrd">Declare</span> @collector_type_uid_3 uniqueidentifier
<span class="kwrd">Select</span> @collector_type_uid_3 = collector_type_uid <span class="kwrd">From</span> [dbo].[syscollector_collector_types] <span class="kwrd">Where</span> name = N<span class="str">'Performance Counters Collector Type'</span>;
<span class="kwrd">Declare</span> @collection_item_id_4 <span class="kwrd">int</span>
<span class="kwrd">EXEC</span> [dbo].[sp_syscollector_create_collection_item] 
@name=N<span class="str">'Logical Disk Collection and SQL Server CPU'</span>, 
@<span class="kwrd">parameters</span>=N<span class="str">'&lt;ns:PerformanceCountersCollector xmlns:ns="DataCollectorType"&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Avg. Disk Bytes/Read" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Avg. Disk Bytes/Write" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Avg. Disk sec/Read" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Avg. Disk sec/Write" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Disk Read Bytes/sec" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="LogicalDisk" 
        Counters="Disk Write Bytes/sec" 
        Instances="*" /&gt;
    &lt;PerformanceCounters Objects="Process" 
        Counters="% Privileged Time" 
        Instances="sqlservr" /&gt;
    &lt;PerformanceCounters Objects="Process" 
        Counters="% Processor Time" 
        Instances="sqlservr" /&gt;
&lt;/ns:PerformanceCountersCollector&gt;'</span>, 
@collection_item_id=@collection_item_id_4 <span class="kwrd">OUTPUT</span>, 
@frequency=5, 
@collection_set_id=@collection_set_id_1, 
@collector_type_uid=@collector_type_uid_3
<span class="kwrd">Select</span> @collection_item_id_4
<span class="kwrd">go</span> 
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>执行完之后，就有下面这样一个新的Collection Set出来</p>
<p><a href="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_4.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_thumb_4.png" width="308" height="164"></a></p>
<p>&nbsp;</p>
<p>然后可以启用它，并且收集，上传</p><pre class="csharpcode"><span class="kwrd">EXEC</span> sp_syscollector_start_collection_set @collection_set_id = &lt;collection_set_id_1&gt;
<span class="rem">-- replace &lt;collection_set_id_1&gt; with value from above </span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>最后，运行下面的脚本可以获得结果（注意，这个脚本不是在msdb中运行，而是在数据仓库中）</p><pre class="csharpcode"><span class="kwrd">select</span> spci.<span class="kwrd">path</span> <span class="kwrd">as</span> <span class="str">'Counter Path'</span>, spci.object_name <span class="kwrd">as</span> <span class="str">'Object Name'</span>,
spci.counter_name <span class="kwrd">as</span> <span class="str">'counter Name'</span>, spci.instance_name,
spcv.formatted_value <span class="kwrd">as</span> <span class="str">'Formatted Value'</span>,
spcv.collection_time <span class="kwrd">as</span> <span class="str">'Collection Time'</span>,
csii.instance_name <span class="kwrd">as</span> <span class="str">'SQL Server Instance'</span> 
<span class="kwrd">from</span> snapshots.performance_counter_values spcv, 
snapshots.performance_counter_instances spci,
msdb.dbo.syscollector_collection_sets_internal scsi,
core.source_info_internal csii,
core.snapshots_internal csi
<span class="kwrd">where</span> spcv.performance_counter_instance_id = spci.performance_counter_id <span class="kwrd">and</span>
scsi.collection_set_uid=csii.collection_set_uid <span class="kwrd">and</span>
csii.source_id = csi.source_id <span class="kwrd">and</span> csi.snapshot_id=spcv.snapshot_id <span class="kwrd">and</span>
scsi.name = <span class="str">'Disk Performance and SQL CPU'</span>
<span class="kwrd">order</span> <span class="kwrd">by</span> spcv.collection_time <span class="kwrd">desc</span>
</pre>
<style type="text/css">.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>&nbsp;</p>
<p>结果大致如下</p>
<p><a href="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_5.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/SQL-Server-2008_F0BA/image_thumb_5.png" width="1017" height="458"></a></p>
<p>&nbsp;</p>
<p>希望对于大家有所帮助</p>]]></description></item><item><title>谈谈技术体会、创业和职业规划及相关</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/03/12/1982104.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Sat, 12 Mar 2011 03:23:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/03/12/1982104.html</guid><description><![CDATA[<p>这几个月都比较少写技术文章和博客，固然有工作忙的原因。但其实也是一个调整和思考的阶段。</p> <p>关于技术实践的文章，我写了不少。最近想得更多的一些技术体会，自己其实也是在做第二次的创业准备，所以思考的问题会不太一样。</p> <p>去年年底的时候，CSDN和《程序员》杂志对我做了一次访问，我也谈到了一些想法。今天摘录一些给有兴趣的朋友参考参考吧</p> <p>&nbsp;</p> <p><b>记者：请谈一下你自己的技术成长经历和心得？</b><b></b> <blockquote> <p>陈希章：我是从1999年开始进入软件开发这个领域的，坦白说，我自己并不是学计算机专业出身。我自学Visual Basic开始了这长达十几年的旅程（我称之为“冒险之旅”）。 <p>虽然不是科班出身，但我用Visual Basic以及ASP, VBA为当时工作的公司编写过各种各样的应用程序，有的是财务部门使用的，有的是人事部门用的。我很清楚地记得用ASP做出第一个网站时的激动心情，而一晃十年就过去了。 <p>我觉得我受益最大的就是那两三年时间，完全是基于自己兴趣和爱好，自由地探索和发挥，要知道当年的学习资源可远没有现在丰富。这也是我最大的一个心得：兴趣是最好的老师。（虽然这句话大家可能都听过，但除非你真的经历过，才会有真切的体会） <p>后来我接受了正规和权威的培训，通过了微软的专业认证（MCSD和MCDBA），也进入了专业的软件公司工作，真正在.NET和SQL Server两大平台，发挥着自己的想象力和智慧。 <p>期间我还经历了一次不算成功的创业，但那些经验弥足珍贵。这是第二个心得：路是靠走出来的，要敢于梦想。 <p>随后的大多数时间，我作为微软特邀的顾问在一些公开场合发表演讲，我觉得这也很适合我。与此同时，我和华东地区一些合作伙伴紧密合作，给广大的企业客户提供咨询和教育培训方面的服务，值得庆幸的是，我在这些领域做得还不算差。 <p>我的第三个心得是：坚持做自己喜欢做的事情和擅长的事情。</p></blockquote> <p><b></b> <p><b>记者：在和其他技术人员就微软技术进行交流分享时，他们在学习和使用中有哪些最常见的问题？</b><b></b> <blockquote> <p>陈希章：我确实经常有机会和各方面的朋友进行交流分享，我发现除了针对技术问题专门讨论之外，有几个常见的问题 <p>1. 微软的技术发展及趋势 <p>2. 哪里能快速找到有用的资源 <p>3. 如何在众多的技术中选择适合我们项目的框架和技术 <p>4. 我应该如何规划学习，是否应该参加认证考试 <p>对此我的见解是： <p>1. 微软的技术发展及趋势 <p>微软作为最大和最好的软件公司之一，已经走过了30多个年头，毫无疑问我们都会对他的发展趋势感兴趣，但遗憾地是，也许没有人真的知道。我只是从个人角度分享我的看法：微软将继续发展.NET开发平台，并且在这个基础上着重在互联网领域的突破，例如搜索（我们已经看到了可喜的进步），例如之前谈到的Windows Azure和Windows Phone。在企业内部，微软有强大的System Center支撑IT基础架构和运维，有SharePoint Server作为信息整合中心。同时，我对微软在BI方面的作为一如既往地表示乐观。 <p>2. 哪里能快速找到有用的资源 <p>找到有用的资源远比找到资源重要，也通常更难。不管你信不信，我自己最主要的资源来自于MSDN Library（<a href="http://msdn.microsoft.com/library/ms123401">http://msdn.microsoft.com/library/ms123401</a>）。当然我也经常用自己喜欢的搜索引擎进行查找（尤其是解决一些疑难杂症的时候），最后，我还经常订阅一些我认为不错的技术博客，在他们更新的时候能收到提示。 <p>3. 如何在众多的技术中选择适合我们项目的框架和技术 <p>这是一个很不错的问题，架构师们绝对有这个烦恼。我自己的技术背景主要在微软平台上面，虽然对JAVA，Oracle也有些涉猎。我只是谈一下在微软平台上面的一些看法吧，当然没有唯一的答案，我的体会也是针对不同的业务场景选择不同的框架和技术。下面的只是大方向的参考意见 <p>1. 选择VSTO和OpenXML，而不是VBA进行Office开发 <p>2. 尽量利用SharePoint搭建企业内部应用，而不是每套应用都是从零开始自己做。 <p>3. 善用SQL Server所提供的功能，例如在XML以及BI方面的组件，避免自己去写类似的功能 <p>4. 选择WCF，而不是XML Web Service 进行服务开发。 <p>5. 在Web Forms和MVC之间选择，主要取决于应用程序的复杂性，通常而言, MVC 适合于更加大的系统，也更加易于扩展。 <p>4. 我应该如何规划学习，是否应该参加认证考试 <p>是的，一言以蔽之，你绝对应该参加正规的培训和学习，这是避免浪费更多时间的方法。</p></blockquote> <p><b>记者：对于这个领域的技术人员的高效学习和实践，你有何建议？</b><b></b> <blockquote> <p>陈希章：对于有志于在技术领域发展的朋友的学习和实践方面，我的建议是 <p>1. 付出你的热情。 <p>我认为任何事情要想成功，热情是首要的。 <p>2. 不要急于求成。 <p>是的，有时候忘掉你的目标，尤其是一些不切实际的目标，将对你有很大帮助。 <p>3. 一定要多实践。 <p>这可能是我最大的经验了。实践出真知。我之前介绍过我的成长经历，如果没有头两三年不知疲倦地摸索和实践，我断不可能今天在这里接受采访。 <p>我对于.NET开发人员的职业规划和学习蓝图，结合这些年和众多企业和开发人员交流以及我个人经验总结了一个文档，如果有需要的朋友，可以给我的私人邮箱(<a href="mailto:ares@xizhang.com">ares@xizhang.com</a>)发邮件联系。</p></blockquote> <p><b>记者：你如何评价在个人的发展道路上，</b><b>MVP的作用和影响</b> <blockquote> <p>陈希章：毫不掩饰地说，我一直没有忘记第一次获得MVP奖项时候的激动心情，那是在2006年1月1日，我像往常一样早起，查邮件，就收到了微软发送过来的祝贺信。你知道的，那是元旦节，而这无疑是一份很好的礼物。 <p>在此之前，要说的是，其实MVP对我的影响就很大，因为我自己的学习和成长过程中看了不少MVP撰写的书籍，也在微软的新闻组（新闻组叫newgroup，在那时还是很流行的）中有幸与这些人（虽然素未谋面）进行交流和学习。我从他们身上学到了知识，也结识了不少朋友，还顺带学到了幽默（说实在的，我们需要学习人家的幽默，幽默不是讲无厘头的笑话，而是一种发自内心的轻松心态，我们——大多数人——都太紧张了）。这无疑是很多MVP的典型成长道路，向自己的榜样靠拢，总是会有很大的动力的。 <p>而当我自己被授予这个称号，你知道的，我说过责任更大一些，这是因为我知道，也许我也正被其他人当作榜样或者一面镜子吧，如果我有这个荣幸的话。</p></blockquote>]]></description></item><item><title>代朋友发布招聘信息（.NET开发人员职务，工作地点：上海长宁区）</title><link>http://www.cnblogs.com/chenxizhang/archive/2011/01/19/1939223.html</link><dc:creator>陈希章</dc:creator><author>陈希章</author><pubDate>Wed, 19 Jan 2011 07:25:00 GMT</pubDate><guid>http://www.cnblogs.com/chenxizhang/archive/2011/01/19/1939223.html</guid><description><![CDATA[<h1>公司介绍</h1> <p>上海南洋万邦软件技术有限公司是一家专业从事计算机软件代理、服务、集成和培训的高技术股份制公司，成立于1994年，至今已有10余年的发展历史，在苏州和广州设有分公司。目前公司已成为国内最大的软件产品、服务和培训的供应商，代理几乎所有的国内外知名软件公司的产品，并为上千家客户提供相应的服务和培训支持，他们中的绝大多数都是世界500强在华投资的企业。<br>上海南洋万邦软件技术有限公司将为广大有志青年提供一个广阔的发展舞台、良好的薪资福利待遇、系统全面的培训，欢迎有志之士加盟南洋，尽情地展现自我价值 <p>公司网站：<a href="http://www.nysoftland.com.cn">http://www.nysoftland.com.cn</a> <p>&nbsp; <h1>联系方式</h1> <p>E-mail：<a href="mailto:zhuofh@nysoftland.com.cn">zhuofh@nysoftland.com.cn</a><br>(提示：为了更好的效果，建议在投递简历时注明来自博客园)<br>联系手机：13701952698<br>联系人：卓先生<br>公司地址：上海市长宁区天山西路120号  <p>&nbsp; <h1>职务信息</h1> <p><a title="http://job.cnblogs.com/offer/10939/" href="http://job.cnblogs.com/offer/10939/">http://job.cnblogs.com/offer/10939/</a><br><a href="http://www.xizhang.com/blogimages/5cb695bb41e9_D70A/image.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/5cb695bb41e9_D70A/image_thumb.png" width="627" height="637"></a> <p>&nbsp; <p><a title="http://job.cnblogs.com/offer/10940/" href="http://job.cnblogs.com/offer/10940/">http://job.cnblogs.com/offer/10940/</a> <p><a href="http://www.xizhang.com/blogimages/5cb695bb41e9_D70A/image_3.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.xizhang.com/blogimages/5cb695bb41e9_D70A/image_thumb_3.png" width="622" height="571"></a>]]></description></item></channel></rss>